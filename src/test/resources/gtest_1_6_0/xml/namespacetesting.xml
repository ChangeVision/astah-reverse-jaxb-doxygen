<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="namespacetesting" kind="namespace">
    <compoundname>testing</compoundname>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal2">testing::internal2</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacetesting_1a317291240e750e2142a23cbd52bc5aec" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDefaultDeathTestStyle[]</definition>
        <argsstring>[]</argsstring>
        <name>kDefaultDeathTestStyle</name>
        <initializer>= &quot;fast&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest-death-test.cc" line="74" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest-death-test.cc" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a44e6a325d60fe70a7a1a469ef5e0178a" prot="public" static="no" mutable="no">
        <type>::testing::internal::String</type>
        <definition>::testing::internal::String testing::FLAGS_gtest_death_test_style</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_death_test_style</name>
        <initializer>= ( <ref refid="namespacetesting_1_1internal_1ab676e6878569f3d79716c8655e34c392" kindref="member">internal::StringFromGTestEnv</ref>(&quot;death_test_style&quot;, kDefaultDeathTestStyle) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest-death-test.cc" line="83" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest-death-test.cc" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1afb5132038e931f547b3e94b8fec03c11" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::FLAGS_gtest_death_test_use_fork</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_death_test_use_fork</name>
        <initializer>= ( <ref refid="namespacetesting_1_1internal_1a1055088bb9b867e1b7b8f096f519d7c5" kindref="member">internal::BoolFromGTestEnv</ref>(&quot;death_test_use_fork&quot;, false) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest-death-test.cc" line="95" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest-death-test.cc" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a0a2a3239fb038e7ce83195d89941872d" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDisableTestFilter[]</definition>
        <argsstring>[]</argsstring>
        <name>kDisableTestFilter</name>
        <initializer>= &quot;DISABLED_*:*/DISABLED_*&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="150" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a23c33f4bfcc3c2e5e620eff31a98892d" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDeathTestCaseFilter[]</definition>
        <argsstring>[]</argsstring>
        <name>kDeathTestCaseFilter</name>
        <initializer>= &quot;*DeathTest:*DeathTest/*&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="155" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a236f8612e4b148d8d989a311a30a4557" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kUniversalFilter[]</definition>
        <argsstring>[]</argsstring>
        <name>kUniversalFilter</name>
        <initializer>= &quot;*&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="158" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1aa5a002b5bb3784c830b1c99aa2688f27" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDefaultOutputFile[]</definition>
        <argsstring>[]</argsstring>
        <name>kDefaultOutputFile</name>
        <initializer>= &quot;test_detail.xml&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="161" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a5f76dfdb8cb2664da54e320ecaba3643" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kTestShardIndex[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestShardIndex</name>
        <initializer>= &quot;GTEST_SHARD_INDEX&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="164" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a7542311baba200ebabd4065717606f6e" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kTestTotalShards[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestTotalShards</name>
        <initializer>= &quot;GTEST_TOTAL_SHARDS&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="166" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a57d3eeb1e968b4f1efc4787b2d39fbfa" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kTestShardStatusFile[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestShardStatusFile</name>
        <initializer>= &quot;GTEST_SHARD_STATUS_FILE&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="168" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a91895c1a4ce4bcdb981d072db76d910e" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::FLAGS_gtest_also_run_disabled_tests</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_also_run_disabled_tests</name>
        <initializer>= ( <ref refid="namespacetesting_1_1internal_1a1055088bb9b867e1b7b8f096f519d7c5" kindref="member">internal::BoolFromGTestEnv</ref>(&quot;also_run_disabled_tests&quot;, false) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="185" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a12beb1898bb2eb787c5ce182667505d3" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::FLAGS_gtest_break_on_failure</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_break_on_failure</name>
        <initializer>= ( <ref refid="namespacetesting_1_1internal_1a1055088bb9b867e1b7b8f096f519d7c5" kindref="member">internal::BoolFromGTestEnv</ref>(&quot;break_on_failure&quot;, false) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="190" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a46cf9d0c0c335b0411f3310b076b2c01" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::FLAGS_gtest_catch_exceptions</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_catch_exceptions</name>
        <initializer>= ( <ref refid="namespacetesting_1_1internal_1a1055088bb9b867e1b7b8f096f519d7c5" kindref="member">internal::BoolFromGTestEnv</ref>(&quot;catch_exceptions&quot;, true) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="196" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a779b00ab6bb0388746daa9b00848670c" prot="public" static="no" mutable="no">
        <type>::testing::internal::String</type>
        <definition>::testing::internal::String testing::FLAGS_gtest_color</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_color</name>
        <initializer>= ( <ref refid="namespacetesting_1_1internal_1ab676e6878569f3d79716c8655e34c392" kindref="member">internal::StringFromGTestEnv</ref>(&quot;color&quot;, &quot;auto&quot;) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="204" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a5e3366c9be87f8edb800951c2a29ef38" prot="public" static="no" mutable="no">
        <type>::testing::internal::String</type>
        <definition>::testing::internal::String testing::FLAGS_gtest_filter</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_filter</name>
        <initializer>= ( <ref refid="namespacetesting_1_1internal_1ab676e6878569f3d79716c8655e34c392" kindref="member">internal::StringFromGTestEnv</ref>(&quot;filter&quot;, kUniversalFilter) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="213" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1acb508360c07a5a30d9773e7a8a669c3c" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::FLAGS_gtest_list_tests</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_list_tests</name>
        <initializer>= ( false )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="216" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1af5615bad338d7b976319d69aa4302bfd" prot="public" static="no" mutable="no">
        <type>::testing::internal::String</type>
        <definition>::testing::internal::String testing::FLAGS_gtest_output</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_output</name>
        <initializer>= ( <ref refid="namespacetesting_1_1internal_1ab676e6878569f3d79716c8655e34c392" kindref="member">internal::StringFromGTestEnv</ref>(&quot;output&quot;, &quot;&quot;) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="228" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1af6778c5d3e4a7905e4f7e5bc2c9c58b1" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::FLAGS_gtest_print_time</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_print_time</name>
        <initializer>= ( <ref refid="namespacetesting_1_1internal_1a1055088bb9b867e1b7b8f096f519d7c5" kindref="member">internal::BoolFromGTestEnv</ref>(&quot;print_time&quot;, true) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="234" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a0145961d296ebdbf01262c9c1aea2945" prot="public" static="no" mutable="no">
        <type>::testing::internal::Int32</type>
        <definition>::testing::internal::Int32 testing::FLAGS_gtest_random_seed</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_random_seed</name>
        <initializer>= ( <ref refid="namespacetesting_1_1internal_1ac2ea500678b361ecd2c03e4b02bb2ccf" kindref="member">internal::Int32FromGTestEnv</ref>(&quot;random_seed&quot;, 0) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="240" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a6fae127304cc1f542ac80a46da55c9ee" prot="public" static="no" mutable="no">
        <type>::testing::internal::Int32</type>
        <definition>::testing::internal::Int32 testing::FLAGS_gtest_repeat</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_repeat</name>
        <initializer>= ( <ref refid="namespacetesting_1_1internal_1ac2ea500678b361ecd2c03e4b02bb2ccf" kindref="member">internal::Int32FromGTestEnv</ref>(&quot;repeat&quot;, 1) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="246" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a7e60d4e12856efb7a33eefbc1f470ee2" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::FLAGS_gtest_show_internal_stack_frames</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_show_internal_stack_frames</name>
        <initializer>= ( false )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="251" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1aba2df81daf00348b7a28292bd2c9392f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::FLAGS_gtest_shuffle</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_shuffle</name>
        <initializer>= ( <ref refid="namespacetesting_1_1internal_1a1055088bb9b867e1b7b8f096f519d7c5" kindref="member">internal::BoolFromGTestEnv</ref>(&quot;shuffle&quot;, false) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="257" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a94c7b2cb81550b49effa63eb5cbae5d0" prot="public" static="no" mutable="no">
        <type>::testing::internal::Int32</type>
        <definition>::testing::internal::Int32 testing::FLAGS_gtest_stack_trace_depth</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_stack_trace_depth</name>
        <initializer>= ( <ref refid="namespacetesting_1_1internal_1ac2ea500678b361ecd2c03e4b02bb2ccf" kindref="member">internal::Int32FromGTestEnv</ref>(&quot;stack_trace_depth&quot;, kMaxStackTraceDepth) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="263" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a1044443ffae015f8ebe94539efe26c35" prot="public" static="no" mutable="no">
        <type>::testing::internal::String</type>
        <definition>::testing::internal::String testing::FLAGS_gtest_stream_result_to</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_stream_result_to</name>
        <initializer>= ( <ref refid="namespacetesting_1_1internal_1ab676e6878569f3d79716c8655e34c392" kindref="member">internal::StringFromGTestEnv</ref>(&quot;stream_result_to&quot;, &quot;&quot;) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="270" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetesting_1a3e40365e8a1f1ae7b6d896991aef9e3a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::FLAGS_gtest_throw_on_failure</definition>
        <argsstring></argsstring>
        <name>FLAGS_gtest_throw_on_failure</name>
        <initializer>= ( <ref refid="namespacetesting_1_1internal_1a1055088bb9b867e1b7b8f096f519d7c5" kindref="member">internal::BoolFromGTestEnv</ref>(&quot;throw_on_failure&quot;, false) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="277" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="277" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacetesting_1a266e39b7c4691fedb856047673a412d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; testing::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const TestPartResult &amp;result)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const TestPartResult &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest-test-part.cc" line="58" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest-test-part.cc" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1ac1d0baedb17286c5c6c87bd1a45da8ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>AssertionResult testing::AssertionSuccess</definition>
        <argsstring>()</argsstring>
        <name>AssertionSuccess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="966" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="966" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1a75cb789614cb1c28c34627a4a3c053df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>AssertionResult testing::AssertionFailure</definition>
        <argsstring>()</argsstring>
        <name>AssertionFailure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="971" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="971" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1a56f59110a218942d2fc4695914b1685c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>AssertionResult testing::AssertionFailure</definition>
        <argsstring>(const Message &amp;message)</argsstring>
        <name>AssertionFailure</name>
        <param>
          <type>const Message &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="977" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="977" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1a2c9a2a391c72a7b02ea3024586e33af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>AssertionResult testing::FloatLE</definition>
        <argsstring>(const char *expr1, const char *expr2, float val1, float val2)</argsstring>
        <name>FloatLE</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="1095" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="1095" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1ae10e2bb304b74abd1b06a2d912a8b43b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>AssertionResult testing::DoubleLE</definition>
        <argsstring>(const char *expr1, const char *expr2, double val1, double val2)</argsstring>
        <name>DoubleLE</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="1102" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="1102" bodyend="1105"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1a390c4f66fe7e9098117eb77e5fffa4ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>AssertionResult testing::IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const char *needle, const char *haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="1280" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="1280" bodyend="1284"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1aa1c82529c7591d2a9fd016de45dd9113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>AssertionResult testing::IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const wchar_t *needle, const wchar_t *haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="1286" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="1286" bodyend="1290"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1a2288dcf4249f88af67dcd46544dc49a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>AssertionResult testing::IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const char *needle, const char *haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="1292" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="1292" bodyend="1296"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1a53e5c6e91ea429c43de7f4f57e33d166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>AssertionResult testing::IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const wchar_t *needle, const wchar_t *haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="1298" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="1298" bodyend="1302"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1a571c7edcfc574269833ebe3e7d338ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>AssertionResult testing::IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::string &amp;needle, const ::std::string &amp;haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="1304" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="1304" bodyend="1308"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1abe7b3fa1c9528745f934d4a14155ea87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>AssertionResult testing::IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::string &amp;needle, const ::std::string &amp;haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="1310" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="1310" bodyend="1314"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1a8d700f2bf0a4c1603d67b8c2b14371eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>AssertionResult testing::IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::wstring &amp;needle, const ::std::wstring &amp;haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::std::wstring &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::std::wstring &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="1317" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="1317" bodyend="1321"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1a84165d16503f1629b3f1bb45d8434c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>AssertionResult testing::IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::wstring &amp;needle, const ::std::wstring &amp;haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::std::wstring &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::std::wstring &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="1323" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="1323" bodyend="1327"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1a9f19442d566c7eaec0702b9fcf282b63" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::TestPartFatallyFailed</definition>
        <argsstring>(const TestPartResult &amp;result)</argsstring>
        <name>TestPartFatallyFailed</name>
        <param>
          <type>const TestPartResult &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="1862" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="1862" bodyend="1864"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1af256d104ca665115eb291f762bb659e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::TestPartNonfatallyFailed</definition>
        <argsstring>(const TestPartResult &amp;result)</argsstring>
        <name>TestPartNonfatallyFailed</name>
        <param>
          <type>const TestPartResult &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="1872" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="1872" bodyend="1874"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1a0611b66bb0d2870cf895d202a911fc47" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>internal::String</type>
        <definition>static internal::String testing::FormatCountableNoun</definition>
        <argsstring>(int count, const char *singular_form, const char *plural_form)</argsstring>
        <name>FormatCountableNoun</name>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>singular_form</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>plural_form</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="2479" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="2479" bodyend="2484"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1a55a2dd122808eb0f2994129fd1d6d7ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>internal::String</type>
        <definition>static internal::String testing::FormatTestCount</definition>
        <argsstring>(int test_count)</argsstring>
        <name>FormatTestCount</name>
        <param>
          <type>int</type>
          <declname>test_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="2487" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="2487" bodyend="2489"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1a124d41205407ae4a619d7f1a0260570f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>internal::String</type>
        <definition>static internal::String testing::FormatTestCaseCount</definition>
        <argsstring>(int test_case_count)</argsstring>
        <name>FormatTestCaseCount</name>
        <param>
          <type>int</type>
          <declname>test_case_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="2492" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="2492" bodyend="2494"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1a4e9fdeef31f7e49afccfde0532f76864" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* testing::TestPartResultTypeToString</definition>
        <argsstring>(TestPartResult::Type type)</argsstring>
        <name>TestPartResultTypeToString</name>
        <param>
          <type>TestPartResult::Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="2500" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="2500" bodyend="2515"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1aed771968ef22f78971330a6274fba797" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>internal::String</type>
        <definition>static internal::String testing::PrintTestPartResultToString</definition>
        <argsstring>(const TestPartResult &amp;test_part_result)</argsstring>
        <name>PrintTestPartResultToString</name>
        <param>
          <type>const TestPartResult &amp;</type>
          <declname>test_part_result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="2518" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="2518" bodyend="2525"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1ad924ff1f46116ba862f159c7b880d21c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::PrintTestPartResult</definition>
        <argsstring>(const TestPartResult &amp;test_part_result)</argsstring>
        <name>PrintTestPartResult</name>
        <param>
          <type>const TestPartResult &amp;</type>
          <declname>test_part_result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="2528" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="2528" bodyend="2544"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1afd726ae08c9bd16dc52f78c822d9946b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::InitGoogleTest</definition>
        <argsstring>(int *argc, char **argv)</argsstring>
        <name>InitGoogleTest</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="4888" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="4888" bodyend="4890"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1ae5a88709a4a7529e30c83242156556b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::InitGoogleTest</definition>
        <argsstring>(int *argc, wchar_t **argv)</argsstring>
        <name>InitGoogleTest</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>wchar_t **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" line="4894" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest.cc" bodystart="4894" bodyend="4896"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/makoto/Desktop/Cpp_Reverse/gtest-1.6.0/src/gtest-death-test.cc" line="69" column="1"/>
  </compounddef>
</doxygen>
