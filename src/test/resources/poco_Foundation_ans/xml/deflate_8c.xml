<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="deflate_8c" kind="file">
    <compoundname>deflate.c</compoundname>
    <includes refid="deflate_8h" local="yes">deflate.h</includes>
    <incdepgraph>
      <node id="144">
        <label>zconf.h</label>
        <link refid="zconf_8h"/>
      </node>
      <node id="140">
        <label>src/deflate.c</label>
        <link refid="deflate.c"/>
        <childnode refid="141" relation="include">
        </childnode>
      </node>
      <node id="141">
        <label>deflate.h</label>
        <link refid="deflate_8h"/>
        <childnode refid="142" relation="include">
        </childnode>
      </node>
      <node id="142">
        <label>zutil.h</label>
        <link refid="zutil_8h"/>
        <childnode refid="143" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>zlib.h</label>
        <link refid="zlib_8h"/>
        <childnode refid="144" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structconfig__s" prot="public">config_s</innerclass>
    <innerclass refid="structstatic__tree__desc__s" prot="public">static_tree_desc_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="deflate_8c_1a263efce0e5cda1d387a1a43f94715445" prot="public" static="no">
        <name>NIL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="104" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="deflate_8c_1abeff1f2c9d15b7bddefe44a4360821b3" prot="public" static="no">
        <name>TOO_FAR</name>
        <initializer>4096</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="108" column="11" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="deflate_8c_1a214c717b2e51e1993a749ac99df7de58" prot="public" static="no">
        <name>EQUAL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="151" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="deflate_8c_1a44b283365d6ca10b7028e639c4a10e67" prot="public" static="no">
        <name>UPDATE_HASH</name>
        <param><defname>s</defname></param>
        <param><defname>h</defname></param>
        <param><defname>c</defname></param>
        <initializer>(h = (((h)&lt;&lt;s-&gt;hash_shift) ^ (c)) &amp; s-&gt;hash_mask)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="164" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="deflate_8c_1a52d7ca8e864a07c0ba4a25d04588168b" prot="public" static="no">
        <name>INSERT_STRING</name>
        <param><defname>s</defname></param>
        <param><defname>str</defname></param>
        <param><defname>match_head</defname></param>
        <initializer>(<ref refid="deflate_8c_1a44b283365d6ca10b7028e639c4a10e67" kindref="member">UPDATE_HASH</ref>(s, s-&gt;ins_h, s-&gt;window[(str) + (<ref refid="zutil_8h_1a7984ceb1ff48ac91172976b91ed43f60" kindref="member">MIN_MATCH</ref>-1)]), \
    match_head = s-&gt;prev[(str) &amp; s-&gt;w_mask] = s-&gt;head[s-&gt;ins_h], \
    s-&gt;head[s-&gt;ins_h] = (<ref refid="deflate_8h_1a80a8610ae675eaeead82013bacde10a1" kindref="member">Pos</ref>)(str))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="183" column="10" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="deflate_8c_1af328dc05f080f25747abf0edd75b6251" prot="public" static="no">
        <name>CLEAR_HASH</name>
        <param><defname>s</defname></param>
        <initializer>s-&gt;head[s-&gt;hash_size-1] = <ref refid="deflate_8c_1a263efce0e5cda1d387a1a43f94715445" kindref="member">NIL</ref>; \
    <ref refid="zutil_8h_1a954261c3b54633501dac18e9024b6b3c" kindref="member">zmemzero</ref>((<ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref> *)s-&gt;head, (unsigned)(s-&gt;hash_size-1)*sizeof(*s-&gt;head));</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="193" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="deflate_8c_1a4041db99b23ca08963d3e5c284d837d6" prot="public" static="no">
        <name>check_match</name>
        <param><defname>s</defname></param>
        <param><defname>start</defname></param>
        <param><defname>match</defname></param>
        <param><defname>length</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="1292" column="12" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="1292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="deflate_8c_1a140a98962b21d3838ef05baf4740e4ed" prot="public" static="no">
        <name>FLUSH_BLOCK_ONLY</name>
        <param><defname>s</defname></param>
        <param><defname>last</defname></param>
        <initializer>{ \
   <ref refid="trees_8c_1abe4596852fd6af7f31e9adaac4879fad" kindref="member">_tr_flush_block</ref>(s, (s-&gt;block_start &gt;= 0L ? \
                   (charf *)&amp;s-&gt;window[(unsigned)s-&gt;block_start] : \
                   (charf *)Z_NULL), \
                (ulg)((long)s-&gt;strstart - s-&gt;block_start), \
                (last)); \
   s-&gt;block_start = s-&gt;strstart; \
   flush_pending(s-&gt;strm); \
   Tracev((stderr,&quot;[FLUSH]&quot;)); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="1436" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="1436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="deflate_8c_1aa06152b875cc54ba4389f31444163886" prot="public" static="no">
        <name>FLUSH_BLOCK</name>
        <param><defname>s</defname></param>
        <param><defname>last</defname></param>
        <initializer>{ \
   <ref refid="deflate_8c_1a140a98962b21d3838ef05baf4740e4ed" kindref="member">FLUSH_BLOCK_ONLY</ref>(s, last); \
   if (s-&gt;strm-&gt;avail_out == 0) return (last) ? <ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454a5ff14f05c1ba145fc4da40fb50211140" kindref="member">finish_started</ref> : <ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454aa05dd4e7c2f875eee52a6568c244c1e4" kindref="member">need_more</ref>; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="1448" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="1448" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" prot="public" static="no">
        <name>block_state</name>
        <enumvalue id="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454aa05dd4e7c2f875eee52a6568c244c1e4" prot="public">
          <name>need_more</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454a94dca976f7dcfb0605e086068f09daa1" prot="public">
          <name>block_done</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454a5ff14f05c1ba145fc4da40fb50211140" prot="public">
          <name>finish_started</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454af1f0edbb0d9d8272a762de3b7be0b50c" prot="public">
          <name>finish_done</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="66" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="66" bodyend="71"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="deflate_8c_1ab06f84fcb49a37e690badedd1ebab2a0" prot="public" static="no">
        <type><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref>(*</type>
        <definition>typedef block_state(* compress_func)()</definition>
        <argsstring>)()</argsstring>
        <name>compress_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="73" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="deflate_8c_1a4473b5227787415097004fd39f55185e" prot="public" static="no">
        <type>struct <ref refid="structconfig__s" kindref="compound">config_s</ref></type>
        <definition>typedef struct config_s  config</definition>
        <argsstring></argsstring>
        <name>config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="123" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="deflate_8c_1ad281a127f844d29d4410b7b957cc37f6" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char deflate_copyright[]</definition>
        <argsstring>[]</argsstring>
        <name>deflate_copyright</name>
        <initializer>=
   &quot; deflate 1.2.5 Copyright 1995-2010 Jean-loup Gailly and Mark Adler &quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="54" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="deflate_8c_1a0fd7d401de6b73f6613b21d6fc8b73b3" prot="public" static="yes" mutable="no">
        <type><ref refid="deflate_8c_1a4473b5227787415097004fd39f55185e" kindref="member">config</ref></type>
        <definition>config configuration_table[10]</definition>
        <argsstring>[10]</argsstring>
        <name>configuration_table</name>
        <initializer>= {

 {0,    0,  0,    0, deflate_stored},  
 {4,    4,  8,    4, deflate_fast}, 
 {4,    5, 16,    8, deflate_fast},
 {4,    6, 32,   32, deflate_fast},

 {4,    4, 16,   16, deflate_slow},  
 {8,   16, 32,   32, deflate_slow},
 {8,   16, 128, 128, deflate_slow},
 {8,   32, 128, 256, deflate_slow},
 {32, 128, 258, 1024, deflate_slow},
 {32, 258, 258, 4096, deflate_slow}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="131" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="131" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="deflate_8c_1ab29f79d2ef63835cc8b74dba94c68d9f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fill_window</definition>
        <argsstring>()</argsstring>
        <name>fill_window</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a5d98ecabe6ee6e1992509d914c4b68ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref></type>
        <definition>static block_state deflate_stored</definition>
        <argsstring>()</argsstring>
        <name>deflate_stored</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1ae25e93f298b2c2b780cf287680167a21" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref></type>
        <definition>static block_state deflate_fast</definition>
        <argsstring>()</argsstring>
        <name>deflate_fast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1ad90605c4196ebe17cc50865c0f7867d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref></type>
        <definition>static block_state deflate_slow</definition>
        <argsstring>()</argsstring>
        <name>deflate_slow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a19c4083a882172da71cb968c5b10dc9e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref></type>
        <definition>static block_state deflate_rle</definition>
        <argsstring>()</argsstring>
        <name>deflate_rle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a83b3fa2b6ddc0e2b92f845c1db55a466" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref></type>
        <definition>static block_state deflate_huff</definition>
        <argsstring>()</argsstring>
        <name>deflate_huff</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a2d0a4bb3a6803e6a56847d912c50144f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void lm_init</definition>
        <argsstring>()</argsstring>
        <name>lm_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1ae169030b0f663072d1a7f83f3d0aaee1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void putShortMSB</definition>
        <argsstring>()</argsstring>
        <name>putShortMSB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a8aa2ad5a45813d80ee6c547afadfcf46" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void flush_pending</definition>
        <argsstring>()</argsstring>
        <name>flush_pending</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1af3e0c01bd127afd6e4d44ca702bd0c49" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int read_buf</definition>
        <argsstring>()</argsstring>
        <name>read_buf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1aeb57f6f7ff2751c7f44c7cd9eff3e0fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref></type>
        <definition>static uInt longest_match</definition>
        <argsstring>()</argsstring>
        <name>longest_match</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a507fdec6d37c8c3f6959a1f3aa4eaa58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateInit_</definition>
        <argsstring>(z_streamp strm, int level, char *version, int stream_size)</argsstring>
        <name>deflateInit_</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>version</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stream_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="198" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="198" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a5083ff515d5c0686f24241391ff7db56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateInit2_</definition>
        <argsstring>(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, char *version, int stream_size)</argsstring>
        <name>deflateInit2_</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
        </param>
        <param>
          <type>int</type>
          <declname>windowBits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>memLevel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strategy</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>version</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stream_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="210" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="210" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a49e4f2317baf6ab80f81d0934e49a6b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateSetDictionary</definition>
        <argsstring>(z_streamp strm, Bytef *dictionary, uInt dictLength)</argsstring>
        <name>deflateSetDictionary</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref> *</type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref></type>
          <declname>dictLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="311" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="311" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a1678e92d49418699a3caa1fb88b8ab52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateReset</definition>
        <argsstring>(z_streamp strm)</argsstring>
        <name>deflateReset</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="353" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="353" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a9a22f76091e3a8e93d22eff573ea684d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateSetHeader</definition>
        <argsstring>(z_streamp strm, gz_headerp head)</argsstring>
        <name>deflateSetHeader</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type><ref refid="zlib_8h_1a20a6ffc695393cb54433da98ab4be7eb" kindref="member">gz_headerp</ref></type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="389" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="389" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a0376f713dfb9676c3eadaf1bb0c759b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflatePrime</definition>
        <argsstring>(z_streamp strm, int bits, int value)</argsstring>
        <name>deflatePrime</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="400" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="400" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1adb08871bcd410fb9d8d221a1ae378fa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateParams</definition>
        <argsstring>(z_streamp strm, int level, int strategy)</argsstring>
        <name>deflateParams</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="412" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="412" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a66ffe828d83d0610fa2f62bb7a076faf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateTune</definition>
        <argsstring>(z_streamp strm, int good_length, int max_lazy, int nice_length, int max_chain)</argsstring>
        <name>deflateTune</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>good_length</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_lazy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nice_length</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="451" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="451" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a193af31ee07ae28a0db592fe7d257e8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref></type>
        <definition>uLong deflateBound</definition>
        <argsstring>(z_streamp strm, uLong sourceLen)</argsstring>
        <name>deflateBound</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref></type>
          <declname>sourceLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="486" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="486" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a030a02c6ce1a16886210daeceeeabc48" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void putShortMSB</definition>
        <argsstring>(deflate_state *s, uInt b)</argsstring>
        <name>putShortMSB</name>
        <param>
          <type><ref refid="deflate_8h_1a34ea94d4293c36a46ac23735380bec16" kindref="member">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="548" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="548" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1ad1c6a0dcd4b0b7d7f974fd965c6b4167" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void flush_pending</definition>
        <argsstring>(z_streamp strm)</argsstring>
        <name>flush_pending</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="562" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="562" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a020eb25653da3ef0f1f4f59a82c1e8ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflate</definition>
        <argsstring>(z_streamp strm, int flush)</argsstring>
        <name>deflate</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="582" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="582" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a6b32d6d4fa68d8aea22445f97048cf67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateEnd</definition>
        <argsstring>(z_streamp strm)</argsstring>
        <name>deflateEnd</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="895" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="895" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1aa38b4c952efce070b3dbb6fdc41d9cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateCopy</definition>
        <argsstring>(z_streamp dest, z_streamp source)</argsstring>
        <name>deflateCopy</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="930" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="930" bodyend="983"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1aa595673287bb70c1ae8e0985d28613e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int read_buf</definition>
        <argsstring>(z_streamp strm, Bytef *buf, unsigned size)</argsstring>
        <name>read_buf</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="992" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="992" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a2578770593d16841164c74f6aa8fdf64" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void lm_init</definition>
        <argsstring>(deflate_state *s)</argsstring>
        <name>lm_init</name>
        <param>
          <type><ref refid="deflate_8h_1a34ea94d4293c36a46ac23735380bec16" kindref="member">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="1022" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="1022" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a1537eb0538707c0ae411d657825f8ebf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref></type>
        <definition>static uInt longest_match</definition>
        <argsstring>(deflate_state *s, IPos cur_match)</argsstring>
        <name>longest_match</name>
        <param>
          <type><ref refid="deflate_8h_1a34ea94d4293c36a46ac23735380bec16" kindref="member">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="deflate_8h_1ada696b787a46d01634b6365afcec1a9e" kindref="member">IPos</ref></type>
          <declname>cur_match</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="1063" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="1063" bodyend="1204"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a8466c3646bd0a226780c67d0af982c59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fill_window</definition>
        <argsstring>(deflate_state *s)</argsstring>
        <name>fill_window</name>
        <param>
          <type><ref refid="deflate_8h_1a34ea94d4293c36a46ac23735380bec16" kindref="member">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="1305" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="1305" bodyend="1430"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a744898f8db4eb95eb24052ac180ce678" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref></type>
        <definition>static block_state deflate_stored</definition>
        <argsstring>(deflate_state *s, int flush)</argsstring>
        <name>deflate_stored</name>
        <param>
          <type><ref refid="deflate_8h_1a34ea94d4293c36a46ac23735380bec16" kindref="member">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="1462" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="1462" bodyend="1511"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a0beae4fbf3b0f39866eb9a8b488ae76e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref></type>
        <definition>static block_state deflate_fast</definition>
        <argsstring>(deflate_state *s, int flush)</argsstring>
        <name>deflate_fast</name>
        <param>
          <type><ref refid="deflate_8h_1a34ea94d4293c36a46ac23735380bec16" kindref="member">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="1520" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="1520" bodyend="1608"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1ac84c4aab3f5944dd76414bb4c84b8305" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref></type>
        <definition>static block_state deflate_slow</definition>
        <argsstring>(deflate_state *s, int flush)</argsstring>
        <name>deflate_slow</name>
        <param>
          <type><ref refid="deflate_8h_1a34ea94d4293c36a46ac23735380bec16" kindref="member">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="1616" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="1616" bodyend="1733"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1a8ccd48df6a8da2ac257a0449434d2dc2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref></type>
        <definition>static block_state deflate_rle</definition>
        <argsstring>(deflate_state *s, int flush)</argsstring>
        <name>deflate_rle</name>
        <param>
          <type><ref refid="deflate_8h_1a34ea94d4293c36a46ac23735380bec16" kindref="member">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="1741" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="1741" bodyend="1801"/>
      </memberdef>
      <memberdef kind="function" id="deflate_8c_1aa644668bb3333de377763ae994a7e3a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref></type>
        <definition>static block_state deflate_huff</definition>
        <argsstring>(deflate_state *s, int flush)</argsstring>
        <name>deflate_huff</name>
        <param>
          <type><ref refid="deflate_8h_1a34ea94d4293c36a46ac23735380bec16" kindref="member">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" line="1807" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c" bodystart="1807" bodyend="1834"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>deflate.c<sp/>--<sp/>compress<sp/>data<sp/>using<sp/>the<sp/>deflation<sp/>algorithm</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-2010<sp/>Jean-loup<sp/>Gailly<sp/>and<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>ALGORITHM</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>&quot;deflation&quot;<sp/>process<sp/>depends<sp/>on<sp/>being<sp/>able<sp/>to<sp/>identify<sp/>portions</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>input<sp/>text<sp/>which<sp/>are<sp/>identical<sp/>to<sp/>earlier<sp/>input<sp/>(within<sp/>a</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>sliding<sp/>window<sp/>trailing<sp/>behind<sp/>the<sp/>input<sp/>currently<sp/>being<sp/>processed).</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>most<sp/>straightforward<sp/>technique<sp/>turns<sp/>out<sp/>to<sp/>be<sp/>the<sp/>fastest<sp/>for</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>most<sp/>input<sp/>files:<sp/>try<sp/>all<sp/>possible<sp/>matches<sp/>and<sp/>select<sp/>the<sp/>longest.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>key<sp/>feature<sp/>of<sp/>this<sp/>algorithm<sp/>is<sp/>that<sp/>insertions<sp/>into<sp/>the<sp/>string</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>dictionary<sp/>are<sp/>very<sp/>simple<sp/>and<sp/>thus<sp/>fast,<sp/>and<sp/>deletions<sp/>are<sp/>avoided</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>completely.<sp/>Insertions<sp/>are<sp/>performed<sp/>at<sp/>each<sp/>input<sp/>character,<sp/>whereas</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>matches<sp/>are<sp/>performed<sp/>only<sp/>when<sp/>the<sp/>previous<sp/>match<sp/>ends.<sp/>So<sp/>it</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>preferable<sp/>to<sp/>spend<sp/>more<sp/>time<sp/>in<sp/>matches<sp/>to<sp/>allow<sp/>very<sp/>fast<sp/>string</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>insertions<sp/>and<sp/>avoid<sp/>deletions.<sp/>The<sp/>matching<sp/>algorithm<sp/>for<sp/>small</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>strings<sp/>is<sp/>inspired<sp/>from<sp/>that<sp/>of<sp/>Rabin<sp/>&amp;<sp/>Karp.<sp/>A<sp/>brute<sp/>force<sp/>approach</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>used<sp/>to<sp/>find<sp/>longer<sp/>strings<sp/>when<sp/>a<sp/>small<sp/>match<sp/>has<sp/>been<sp/>found.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>similar<sp/>algorithm<sp/>is<sp/>used<sp/>in<sp/>comic<sp/>(by<sp/>Jan-Mark<sp/>Wams)<sp/>and<sp/>freeze</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>(by<sp/>Leonid<sp/>Broukhis).</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>previous<sp/>version<sp/>of<sp/>this<sp/>file<sp/>used<sp/>a<sp/>more<sp/>sophisticated<sp/>algorithm</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>(by<sp/>Fiala<sp/>and<sp/>Greene)<sp/>which<sp/>is<sp/>guaranteed<sp/>to<sp/>run<sp/>in<sp/>linear<sp/>amortized</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>time,<sp/>but<sp/>has<sp/>a<sp/>larger<sp/>average<sp/>cost,<sp/>uses<sp/>more<sp/>memory<sp/>and<sp/>is<sp/>patented.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>However<sp/>the<sp/>F&amp;G<sp/>algorithm<sp/>may<sp/>be<sp/>faster<sp/>for<sp/>some<sp/>highly<sp/>redundant</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>files<sp/>if<sp/>the<sp/>parameter<sp/>max_chain_length<sp/>(described<sp/>below)<sp/>is<sp/>too<sp/>large.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/>ACKNOWLEDGEMENTS</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>idea<sp/>of<sp/>lazy<sp/>evaluation<sp/>of<sp/>matches<sp/>is<sp/>due<sp/>to<sp/>Jan-Mark<sp/>Wams,<sp/>and</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>found<sp/>it<sp/>in<sp/>&apos;freeze&apos;<sp/>written<sp/>by<sp/>Leonid<sp/>Broukhis.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Thanks<sp/>to<sp/>many<sp/>people<sp/>for<sp/>bug<sp/>reports<sp/>and<sp/>testing.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>REFERENCES</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Deutsch,<sp/>L.P.,&quot;DEFLATE<sp/>Compressed<sp/>Data<sp/>Format<sp/>Specification&quot;.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Available<sp/>in<sp/>http://www.ietf.org/rfc/rfc1951.txt</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>description<sp/>of<sp/>the<sp/>Rabin<sp/>and<sp/>Karp<sp/>algorithm<sp/>is<sp/>given<sp/>in<sp/>the<sp/>book</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Algorithms&quot;<sp/>by<sp/>R.<sp/>Sedgewick,<sp/>Addison-Wesley,<sp/>p252.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Fiala,E.R.,<sp/>and<sp/>Greene,D.H.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data<sp/>Compression<sp/>with<sp/>Finite<sp/>Windows,<sp/>Comm.ACM,<sp/>32,4<sp/>(1989)<sp/>490-595</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@(#)<sp/>$Id:<sp/>//poco/1.4/Foundation/src/deflate.c#2<sp/>$<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="deflate_8h" kindref="compound">deflate.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="deflate_8c_1ad281a127f844d29d4410b7b957cc37f6" kindref="member">deflate_copyright</ref>[]<sp/>=</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>deflate<sp/>1.2.5<sp/>Copyright<sp/>1995-2010<sp/>Jean-loup<sp/>Gailly<sp/>and<sp/>Mark<sp/>Adler<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/>If<sp/>you<sp/>use<sp/>the<sp/>zlib<sp/>library<sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>is<sp/>welcome</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/>in<sp/>the<sp/>documentation<sp/>of<sp/>your<sp/>product.<sp/>If<sp/>for<sp/>some<sp/>reason<sp/>you<sp/>cannot</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/>include<sp/>such<sp/>an<sp/>acknowledgment,<sp/>I<sp/>would<sp/>appreciate<sp/>that<sp/>you<sp/>keep<sp/>this</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/>copyright<sp/>string<sp/>in<sp/>the<sp/>executable<sp/>of<sp/>your<sp/>product.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>Function<sp/>prototypes.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454aa05dd4e7c2f875eee52a6568c244c1e4" kindref="member">need_more</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>block<sp/>not<sp/>completed,<sp/>need<sp/>more<sp/>input<sp/>or<sp/>more<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454a94dca976f7dcfb0605e086068f09daa1" kindref="member">block_done</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>block<sp/>flush<sp/>performed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454a5ff14f05c1ba145fc4da40fb50211140" kindref="member">finish_started</ref>,<sp/></highlight><highlight class="comment">/*<sp/>finish<sp/>started,<sp/>need<sp/>only<sp/>more<sp/>output<sp/>at<sp/>next<sp/>deflate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454af1f0edbb0d9d8272a762de3b7be0b50c" kindref="member">finish_done</ref><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>finish<sp/>done,<sp/>accept<sp/>no<sp/>more<sp/>input<sp/>or<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref><sp/>(*<ref refid="deflate_8c_1ab06f84fcb49a37e690badedd1ebab2a0" kindref="member">compress_func</ref>)<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compression<sp/>function.<sp/>Returns<sp/>the<sp/>block<sp/>state<sp/>after<sp/>the<sp/>call.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill_window<sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref><sp/>deflate_stored<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref><sp/>deflate_fast<sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FASTEST</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref><sp/>deflate_slow<sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref><sp/>deflate_rle<sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref><sp/>deflate_huff<sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lm_init<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>putShortMSB<sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>b));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>flush_pending<sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_buf<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm,<sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ASMV</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>match_init<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">/*<sp/>asm<sp/>code<sp/>initialization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>longest_match<sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/><ref refid="deflate_8h_1ada696b787a46d01634b6365afcec1a9e" kindref="member">IPos</ref><sp/>cur_match));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>longest_match<sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/><ref refid="deflate_8h_1ada696b787a46d01634b6365afcec1a9e" kindref="member">IPos</ref><sp/>cur_match));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="deflate_8c_1a4041db99b23ca08963d3e5c284d837d6" kindref="member">check_match</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/><ref refid="deflate_8h_1ada696b787a46d01634b6365afcec1a9e" kindref="member">IPos</ref><sp/>start,<sp/><ref refid="deflate_8h_1ada696b787a46d01634b6365afcec1a9e" kindref="member">IPos</ref><sp/>match,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>Local<sp/>data</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NIL<sp/>0</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Tail<sp/>of<sp/>hash<sp/>chains<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TOO_FAR</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>TOO_FAR<sp/>4096</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Matches<sp/>of<sp/>length<sp/>3<sp/>are<sp/>discarded<sp/>if<sp/>their<sp/>distance<sp/>exceeds<sp/>TOO_FAR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Values<sp/>for<sp/>max_lazy_match,<sp/>good_match<sp/>and<sp/>max_chain_length,<sp/>depending<sp/>on</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>the<sp/>desired<sp/>pack<sp/>level<sp/>(0..9).<sp/>The<sp/>values<sp/>given<sp/>below<sp/>have<sp/>been<sp/>tuned<sp/>to</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>exclude<sp/>worst<sp/>case<sp/>performance<sp/>for<sp/>pathological<sp/>files.<sp/>Better<sp/>values<sp/>may<sp/>be</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>found<sp/>for<sp/>specific<sp/>files.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="structconfig__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structconfig__s" kindref="compound">config_s</ref><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref><sp/><ref refid="structconfig__s_1a36152319fbe49bebbc0354f8bcb617a6" kindref="member">good_length</ref>;<sp/></highlight><highlight class="comment">/*<sp/>reduce<sp/>lazy<sp/>search<sp/>above<sp/>this<sp/>match<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref><sp/><ref refid="structconfig__s_1afecf50eeeb2afca11ab28d344280231b" kindref="member">max_lazy</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>not<sp/>perform<sp/>lazy<sp/>search<sp/>above<sp/>this<sp/>match<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref><sp/><ref refid="structconfig__s_1af2a1e023e10d6e0c9ff64f8c0c4c9894" kindref="member">nice_length</ref>;<sp/></highlight><highlight class="comment">/*<sp/>quit<sp/>search<sp/>above<sp/>this<sp/>match<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref><sp/><ref refid="structconfig__s_1ac0ef64600cf4487e3754a21934ffdb89" kindref="member">max_chain</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><ref refid="deflate_8c_1ab06f84fcb49a37e690badedd1ebab2a0" kindref="member">compress_func</ref><sp/><ref refid="structconfig__s_1aea5a0fe31d694079966523a49d60174b" kindref="member">func</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}<sp/><ref refid="deflate_8c_1a4473b5227787415097004fd39f55185e" kindref="member">config</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FASTEST</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structconfig__s" kindref="compound">config</ref><sp/>configuration_table[2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/>good<sp/>lazy<sp/>nice<sp/>chain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>0<sp/>*/</highlight><highlight class="normal"><sp/>{0,<sp/><sp/><sp/><sp/>0,<sp/><sp/>0,<sp/><sp/><sp/><sp/>0,<sp/>deflate_stored},<sp/><sp/></highlight><highlight class="comment">/*<sp/>store<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>1<sp/>*/</highlight><highlight class="normal"><sp/>{4,<sp/><sp/><sp/><sp/>4,<sp/><sp/>8,<sp/><sp/><sp/><sp/>4,<sp/>deflate_fast}};<sp/></highlight><highlight class="comment">/*<sp/>max<sp/>speed,<sp/>no<sp/>lazy<sp/>matches<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structconfig__s" kindref="compound">config</ref><sp/>configuration_table[10]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/>good<sp/>lazy<sp/>nice<sp/>chain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>0<sp/>*/</highlight><highlight class="normal"><sp/>{0,<sp/><sp/><sp/><sp/>0,<sp/><sp/>0,<sp/><sp/><sp/><sp/>0,<sp/>deflate_stored},<sp/><sp/></highlight><highlight class="comment">/*<sp/>store<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>1<sp/>*/</highlight><highlight class="normal"><sp/>{4,<sp/><sp/><sp/><sp/>4,<sp/><sp/>8,<sp/><sp/><sp/><sp/>4,<sp/>deflate_fast},<sp/></highlight><highlight class="comment">/*<sp/>max<sp/>speed,<sp/>no<sp/>lazy<sp/>matches<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>2<sp/>*/</highlight><highlight class="normal"><sp/>{4,<sp/><sp/><sp/><sp/>5,<sp/>16,<sp/><sp/><sp/><sp/>8,<sp/>deflate_fast},</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>3<sp/>*/</highlight><highlight class="normal"><sp/>{4,<sp/><sp/><sp/><sp/>6,<sp/>32,<sp/><sp/><sp/>32,<sp/>deflate_fast},</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>4<sp/>*/</highlight><highlight class="normal"><sp/>{4,<sp/><sp/><sp/><sp/>4,<sp/>16,<sp/><sp/><sp/>16,<sp/>deflate_slow},<sp/><sp/></highlight><highlight class="comment">/*<sp/>lazy<sp/>matches<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>5<sp/>*/</highlight><highlight class="normal"><sp/>{8,<sp/><sp/><sp/>16,<sp/>32,<sp/><sp/><sp/>32,<sp/>deflate_slow},</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>6<sp/>*/</highlight><highlight class="normal"><sp/>{8,<sp/><sp/><sp/>16,<sp/>128,<sp/>128,<sp/>deflate_slow},</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>7<sp/>*/</highlight><highlight class="normal"><sp/>{8,<sp/><sp/><sp/>32,<sp/>128,<sp/>256,<sp/>deflate_slow},</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>8<sp/>*/</highlight><highlight class="normal"><sp/>{32,<sp/>128,<sp/>258,<sp/>1024,<sp/>deflate_slow},</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>9<sp/>*/</highlight><highlight class="normal"><sp/>{32,<sp/>258,<sp/>258,<sp/>4096,<sp/>deflate_slow}};<sp/></highlight><highlight class="comment">/*<sp/>max<sp/>compression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note:<sp/>the<sp/>deflate()<sp/>code<sp/>requires<sp/>max_lazy<sp/>&gt;=<sp/>MIN_MATCH<sp/>and<sp/>max_chain<sp/>&gt;=<sp/>4</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>For<sp/>deflate_fast()<sp/>(levels<sp/>&lt;=<sp/>3)<sp/>good<sp/>is<sp/>ignored<sp/>and<sp/>lazy<sp/>has<sp/>a<sp/>different</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>meaning.</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EQUAL<sp/>0</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>result<sp/>of<sp/>memcmp<sp/>for<sp/>equal<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_DUMMY_DECL</highlight></codeline>
<codeline lineno="155" refid="structstatic__tree__desc__s" refkind="compound"><highlight class="preprocessor"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstatic__tree__desc__s" kindref="compound">static_tree_desc_s</ref><sp/>{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstatic__tree__desc__s_1aa3662e0ed40c86de246851a7a2483308" kindref="member">dummy</ref>;};<sp/></highlight><highlight class="comment">/*<sp/>for<sp/>buggy<sp/>compilers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>Update<sp/>a<sp/>hash<sp/>value<sp/>with<sp/>the<sp/>given<sp/>input<sp/>byte</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>IN<sp/><sp/>assertion:<sp/>all<sp/>calls<sp/>to<sp/>to<sp/>UPDATE_HASH<sp/>are<sp/>made<sp/>with<sp/>consecutive</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>input<sp/>characters,<sp/>so<sp/>that<sp/>a<sp/>running<sp/>hash<sp/>key<sp/>can<sp/>be<sp/>computed<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>previous<sp/>key<sp/>instead<sp/>of<sp/>complete<sp/>recalculation<sp/>each<sp/>time.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UPDATE_HASH(s,h,c)<sp/>(h<sp/>=<sp/>(((h)&lt;&lt;s-&gt;hash_shift)<sp/>^<sp/>(c))<sp/>&amp;<sp/>s-&gt;hash_mask)</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>Insert<sp/>string<sp/>str<sp/>in<sp/>the<sp/>dictionary<sp/>and<sp/>set<sp/>match_head<sp/>to<sp/>the<sp/>previous<sp/>head</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>hash<sp/>chain<sp/>(the<sp/>most<sp/>recent<sp/>string<sp/>with<sp/>same<sp/>hash<sp/>key).<sp/>Return</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>the<sp/>previous<sp/>length<sp/>of<sp/>the<sp/>hash<sp/>chain.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>If<sp/>this<sp/>file<sp/>is<sp/>compiled<sp/>with<sp/>-DFASTEST,<sp/>the<sp/>compression<sp/>level<sp/>is<sp/>forced</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>to<sp/>1,<sp/>and<sp/>no<sp/>hash<sp/>chains<sp/>are<sp/>maintained.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>IN<sp/><sp/>assertion:<sp/>all<sp/>calls<sp/>to<sp/>to<sp/>INSERT_STRING<sp/>are<sp/>made<sp/>with<sp/>consecutive</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>input<sp/>characters<sp/>and<sp/>the<sp/>first<sp/>MIN_MATCH<sp/>bytes<sp/>of<sp/>str<sp/>are<sp/>valid</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>(except<sp/>for<sp/>the<sp/>last<sp/>MIN_MATCH-1<sp/>bytes<sp/>of<sp/>the<sp/>input<sp/>file).</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FASTEST</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INSERT_STRING(s,<sp/>str,<sp/>match_head)<sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/><sp/>(UPDATE_HASH(s,<sp/>s-&gt;ins_h,<sp/>s-&gt;window[(str)<sp/>+<sp/>(MIN_MATCH-1)]),<sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>match_head<sp/>=<sp/>s-&gt;head[s-&gt;ins_h],<sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>s-&gt;head[s-&gt;ins_h]<sp/>=<sp/>(Pos)(str))</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INSERT_STRING(s,<sp/>str,<sp/>match_head)<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/>(UPDATE_HASH(s,<sp/>s-&gt;ins_h,<sp/>s-&gt;window[(str)<sp/>+<sp/>(MIN_MATCH-1)]),<sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>match_head<sp/>=<sp/>s-&gt;prev[(str)<sp/>&amp;<sp/>s-&gt;w_mask]<sp/>=<sp/>s-&gt;head[s-&gt;ins_h],<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>s-&gt;head[s-&gt;ins_h]<sp/>=<sp/>(Pos)(str))</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>the<sp/>hash<sp/>table<sp/>(avoiding<sp/>64K<sp/>overflow<sp/>for<sp/>16<sp/>bit<sp/>systems).</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>prev[]<sp/>will<sp/>be<sp/>initialized<sp/>on<sp/>the<sp/>fly.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLEAR_HASH(s)<sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>s-&gt;head[s-&gt;hash_size-1]<sp/>=<sp/>NIL;<sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>zmemzero((Bytef<sp/>*)s-&gt;head,<sp/>(unsigned)(s-&gt;hash_size-1)*sizeof(*s-&gt;head));</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a507fdec6d37c8c3f6959a1f3aa4eaa58" kindref="member">deflateInit_</ref>(strm,<sp/>level,<sp/>version,<sp/>stream_size)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_size;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="deflate_8c_1a5083ff515d5c0686f24241391ff7db56" kindref="member">deflateInit2_</ref>(strm,<sp/>level,<sp/><ref refid="zlib_8h_1a27a96226f3dc88e4743131c632adf32f" kindref="member">Z_DEFLATED</ref>,<sp/><ref refid="zconf_8h_1abd2f406ac1f9c49236376115d78ccb5b" kindref="member">MAX_WBITS</ref>,<sp/><ref refid="zutil_8h_1a19c8e60fa32d4ddf303ce988ba97af61" kindref="member">DEF_MEM_LEVEL</ref>,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zlib_8h_1a580d7c2527e653ddd783109271750849" kindref="member">Z_DEFAULT_STRATEGY</ref>,<sp/>version,<sp/>stream_size);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>do:<sp/>ignore<sp/>strm-&gt;next_in<sp/>if<sp/>we<sp/>use<sp/>it<sp/>as<sp/>window<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a5083ff515d5c0686f24241391ff7db56" kindref="member">deflateInit2_</ref>(strm,<sp/>level,<sp/>method,<sp/>windowBits,<sp/>memLevel,<sp/>strategy,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>version,<sp/>stream_size)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>level;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>method;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>windowBits;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>memLevel;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>strategy;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_size;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>my_version[]<sp/>=<sp/><ref refid="zlib_8h_1a51dc9dc65e483b3222c1f0f6a87eb76e" kindref="member">ZLIB_VERSION</ref>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref><sp/>*overlay;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>overlay<sp/>pending_buf<sp/>and<sp/>d_buf+l_buf.<sp/>This<sp/>works<sp/>since<sp/>the<sp/>average</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>output<sp/>size<sp/>for<sp/>(length,distance)<sp/>codes<sp/>is<sp/>&lt;=<sp/>24<sp/>bits.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(version<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>version[0]<sp/>!=<sp/>my_version[0]<sp/>||</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream_size<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structz__stream__s" kindref="compound">z_stream</ref>))<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a7634cdd55f955ee1be99c065c6977371" kindref="member">Z_VERSION_ERROR</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm-&gt;zalloc<sp/>==<sp/>(<ref refid="zlib_8h_1af90139b484e48372e0e6db52bb9f6733" kindref="member">alloc_func</ref>)0)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;zalloc<sp/>=<sp/><ref refid="zutil_8c_1acd6de6ee77b7c44353e61511b6eb1d90" kindref="member">zcalloc</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;opaque<sp/>=<sp/>(<ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref>)0;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm-&gt;zfree<sp/>==<sp/>(<ref refid="zlib_8h_1af07471bf3f37f2c29078ed11ac59fc7f" kindref="member">free_func</ref>)0)<sp/>strm-&gt;zfree<sp/>=<sp/><ref refid="zutil_8c_1ac5167b77f4a79cb68ba27c598b52485e" kindref="member">zcfree</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">#ifdef<sp/>FASTEST</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(level<sp/>!=<sp/>0)<sp/>level<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/><ref refid="zlib_8h_1af5387baee05124298e431ebe6fe96b17" kindref="member">Z_DEFAULT_COMPRESSION</ref>)<sp/>level<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(windowBits<sp/>&lt;<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>suppress<sp/>zlib<sp/>wrapper<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrap<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowBits<sp/>=<sp/>-windowBits;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GZIP</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(windowBits<sp/>&gt;<sp/>15)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrap<sp/>=<sp/>2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>gzip<sp/>wrapper<sp/>instead<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowBits<sp/>-=<sp/>16;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memLevel<sp/>&lt;<sp/>1<sp/>||<sp/>memLevel<sp/>&gt;<sp/><ref refid="zconf_8h_1a8e9fefb3d20386851ca693946127ab2e" kindref="member">MAX_MEM_LEVEL</ref><sp/>||<sp/>method<sp/>!=<sp/><ref refid="zlib_8h_1a27a96226f3dc88e4743131c632adf32f" kindref="member">Z_DEFLATED</ref><sp/>||</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowBits<sp/>&lt;<sp/>8<sp/>||<sp/>windowBits<sp/>&gt;<sp/>15<sp/>||<sp/>level<sp/>&lt;<sp/>0<sp/>||<sp/>level<sp/>&gt;<sp/>9<sp/>||</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strategy<sp/>&lt;<sp/>0<sp/>||<sp/>strategy<sp/>&gt;<sp/><ref refid="zlib_8h_1aaa5c996fbc985d5ec43f99112c0ac4a6" kindref="member">Z_FIXED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(windowBits<sp/>==<sp/>8)<sp/>windowBits<sp/>=<sp/>9;<sp/><sp/></highlight><highlight class="comment">/*<sp/>until<sp/>256-byte<sp/>window<sp/>bug<sp/>fixed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(<ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*)<sp/><ref refid="zutil_8h_1a39679d03501d691bdfc62a3324cb9548" kindref="member">ZALLOC</ref>(strm,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structinternal__state" kindref="compound">deflate_state</ref>));</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1ae2be6be871e377c6e2c25a7296ce320c" kindref="member">Z_MEM_ERROR</ref>;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;state<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinternal__state" kindref="compound">internal_state</ref><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*)s;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1aaf558a49ab8c6caea3d131c6b913db42" kindref="member">strm</ref><sp/>=<sp/><ref refid="structinternal__state_1aaf558a49ab8c6caea3d131c6b913db42" kindref="member">strm</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ae80327ea7ad4ad0ef5baeef5ef3a6807" kindref="member">wrap</ref><sp/>=<sp/><ref refid="structinternal__state_1ae80327ea7ad4ad0ef5baeef5ef3a6807" kindref="member">wrap</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref><sp/>=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a016f4538a10e71ab601017a052c0a05f" kindref="member">w_bits</ref><sp/>=<sp/>windowBits;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a875579bf4d0e9d9f9c04ff288d22bb90" kindref="member">w_size</ref><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>s-&gt;<ref refid="structinternal__state_1a016f4538a10e71ab601017a052c0a05f" kindref="member">w_bits</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a19aca516cb19d15cd0c2ea3c72cbe9a5" kindref="member">w_mask</ref><sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1a875579bf4d0e9d9f9c04ff288d22bb90" kindref="member">w_size</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a5dbd3a26550651a746a8829210252715" kindref="member">hash_bits</ref><sp/>=<sp/>memLevel<sp/>+<sp/>7;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1aad05d6c37eb87eefafca51e05468f349" kindref="member">hash_size</ref><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>s-&gt;<ref refid="structinternal__state_1a5dbd3a26550651a746a8829210252715" kindref="member">hash_bits</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a824166a384dcbf6d508c0f6b97a1cb89" kindref="member">hash_mask</ref><sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1aad05d6c37eb87eefafca51e05468f349" kindref="member">hash_size</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1aec996517ec9d4c0741647c487d2c513c" kindref="member">hash_shift</ref><sp/>=<sp/><sp/>((s-&gt;<ref refid="structinternal__state_1a5dbd3a26550651a746a8829210252715" kindref="member">hash_bits</ref>+<ref refid="zutil_8h_1a7984ceb1ff48ac91172976b91ed43f60" kindref="member">MIN_MATCH</ref>-1)/<ref refid="zutil_8h_1a7984ceb1ff48ac91172976b91ed43f60" kindref="member">MIN_MATCH</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8d5cccc7e4dd85927c84bb8efc645533" kindref="member">window</ref><sp/>=<sp/>(<ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*)<sp/><ref refid="zutil_8h_1a39679d03501d691bdfc62a3324cb9548" kindref="member">ZALLOC</ref>(strm,<sp/>s-&gt;<ref refid="structinternal__state_1a875579bf4d0e9d9f9c04ff288d22bb90" kindref="member">w_size</ref>,<sp/>2*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a93a7407be4c9df81f71a389eb1ff6c57" kindref="member">prev</ref><sp/><sp/><sp/>=<sp/>(<ref refid="deflate_8h_1a3e21105c8785a4c2b6f90ee1c6127e32" kindref="member">Posf</ref><sp/>*)<sp/><sp/><ref refid="zutil_8h_1a39679d03501d691bdfc62a3324cb9548" kindref="member">ZALLOC</ref>(strm,<sp/>s-&gt;<ref refid="structinternal__state_1a875579bf4d0e9d9f9c04ff288d22bb90" kindref="member">w_size</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="deflate_8h_1a80a8610ae675eaeead82013bacde10a1" kindref="member">Pos</ref>));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1aafd9ba338599f15de29386ff7a0218f4" kindref="member">head</ref><sp/><sp/><sp/>=<sp/>(<ref refid="deflate_8h_1a3e21105c8785a4c2b6f90ee1c6127e32" kindref="member">Posf</ref><sp/>*)<sp/><sp/><ref refid="zutil_8h_1a39679d03501d691bdfc62a3324cb9548" kindref="member">ZALLOC</ref>(strm,<sp/>s-&gt;<ref refid="structinternal__state_1aad05d6c37eb87eefafca51e05468f349" kindref="member">hash_size</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="deflate_8h_1a80a8610ae675eaeead82013bacde10a1" kindref="member">Pos</ref>));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a85439cd585435b2590039339139d25cb" kindref="member">high_water</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>nothing<sp/>written<sp/>to<sp/>s-&gt;window<sp/>yet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a25ad7fc0094e412144b4201df2126bbb" kindref="member">lit_bufsize</ref><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(memLevel<sp/>+<sp/>6);<sp/></highlight><highlight class="comment">/*<sp/>16K<sp/>elements<sp/>by<sp/>default<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>overlay<sp/>=<sp/>(<ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref><sp/>*)<sp/><ref refid="zutil_8h_1a39679d03501d691bdfc62a3324cb9548" kindref="member">ZALLOC</ref>(strm,<sp/>s-&gt;<ref refid="structinternal__state_1a25ad7fc0094e412144b4201df2126bbb" kindref="member">lit_bufsize</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)+2);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref><sp/>=<sp/>(<ref refid="zutil_8h_1abb6338932978dccbf8a6c3d44c10eff1" kindref="member">uchf</ref><sp/>*)<sp/>overlay;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a9100ecccf2f8bb474f0bcc7c69f55c27" kindref="member">pending_buf_size</ref><sp/>=<sp/>(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)s-&gt;<ref refid="structinternal__state_1a25ad7fc0094e412144b4201df2126bbb" kindref="member">lit_bufsize</ref><sp/>*<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)+2L);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a8d5cccc7e4dd85927c84bb8efc645533" kindref="member">window</ref><sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>s-&gt;<ref refid="structinternal__state_1a93a7407be4c9df81f71a389eb1ff6c57" kindref="member">prev</ref><sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>s-&gt;<ref refid="structinternal__state_1aafd9ba338599f15de29386ff7a0218f4" kindref="member">head</ref><sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref><sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>=<sp/><ref refid="deflate_8h_1a0474cba74b039aa45fe9412c1de86bed" kindref="member">FINISH_STATE</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="zutil_8h_1a66466516a4a71f3c78ccc40d203c92e5" kindref="member">ERR_MSG</ref>(<ref refid="zlib_8h_1ae2be6be871e377c6e2c25a7296ce320c" kindref="member">Z_MEM_ERROR</ref>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a6b32d6d4fa68d8aea22445f97048cf67" kindref="member">deflateEnd</ref><sp/>(strm);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1ae2be6be871e377c6e2c25a7296ce320c" kindref="member">Z_MEM_ERROR</ref>;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ac636c34c1c08dc9d2f9c199ce2caa99d" kindref="member">d_buf</ref><sp/>=<sp/>overlay<sp/>+<sp/>s-&gt;<ref refid="structinternal__state_1a25ad7fc0094e412144b4201df2126bbb" kindref="member">lit_bufsize</ref>/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a5e6c4269e29696b192e02fd01381e400" kindref="member">l_buf</ref><sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref><sp/>+<sp/>(1+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>))*s-&gt;<ref refid="structinternal__state_1a25ad7fc0094e412144b4201df2126bbb" kindref="member">lit_bufsize</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref><sp/>=<sp/><ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref>;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a67219312df7fd2f86e06e6f14700eb28" kindref="member">strategy</ref><sp/>=<sp/><ref refid="structinternal__state_1a67219312df7fd2f86e06e6f14700eb28" kindref="member">strategy</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1aeb38f8a255e975e703595577ea43220b" kindref="member">method</ref><sp/>=<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)method;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="deflate_8c_1a1678e92d49418699a3caa1fb88b8ab52" kindref="member">deflateReset</ref>(strm);</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a49e4f2317baf6ab80f81d0934e49a6b6" kindref="member">deflateSetDictionary</ref><sp/>(strm,<sp/>dictionary,<sp/>dictLength)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*dictionary;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/><sp/>dictLength;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>length<sp/>=<sp/>dictLength;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>n;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1ada696b787a46d01634b6365afcec1a9e" kindref="member">IPos</ref><sp/>hash_head<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>strm-&gt;state<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>dictionary<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;state-&gt;wrap<sp/>==<sp/>2<sp/>||</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strm-&gt;state-&gt;wrap<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>strm-&gt;state-&gt;status<sp/>!=<sp/><ref refid="deflate_8h_1a96cb576b9a3b5f8cb90bd4bb7ee449d2" kindref="member">INIT_STATE</ref>))</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>strm-&gt;state;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ae80327ea7ad4ad0ef5baeef5ef3a6807" kindref="member">wrap</ref>)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;adler<sp/>=<sp/><ref refid="adler32_8c_1a5a72291922586b323fa442b9fe8549ec" kindref="member">adler32</ref>(strm-&gt;adler,<sp/>dictionary,<sp/>dictLength);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&lt;<sp/><ref refid="zutil_8h_1a7984ceb1ff48ac91172976b91ed43f60" kindref="member">MIN_MATCH</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref>;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>s-&gt;<ref refid="structinternal__state_1a875579bf4d0e9d9f9c04ff288d22bb90" kindref="member">w_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1a875579bf4d0e9d9f9c04ff288d22bb90" kindref="member">w_size</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictionary<sp/>+=<sp/>dictLength<sp/>-<sp/>length;<sp/></highlight><highlight class="comment">/*<sp/>use<sp/>the<sp/>tail<sp/>of<sp/>the<sp/>dictionary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8c_1a20971e15496f76249b852c9764cf38ef" kindref="member">zmemcpy</ref>(s-&gt;<ref refid="structinternal__state_1a8d5cccc7e4dd85927c84bb8efc645533" kindref="member">window</ref>,<sp/>dictionary,<sp/>length);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a946579b9b86ee466424ffb0a67eb7060" kindref="member">strstart</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a4ba16849758dfa969066693ca2cae880" kindref="member">block_start</ref><sp/>=<sp/>(long)length;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>all<sp/>strings<sp/>in<sp/>the<sp/>hash<sp/>table<sp/>(except<sp/>for<sp/>the<sp/>last<sp/>two<sp/>bytes).</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>s-&gt;lookahead<sp/>stays<sp/>null,<sp/>so<sp/>s-&gt;ins_h<sp/>will<sp/>be<sp/>recomputed<sp/>at<sp/>the<sp/>next</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>call<sp/>of<sp/>fill_window.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8cf437698f428195122d3c530929a80c" kindref="member">ins_h</ref><sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1a8d5cccc7e4dd85927c84bb8efc645533" kindref="member">window</ref>[0];</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a44b283365d6ca10b7028e639c4a10e67" kindref="member">UPDATE_HASH</ref>(s,<sp/>s-&gt;<ref refid="structinternal__state_1a8cf437698f428195122d3c530929a80c" kindref="member">ins_h</ref>,<sp/>s-&gt;<ref refid="structinternal__state_1a8d5cccc7e4dd85927c84bb8efc645533" kindref="member">window</ref>[1]);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;=<sp/>length<sp/>-<sp/><ref refid="zutil_8h_1a7984ceb1ff48ac91172976b91ed43f60" kindref="member">MIN_MATCH</ref>;<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a52d7ca8e864a07c0ba4a25d04588168b" kindref="member">INSERT_STRING</ref>(s,<sp/>n,<sp/>hash_head);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash_head)<sp/>hash_head<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">/*<sp/>to<sp/>make<sp/>compiler<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a1678e92d49418699a3caa1fb88b8ab52" kindref="member">deflateReset</ref><sp/>(strm)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>strm-&gt;state<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;zalloc<sp/>==<sp/>(<ref refid="zlib_8h_1af90139b484e48372e0e6db52bb9f6733" kindref="member">alloc_func</ref>)0<sp/>||<sp/>strm-&gt;zfree<sp/>==<sp/>(<ref refid="zlib_8h_1af07471bf3f37f2c29078ed11ac59fc7f" kindref="member">free_func</ref>)0)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;total_in<sp/>=<sp/>strm-&gt;total_out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>;<sp/></highlight><highlight class="comment">/*<sp/>use<sp/>zfree<sp/>if<sp/>we<sp/>ever<sp/>allocate<sp/>msg<sp/>dynamically<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;data_type<sp/>=<sp/><ref refid="zlib_8h_1a4be54d9d68d40adb73f87492284cc290" kindref="member">Z_UNKNOWN</ref>;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(<ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*)strm-&gt;state;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a6e15ed78675c3c7bdb312623b5eceb7a" kindref="member">pending_out</ref><sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(s-&gt;<ref refid="structinternal__state_1ae80327ea7ad4ad0ef5baeef5ef3a6807" kindref="member">wrap</ref><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ae80327ea7ad4ad0ef5baeef5ef3a6807" kindref="member">wrap</ref><sp/>=<sp/>-s-&gt;<ref refid="structinternal__state_1ae80327ea7ad4ad0ef5baeef5ef3a6807" kindref="member">wrap</ref>;<sp/></highlight><highlight class="comment">/*<sp/>was<sp/>made<sp/>negative<sp/>by<sp/>deflate(...,<sp/>Z_FINISH);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1ae80327ea7ad4ad0ef5baeef5ef3a6807" kindref="member">wrap</ref><sp/>?<sp/><ref refid="deflate_8h_1a96cb576b9a3b5f8cb90bd4bb7ee449d2" kindref="member">INIT_STATE</ref><sp/>:<sp/><ref refid="deflate_8h_1a4821f69a5605c2618cd4dc4d3f60979c" kindref="member">BUSY_STATE</ref>;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;adler<sp/>=</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GZIP</highlight></codeline>
<codeline lineno="377"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ae80327ea7ad4ad0ef5baeef5ef3a6807" kindref="member">wrap</ref><sp/>==<sp/>2<sp/>?<sp/><ref refid="crc32_8c_1a68c725fbf3dc9f3fe41995b2b8ba250b" kindref="member">crc32</ref>(0L,<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>,<sp/>0)<sp/>:</highlight></codeline>
<codeline lineno="378"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="adler32_8c_1a5a72291922586b323fa442b9fe8549ec" kindref="member">adler32</ref>(0L,<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1aa9517fd4120306e1f07a05563a6fe40b" kindref="member">last_flush</ref><sp/>=<sp/><ref refid="zlib_8h_1ac3b62e37b9922d9496014515acd6083a" kindref="member">Z_NO_FLUSH</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1aa7c644b04c307b8f940eb1300f682575" kindref="member">_tr_init</ref>(s);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>lm_init(s);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a9a22f76091e3a8e93d22eff573ea684d" kindref="member">deflateSetHeader</ref><sp/>(strm,<sp/><ref refid="structinternal__state_1aafd9ba338599f15de29386ff7a0218f4" kindref="member">head</ref>)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgz__header__s" kindref="compound">gz_headerp</ref><sp/><ref refid="structinternal__state_1aafd9ba338599f15de29386ff7a0218f4" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>strm-&gt;state<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm-&gt;state-&gt;wrap<sp/>!=<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;state-&gt;gzhead<sp/>=<sp/><ref refid="structinternal__state_1aafd9ba338599f15de29386ff7a0218f4" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a0376f713dfb9676c3eadaf1bb0c759b5" kindref="member">deflatePrime</ref><sp/>(strm,<sp/>bits,<sp/>value)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>strm-&gt;state<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;state-&gt;bi_valid<sp/>=<sp/>bits;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;state-&gt;bi_buf<sp/>=<sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)(value<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>bits)<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1adb08871bcd410fb9d8d221a1ae378fa8" kindref="member">deflateParams</ref>(strm,<sp/>level,<sp/>strategy)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strategy;</highlight></codeline>
<codeline lineno="416"><highlight class="normal">{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1ab06f84fcb49a37e690badedd1ebab2a0" kindref="member">compress_func</ref><sp/>func;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref>;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>strm-&gt;state<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>strm-&gt;state;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FASTEST</highlight></codeline>
<codeline lineno="425"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>!=<sp/>0)<sp/>level<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="427"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/><ref refid="zlib_8h_1af5387baee05124298e431ebe6fe96b17" kindref="member">Z_DEFAULT_COMPRESSION</ref>)<sp/>level<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="429"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&lt;<sp/>0<sp/>||<sp/>level<sp/>&gt;<sp/>9<sp/>||<sp/>strategy<sp/>&lt;<sp/>0<sp/>||<sp/>strategy<sp/>&gt;<sp/>Z_FIXED)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>func<sp/>=<sp/>configuration_table[s-&gt;<ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref>].func;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((strategy<sp/>!=<sp/>s-&gt;<ref refid="structinternal__state_1a67219312df7fd2f86e06e6f14700eb28" kindref="member">strategy</ref><sp/>||<sp/>func<sp/>!=<sp/>configuration_table[level].func)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;total_in<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flush<sp/>the<sp/>last<sp/>buffer:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="deflate_8c_1a020eb25653da3ef0f1f4f59a82c1e8ae" kindref="member">deflate</ref>(strm,<sp/><ref refid="zlib_8h_1a73e5f4c24156c63ba863014396685062" kindref="member">Z_BLOCK</ref>);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref><sp/>!=<sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref><sp/>=<sp/><ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ab74215ec1c106bf588a7642927d47b84" kindref="member">max_lazy_match</ref><sp/><sp/><sp/>=<sp/>configuration_table[<ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref>].max_lazy;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a68ba00254242017f330dca5e0191bca4" kindref="member">good_match</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>configuration_table[<ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref>].good_length;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a39ab99e52138c0628f645bc1e0c69a04" kindref="member">nice_match</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>configuration_table[<ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref>].nice_length;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ab1ffa7feb159edec170574813fae3279" kindref="member">max_chain_length</ref><sp/>=<sp/>configuration_table[<ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref>].max_chain;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a67219312df7fd2f86e06e6f14700eb28" kindref="member">strategy</ref><sp/>=<sp/><ref refid="structinternal__state_1a67219312df7fd2f86e06e6f14700eb28" kindref="member">strategy</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a66ffe828d83d0610fa2f62bb7a076faf" kindref="member">deflateTune</ref>(strm,<sp/>good_length,<sp/>max_lazy,<sp/>nice_length,<sp/>max_chain)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>good_length;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_lazy;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nice_length;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_chain;</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>strm-&gt;state<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>strm-&gt;state;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a68ba00254242017f330dca5e0191bca4" kindref="member">good_match</ref><sp/>=<sp/>good_length;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ab74215ec1c106bf588a7642927d47b84" kindref="member">max_lazy_match</ref><sp/>=<sp/>max_lazy;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a39ab99e52138c0628f645bc1e0c69a04" kindref="member">nice_match</ref><sp/>=<sp/>nice_length;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ab1ffa7feb159edec170574813fae3279" kindref="member">max_chain_length</ref><sp/>=<sp/>max_chain;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref>;</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*<sp/>For<sp/>the<sp/>default<sp/>windowBits<sp/>of<sp/>15<sp/>and<sp/>memLevel<sp/>of<sp/>8,<sp/>this<sp/>function<sp/>returns</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*<sp/>a<sp/>close<sp/>to<sp/>exact,<sp/>as<sp/>well<sp/>as<sp/>small,<sp/>upper<sp/>bound<sp/>on<sp/>the<sp/>compressed<sp/>size.</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*<sp/>They<sp/>are<sp/>coded<sp/>as<sp/>constants<sp/>here<sp/>for<sp/>a<sp/>reason--if<sp/>the<sp/>#define&apos;s<sp/>are</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*<sp/>changed,<sp/>then<sp/>this<sp/>function<sp/>needs<sp/>to<sp/>be<sp/>changed<sp/>as<sp/>well.<sp/><sp/>The<sp/>return</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*<sp/>value<sp/>for<sp/>15<sp/>and<sp/>8<sp/>only<sp/>works<sp/>for<sp/>those<sp/>exact<sp/>settings.</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*<sp/>For<sp/>any<sp/>setting<sp/>other<sp/>than<sp/>those<sp/>defaults<sp/>for<sp/>windowBits<sp/>and<sp/>memLevel,</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*<sp/>the<sp/>value<sp/>returned<sp/>is<sp/>a<sp/>conservative<sp/>worst<sp/>case<sp/>for<sp/>the<sp/>maximum<sp/>expansion</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*<sp/>resulting<sp/>from<sp/>using<sp/>fixed<sp/>blocks<sp/>instead<sp/>of<sp/>stored<sp/>blocks,<sp/>which<sp/>deflate</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*<sp/>can<sp/>emit<sp/>on<sp/>compressed<sp/>data<sp/>for<sp/>some<sp/>combinations<sp/>of<sp/>the<sp/>parameters.</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>could<sp/>be<sp/>more<sp/>sophisticated<sp/>to<sp/>provide<sp/>closer<sp/>upper<sp/>bounds<sp/>for</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*<sp/>every<sp/>combination<sp/>of<sp/>windowBits<sp/>and<sp/>memLevel.<sp/><sp/>But<sp/>even<sp/>the<sp/>conservative</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*<sp/>upper<sp/>bound<sp/>of<sp/>about<sp/>14%<sp/>expansion<sp/>does<sp/>not<sp/>seem<sp/>onerous<sp/>for<sp/>output<sp/>buffer</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*<sp/>allocation.</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a193af31ee07ae28a0db592fe7d257e8d" kindref="member">deflateBound</ref>(strm,<sp/>sourceLen)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/>sourceLen;</highlight></codeline>
<codeline lineno="489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/>complen,<sp/>wraplen;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*str;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>conservative<sp/>upper<sp/>bound<sp/>for<sp/>compressed<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>complen<sp/>=<sp/>sourceLen<sp/>+</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((sourceLen<sp/>+<sp/>7)<sp/>&gt;&gt;<sp/>3)<sp/>+<sp/>((sourceLen<sp/>+<sp/>63)<sp/>&gt;&gt;<sp/>6)<sp/>+<sp/>5;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>can&apos;t<sp/>get<sp/>parameters,<sp/>return<sp/>conservative<sp/>bound<sp/>plus<sp/>zlib<sp/>wrapper<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>strm-&gt;state<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>complen<sp/>+<sp/>6;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>wrapper<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>strm-&gt;state;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ae80327ea7ad4ad0ef5baeef5ef3a6807" kindref="member">wrap</ref>)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>raw<sp/>deflate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wraplen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>zlib<sp/>wrapper<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wraplen<sp/>=<sp/>6<sp/>+<sp/>(s-&gt;<ref refid="structinternal__state_1a946579b9b86ee466424ffb0a67eb7060" kindref="member">strstart</ref><sp/>?<sp/>4<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>gzip<sp/>wrapper<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wraplen<sp/>=<sp/>18;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref><sp/>!=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>user-supplied<sp/>gzip<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a397959afc459da7e296c676a3d4c1915" kindref="member">extra</ref><sp/>!=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wraplen<sp/>+=<sp/>2<sp/>+<sp/>s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a271798915d64ae1f0d25a3a814ca0aa3" kindref="member">extra_len</ref>;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a60ae5eee2882d1c25b3bb328972f0149" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>!=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wraplen++;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*str++);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a1d4fd0807e838ce4bfde54aa021e18e9" kindref="member">comment</ref>;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>!=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wraplen++;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*str++);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a29fa8de3acff8d8c7bad61dc924d8564" kindref="member">hcrc</ref>)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wraplen<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>compiler<sp/>happiness<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wraplen<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>not<sp/>default<sp/>parameters,<sp/>return<sp/>conservative<sp/>bound<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a016f4538a10e71ab601017a052c0a05f" kindref="member">w_bits</ref><sp/>!=<sp/>15<sp/>||<sp/>s-&gt;<ref refid="structinternal__state_1a5dbd3a26550651a746a8829210252715" kindref="member">hash_bits</ref><sp/>!=<sp/>8<sp/>+<sp/>7)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>complen<sp/>+<sp/>wraplen;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>default<sp/>settings:<sp/>return<sp/>tight<sp/>bound<sp/>for<sp/>that<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sourceLen<sp/>+<sp/>(sourceLen<sp/>&gt;&gt;<sp/>12)<sp/>+<sp/>(sourceLen<sp/>&gt;&gt;<sp/>14)<sp/>+</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sourceLen<sp/>&gt;&gt;<sp/>25)<sp/>+<sp/>13<sp/>-<sp/>6<sp/>+<sp/>wraplen;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*<sp/>Put<sp/>a<sp/>short<sp/>in<sp/>the<sp/>pending<sp/>buffer.<sp/>The<sp/>16-bit<sp/>value<sp/>is<sp/>put<sp/>in<sp/>MSB<sp/>order.</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/>IN<sp/>assertion:<sp/>the<sp/>stream<sp/>state<sp/>is<sp/>correct<sp/>and<sp/>there<sp/>is<sp/>enough<sp/>room<sp/>in</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*<sp/>pending_buf.</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>putShortMSB<sp/>(s,<sp/>b)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>b;</highlight></codeline>
<codeline lineno="551"><highlight class="normal">{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)(b<sp/>&gt;&gt;<sp/>8));</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)(b<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*<sp/>Flush<sp/>as<sp/>much<sp/>pending<sp/>output<sp/>as<sp/>possible.<sp/>All<sp/>deflate()<sp/>output<sp/>goes</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/>*<sp/>through<sp/>this<sp/>function<sp/>so<sp/>some<sp/>applications<sp/>may<sp/>wish<sp/>to<sp/>modify<sp/>it</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/>*<sp/>to<sp/>avoid<sp/>allocating<sp/>a<sp/>large<sp/>strm-&gt;next_out<sp/>buffer<sp/>and<sp/>copying<sp/>into<sp/>it.</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/>*<sp/>(See<sp/>also<sp/>read_buf()).</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>flush_pending(strm)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strm-&gt;<ref refid="structz__stream__s_1aff003303512a6c0abd17440abdf66956" kindref="member">state</ref>-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref>;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>strm-&gt;avail_out)<sp/>len<sp/>=<sp/>strm-&gt;avail_out;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8c_1a20971e15496f76249b852c9764cf38ef" kindref="member">zmemcpy</ref>(strm-&gt;next_out,<sp/>strm-&gt;state-&gt;pending_out,<sp/>len);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;next_out<sp/><sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;state-&gt;pending_out<sp/><sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;total_out<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;avail_out<sp/><sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;state-&gt;pending<sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm-&gt;state-&gt;pending<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;state-&gt;pending_out<sp/>=<sp/>strm-&gt;state-&gt;pending_buf;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a020eb25653da3ef0f1f4f59a82c1e8ae" kindref="member">deflate</ref><sp/>(strm,<sp/>flush)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush;</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_flush;<sp/></highlight><highlight class="comment">/*<sp/>value<sp/>of<sp/>flush<sp/>param<sp/>for<sp/>previous<sp/>deflate<sp/>call<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>strm-&gt;state<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flush<sp/>&gt;<sp/><ref refid="zlib_8h_1a73e5f4c24156c63ba863014396685062" kindref="member">Z_BLOCK</ref><sp/>||<sp/>flush<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>strm-&gt;state;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm-&gt;next_out<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strm-&gt;next_in<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>&amp;&amp;<sp/>strm-&gt;avail_in<sp/>!=<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>==<sp/><ref refid="deflate_8h_1a0474cba74b039aa45fe9412c1de86bed" kindref="member">FINISH_STATE</ref><sp/>&amp;&amp;<sp/>flush<sp/>!=<sp/><ref refid="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" kindref="member">Z_FINISH</ref>))<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a0fcc2fe26110263e812ce50919b6a5c1" kindref="member">ERR_RETURN</ref>(strm,<sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm-&gt;avail_out<sp/>==<sp/>0)<sp/><ref refid="zutil_8h_1a0fcc2fe26110263e812ce50919b6a5c1" kindref="member">ERR_RETURN</ref>(strm,<sp/><ref refid="zlib_8h_1a425e2f0664e1b1f75bf2bffab88d353d" kindref="member">Z_BUF_ERROR</ref>);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1aaf558a49ab8c6caea3d131c6b913db42" kindref="member">strm</ref><sp/>=<sp/><ref refid="structinternal__state_1aaf558a49ab8c6caea3d131c6b913db42" kindref="member">strm</ref>;<sp/></highlight><highlight class="comment">/*<sp/>just<sp/>in<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>old_flush<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1aa9517fd4120306e1f07a05563a6fe40b" kindref="member">last_flush</ref>;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1aa9517fd4120306e1f07a05563a6fe40b" kindref="member">last_flush</ref><sp/>=<sp/>flush;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>the<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>==<sp/><ref refid="deflate_8h_1a96cb576b9a3b5f8cb90bd4bb7ee449d2" kindref="member">INIT_STATE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GZIP</highlight></codeline>
<codeline lineno="609"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ae80327ea7ad4ad0ef5baeef5ef3a6807" kindref="member">wrap</ref><sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;adler<sp/>=<sp/><ref refid="crc32_8c_1a68c725fbf3dc9f3fe41995b2b8ba250b" kindref="member">crc32</ref>(0L,<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>31);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>139);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>8);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref><sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>0);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>0);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>0);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>0);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>0);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>s-&gt;<ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref><sp/>==<sp/>9<sp/>?<sp/>2<sp/>:</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;<ref refid="structinternal__state_1a67219312df7fd2f86e06e6f14700eb28" kindref="member">strategy</ref><sp/>&gt;=<sp/><ref refid="zlib_8h_1a1eec3d3720ba91fd54fa08d2757c1785" kindref="member">Z_HUFFMAN_ONLY</ref><sp/>||<sp/>s-&gt;<ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref><sp/>&lt;<sp/>2<sp/>?</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/><ref refid="zutil_8h_1a919da7d9b61966c3af796ab42e618bef" kindref="member">OS_CODE</ref>);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>=<sp/><ref refid="deflate_8h_1a4821f69a5605c2618cd4dc4d3f60979c" kindref="member">BUSY_STATE</ref>;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1af94c3fadfed835a501bc1babc4b894f9" kindref="member">text</ref><sp/>?<sp/>1<sp/>:<sp/>0)<sp/>+</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a29fa8de3acff8d8c7bad61dc924d8564" kindref="member">hcrc</ref><sp/>?<sp/>2<sp/>:<sp/>0)<sp/>+</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a397959afc459da7e296c676a3d4c1915" kindref="member">extra</ref><sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>?<sp/>0<sp/>:<sp/>4)<sp/>+</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a60ae5eee2882d1c25b3bb328972f0149" kindref="member">name</ref><sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>?<sp/>0<sp/>:<sp/>8)<sp/>+</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a1d4fd0807e838ce4bfde54aa021e18e9" kindref="member">comment</ref><sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>?<sp/>0<sp/>:<sp/>16)</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a5f00bb6f9689c1abf7a54dad449ce9d3" kindref="member">time</ref><sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)((s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a5f00bb6f9689c1abf7a54dad449ce9d3" kindref="member">time</ref><sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)((s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a5f00bb6f9689c1abf7a54dad449ce9d3" kindref="member">time</ref><sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)((s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a5f00bb6f9689c1abf7a54dad449ce9d3" kindref="member">time</ref><sp/>&gt;&gt;<sp/>24)<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>s-&gt;<ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref><sp/>==<sp/>9<sp/>?<sp/>2<sp/>:</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;<ref refid="structinternal__state_1a67219312df7fd2f86e06e6f14700eb28" kindref="member">strategy</ref><sp/>&gt;=<sp/><ref refid="zlib_8h_1a1eec3d3720ba91fd54fa08d2757c1785" kindref="member">Z_HUFFMAN_ONLY</ref><sp/>||<sp/>s-&gt;<ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref><sp/>&lt;<sp/>2<sp/>?</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a2708d3180d30b0563e3c2c965865cd4f" kindref="member">os</ref><sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a397959afc459da7e296c676a3d4c1915" kindref="member">extra</ref><sp/>!=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a271798915d64ae1f0d25a3a814ca0aa3" kindref="member">extra_len</ref><sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a271798915d64ae1f0d25a3a814ca0aa3" kindref="member">extra_len</ref><sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a29fa8de3acff8d8c7bad61dc924d8564" kindref="member">hcrc</ref>)</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;adler<sp/>=<sp/><ref refid="crc32_8c_1a68c725fbf3dc9f3fe41995b2b8ba250b" kindref="member">crc32</ref>(strm-&gt;adler,<sp/>s-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref>,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref>);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a5e09188a83aadfcb0db60b0765596aa1" kindref="member">gzindex</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>=<sp/><ref refid="deflate_8h_1affc01bd472ba5f5ad1519c40e20a3778" kindref="member">EXTRA_STATE</ref>;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="654"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>header<sp/>=<sp/>(<ref refid="zlib_8h_1a27a96226f3dc88e4743131c632adf32f" kindref="member">Z_DEFLATED</ref><sp/>+<sp/>((s-&gt;<ref refid="structinternal__state_1a016f4538a10e71ab601017a052c0a05f" kindref="member">w_bits</ref>-8)&lt;&lt;4))<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>level_flags;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a67219312df7fd2f86e06e6f14700eb28" kindref="member">strategy</ref><sp/>&gt;=<sp/><ref refid="zlib_8h_1a1eec3d3720ba91fd54fa08d2757c1785" kindref="member">Z_HUFFMAN_ONLY</ref><sp/>||<sp/>s-&gt;<ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref><sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level_flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref><sp/>&lt;<sp/>6)</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level_flags<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a7ad2ab1df80c8cab4ffb97ff84e88c62" kindref="member">level</ref><sp/>==<sp/>6)</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level_flags<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level_flags<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header<sp/>|=<sp/>(level_flags<sp/>&lt;&lt;<sp/>6);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a946579b9b86ee466424ffb0a67eb7060" kindref="member">strstart</ref><sp/>!=<sp/>0)<sp/>header<sp/>|=<sp/><ref refid="zutil_8h_1a1156d73d88538d122acfa852b95492bd" kindref="member">PRESET_DICT</ref>;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header<sp/>+=<sp/>31<sp/>-<sp/>(header<sp/>%<sp/>31);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>=<sp/><ref refid="deflate_8h_1a4821f69a5605c2618cd4dc4d3f60979c" kindref="member">BUSY_STATE</ref>;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>putShortMSB(s,<sp/>header);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Save<sp/>the<sp/>adler32<sp/>of<sp/>the<sp/>preset<sp/>dictionary:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a946579b9b86ee466424ffb0a67eb7060" kindref="member">strstart</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>putShortMSB(s,<sp/>(<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)(strm-&gt;adler<sp/>&gt;&gt;<sp/>16));</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>putShortMSB(s,<sp/>(<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)(strm-&gt;adler<sp/>&amp;<sp/>0xffff));</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;adler<sp/>=<sp/><ref refid="adler32_8c_1a5a72291922586b323fa442b9fe8549ec" kindref="member">adler32</ref>(0L,<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GZIP</highlight></codeline>
<codeline lineno="682"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>==<sp/><ref refid="deflate_8h_1affc01bd472ba5f5ad1519c40e20a3778" kindref="member">EXTRA_STATE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a397959afc459da7e296c676a3d4c1915" kindref="member">extra</ref><sp/>!=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>beg<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>start<sp/>of<sp/>bytes<sp/>to<sp/>update<sp/>crc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a5e09188a83aadfcb0db60b0765596aa1" kindref="member">gzindex</ref><sp/>&lt;<sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a271798915d64ae1f0d25a3a814ca0aa3" kindref="member">extra_len</ref><sp/>&amp;<sp/>0xffff))<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>==<sp/>s-&gt;<ref refid="structinternal__state_1a9100ecccf2f8bb474f0bcc7c69f55c27" kindref="member">pending_buf_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a29fa8de3acff8d8c7bad61dc924d8564" kindref="member">hcrc</ref><sp/>&amp;&amp;<sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>&gt;<sp/>beg)</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;adler<sp/>=<sp/><ref refid="crc32_8c_1a68c725fbf3dc9f3fe41995b2b8ba250b" kindref="member">crc32</ref>(strm-&gt;adler,<sp/>s-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref><sp/>+<sp/>beg,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>-<sp/>beg);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flush_pending(strm);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beg<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref>;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>==<sp/>s-&gt;<ref refid="structinternal__state_1a9100ecccf2f8bb474f0bcc7c69f55c27" kindref="member">pending_buf_size</ref>)</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a397959afc459da7e296c676a3d4c1915" kindref="member">extra</ref>[s-&gt;<ref refid="structinternal__state_1a5e09188a83aadfcb0db60b0765596aa1" kindref="member">gzindex</ref>]);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a5e09188a83aadfcb0db60b0765596aa1" kindref="member">gzindex</ref>++;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a29fa8de3acff8d8c7bad61dc924d8564" kindref="member">hcrc</ref><sp/>&amp;&amp;<sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>&gt;<sp/>beg)</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;adler<sp/>=<sp/><ref refid="crc32_8c_1a68c725fbf3dc9f3fe41995b2b8ba250b" kindref="member">crc32</ref>(strm-&gt;adler,<sp/>s-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref><sp/>+<sp/>beg,</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>-<sp/>beg);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a5e09188a83aadfcb0db60b0765596aa1" kindref="member">gzindex</ref><sp/>==<sp/>s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a271798915d64ae1f0d25a3a814ca0aa3" kindref="member">extra_len</ref>)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a5e09188a83aadfcb0db60b0765596aa1" kindref="member">gzindex</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>=<sp/><ref refid="deflate_8h_1acec08b85e51457d214b759d489785e99" kindref="member">NAME_STATE</ref>;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>=<sp/><ref refid="deflate_8h_1acec08b85e51457d214b759d489785e99" kindref="member">NAME_STATE</ref>;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>==<sp/><ref refid="deflate_8h_1acec08b85e51457d214b759d489785e99" kindref="member">NAME_STATE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a60ae5eee2882d1c25b3bb328972f0149" kindref="member">name</ref><sp/>!=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>beg<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>start<sp/>of<sp/>bytes<sp/>to<sp/>update<sp/>crc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>==<sp/>s-&gt;<ref refid="structinternal__state_1a9100ecccf2f8bb474f0bcc7c69f55c27" kindref="member">pending_buf_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a29fa8de3acff8d8c7bad61dc924d8564" kindref="member">hcrc</ref><sp/>&amp;&amp;<sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>&gt;<sp/>beg)</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;adler<sp/>=<sp/><ref refid="crc32_8c_1a68c725fbf3dc9f3fe41995b2b8ba250b" kindref="member">crc32</ref>(strm-&gt;adler,<sp/>s-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref><sp/>+<sp/>beg,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>-<sp/>beg);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flush_pending(strm);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beg<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref>;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>==<sp/>s-&gt;<ref refid="structinternal__state_1a9100ecccf2f8bb474f0bcc7c69f55c27" kindref="member">pending_buf_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a60ae5eee2882d1c25b3bb328972f0149" kindref="member">name</ref>[s-&gt;<ref refid="structinternal__state_1a5e09188a83aadfcb0db60b0765596aa1" kindref="member">gzindex</ref>++];</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>val);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(val<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a29fa8de3acff8d8c7bad61dc924d8564" kindref="member">hcrc</ref><sp/>&amp;&amp;<sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>&gt;<sp/>beg)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;adler<sp/>=<sp/><ref refid="crc32_8c_1a68c725fbf3dc9f3fe41995b2b8ba250b" kindref="member">crc32</ref>(strm-&gt;adler,<sp/>s-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref><sp/>+<sp/>beg,</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>-<sp/>beg);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a5e09188a83aadfcb0db60b0765596aa1" kindref="member">gzindex</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>=<sp/><ref refid="deflate_8h_1a06c47936258e98a0c4ca38dd31a5f6c7" kindref="member">COMMENT_STATE</ref>;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>=<sp/><ref refid="deflate_8h_1a06c47936258e98a0c4ca38dd31a5f6c7" kindref="member">COMMENT_STATE</ref>;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>==<sp/><ref refid="deflate_8h_1a06c47936258e98a0c4ca38dd31a5f6c7" kindref="member">COMMENT_STATE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a1d4fd0807e838ce4bfde54aa021e18e9" kindref="member">comment</ref><sp/>!=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>beg<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>start<sp/>of<sp/>bytes<sp/>to<sp/>update<sp/>crc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>==<sp/>s-&gt;<ref refid="structinternal__state_1a9100ecccf2f8bb474f0bcc7c69f55c27" kindref="member">pending_buf_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a29fa8de3acff8d8c7bad61dc924d8564" kindref="member">hcrc</ref><sp/>&amp;&amp;<sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>&gt;<sp/>beg)</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;adler<sp/>=<sp/><ref refid="crc32_8c_1a68c725fbf3dc9f3fe41995b2b8ba250b" kindref="member">crc32</ref>(strm-&gt;adler,<sp/>s-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref><sp/>+<sp/>beg,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>-<sp/>beg);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flush_pending(strm);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beg<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref>;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>==<sp/>s-&gt;<ref refid="structinternal__state_1a9100ecccf2f8bb474f0bcc7c69f55c27" kindref="member">pending_buf_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a1d4fd0807e838ce4bfde54aa021e18e9" kindref="member">comment</ref>[s-&gt;<ref refid="structinternal__state_1a5e09188a83aadfcb0db60b0765596aa1" kindref="member">gzindex</ref>++];</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>val);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(val<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a29fa8de3acff8d8c7bad61dc924d8564" kindref="member">hcrc</ref><sp/>&amp;&amp;<sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>&gt;<sp/>beg)</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;adler<sp/>=<sp/><ref refid="crc32_8c_1a68c725fbf3dc9f3fe41995b2b8ba250b" kindref="member">crc32</ref>(strm-&gt;adler,<sp/>s-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref><sp/>+<sp/>beg,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>-<sp/>beg);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>=<sp/><ref refid="deflate_8h_1a09dffa22705cbe81ca94b8b379d43682" kindref="member">HCRC_STATE</ref>;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>=<sp/><ref refid="deflate_8h_1a09dffa22705cbe81ca94b8b379d43682" kindref="member">HCRC_STATE</ref>;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>==<sp/><ref refid="deflate_8h_1a09dffa22705cbe81ca94b8b379d43682" kindref="member">HCRC_STATE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac023d0c9e6112dfe6cbd049a56484997" kindref="member">gzhead</ref>-&gt;<ref refid="structgz__header__s_1a29fa8de3acff8d8c7bad61dc924d8564" kindref="member">hcrc</ref>)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>+<sp/>2<sp/>&gt;<sp/>s-&gt;<ref refid="structinternal__state_1a9100ecccf2f8bb474f0bcc7c69f55c27" kindref="member">pending_buf_size</ref>)</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flush_pending(strm);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>+<sp/>2<sp/>&lt;=<sp/>s-&gt;<ref refid="structinternal__state_1a9100ecccf2f8bb474f0bcc7c69f55c27" kindref="member">pending_buf_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)(strm-&gt;adler<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)((strm-&gt;adler<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;adler<sp/>=<sp/><ref refid="crc32_8c_1a68c725fbf3dc9f3fe41995b2b8ba250b" kindref="member">crc32</ref>(0L,<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>=<sp/><ref refid="deflate_8h_1a4821f69a5605c2618cd4dc4d3f60979c" kindref="member">BUSY_STATE</ref>;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>=<sp/><ref refid="deflate_8h_1a4821f69a5605c2618cd4dc4d3f60979c" kindref="member">BUSY_STATE</ref>;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="785"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flush<sp/>as<sp/>much<sp/>pending<sp/>output<sp/>as<sp/>possible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flush_pending(strm);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm-&gt;avail_out<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Since<sp/>avail_out<sp/>is<sp/>0,<sp/>deflate<sp/>will<sp/>be<sp/>called<sp/>again<sp/>with</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>more<sp/>output<sp/>space,<sp/>but<sp/>possibly<sp/>with<sp/>both<sp/>pending<sp/>and</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>avail_in<sp/>equal<sp/>to<sp/>zero.<sp/>There<sp/>won&apos;t<sp/>be<sp/>anything<sp/>to<sp/>do,</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>but<sp/>this<sp/>is<sp/>not<sp/>an<sp/>error<sp/>situation<sp/>so<sp/>make<sp/>sure<sp/>we</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>return<sp/>OK<sp/>instead<sp/>of<sp/>BUF_ERROR<sp/>at<sp/>next<sp/>call<sp/>of<sp/>deflate:</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1aa9517fd4120306e1f07a05563a6fe40b" kindref="member">last_flush</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref>;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>there<sp/>is<sp/>something<sp/>to<sp/>do<sp/>and<sp/>avoid<sp/>duplicate<sp/>consecutive</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>flushes.<sp/>For<sp/>repeated<sp/>and<sp/>useless<sp/>calls<sp/>with<sp/>Z_FINISH,<sp/>we<sp/>keep</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>returning<sp/>Z_STREAM_END<sp/>instead<sp/>of<sp/>Z_BUF_ERROR.</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm-&gt;avail_in<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>flush<sp/>&lt;=<sp/>old_flush<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flush<sp/>!=<sp/><ref refid="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" kindref="member">Z_FINISH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a0fcc2fe26110263e812ce50919b6a5c1" kindref="member">ERR_RETURN</ref>(strm,<sp/><ref refid="zlib_8h_1a425e2f0664e1b1f75bf2bffab88d353d" kindref="member">Z_BUF_ERROR</ref>);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>User<sp/>must<sp/>not<sp/>provide<sp/>more<sp/>input<sp/>after<sp/>the<sp/>first<sp/>FINISH:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>==<sp/><ref refid="deflate_8h_1a0474cba74b039aa45fe9412c1de86bed" kindref="member">FINISH_STATE</ref><sp/>&amp;&amp;<sp/>strm-&gt;avail_in<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a0fcc2fe26110263e812ce50919b6a5c1" kindref="member">ERR_RETURN</ref>(strm,<sp/><ref refid="zlib_8h_1a425e2f0664e1b1f75bf2bffab88d353d" kindref="member">Z_BUF_ERROR</ref>);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>a<sp/>new<sp/>block<sp/>or<sp/>continue<sp/>the<sp/>current<sp/>one.</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm-&gt;avail_in<sp/>!=<sp/>0<sp/>||<sp/>s-&gt;<ref refid="structinternal__state_1a3a826064126ee19a77f78919e2f9bb1e" kindref="member">lookahead</ref><sp/>!=<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(flush<sp/>!=<sp/><ref refid="zlib_8h_1ac3b62e37b9922d9496014515acd6083a" kindref="member">Z_NO_FLUSH</ref><sp/>&amp;&amp;<sp/>s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>!=<sp/><ref refid="deflate_8h_1a0474cba74b039aa45fe9412c1de86bed" kindref="member">FINISH_STATE</ref>))<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref><sp/>bstate;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bstate<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1a67219312df7fd2f86e06e6f14700eb28" kindref="member">strategy</ref><sp/>==<sp/><ref refid="zlib_8h_1a1eec3d3720ba91fd54fa08d2757c1785" kindref="member">Z_HUFFMAN_ONLY</ref><sp/>?<sp/>deflate_huff(s,<sp/>flush)<sp/>:</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;strategy<sp/>==<sp/><ref refid="zlib_8h_1af52c1220e7193d2da78332d75f9251ea" kindref="member">Z_RLE</ref><sp/>?<sp/>deflate_rle(s,<sp/>flush)<sp/>:</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(configuration_table[s-&gt;level].func))(s,<sp/>flush));</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bstate<sp/>==<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454a5ff14f05c1ba145fc4da40fb50211140" kindref="member">finish_started</ref><sp/>||<sp/>bstate<sp/>==<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454af1f0edbb0d9d8272a762de3b7be0b50c" kindref="member">finish_done</ref>)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref><sp/>=<sp/><ref refid="deflate_8h_1a0474cba74b039aa45fe9412c1de86bed" kindref="member">FINISH_STATE</ref>;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bstate<sp/>==<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454aa05dd4e7c2f875eee52a6568c244c1e4" kindref="member">need_more</ref><sp/>||<sp/>bstate<sp/>==<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454a5ff14f05c1ba145fc4da40fb50211140" kindref="member">finish_started</ref>)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm-&gt;avail_out<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1aa9517fd4120306e1f07a05563a6fe40b" kindref="member">last_flush</ref><sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">/*<sp/>avoid<sp/>BUF_ERROR<sp/>next<sp/>call,<sp/>see<sp/>above<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref>;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>flush<sp/>!=<sp/>Z_NO_FLUSH<sp/>&amp;&amp;<sp/>avail_out<sp/>==<sp/>0,<sp/>the<sp/>next<sp/>call</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>deflate<sp/>should<sp/>use<sp/>the<sp/>same<sp/>flush<sp/>parameter<sp/>to<sp/>make<sp/>sure</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>that<sp/>the<sp/>flush<sp/>is<sp/>complete.<sp/>So<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>output<sp/>an</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>empty<sp/>block<sp/>here,<sp/>this<sp/>will<sp/>be<sp/>done<sp/>at<sp/>next<sp/>call.<sp/>This<sp/>also</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>ensures<sp/>that<sp/>for<sp/>a<sp/>very<sp/>small<sp/>output<sp/>buffer,<sp/>we<sp/>emit<sp/>at<sp/>most</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>one<sp/>empty<sp/>block.</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bstate<sp/>==<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454a94dca976f7dcfb0605e086068f09daa1" kindref="member">block_done</ref>)<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flush<sp/>==<sp/><ref refid="zlib_8h_1adbd49089a5611593f05ac80c9e12cc7f" kindref="member">Z_PARTIAL_FLUSH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1aaa5b2cba523b97783c33e48182e08ce5" kindref="member">_tr_align</ref>(s);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flush<sp/>!=<sp/><ref refid="zlib_8h_1a73e5f4c24156c63ba863014396685062" kindref="member">Z_BLOCK</ref>)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>FULL_FLUSH<sp/>or<sp/>SYNC_FLUSH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1ab65c8957ea36ee7dea4ae237d89e69c2" kindref="member">_tr_stored_block</ref>(s,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)0,<sp/>0L,<sp/>0);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>a<sp/>full<sp/>flush,<sp/>this<sp/>empty<sp/>block<sp/>will<sp/>be<sp/>recognized</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>as<sp/>a<sp/>special<sp/>marker<sp/>by<sp/>inflate_sync().</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flush<sp/>==<sp/><ref refid="zlib_8h_1aed4fbb038c3973aacf52fccffbc44b53" kindref="member">Z_FULL_FLUSH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1af328dc05f080f25747abf0edd75b6251" kindref="member">CLEAR_HASH</ref>(s);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>forget<sp/>history<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1a3a826064126ee19a77f78919e2f9bb1e" kindref="member">lookahead</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a946579b9b86ee466424ffb0a67eb7060" kindref="member">strstart</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a4ba16849758dfa969066693ca2cae880" kindref="member">block_start</ref><sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flush_pending(strm);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm-&gt;avail_out<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1aa9517fd4120306e1f07a05563a6fe40b" kindref="member">last_flush</ref><sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">/*<sp/>avoid<sp/>BUF_ERROR<sp/>at<sp/>next<sp/>call,<sp/>see<sp/>above<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref>;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(strm-&gt;avail_out<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;bug2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flush<sp/>!=<sp/><ref refid="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" kindref="member">Z_FINISH</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref>;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ae80327ea7ad4ad0ef5baeef5ef3a6807" kindref="member">wrap</ref><sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a7d94a4a852228a899864a0053162e7a8" kindref="member">Z_STREAM_END</ref>;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>the<sp/>trailer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GZIP</highlight></codeline>
<codeline lineno="870"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ae80327ea7ad4ad0ef5baeef5ef3a6807" kindref="member">wrap</ref><sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)(strm-&gt;adler<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)((strm-&gt;adler<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)((strm-&gt;adler<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)((strm-&gt;adler<sp/>&gt;&gt;<sp/>24)<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)(strm-&gt;total_in<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)((strm-&gt;total_in<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)((strm-&gt;total_in<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)((strm-&gt;total_in<sp/>&gt;&gt;<sp/>24)<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="882"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>putShortMSB(s,<sp/>(<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)(strm-&gt;adler<sp/>&gt;&gt;<sp/>16));</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>putShortMSB(s,<sp/>(<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)(strm-&gt;adler<sp/>&amp;<sp/>0xffff));</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>flush_pending(strm);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>avail_out<sp/>is<sp/>zero,<sp/>the<sp/>application<sp/>will<sp/>call<sp/>deflate<sp/>again</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>flush<sp/>the<sp/>rest.</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structinternal__state_1ae80327ea7ad4ad0ef5baeef5ef3a6807" kindref="member">wrap</ref><sp/>&gt;<sp/>0)<sp/>s-&gt;<ref refid="structinternal__state_1ae80327ea7ad4ad0ef5baeef5ef3a6807" kindref="member">wrap</ref><sp/>=<sp/>-s-&gt;<ref refid="structinternal__state_1ae80327ea7ad4ad0ef5baeef5ef3a6807" kindref="member">wrap</ref>;<sp/></highlight><highlight class="comment">/*<sp/>write<sp/>the<sp/>trailer<sp/>only<sp/>once!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;<ref refid="structinternal__state_1ac92f5b70c269be4685539daef10b15a3" kindref="member">pending</ref><sp/>!=<sp/>0<sp/>?<sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref><sp/>:<sp/><ref refid="zlib_8h_1a7d94a4a852228a899864a0053162e7a8" kindref="member">Z_STREAM_END</ref>;</highlight></codeline>
<codeline lineno="892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a6b32d6d4fa68d8aea22445f97048cf67" kindref="member">deflateEnd</ref><sp/>(strm)</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="897"><highlight class="normal">{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structinternal__state_1a8756cacdbac452a2633f87e06fae6c52" kindref="member">status</ref>;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>strm-&gt;state<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>strm-&gt;state-&gt;status;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/><ref refid="deflate_8h_1a96cb576b9a3b5f8cb90bd4bb7ee449d2" kindref="member">INIT_STATE</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>!=<sp/><ref refid="deflate_8h_1affc01bd472ba5f5ad1519c40e20a3778" kindref="member">EXTRA_STATE</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>!=<sp/><ref refid="deflate_8h_1acec08b85e51457d214b759d489785e99" kindref="member">NAME_STATE</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>!=<sp/><ref refid="deflate_8h_1a06c47936258e98a0c4ca38dd31a5f6c7" kindref="member">COMMENT_STATE</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>!=<sp/><ref refid="deflate_8h_1a09dffa22705cbe81ca94b8b379d43682" kindref="member">HCRC_STATE</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>!=<sp/><ref refid="deflate_8h_1a4821f69a5605c2618cd4dc4d3f60979c" kindref="member">BUSY_STATE</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>!=<sp/><ref refid="deflate_8h_1a0474cba74b039aa45fe9412c1de86bed" kindref="member">FINISH_STATE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Deallocate<sp/>in<sp/>reverse<sp/>order<sp/>of<sp/>allocations:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a8a5cef3599266dcaa129ed959a42bcf6" kindref="member">TRY_FREE</ref>(strm,<sp/>strm-&gt;state-&gt;pending_buf);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a8a5cef3599266dcaa129ed959a42bcf6" kindref="member">TRY_FREE</ref>(strm,<sp/>strm-&gt;state-&gt;head);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a8a5cef3599266dcaa129ed959a42bcf6" kindref="member">TRY_FREE</ref>(strm,<sp/>strm-&gt;state-&gt;prev);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a8a5cef3599266dcaa129ed959a42bcf6" kindref="member">TRY_FREE</ref>(strm,<sp/>strm-&gt;state-&gt;window);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a71d7c4f186ae3a055367c92db5a8ab18" kindref="member">ZFREE</ref>(strm,<sp/>strm-&gt;state);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;state<sp/>=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status<sp/>==<sp/><ref refid="deflate_8h_1a4821f69a5605c2618cd4dc4d3f60979c" kindref="member">BUSY_STATE</ref><sp/>?<sp/><ref refid="zlib_8h_1a9eda83d428a71752d148f38b5dbe04f2" kindref="member">Z_DATA_ERROR</ref><sp/>:<sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref>;</highlight></codeline>
<codeline lineno="923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/>*<sp/>Copy<sp/>the<sp/>source<sp/>state<sp/>to<sp/>the<sp/>destination<sp/>state.</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/>*<sp/>To<sp/>simplify<sp/>the<sp/>source,<sp/>this<sp/>is<sp/>not<sp/>supported<sp/>for<sp/>16-bit<sp/>MSDOS<sp/>(which</highlight></codeline>
<codeline lineno="928"><highlight class="comment"><sp/>*<sp/>doesn&apos;t<sp/>have<sp/>enough<sp/>memory<sp/>anyway<sp/>to<sp/>duplicate<sp/>compression<sp/>states).</highlight></codeline>
<codeline lineno="929"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1aa38b4c952efce070b3dbb6fdc41d9cf4" kindref="member">deflateCopy</ref><sp/>(dest,<sp/>source)</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>dest;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>source;</highlight></codeline>
<codeline lineno="933"><highlight class="normal">{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MAXSEG_64K</highlight></codeline>
<codeline lineno="935"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="937"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*ds;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*ss;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref><sp/>*overlay;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(source<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>dest<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>source-&gt;<ref refid="structz__stream__s_1aff003303512a6c0abd17440abdf66956" kindref="member">state</ref><sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>=<sp/>source-&gt;<ref refid="structz__stream__s_1aff003303512a6c0abd17440abdf66956" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8c_1a20971e15496f76249b852c9764cf38ef" kindref="member">zmemcpy</ref>(dest,<sp/>source,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structz__stream__s" kindref="compound">z_stream</ref>));</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>ds<sp/>=<sp/>(<ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*)<sp/><ref refid="zutil_8h_1a39679d03501d691bdfc62a3324cb9548" kindref="member">ZALLOC</ref>(dest,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structinternal__state" kindref="compound">deflate_state</ref>));</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ds<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1ae2be6be871e377c6e2c25a7296ce320c" kindref="member">Z_MEM_ERROR</ref>;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>dest-&gt;state<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinternal__state" kindref="compound">internal_state</ref><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*)<sp/>ds;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8c_1a20971e15496f76249b852c9764cf38ef" kindref="member">zmemcpy</ref>(ds,<sp/>ss,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structinternal__state" kindref="compound">deflate_state</ref>));</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>ds-&gt;<ref refid="structinternal__state_1aaf558a49ab8c6caea3d131c6b913db42" kindref="member">strm</ref><sp/>=<sp/>dest;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>ds-&gt;<ref refid="structinternal__state_1a8d5cccc7e4dd85927c84bb8efc645533" kindref="member">window</ref><sp/>=<sp/>(<ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*)<sp/><ref refid="zutil_8h_1a39679d03501d691bdfc62a3324cb9548" kindref="member">ZALLOC</ref>(dest,<sp/>ds-&gt;<ref refid="structinternal__state_1a875579bf4d0e9d9f9c04ff288d22bb90" kindref="member">w_size</ref>,<sp/>2*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>));</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>ds-&gt;<ref refid="structinternal__state_1a93a7407be4c9df81f71a389eb1ff6c57" kindref="member">prev</ref><sp/><sp/><sp/>=<sp/>(<ref refid="deflate_8h_1a3e21105c8785a4c2b6f90ee1c6127e32" kindref="member">Posf</ref><sp/>*)<sp/><sp/><ref refid="zutil_8h_1a39679d03501d691bdfc62a3324cb9548" kindref="member">ZALLOC</ref>(dest,<sp/>ds-&gt;<ref refid="structinternal__state_1a875579bf4d0e9d9f9c04ff288d22bb90" kindref="member">w_size</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="deflate_8h_1a80a8610ae675eaeead82013bacde10a1" kindref="member">Pos</ref>));</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>ds-&gt;<ref refid="structinternal__state_1aafd9ba338599f15de29386ff7a0218f4" kindref="member">head</ref><sp/><sp/><sp/>=<sp/>(<ref refid="deflate_8h_1a3e21105c8785a4c2b6f90ee1c6127e32" kindref="member">Posf</ref><sp/>*)<sp/><sp/><ref refid="zutil_8h_1a39679d03501d691bdfc62a3324cb9548" kindref="member">ZALLOC</ref>(dest,<sp/>ds-&gt;<ref refid="structinternal__state_1aad05d6c37eb87eefafca51e05468f349" kindref="member">hash_size</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="deflate_8h_1a80a8610ae675eaeead82013bacde10a1" kindref="member">Pos</ref>));</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>overlay<sp/>=<sp/>(<ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref><sp/>*)<sp/><ref refid="zutil_8h_1a39679d03501d691bdfc62a3324cb9548" kindref="member">ZALLOC</ref>(dest,<sp/>ds-&gt;<ref refid="structinternal__state_1a25ad7fc0094e412144b4201df2126bbb" kindref="member">lit_bufsize</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)+2);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>ds-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref><sp/>=<sp/>(<ref refid="zutil_8h_1abb6338932978dccbf8a6c3d44c10eff1" kindref="member">uchf</ref><sp/>*)<sp/>overlay;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ds-&gt;<ref refid="structinternal__state_1a8d5cccc7e4dd85927c84bb8efc645533" kindref="member">window</ref><sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>ds-&gt;<ref refid="structinternal__state_1a93a7407be4c9df81f71a389eb1ff6c57" kindref="member">prev</ref><sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>ds-&gt;<ref refid="structinternal__state_1aafd9ba338599f15de29386ff7a0218f4" kindref="member">head</ref><sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ds-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref><sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a6b32d6d4fa68d8aea22445f97048cf67" kindref="member">deflateEnd</ref><sp/>(dest);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1ae2be6be871e377c6e2c25a7296ce320c" kindref="member">Z_MEM_ERROR</ref>;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>following<sp/>zmemcpy<sp/>do<sp/>not<sp/>work<sp/>for<sp/>16-bit<sp/>MSDOS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8c_1a20971e15496f76249b852c9764cf38ef" kindref="member">zmemcpy</ref>(ds-&gt;<ref refid="structinternal__state_1a8d5cccc7e4dd85927c84bb8efc645533" kindref="member">window</ref>,<sp/>ss-&gt;<ref refid="structinternal__state_1a8d5cccc7e4dd85927c84bb8efc645533" kindref="member">window</ref>,<sp/>ds-&gt;<ref refid="structinternal__state_1a875579bf4d0e9d9f9c04ff288d22bb90" kindref="member">w_size</ref><sp/>*<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>));</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8c_1a20971e15496f76249b852c9764cf38ef" kindref="member">zmemcpy</ref>(ds-&gt;<ref refid="structinternal__state_1a93a7407be4c9df81f71a389eb1ff6c57" kindref="member">prev</ref>,<sp/>ss-&gt;<ref refid="structinternal__state_1a93a7407be4c9df81f71a389eb1ff6c57" kindref="member">prev</ref>,<sp/>ds-&gt;<ref refid="structinternal__state_1a875579bf4d0e9d9f9c04ff288d22bb90" kindref="member">w_size</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="deflate_8h_1a80a8610ae675eaeead82013bacde10a1" kindref="member">Pos</ref>));</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8c_1a20971e15496f76249b852c9764cf38ef" kindref="member">zmemcpy</ref>(ds-&gt;<ref refid="structinternal__state_1aafd9ba338599f15de29386ff7a0218f4" kindref="member">head</ref>,<sp/>ss-&gt;<ref refid="structinternal__state_1aafd9ba338599f15de29386ff7a0218f4" kindref="member">head</ref>,<sp/>ds-&gt;<ref refid="structinternal__state_1aad05d6c37eb87eefafca51e05468f349" kindref="member">hash_size</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="deflate_8h_1a80a8610ae675eaeead82013bacde10a1" kindref="member">Pos</ref>));</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8c_1a20971e15496f76249b852c9764cf38ef" kindref="member">zmemcpy</ref>(ds-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref>,<sp/>ss-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref>,<sp/>(<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)ds-&gt;<ref refid="structinternal__state_1a9100ecccf2f8bb474f0bcc7c69f55c27" kindref="member">pending_buf_size</ref>);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>ds-&gt;<ref refid="structinternal__state_1a6e15ed78675c3c7bdb312623b5eceb7a" kindref="member">pending_out</ref><sp/>=<sp/>ds-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref><sp/>+<sp/>(ss-&gt;<ref refid="structinternal__state_1a6e15ed78675c3c7bdb312623b5eceb7a" kindref="member">pending_out</ref><sp/>-<sp/>ss-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref>);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>ds-&gt;<ref refid="structinternal__state_1ac636c34c1c08dc9d2f9c199ce2caa99d" kindref="member">d_buf</ref><sp/>=<sp/>overlay<sp/>+<sp/>ds-&gt;<ref refid="structinternal__state_1a25ad7fc0094e412144b4201df2126bbb" kindref="member">lit_bufsize</ref>/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>ds-&gt;<ref refid="structinternal__state_1a5e6c4269e29696b192e02fd01381e400" kindref="member">l_buf</ref><sp/>=<sp/>ds-&gt;<ref refid="structinternal__state_1ae5f393e8d0d569da6038749768f65b94" kindref="member">pending_buf</ref><sp/>+<sp/>(1+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>))*ds-&gt;<ref refid="structinternal__state_1a25ad7fc0094e412144b4201df2126bbb" kindref="member">lit_bufsize</ref>;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>ds-&gt;<ref refid="structinternal__state_1a0266c4e0250652904e6b4908d8da84a9" kindref="member">l_desc</ref>.<ref refid="structtree__desc__s_1a5c79989c018b96c729e88e41f98a4920" kindref="member">dyn_tree</ref><sp/>=<sp/>ds-&gt;<ref refid="structinternal__state_1a0f46a2b397924eca1359c75bdbc4d4eb" kindref="member">dyn_ltree</ref>;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>ds-&gt;<ref refid="structinternal__state_1ab2fddb383d3055b6ec81c7fef14e99d8" kindref="member">d_desc</ref>.<ref refid="structtree__desc__s_1a5c79989c018b96c729e88e41f98a4920" kindref="member">dyn_tree</ref><sp/>=<sp/>ds-&gt;<ref refid="structinternal__state_1a095002ca3547cc7ae650e6c5ccd3fe19" kindref="member">dyn_dtree</ref>;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>ds-&gt;<ref refid="structinternal__state_1aa0e5da102c35a7e7d22dd1894039393b" kindref="member">bl_desc</ref>.<ref refid="structtree__desc__s_1a5c79989c018b96c729e88e41f98a4920" kindref="member">dyn_tree</ref><sp/>=<sp/>ds-&gt;<ref refid="structinternal__state_1afb1009e88b6cd04110a3eca850f608f8" kindref="member">bl_tree</ref>;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref>;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MAXSEG_64K<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="983"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="986"><highlight class="comment"><sp/>*<sp/>Read<sp/>a<sp/>new<sp/>buffer<sp/>from<sp/>the<sp/>current<sp/>input<sp/>stream,<sp/>update<sp/>the<sp/>adler32</highlight></codeline>
<codeline lineno="987"><highlight class="comment"><sp/>*<sp/>and<sp/>total<sp/>number<sp/>of<sp/>bytes<sp/>read.<sp/><sp/>All<sp/>deflate()<sp/>input<sp/>goes<sp/>through</highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/>*<sp/>this<sp/>function<sp/>so<sp/>some<sp/>applications<sp/>may<sp/>wish<sp/>to<sp/>modify<sp/>it<sp/>to<sp/>avoid</highlight></codeline>
<codeline lineno="989"><highlight class="comment"><sp/>*<sp/>allocating<sp/>a<sp/>large<sp/>strm-&gt;next_in<sp/>buffer<sp/>and<sp/>copying<sp/>from<sp/>it.</highlight></codeline>
<codeline lineno="990"><highlight class="comment"><sp/>*<sp/>(See<sp/>also<sp/>flush_pending()).</highlight></codeline>
<codeline lineno="991"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_buf(strm,<sp/>buf,<sp/>size)</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*buf;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="996"><highlight class="normal">{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strm-&gt;<ref refid="structz__stream__s_1a0cf177f50dbb49692f27480cbcfde794" kindref="member">avail_in</ref>;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>size)<sp/>len<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;avail_in<sp/><sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm-&gt;state-&gt;wrap<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;adler<sp/>=<sp/><ref refid="adler32_8c_1a5a72291922586b323fa442b9fe8549ec" kindref="member">adler32</ref>(strm-&gt;adler,<sp/>strm-&gt;next_in,<sp/>len);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GZIP</highlight></codeline>
<codeline lineno="1008"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm-&gt;state-&gt;wrap<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;adler<sp/>=<sp/><ref refid="crc32_8c_1a68c725fbf3dc9f3fe41995b2b8ba250b" kindref="member">crc32</ref>(strm-&gt;adler,<sp/>strm-&gt;next_in,<sp/>len);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1012"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8c_1a20971e15496f76249b852c9764cf38ef" kindref="member">zmemcpy</ref>(buf,<sp/>strm-&gt;next_in,<sp/>len);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;next_in<sp/><sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;total_in<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)len;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1020"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>the<sp/>&quot;longest<sp/>match&quot;<sp/>routines<sp/>for<sp/>a<sp/>new<sp/>zlib<sp/>stream</highlight></codeline>
<codeline lineno="1021"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lm_init<sp/>(s)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structinternal__state_1a4e45f5ef1c4d9d599a5fb11fa283806c" kindref="member">window_size</ref><sp/>=<sp/>(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)2L*s-&gt;w_size;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1af328dc05f080f25747abf0edd75b6251" kindref="member">CLEAR_HASH</ref>(s);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>default<sp/>configuration<sp/>parameters:</highlight></codeline>
<codeline lineno="1030"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;max_lazy_match<sp/><sp/><sp/>=<sp/>configuration_table[s-&gt;level].max_lazy;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;good_match<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>configuration_table[s-&gt;level].good_length;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;nice_match<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>configuration_table[s-&gt;level].nice_length;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;max_chain_length<sp/>=<sp/>configuration_table[s-&gt;level].max_chain;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;strstart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;block_start<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;lookahead<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;match_length<sp/>=<sp/>s-&gt;prev_length<sp/>=<sp/>MIN_MATCH-1;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;match_available<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;ins_h<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FASTEST</highlight></codeline>
<codeline lineno="1043"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>ASMV</highlight></codeline>
<codeline lineno="1044"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>match_init();<sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>the<sp/>asm<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1046"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1047"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FASTEST</highlight></codeline>
<codeline lineno="1050"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1051"><highlight class="comment"><sp/>*<sp/>Set<sp/>match_start<sp/>to<sp/>the<sp/>longest<sp/>match<sp/>starting<sp/>at<sp/>the<sp/>given<sp/>string<sp/>and</highlight></codeline>
<codeline lineno="1052"><highlight class="comment"><sp/>*<sp/>return<sp/>its<sp/>length.<sp/>Matches<sp/>shorter<sp/>or<sp/>equal<sp/>to<sp/>prev_length<sp/>are<sp/>discarded,</highlight></codeline>
<codeline lineno="1053"><highlight class="comment"><sp/>*<sp/>in<sp/>which<sp/>case<sp/>the<sp/>result<sp/>is<sp/>equal<sp/>to<sp/>prev_length<sp/>and<sp/>match_start<sp/>is</highlight></codeline>
<codeline lineno="1054"><highlight class="comment"><sp/>*<sp/>garbage.</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/>*<sp/>IN<sp/>assertions:<sp/>cur_match<sp/>is<sp/>the<sp/>head<sp/>of<sp/>the<sp/>hash<sp/>chain<sp/>for<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="1056"><highlight class="comment"><sp/>*<sp/><sp/><sp/>string<sp/>(strstart)<sp/>and<sp/>its<sp/>distance<sp/>is<sp/>&lt;=<sp/>MAX_DIST,<sp/>and<sp/>prev_length<sp/>&gt;=<sp/>1</highlight></codeline>
<codeline lineno="1057"><highlight class="comment"><sp/>*<sp/>OUT<sp/>assertion:<sp/>the<sp/>match<sp/>length<sp/>is<sp/>not<sp/>greater<sp/>than<sp/>s-&gt;lookahead.</highlight></codeline>
<codeline lineno="1058"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ASMV</highlight></codeline>
<codeline lineno="1060"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>For<sp/>80x86<sp/>and<sp/>680x0,<sp/>an<sp/>optimized<sp/>version<sp/>will<sp/>be<sp/>provided<sp/>in<sp/>match.asm<sp/>or</highlight></codeline>
<codeline lineno="1061"><highlight class="comment"><sp/>*<sp/>match.S.<sp/>The<sp/>code<sp/>will<sp/>be<sp/>functionally<sp/>equivalent.</highlight></codeline>
<codeline lineno="1062"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>longest_match(s,<sp/>cur_match)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1ada696b787a46d01634b6365afcec1a9e" kindref="member">IPos</ref><sp/>cur_match;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>match<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>chain_length<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1ab1ffa7feb159edec170574813fae3279" kindref="member">max_chain_length</ref>;</highlight><highlight class="comment">/*<sp/>max<sp/>hash<sp/>chain<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*scan<sp/>=<sp/>s-&gt;window<sp/>+<sp/>s-&gt;strstart;<sp/></highlight><highlight class="comment">/*<sp/>current<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*match;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>matched<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>of<sp/>current<sp/>match<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best_len<sp/>=<sp/>s-&gt;prev_length;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>best<sp/>match<sp/>length<sp/>so<sp/>far<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structinternal__state_1a39ab99e52138c0628f645bc1e0c69a04" kindref="member">nice_match</ref><sp/>=<sp/>s-&gt;nice_match;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>stop<sp/>if<sp/>match<sp/>long<sp/>enough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1ada696b787a46d01634b6365afcec1a9e" kindref="member">IPos</ref><sp/>limit<sp/>=<sp/>s-&gt;strstart<sp/>&gt;<sp/>(<ref refid="deflate_8h_1ada696b787a46d01634b6365afcec1a9e" kindref="member">IPos</ref>)<ref refid="deflate_8h_1a1bac515806be1e59d7306b4126b0cca4" kindref="member">MAX_DIST</ref>(s)<sp/>?</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart<sp/>-<sp/>(<ref refid="deflate_8h_1ada696b787a46d01634b6365afcec1a9e" kindref="member">IPos</ref>)<ref refid="deflate_8h_1a1bac515806be1e59d7306b4126b0cca4" kindref="member">MAX_DIST</ref>(s)<sp/>:<sp/><ref refid="deflate_8c_1a263efce0e5cda1d387a1a43f94715445" kindref="member">NIL</ref>;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>when<sp/>cur_match<sp/>becomes<sp/>&lt;=<sp/>limit.<sp/>To<sp/>simplify<sp/>the<sp/>code,</highlight></codeline>
<codeline lineno="1076"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>we<sp/>prevent<sp/>matches<sp/>with<sp/>the<sp/>string<sp/>of<sp/>window<sp/>index<sp/>0.</highlight></codeline>
<codeline lineno="1077"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a3e21105c8785a4c2b6f90ee1c6127e32" kindref="member">Posf</ref><sp/>*<ref refid="structinternal__state_1a93a7407be4c9df81f71a389eb1ff6c57" kindref="member">prev</ref><sp/>=<sp/>s-&gt;prev;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>wmask<sp/>=<sp/>s-&gt;w_mask;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>UNALIGNED_OK</highlight></codeline>
<codeline lineno="1082"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compare<sp/>two<sp/>bytes<sp/>at<sp/>a<sp/>time.<sp/>Note:<sp/>this<sp/>is<sp/>not<sp/>always<sp/>beneficial.</highlight></codeline>
<codeline lineno="1083"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Try<sp/>with<sp/>and<sp/>without<sp/>-DUNALIGNED_OK<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="1084"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*strend<sp/>=<sp/>s-&gt;window<sp/>+<sp/>s-&gt;strstart<sp/>+<sp/><ref refid="zutil_8h_1ab7a9188dce25dac8d3a970c01b89b0c6" kindref="member">MAX_MATCH</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref><sp/>scan_start<sp/>=<sp/>*(<ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref>*)scan;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref><sp/>scan_end<sp/><sp/><sp/>=<sp/>*(<ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref>*)(scan+best_len-1);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1089"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*strend<sp/>=<sp/>s-&gt;window<sp/>+<sp/>s-&gt;strstart<sp/>+<sp/><ref refid="zutil_8h_1ab7a9188dce25dac8d3a970c01b89b0c6" kindref="member">MAX_MATCH</ref>;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref><sp/>scan_end1<sp/><sp/>=<sp/>scan[best_len-1];</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref><sp/>scan_end<sp/><sp/><sp/>=<sp/>scan[best_len];</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1093"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>code<sp/>is<sp/>optimized<sp/>for<sp/>HASH_BITS<sp/>&gt;=<sp/>8<sp/>and<sp/>MAX_MATCH-2<sp/>multiple<sp/>of<sp/>16.</highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>It<sp/>is<sp/>easy<sp/>to<sp/>get<sp/>rid<sp/>of<sp/>this<sp/>optimization<sp/>if<sp/>necessary.</highlight></codeline>
<codeline lineno="1096"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(s-&gt;hash_bits<sp/>&gt;=<sp/>8<sp/>&amp;&amp;<sp/><ref refid="zutil_8h_1ab7a9188dce25dac8d3a970c01b89b0c6" kindref="member">MAX_MATCH</ref><sp/>==<sp/>258,<sp/></highlight><highlight class="stringliteral">&quot;Code<sp/>too<sp/>clever&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>not<sp/>waste<sp/>too<sp/>much<sp/>time<sp/>if<sp/>we<sp/>already<sp/>have<sp/>a<sp/>good<sp/>match:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;prev_length<sp/>&gt;=<sp/>s-&gt;good_match)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chain_length<sp/>&gt;&gt;=<sp/>2;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>not<sp/>look<sp/>for<sp/>matches<sp/>beyond<sp/>the<sp/>end<sp/>of<sp/>the<sp/>input.<sp/>This<sp/>is<sp/>necessary</highlight></codeline>
<codeline lineno="1104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>make<sp/>deflate<sp/>deterministic.</highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)nice_match<sp/>&gt;<sp/>s-&gt;lookahead)<sp/>nice_match<sp/>=<sp/>s-&gt;lookahead;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>((<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)s-&gt;strstart<sp/>&lt;=<sp/>s-&gt;window_size-<ref refid="deflate_8h_1aab627bcc7d38e658a93d395c50180cb8" kindref="member">MIN_LOOKAHEAD</ref>,<sp/></highlight><highlight class="stringliteral">&quot;need<sp/>lookahead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(cur_match<sp/>&lt;<sp/>s-&gt;<ref refid="structinternal__state_1a946579b9b86ee466424ffb0a67eb7060" kindref="member">strstart</ref>,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>future&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match<sp/>=<sp/>s-&gt;window<sp/>+<sp/>cur_match;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Skip<sp/>to<sp/>next<sp/>match<sp/>if<sp/>the<sp/>match<sp/>length<sp/>cannot<sp/>increase</highlight></codeline>
<codeline lineno="1115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>or<sp/>if<sp/>the<sp/>match<sp/>length<sp/>is<sp/>less<sp/>than<sp/>2.<sp/><sp/>Note<sp/>that<sp/>the<sp/>checks<sp/>below</highlight></codeline>
<codeline lineno="1116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>for<sp/>insufficient<sp/>lookahead<sp/>only<sp/>occur<sp/>occasionally<sp/>for<sp/>performance</highlight></codeline>
<codeline lineno="1117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>reasons.<sp/><sp/>Therefore<sp/>uninitialized<sp/>memory<sp/>will<sp/>be<sp/>accessed,<sp/>and</highlight></codeline>
<codeline lineno="1118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>conditional<sp/>jumps<sp/>will<sp/>be<sp/>made<sp/>that<sp/>depend<sp/>on<sp/>those<sp/>values.</highlight></codeline>
<codeline lineno="1119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>However<sp/>the<sp/>length<sp/>of<sp/>the<sp/>match<sp/>is<sp/>limited<sp/>to<sp/>the<sp/>lookahead,<sp/>so</highlight></codeline>
<codeline lineno="1120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>output<sp/>of<sp/>deflate<sp/>is<sp/>not<sp/>affected<sp/>by<sp/>the<sp/>uninitialized<sp/>values.</highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(UNALIGNED_OK)<sp/>&amp;&amp;<sp/>MAX_MATCH<sp/>==<sp/>258)</highlight></codeline>
<codeline lineno="1123"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>code<sp/>assumes<sp/>sizeof(unsigned<sp/>short)<sp/>==<sp/>2.<sp/>Do<sp/>not<sp/>use</highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>UNALIGNED_OK<sp/>if<sp/>your<sp/>compiler<sp/>uses<sp/>a<sp/>different<sp/>size.</highlight></codeline>
<codeline lineno="1125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*(<ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref>*)(match+best_len-1)<sp/>!=<sp/>scan_end<sp/>||</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref>*)match<sp/>!=<sp/>scan_start)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>is<sp/>not<sp/>necessary<sp/>to<sp/>compare<sp/>scan[2]<sp/>and<sp/>match[2]<sp/>since<sp/>they<sp/>are</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>always<sp/>equal<sp/>when<sp/>the<sp/>other<sp/>bytes<sp/>match,<sp/>given<sp/>that<sp/>the<sp/>hash<sp/>keys</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>are<sp/>equal<sp/>and<sp/>that<sp/>HASH_BITS<sp/>&gt;=<sp/>8.<sp/>Compare<sp/>2<sp/>bytes<sp/>at<sp/>a<sp/>time<sp/>at</highlight></codeline>
<codeline lineno="1132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>strstart+3,<sp/>+5,<sp/>...<sp/>up<sp/>to<sp/>strstart+257.<sp/>We<sp/>check<sp/>for<sp/>insufficient</highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>lookahead<sp/>only<sp/>every<sp/>4th<sp/>comparison;<sp/>the<sp/>128th<sp/>check<sp/>will<sp/>be<sp/>made</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>at<sp/>strstart+257.<sp/>If<sp/>MAX_MATCH-2<sp/>is<sp/>not<sp/>a<sp/>multiple<sp/>of<sp/>8,<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="1135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>necessary<sp/>to<sp/>put<sp/>more<sp/>guard<sp/>bytes<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>window,<sp/>or</highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>check<sp/>more<sp/>often<sp/>for<sp/>insufficient<sp/>lookahead.</highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(scan[2]<sp/>==<sp/>match[2],<sp/></highlight><highlight class="stringliteral">&quot;scan[2]?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan++,<sp/>match++;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*(<ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref>*)(scan+=2)<sp/>==<sp/>*(<ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref>*)(match+=2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref>*)(scan+=2)<sp/>==<sp/>*(<ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref>*)(match+=2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref>*)(scan+=2)<sp/>==<sp/>*(<ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref>*)(match+=2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref>*)(scan+=2)<sp/>==<sp/>*(<ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref>*)(match+=2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan<sp/>&lt;<sp/>strend);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>funny<sp/>&quot;do<sp/>{}&quot;<sp/>generates<sp/>better<sp/>code<sp/>on<sp/>most<sp/>compilers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Here,<sp/>scan<sp/>&lt;=<sp/>window+strstart+257<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(scan<sp/>&lt;=<sp/>s-&gt;<ref refid="structinternal__state_1a8d5cccc7e4dd85927c84bb8efc645533" kindref="member">window</ref>+(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(s-&gt;window_size-1),<sp/></highlight><highlight class="stringliteral">&quot;wild<sp/>scan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*scan<sp/>==<sp/>*match)<sp/>scan++;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>(<ref refid="zutil_8h_1ab7a9188dce25dac8d3a970c01b89b0c6" kindref="member">MAX_MATCH</ref><sp/>-<sp/>1)<sp/>-<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(strend-scan);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan<sp/>=<sp/>strend<sp/>-<sp/>(<ref refid="zutil_8h_1ab7a9188dce25dac8d3a970c01b89b0c6" kindref="member">MAX_MATCH</ref>-1);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>UNALIGNED_OK<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1156"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match[best_len]<sp/><sp/><sp/>!=<sp/>scan_end<sp/><sp/>||</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match[best_len-1]<sp/>!=<sp/>scan_end1<sp/>||</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*match<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/>*scan<sp/><sp/><sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*++match<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/>scan[1])<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>check<sp/>at<sp/>best_len-1<sp/>can<sp/>be<sp/>removed<sp/>because<sp/>it<sp/>will<sp/>be<sp/>made</highlight></codeline>
<codeline lineno="1163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>again<sp/>later.<sp/>(This<sp/>heuristic<sp/>is<sp/>not<sp/>always<sp/>a<sp/>win.)</highlight></codeline>
<codeline lineno="1164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>It<sp/>is<sp/>not<sp/>necessary<sp/>to<sp/>compare<sp/>scan[2]<sp/>and<sp/>match[2]<sp/>since<sp/>they</highlight></codeline>
<codeline lineno="1165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>are<sp/>always<sp/>equal<sp/>when<sp/>the<sp/>other<sp/>bytes<sp/>match,<sp/>given<sp/>that</highlight></codeline>
<codeline lineno="1166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>hash<sp/>keys<sp/>are<sp/>equal<sp/>and<sp/>that<sp/>HASH_BITS<sp/>&gt;=<sp/>8.</highlight></codeline>
<codeline lineno="1167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan<sp/>+=<sp/>2,<sp/>match++;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(*scan<sp/>==<sp/>*match,<sp/></highlight><highlight class="stringliteral">&quot;match[2]?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>check<sp/>for<sp/>insufficient<sp/>lookahead<sp/>only<sp/>every<sp/>8th<sp/>comparison;</highlight></codeline>
<codeline lineno="1172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>256th<sp/>check<sp/>will<sp/>be<sp/>made<sp/>at<sp/>strstart+258.</highlight></codeline>
<codeline lineno="1173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;<sp/>*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;<sp/>*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;<sp/>*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;<sp/>*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan<sp/>&lt;<sp/>strend);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(scan<sp/>&lt;=<sp/>s-&gt;<ref refid="structinternal__state_1a8d5cccc7e4dd85927c84bb8efc645533" kindref="member">window</ref>+(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(s-&gt;window_size-1),<sp/></highlight><highlight class="stringliteral">&quot;wild<sp/>scan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/><ref refid="zutil_8h_1ab7a9188dce25dac8d3a970c01b89b0c6" kindref="member">MAX_MATCH</ref><sp/>-<sp/>(int)(strend<sp/>-<sp/>scan);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan<sp/>=<sp/>strend<sp/>-<sp/><ref refid="zutil_8h_1ab7a9188dce25dac8d3a970c01b89b0c6" kindref="member">MAX_MATCH</ref>;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>UNALIGNED_OK<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1187"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>best_len)<sp/>{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_start<sp/>=<sp/>cur_match;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_len<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;=<sp/>nice_match)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>UNALIGNED_OK</highlight></codeline>
<codeline lineno="1193"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan_end<sp/>=<sp/>*(<ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref>*)(scan+best_len-1);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1195"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan_end1<sp/><sp/>=<sp/>scan[best_len-1];</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan_end<sp/><sp/><sp/>=<sp/>scan[best_len];</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1198"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((cur_match<sp/>=<sp/>prev[cur_match<sp/>&amp;<sp/>wmask])<sp/>&gt;<sp/>limit</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>--chain_length<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)best_len<sp/>&lt;=<sp/>s-&gt;lookahead)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)best_len;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;lookahead;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ASMV<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1206"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>FASTEST<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1208"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1210"><highlight class="comment"><sp/>*<sp/>Optimized<sp/>version<sp/>for<sp/>FASTEST<sp/>only</highlight></codeline>
<codeline lineno="1211"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>longest_match(s,<sp/>cur_match)</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1ada696b787a46d01634b6365afcec1a9e" kindref="member">IPos</ref><sp/>cur_match;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>match<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*scan<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1a8d5cccc7e4dd85927c84bb8efc645533" kindref="member">window</ref><sp/>+<sp/>s-&gt;strstart;<sp/></highlight><highlight class="comment">/*<sp/>current<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*match;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>matched<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>of<sp/>current<sp/>match<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*strend<sp/>=<sp/>s-&gt;window<sp/>+<sp/>s-&gt;strstart<sp/>+<sp/><ref refid="zutil_8h_1ab7a9188dce25dac8d3a970c01b89b0c6" kindref="member">MAX_MATCH</ref>;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>code<sp/>is<sp/>optimized<sp/>for<sp/>HASH_BITS<sp/>&gt;=<sp/>8<sp/>and<sp/>MAX_MATCH-2<sp/>multiple<sp/>of<sp/>16.</highlight></codeline>
<codeline lineno="1222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>It<sp/>is<sp/>easy<sp/>to<sp/>get<sp/>rid<sp/>of<sp/>this<sp/>optimization<sp/>if<sp/>necessary.</highlight></codeline>
<codeline lineno="1223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(s-&gt;hash_bits<sp/>&gt;=<sp/>8<sp/>&amp;&amp;<sp/>MAX_MATCH<sp/>==<sp/>258,<sp/></highlight><highlight class="stringliteral">&quot;Code<sp/>too<sp/>clever&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>((<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)s-&gt;strstart<sp/>&lt;=<sp/>s-&gt;window_size-<ref refid="deflate_8h_1aab627bcc7d38e658a93d395c50180cb8" kindref="member">MIN_LOOKAHEAD</ref>,<sp/></highlight><highlight class="stringliteral">&quot;need<sp/>lookahead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(cur_match<sp/>&lt;<sp/>s-&gt;<ref refid="structinternal__state_1a946579b9b86ee466424ffb0a67eb7060" kindref="member">strstart</ref>,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>future&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>match<sp/>=<sp/>s-&gt;window<sp/>+<sp/>cur_match;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>failure<sp/>if<sp/>the<sp/>match<sp/>length<sp/>is<sp/>less<sp/>than<sp/>2:</highlight></codeline>
<codeline lineno="1233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match[0]<sp/>!=<sp/>scan[0]<sp/>||<sp/>match[1]<sp/>!=<sp/>scan[1])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MIN_MATCH-1;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>check<sp/>at<sp/>best_len-1<sp/>can<sp/>be<sp/>removed<sp/>because<sp/>it<sp/>will<sp/>be<sp/>made</highlight></codeline>
<codeline lineno="1237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>again<sp/>later.<sp/>(This<sp/>heuristic<sp/>is<sp/>not<sp/>always<sp/>a<sp/>win.)</highlight></codeline>
<codeline lineno="1238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>It<sp/>is<sp/>not<sp/>necessary<sp/>to<sp/>compare<sp/>scan[2]<sp/>and<sp/>match[2]<sp/>since<sp/>they</highlight></codeline>
<codeline lineno="1239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>are<sp/>always<sp/>equal<sp/>when<sp/>the<sp/>other<sp/>bytes<sp/>match,<sp/>given<sp/>that</highlight></codeline>
<codeline lineno="1240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>hash<sp/>keys<sp/>are<sp/>equal<sp/>and<sp/>that<sp/>HASH_BITS<sp/>&gt;=<sp/>8.</highlight></codeline>
<codeline lineno="1241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>scan<sp/>+=<sp/>2,<sp/>match<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(*scan<sp/>==<sp/>*match,<sp/></highlight><highlight class="stringliteral">&quot;match[2]?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>check<sp/>for<sp/>insufficient<sp/>lookahead<sp/>only<sp/>every<sp/>8th<sp/>comparison;</highlight></codeline>
<codeline lineno="1246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>256th<sp/>check<sp/>will<sp/>be<sp/>made<sp/>at<sp/>strstart+258.</highlight></codeline>
<codeline lineno="1247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;<sp/>*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;<sp/>*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;<sp/>*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;<sp/>*++scan<sp/>==<sp/>*++match<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan<sp/>&lt;<sp/>strend);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(scan<sp/>&lt;=<sp/>s-&gt;<ref refid="structinternal__state_1a8d5cccc7e4dd85927c84bb8efc645533" kindref="member">window</ref>+(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(s-&gt;window_size-1),<sp/></highlight><highlight class="stringliteral">&quot;wild<sp/>scan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>MAX_MATCH<sp/>-<sp/>(int)(strend<sp/>-<sp/>scan);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>MIN_MATCH)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MIN_MATCH<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;match_start<sp/>=<sp/>cur_match;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)len<sp/>&lt;=<sp/>s-&gt;lookahead<sp/>?<sp/>(<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)len<sp/>:<sp/>s-&gt;lookahead;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>FASTEST<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1266"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="1268"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1269"><highlight class="comment"><sp/>*<sp/>Check<sp/>that<sp/>the<sp/>match<sp/>at<sp/>match_start<sp/>is<sp/>indeed<sp/>a<sp/>match.</highlight></codeline>
<codeline lineno="1270"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="deflate_8c_1a4041db99b23ca08963d3e5c284d837d6" kindref="member">check_match</ref>(s,<sp/>start,<sp/>match,<sp/>length)</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1ada696b787a46d01634b6365afcec1a9e" kindref="member">IPos</ref><sp/>start,<sp/>match;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>that<sp/>the<sp/>match<sp/>is<sp/>indeed<sp/>a<sp/>match<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="zutil_8c_1a25f235744ff0e6b602a6fed428b00aa1" kindref="member">zmemcmp</ref>(s-&gt;window<sp/>+<sp/>match,</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;window<sp/>+<sp/>start,<sp/>length)<sp/>!=<sp/><ref refid="deflate_8c_1a214c717b2e51e1993a749ac99df7de58" kindref="member">EQUAL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>start<sp/>%u,<sp/>match<sp/>%u,<sp/>length<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,<sp/>match,<sp/>length);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%c%c&quot;</highlight><highlight class="normal">,<sp/>s-&gt;window[match++],<sp/>s-&gt;window[start++]);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--length<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z_verbose<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;\\[%d,%d]&quot;</highlight><highlight class="normal">,<sp/>start-match,<sp/>length);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{<sp/>putc(s-&gt;window[start++],<sp/>stderr);<sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--length<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1292"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>check_match(s,<sp/>start,<sp/>match,<sp/>length)</highlight></codeline>
<codeline lineno="1293"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEBUG<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1294"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1296"><highlight class="comment"><sp/>*<sp/>Fill<sp/>the<sp/>window<sp/>when<sp/>the<sp/>lookahead<sp/>becomes<sp/>insufficient.</highlight></codeline>
<codeline lineno="1297"><highlight class="comment"><sp/>*<sp/>Updates<sp/>strstart<sp/>and<sp/>lookahead.</highlight></codeline>
<codeline lineno="1298"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1299"><highlight class="comment"><sp/>*<sp/>IN<sp/>assertion:<sp/>lookahead<sp/>&lt;<sp/>MIN_LOOKAHEAD</highlight></codeline>
<codeline lineno="1300"><highlight class="comment"><sp/>*<sp/>OUT<sp/>assertions:<sp/>strstart<sp/>&lt;=<sp/>window_size-MIN_LOOKAHEAD</highlight></codeline>
<codeline lineno="1301"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>At<sp/>least<sp/>one<sp/>byte<sp/>has<sp/>been<sp/>read,<sp/>or<sp/>avail_in<sp/>==<sp/>0;<sp/>reads<sp/>are</highlight></codeline>
<codeline lineno="1302"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>performed<sp/>for<sp/>at<sp/>least<sp/>two<sp/>bytes<sp/>(required<sp/>for<sp/>the<sp/>zip<sp/>translate_eol</highlight></codeline>
<codeline lineno="1303"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>option<sp/>--<sp/>not<sp/>supported<sp/>here).</highlight></codeline>
<codeline lineno="1304"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill_window(s)</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n,<sp/>m;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="deflate_8h_1a3e21105c8785a4c2b6f90ee1c6127e32" kindref="member">Posf</ref><sp/>*p;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>more;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Amount<sp/>of<sp/>free<sp/>space<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>window.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>wsize<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1a875579bf4d0e9d9f9c04ff288d22bb90" kindref="member">w_size</ref>;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>more<sp/>=<sp/>(unsigned)(s-&gt;window_size<sp/>-(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)s-&gt;lookahead<sp/>-(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)s-&gt;strstart);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Deal<sp/>with<sp/>!@#$%<sp/>64K<sp/>limit:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&lt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(more<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>s-&gt;strstart<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>s-&gt;lookahead<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>more<sp/>=<sp/>wsize;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(more<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(-1))<sp/>{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Very<sp/>unlikely,<sp/>but<sp/>possible<sp/>on<sp/>16<sp/>bit<sp/>machine<sp/>if</highlight></codeline>
<codeline lineno="1323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>strstart<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>lookahead<sp/>==<sp/>1<sp/>(input<sp/>done<sp/>a<sp/>byte<sp/>at<sp/>time)</highlight></codeline>
<codeline lineno="1324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>more--;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>window<sp/>is<sp/>almost<sp/>full<sp/>and<sp/>there<sp/>is<sp/>insufficient<sp/>lookahead,</highlight></codeline>
<codeline lineno="1330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>move<sp/>the<sp/>upper<sp/>half<sp/>to<sp/>the<sp/>lower<sp/>one<sp/>to<sp/>make<sp/>room<sp/>in<sp/>the<sp/>upper<sp/>half.</highlight></codeline>
<codeline lineno="1331"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;strstart<sp/>&gt;=<sp/>wsize+<ref refid="deflate_8h_1a1bac515806be1e59d7306b4126b0cca4" kindref="member">MAX_DIST</ref>(s))<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8c_1a20971e15496f76249b852c9764cf38ef" kindref="member">zmemcpy</ref>(s-&gt;window,<sp/>s-&gt;window+wsize,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)wsize);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_start<sp/>-=<sp/>wsize;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart<sp/><sp/><sp/><sp/>-=<sp/>wsize;<sp/></highlight><highlight class="comment">/*<sp/>we<sp/>now<sp/>have<sp/>strstart<sp/>&gt;=<sp/>MAX_DIST<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;block_start<sp/>-=<sp/>(long)<sp/>wsize;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Slide<sp/>the<sp/>hash<sp/>table<sp/>(could<sp/>be<sp/>avoided<sp/>with<sp/>32<sp/>bit<sp/>values</highlight></codeline>
<codeline lineno="1340"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>at<sp/>the<sp/>expense<sp/>of<sp/>memory<sp/>usage).<sp/>We<sp/>slide<sp/>even<sp/>when<sp/>level<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="1341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>keep<sp/>the<sp/>hash<sp/>table<sp/>consistent<sp/>if<sp/>we<sp/>switch<sp/>back<sp/>to<sp/>level<sp/>&gt;<sp/>0</highlight></codeline>
<codeline lineno="1342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>later.<sp/>(Using<sp/>level<sp/>0<sp/>permanently<sp/>is<sp/>not<sp/>an<sp/>optimal<sp/>usage<sp/>of</highlight></codeline>
<codeline lineno="1343"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zlib,<sp/>so<sp/>we<sp/>don&apos;t<sp/>care<sp/>about<sp/>this<sp/>pathological<sp/>case.)</highlight></codeline>
<codeline lineno="1344"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>s-&gt;hash_size;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;s-&gt;head[n];</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>*--p;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>(<ref refid="deflate_8h_1a80a8610ae675eaeead82013bacde10a1" kindref="member">Pos</ref>)(m<sp/>&gt;=<sp/>wsize<sp/>?<sp/>m-wsize<sp/>:<sp/><ref refid="deflate_8c_1a263efce0e5cda1d387a1a43f94715445" kindref="member">NIL</ref>);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--n);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>wsize;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FASTEST</highlight></codeline>
<codeline lineno="1354"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;s-&gt;prev[n];</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>*--p;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>(<ref refid="deflate_8h_1a80a8610ae675eaeead82013bacde10a1" kindref="member">Pos</ref>)(m<sp/>&gt;=<sp/>wsize<sp/>?<sp/>m-wsize<sp/>:<sp/><ref refid="deflate_8c_1a263efce0e5cda1d387a1a43f94715445" kindref="member">NIL</ref>);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>n<sp/>is<sp/>not<sp/>on<sp/>any<sp/>hash<sp/>chain,<sp/>prev[n]<sp/>is<sp/>garbage<sp/>but</highlight></codeline>
<codeline lineno="1359"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>its<sp/>value<sp/>will<sp/>never<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="1360"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--n);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1363"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>more<sp/>+=<sp/>wsize;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;strm-&gt;avail_in<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there<sp/>was<sp/>no<sp/>sliding:</highlight></codeline>
<codeline lineno="1368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>strstart<sp/>&lt;=<sp/>WSIZE+MAX_DIST-1<sp/>&amp;&amp;<sp/>lookahead<sp/>&lt;=<sp/>MIN_LOOKAHEAD<sp/>-<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>more<sp/>==<sp/>window_size<sp/>-<sp/>lookahead<sp/>-<sp/>strstart</highlight></codeline>
<codeline lineno="1370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>=&gt;<sp/>more<sp/>&gt;=<sp/>window_size<sp/>-<sp/>(MIN_LOOKAHEAD-1<sp/>+<sp/>WSIZE<sp/>+<sp/>MAX_DIST-1)</highlight></codeline>
<codeline lineno="1371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>=&gt;<sp/>more<sp/>&gt;=<sp/>window_size<sp/>-<sp/>2*WSIZE<sp/>+<sp/>2</highlight></codeline>
<codeline lineno="1372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>the<sp/>BIG_MEM<sp/>or<sp/>MMAP<sp/>case<sp/>(not<sp/>yet<sp/>supported),</highlight></codeline>
<codeline lineno="1373"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>window_size<sp/>==<sp/>input_size<sp/>+<sp/>MIN_LOOKAHEAD<sp/><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1374"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>strstart<sp/>+<sp/>s-&gt;lookahead<sp/>&lt;=<sp/>input_size<sp/>=&gt;<sp/>more<sp/>&gt;=<sp/>MIN_LOOKAHEAD.</highlight></codeline>
<codeline lineno="1375"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Otherwise,<sp/>window_size<sp/>==<sp/>2*WSIZE<sp/>so<sp/>more<sp/>&gt;=<sp/>2.</highlight></codeline>
<codeline lineno="1376"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>there<sp/>was<sp/>sliding,<sp/>more<sp/>&gt;=<sp/>WSIZE.<sp/>So<sp/>in<sp/>all<sp/>cases,<sp/>more<sp/>&gt;=<sp/>2.</highlight></codeline>
<codeline lineno="1377"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(more<sp/>&gt;=<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;more<sp/>&lt;<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>read_buf(s-&gt;strm,<sp/>s-&gt;window<sp/>+<sp/>s-&gt;strstart<sp/>+<sp/>s-&gt;lookahead,<sp/>more);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lookahead<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>hash<sp/>value<sp/>now<sp/>that<sp/>we<sp/>have<sp/>some<sp/>input:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>&gt;=<sp/>MIN_MATCH)<sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;ins_h<sp/>=<sp/>s-&gt;window[s-&gt;strstart];</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a44b283365d6ca10b7028e639c4a10e67" kindref="member">UPDATE_HASH</ref>(s,<sp/>s-&gt;ins_h,<sp/>s-&gt;window[s-&gt;strstart+1]);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MIN_MATCH<sp/>!=<sp/>3</highlight></codeline>
<codeline lineno="1388"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Call<sp/><ref refid="deflate_8c_1a44b283365d6ca10b7028e639c4a10e67" kindref="member">UPDATE_HASH</ref>()<sp/>MIN_MATCH-3<sp/>more<sp/>times</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1390"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>whole<sp/>input<sp/>has<sp/>less<sp/>than<sp/>MIN_MATCH<sp/>bytes,<sp/>ins_h<sp/>is<sp/>garbage,</highlight></codeline>
<codeline lineno="1392"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>but<sp/>this<sp/>is<sp/>not<sp/>important<sp/>since<sp/>only<sp/>literal<sp/>bytes<sp/>will<sp/>be<sp/>emitted.</highlight></codeline>
<codeline lineno="1393"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>&lt;<sp/><ref refid="deflate_8h_1aab627bcc7d38e658a93d395c50180cb8" kindref="member">MIN_LOOKAHEAD</ref><sp/>&amp;&amp;<sp/>s-&gt;strm-&gt;avail_in<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>WIN_INIT<sp/>bytes<sp/>after<sp/>the<sp/>end<sp/>of<sp/>the<sp/>current<sp/>data<sp/>have<sp/>never<sp/>been</highlight></codeline>
<codeline lineno="1398"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>written,<sp/>then<sp/>zero<sp/>those<sp/>bytes<sp/>in<sp/>order<sp/>to<sp/>avoid<sp/>memory<sp/>check<sp/>reports<sp/>of</highlight></codeline>
<codeline lineno="1399"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>use<sp/>of<sp/>uninitialized<sp/>(or<sp/>uninitialised<sp/>as<sp/>Julian<sp/>writes)<sp/>bytes<sp/>by</highlight></codeline>
<codeline lineno="1400"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>longest<sp/>match<sp/>routines.<sp/><sp/>Update<sp/>the<sp/>high<sp/>water<sp/>mark<sp/>for<sp/>the<sp/>next</highlight></codeline>
<codeline lineno="1401"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>time<sp/>through<sp/>here.<sp/><sp/>WIN_INIT<sp/>is<sp/>set<sp/>to<sp/>MAX_MATCH<sp/>since<sp/>the<sp/>longest<sp/>match</highlight></codeline>
<codeline lineno="1402"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>routines<sp/>allow<sp/>scanning<sp/>to<sp/>strstart<sp/>+<sp/>MAX_MATCH,<sp/>ignoring<sp/>lookahead.</highlight></codeline>
<codeline lineno="1403"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;high_water<sp/>&lt;<sp/>s-&gt;window_size)<sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref><sp/>curr<sp/>=<sp/>s-&gt;strstart<sp/>+<sp/>(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)(s-&gt;lookahead);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref><sp/>init;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;high_water<sp/>&lt;<sp/>curr)<sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Previous<sp/>high<sp/>water<sp/>mark<sp/>below<sp/>current<sp/>data<sp/>--<sp/>zero<sp/>WIN_INIT</highlight></codeline>
<codeline lineno="1410"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>bytes<sp/>or<sp/>up<sp/>to<sp/>end<sp/>of<sp/>window,<sp/>whichever<sp/>is<sp/>less.</highlight></codeline>
<codeline lineno="1411"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init<sp/>=<sp/>s-&gt;window_size<sp/>-<sp/>curr;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init<sp/>&gt;<sp/><ref refid="deflate_8h_1ac2836f69eb1551bb9699e4dd87dfbdc0" kindref="member">WIN_INIT</ref>)</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init<sp/>=<sp/><ref refid="deflate_8h_1ac2836f69eb1551bb9699e4dd87dfbdc0" kindref="member">WIN_INIT</ref>;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8c_1ae92187bde62d7c4e84b231576d291881" kindref="member">zmemzero</ref>(s-&gt;window<sp/>+<sp/>curr,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)init);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;high_water<sp/>=<sp/>curr<sp/>+<sp/>init;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;high_water<sp/>&lt;<sp/>(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)curr<sp/>+<sp/><ref refid="deflate_8h_1ac2836f69eb1551bb9699e4dd87dfbdc0" kindref="member">WIN_INIT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>High<sp/>water<sp/>mark<sp/>at<sp/>or<sp/>above<sp/>current<sp/>data,<sp/>but<sp/>below<sp/>current<sp/>data</highlight></codeline>
<codeline lineno="1420"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>plus<sp/>WIN_INIT<sp/>--<sp/>zero<sp/>out<sp/>to<sp/>current<sp/>data<sp/>plus<sp/>WIN_INIT,<sp/>or<sp/>up</highlight></codeline>
<codeline lineno="1421"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>end<sp/>of<sp/>window,<sp/>whichever<sp/>is<sp/>less.</highlight></codeline>
<codeline lineno="1422"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init<sp/>=<sp/>(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)curr<sp/>+<sp/><ref refid="deflate_8h_1ac2836f69eb1551bb9699e4dd87dfbdc0" kindref="member">WIN_INIT</ref><sp/>-<sp/>s-&gt;high_water;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(init<sp/>&gt;<sp/>s-&gt;window_size<sp/>-<sp/>s-&gt;high_water)</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init<sp/>=<sp/>s-&gt;window_size<sp/>-<sp/>s-&gt;high_water;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8c_1ae92187bde62d7c4e84b231576d291881" kindref="member">zmemzero</ref>(s-&gt;window<sp/>+<sp/>s-&gt;high_water,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)init);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;high_water<sp/>+=<sp/>init;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1433"><highlight class="comment"><sp/>*<sp/>Flush<sp/>the<sp/>current<sp/>block,<sp/>with<sp/>given<sp/>end-of-file<sp/>flag.</highlight></codeline>
<codeline lineno="1434"><highlight class="comment"><sp/>*<sp/>IN<sp/>assertion:<sp/>strstart<sp/>is<sp/>set<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>current<sp/>match.</highlight></codeline>
<codeline lineno="1435"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLUSH_BLOCK_ONLY(s,<sp/>last)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1437"><highlight class="preprocessor"><sp/><sp/><sp/>_tr_flush_block(s,<sp/>(s-&gt;block_start<sp/>&gt;=<sp/>0L<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="1438"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(charf<sp/>*)&amp;s-&gt;window[(unsigned)s-&gt;block_start]<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="1439"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(charf<sp/>*)Z_NULL),<sp/>\</highlight></codeline>
<codeline lineno="1440"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ulg)((long)s-&gt;strstart<sp/>-<sp/>s-&gt;block_start),<sp/>\</highlight></codeline>
<codeline lineno="1441"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(last));<sp/>\</highlight></codeline>
<codeline lineno="1442"><highlight class="preprocessor"><sp/><sp/><sp/>s-&gt;block_start<sp/>=<sp/>s-&gt;strstart;<sp/>\</highlight></codeline>
<codeline lineno="1443"><highlight class="preprocessor"><sp/><sp/><sp/>flush_pending(s-&gt;strm);<sp/>\</highlight></codeline>
<codeline lineno="1444"><highlight class="preprocessor"><sp/><sp/><sp/>Tracev((stderr,&quot;[FLUSH]&quot;));<sp/>\</highlight></codeline>
<codeline lineno="1445"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="1446"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Same<sp/>but<sp/>force<sp/>premature<sp/>exit<sp/>if<sp/>necessary.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLUSH_BLOCK(s,<sp/>last)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1449"><highlight class="preprocessor"><sp/><sp/><sp/>FLUSH_BLOCK_ONLY(s,<sp/>last);<sp/>\</highlight></codeline>
<codeline lineno="1450"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(s-&gt;strm-&gt;avail_out<sp/>==<sp/>0)<sp/>return<sp/>(last)<sp/>?<sp/>finish_started<sp/>:<sp/>need_more;<sp/>\</highlight></codeline>
<codeline lineno="1451"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="1452"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1454"><highlight class="comment"><sp/>*<sp/>Copy<sp/>without<sp/>compression<sp/>as<sp/>much<sp/>as<sp/>possible<sp/>from<sp/>the<sp/>input<sp/>stream,<sp/>return</highlight></codeline>
<codeline lineno="1455"><highlight class="comment"><sp/>*<sp/>the<sp/>current<sp/>block<sp/>state.</highlight></codeline>
<codeline lineno="1456"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>does<sp/>not<sp/>insert<sp/>new<sp/>strings<sp/>in<sp/>the<sp/>dictionary<sp/>since</highlight></codeline>
<codeline lineno="1457"><highlight class="comment"><sp/>*<sp/>uncompressible<sp/>data<sp/>is<sp/>probably<sp/>not<sp/>useful.<sp/>This<sp/>function<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="1458"><highlight class="comment"><sp/>*<sp/>only<sp/>for<sp/>the<sp/>level=0<sp/>compression<sp/>option.</highlight></codeline>
<codeline lineno="1459"><highlight class="comment"><sp/>*<sp/>NOTE:<sp/>this<sp/>function<sp/>should<sp/>be<sp/>optimized<sp/>to<sp/>avoid<sp/>extra<sp/>copying<sp/>from</highlight></codeline>
<codeline lineno="1460"><highlight class="comment"><sp/>*<sp/>window<sp/>to<sp/>pending_buf.</highlight></codeline>
<codeline lineno="1461"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref><sp/>deflate_stored(s,<sp/>flush)</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stored<sp/>blocks<sp/>are<sp/>limited<sp/>to<sp/>0xffff<sp/>bytes,<sp/>pending_buf<sp/>is<sp/>limited</highlight></codeline>
<codeline lineno="1467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>pending_buf_size,<sp/>and<sp/>each<sp/>stored<sp/>block<sp/>has<sp/>a<sp/>5<sp/>byte<sp/>header:</highlight></codeline>
<codeline lineno="1468"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref><sp/>max_block_size<sp/>=<sp/>0xffff;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref><sp/>max_start;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_block_size<sp/>&gt;<sp/>s-&gt;pending_buf_size<sp/>-<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_block_size<sp/>=<sp/>s-&gt;<ref refid="structinternal__state_1a9100ecccf2f8bb474f0bcc7c69f55c27" kindref="member">pending_buf_size</ref><sp/>-<sp/>5;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>as<sp/>much<sp/>as<sp/>possible<sp/>from<sp/>input<sp/>to<sp/>output:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fill<sp/>the<sp/>window<sp/>as<sp/>much<sp/>as<sp/>possible:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(s-&gt;strstart<sp/>&lt;<sp/>s-&gt;w_size+<ref refid="deflate_8h_1a1bac515806be1e59d7306b4126b0cca4" kindref="member">MAX_DIST</ref>(s)<sp/>||</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;block_start<sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)s-&gt;w_size,<sp/></highlight><highlight class="stringliteral">&quot;slide<sp/>too<sp/>late&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_window(s);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>flush<sp/>==<sp/><ref refid="zlib_8h_1ac3b62e37b9922d9496014515acd6083a" kindref="member">Z_NO_FLUSH</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454aa05dd4e7c2f875eee52a6568c244c1e4" kindref="member">need_more</ref>;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>flush<sp/>the<sp/>current<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(s-&gt;block_start<sp/>&gt;=<sp/>0L,<sp/></highlight><highlight class="stringliteral">&quot;block<sp/>gone&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart<sp/>+=<sp/>s-&gt;lookahead;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lookahead<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>a<sp/>stored<sp/>block<sp/>if<sp/>pending_buf<sp/>will<sp/>be<sp/>full:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_start<sp/>=<sp/>s-&gt;block_start<sp/>+<sp/>max_block_size;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;strstart<sp/>==<sp/>0<sp/>||<sp/>(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)s-&gt;strstart<sp/>&gt;=<sp/>max_start)<sp/>{</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>strstart<sp/>==<sp/>0<sp/>is<sp/>possible<sp/>when<sp/>wraparound<sp/>on<sp/>16-bit<sp/>machine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lookahead<sp/>=<sp/>(<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)(s-&gt;strstart<sp/>-<sp/>max_start);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart<sp/>=<sp/>(<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)max_start;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1aa06152b875cc54ba4389f31444163886" kindref="member">FLUSH_BLOCK</ref>(s,<sp/>0);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flush<sp/>if<sp/>we<sp/>may<sp/>have<sp/>to<sp/>slide,<sp/>otherwise<sp/>block_start<sp/>may<sp/>become</highlight></codeline>
<codeline lineno="1503"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>negative<sp/>and<sp/>the<sp/>data<sp/>will<sp/>be<sp/>gone:</highlight></codeline>
<codeline lineno="1504"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;strstart<sp/>-<sp/>(<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)s-&gt;block_start<sp/>&gt;=<sp/><ref refid="deflate_8h_1a1bac515806be1e59d7306b4126b0cca4" kindref="member">MAX_DIST</ref>(s))<sp/>{</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1aa06152b875cc54ba4389f31444163886" kindref="member">FLUSH_BLOCK</ref>(s,<sp/>0);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1aa06152b875cc54ba4389f31444163886" kindref="member">FLUSH_BLOCK</ref>(s,<sp/>flush<sp/>==<sp/><ref refid="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" kindref="member">Z_FINISH</ref>);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flush<sp/>==<sp/><ref refid="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" kindref="member">Z_FINISH</ref><sp/>?<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454af1f0edbb0d9d8272a762de3b7be0b50c" kindref="member">finish_done</ref><sp/>:<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454a94dca976f7dcfb0605e086068f09daa1" kindref="member">block_done</ref>;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1514"><highlight class="comment"><sp/>*<sp/>Compress<sp/>as<sp/>much<sp/>as<sp/>possible<sp/>from<sp/>the<sp/>input<sp/>stream,<sp/>return<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="1515"><highlight class="comment"><sp/>*<sp/>block<sp/>state.</highlight></codeline>
<codeline lineno="1516"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>does<sp/>not<sp/>perform<sp/>lazy<sp/>evaluation<sp/>of<sp/>matches<sp/>and<sp/>inserts</highlight></codeline>
<codeline lineno="1517"><highlight class="comment"><sp/>*<sp/>new<sp/>strings<sp/>in<sp/>the<sp/>dictionary<sp/>only<sp/>for<sp/>unmatched<sp/>strings<sp/>or<sp/>for<sp/>short</highlight></codeline>
<codeline lineno="1518"><highlight class="comment"><sp/>*<sp/>matches.<sp/>It<sp/>is<sp/>used<sp/>only<sp/>for<sp/>the<sp/>fast<sp/>compression<sp/>options.</highlight></codeline>
<codeline lineno="1519"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref><sp/>deflate_fast(s,<sp/>flush)</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1ada696b787a46d01634b6365afcec1a9e" kindref="member">IPos</ref><sp/>hash_head;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>head<sp/>of<sp/>the<sp/>hash<sp/>chain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bflush;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>if<sp/>current<sp/>block<sp/>must<sp/>be<sp/>flushed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>that<sp/>we<sp/>always<sp/>have<sp/>enough<sp/>lookahead,<sp/>except</highlight></codeline>
<codeline lineno="1529"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>input<sp/>file.<sp/>We<sp/>need<sp/>MAX_MATCH<sp/>bytes</highlight></codeline>
<codeline lineno="1530"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>for<sp/>the<sp/>next<sp/>match,<sp/>plus<sp/>MIN_MATCH<sp/>bytes<sp/>to<sp/>insert<sp/>the</highlight></codeline>
<codeline lineno="1531"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>string<sp/>following<sp/>the<sp/>next<sp/>match.</highlight></codeline>
<codeline lineno="1532"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>&lt;<sp/><ref refid="deflate_8h_1aab627bcc7d38e658a93d395c50180cb8" kindref="member">MIN_LOOKAHEAD</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_window(s);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>&lt;<sp/><ref refid="deflate_8h_1aab627bcc7d38e658a93d395c50180cb8" kindref="member">MIN_LOOKAHEAD</ref><sp/>&amp;&amp;<sp/>flush<sp/>==<sp/><ref refid="zlib_8h_1ac3b62e37b9922d9496014515acd6083a" kindref="member">Z_NO_FLUSH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454aa05dd4e7c2f875eee52a6568c244c1e4" kindref="member">need_more</ref>;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>flush<sp/>the<sp/>current<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>the<sp/>string<sp/>window[strstart<sp/>..<sp/>strstart+2]<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="1542"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>dictionary,<sp/>and<sp/>set<sp/>hash_head<sp/>to<sp/>the<sp/>head<sp/>of<sp/>the<sp/>hash<sp/>chain:</highlight></codeline>
<codeline lineno="1543"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_head<sp/>=<sp/><ref refid="deflate_8c_1a263efce0e5cda1d387a1a43f94715445" kindref="member">NIL</ref>;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>&gt;=<sp/>MIN_MATCH)<sp/>{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a52d7ca8e864a07c0ba4a25d04588168b" kindref="member">INSERT_STRING</ref>(s,<sp/>s-&gt;strstart,<sp/>hash_head);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>longest<sp/>match,<sp/>discarding<sp/>those<sp/>&lt;=<sp/>prev_length.</highlight></codeline>
<codeline lineno="1550"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>At<sp/>this<sp/>point<sp/>we<sp/>have<sp/>always<sp/>match_length<sp/>&lt;<sp/>MIN_MATCH</highlight></codeline>
<codeline lineno="1551"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash_head<sp/>!=<sp/><ref refid="deflate_8c_1a263efce0e5cda1d387a1a43f94715445" kindref="member">NIL</ref><sp/>&amp;&amp;<sp/>s-&gt;strstart<sp/>-<sp/>hash_head<sp/>&lt;=<sp/><ref refid="deflate_8h_1a1bac515806be1e59d7306b4126b0cca4" kindref="member">MAX_DIST</ref>(s))<sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>simplify<sp/>the<sp/>code,<sp/>we<sp/>prevent<sp/>matches<sp/>with<sp/>the<sp/>string</highlight></codeline>
<codeline lineno="1554"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>window<sp/>index<sp/>0<sp/>(in<sp/>particular<sp/>we<sp/>have<sp/>to<sp/>avoid<sp/>a<sp/>match</highlight></codeline>
<codeline lineno="1555"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>string<sp/>with<sp/>itself<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>input<sp/>file).</highlight></codeline>
<codeline lineno="1556"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_length<sp/>=<sp/>longest_match<sp/>(s,<sp/>hash_head);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>longest_match()<sp/>sets<sp/>match_start<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;match_length<sp/>&gt;=<sp/>MIN_MATCH)<sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a4041db99b23ca08963d3e5c284d837d6" kindref="member">check_match</ref>(s,<sp/>s-&gt;strstart,<sp/>s-&gt;match_start,<sp/>s-&gt;match_length);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a68f55cdd396ad603d9f0b01afdbdf592" kindref="member">_tr_tally_dist</ref>(s,<sp/>s-&gt;strstart<sp/>-<sp/>s-&gt;match_start,</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_length<sp/>-<sp/>MIN_MATCH,<sp/>bflush);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lookahead<sp/>-=<sp/>s-&gt;match_length;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>new<sp/>strings<sp/>in<sp/>the<sp/>hash<sp/>table<sp/>only<sp/>if<sp/>the<sp/>match<sp/>length</highlight></codeline>
<codeline lineno="1569"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>is<sp/>not<sp/>too<sp/>large.<sp/>This<sp/>saves<sp/>time<sp/>but<sp/>degrades<sp/>compression.</highlight></codeline>
<codeline lineno="1570"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FASTEST</highlight></codeline>
<codeline lineno="1572"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;match_length<sp/>&lt;=<sp/>s-&gt;max_insert_length<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lookahead<sp/>&gt;=<sp/>MIN_MATCH)<sp/>{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_length--;<sp/></highlight><highlight class="comment">/*<sp/>string<sp/>at<sp/>strstart<sp/>already<sp/>in<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart++;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a52d7ca8e864a07c0ba4a25d04588168b" kindref="member">INSERT_STRING</ref>(s,<sp/>s-&gt;strstart,<sp/>hash_head);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>strstart<sp/>never<sp/>exceeds<sp/>WSIZE-MAX_MATCH,<sp/>so<sp/>there<sp/>are</highlight></codeline>
<codeline lineno="1579"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>always<sp/>MIN_MATCH<sp/>bytes<sp/>ahead.</highlight></codeline>
<codeline lineno="1580"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--s-&gt;match_length<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart++;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1585"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart<sp/>+=<sp/>s-&gt;match_length;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;ins_h<sp/>=<sp/>s-&gt;window[s-&gt;strstart];</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a44b283365d6ca10b7028e639c4a10e67" kindref="member">UPDATE_HASH</ref>(s,<sp/>s-&gt;ins_h,<sp/>s-&gt;window[s-&gt;strstart+1]);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MIN_MATCH<sp/>!=<sp/>3</highlight></codeline>
<codeline lineno="1591"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Call<sp/><ref refid="deflate_8c_1a44b283365d6ca10b7028e639c4a10e67" kindref="member">UPDATE_HASH</ref>()<sp/>MIN_MATCH-3<sp/>more<sp/>times</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1593"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>lookahead<sp/>&lt;<sp/>MIN_MATCH,<sp/>ins_h<sp/>is<sp/>garbage,<sp/>but<sp/>it<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="1594"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>matter<sp/>since<sp/>it<sp/>will<sp/>be<sp/>recomputed<sp/>at<sp/>next<sp/>deflate<sp/>call.</highlight></codeline>
<codeline lineno="1595"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>match,<sp/>output<sp/>a<sp/>literal<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1ae65182ff511f0b12345c20b6533f32d9" kindref="member">Tracevv</ref>((stderr,</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>s-&gt;window[s-&gt;strstart]));</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1af3b11322da0fb4ec60a5ccc28e2554df" kindref="member">_tr_tally_lit</ref><sp/>(s,<sp/>s-&gt;window[s-&gt;strstart],<sp/>bflush);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lookahead--;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart++;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bflush)<sp/><ref refid="deflate_8c_1aa06152b875cc54ba4389f31444163886" kindref="member">FLUSH_BLOCK</ref>(s,<sp/>0);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1aa06152b875cc54ba4389f31444163886" kindref="member">FLUSH_BLOCK</ref>(s,<sp/>flush<sp/>==<sp/><ref refid="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" kindref="member">Z_FINISH</ref>);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flush<sp/>==<sp/><ref refid="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" kindref="member">Z_FINISH</ref><sp/>?<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454af1f0edbb0d9d8272a762de3b7be0b50c" kindref="member">finish_done</ref><sp/>:<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454a94dca976f7dcfb0605e086068f09daa1" kindref="member">block_done</ref>;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FASTEST</highlight></codeline>
<codeline lineno="1611"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1612"><highlight class="comment"><sp/>*<sp/>Same<sp/>as<sp/>above,<sp/>but<sp/>achieves<sp/>better<sp/>compression.<sp/>We<sp/>use<sp/>a<sp/>lazy</highlight></codeline>
<codeline lineno="1613"><highlight class="comment"><sp/>*<sp/>evaluation<sp/>for<sp/>matches:<sp/>a<sp/>match<sp/>is<sp/>finally<sp/>adopted<sp/>only<sp/>if<sp/>there<sp/>is</highlight></codeline>
<codeline lineno="1614"><highlight class="comment"><sp/>*<sp/>no<sp/>better<sp/>match<sp/>at<sp/>the<sp/>next<sp/>window<sp/>position.</highlight></codeline>
<codeline lineno="1615"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref><sp/>deflate_slow(s,<sp/>flush)</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1ada696b787a46d01634b6365afcec1a9e" kindref="member">IPos</ref><sp/>hash_head;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>head<sp/>of<sp/>hash<sp/>chain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bflush;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>if<sp/>current<sp/>block<sp/>must<sp/>be<sp/>flushed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Process<sp/>the<sp/>input<sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>that<sp/>we<sp/>always<sp/>have<sp/>enough<sp/>lookahead,<sp/>except</highlight></codeline>
<codeline lineno="1626"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>input<sp/>file.<sp/>We<sp/>need<sp/>MAX_MATCH<sp/>bytes</highlight></codeline>
<codeline lineno="1627"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>for<sp/>the<sp/>next<sp/>match,<sp/>plus<sp/>MIN_MATCH<sp/>bytes<sp/>to<sp/>insert<sp/>the</highlight></codeline>
<codeline lineno="1628"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>string<sp/>following<sp/>the<sp/>next<sp/>match.</highlight></codeline>
<codeline lineno="1629"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>&lt;<sp/><ref refid="deflate_8h_1aab627bcc7d38e658a93d395c50180cb8" kindref="member">MIN_LOOKAHEAD</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_window(s);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>&lt;<sp/><ref refid="deflate_8h_1aab627bcc7d38e658a93d395c50180cb8" kindref="member">MIN_LOOKAHEAD</ref><sp/>&amp;&amp;<sp/>flush<sp/>==<sp/><ref refid="zlib_8h_1ac3b62e37b9922d9496014515acd6083a" kindref="member">Z_NO_FLUSH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454aa05dd4e7c2f875eee52a6568c244c1e4" kindref="member">need_more</ref>;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>flush<sp/>the<sp/>current<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>the<sp/>string<sp/>window[strstart<sp/>..<sp/>strstart+2]<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="1639"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>dictionary,<sp/>and<sp/>set<sp/>hash_head<sp/>to<sp/>the<sp/>head<sp/>of<sp/>the<sp/>hash<sp/>chain:</highlight></codeline>
<codeline lineno="1640"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_head<sp/>=<sp/><ref refid="deflate_8c_1a263efce0e5cda1d387a1a43f94715445" kindref="member">NIL</ref>;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>&gt;=<sp/>MIN_MATCH)<sp/>{</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a52d7ca8e864a07c0ba4a25d04588168b" kindref="member">INSERT_STRING</ref>(s,<sp/>s-&gt;strstart,<sp/>hash_head);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>longest<sp/>match,<sp/>discarding<sp/>those<sp/>&lt;=<sp/>prev_length.</highlight></codeline>
<codeline lineno="1647"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;prev_length<sp/>=<sp/>s-&gt;match_length,<sp/>s-&gt;prev_match<sp/>=<sp/>s-&gt;match_start;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_length<sp/>=<sp/>MIN_MATCH-1;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash_head<sp/>!=<sp/><ref refid="deflate_8c_1a263efce0e5cda1d387a1a43f94715445" kindref="member">NIL</ref><sp/>&amp;&amp;<sp/>s-&gt;prev_length<sp/>&lt;<sp/>s-&gt;max_lazy_match<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart<sp/>-<sp/>hash_head<sp/>&lt;=<sp/><ref refid="deflate_8h_1a1bac515806be1e59d7306b4126b0cca4" kindref="member">MAX_DIST</ref>(s))<sp/>{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>simplify<sp/>the<sp/>code,<sp/>we<sp/>prevent<sp/>matches<sp/>with<sp/>the<sp/>string</highlight></codeline>
<codeline lineno="1654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>window<sp/>index<sp/>0<sp/>(in<sp/>particular<sp/>we<sp/>have<sp/>to<sp/>avoid<sp/>a<sp/>match</highlight></codeline>
<codeline lineno="1655"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>string<sp/>with<sp/>itself<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>input<sp/>file).</highlight></codeline>
<codeline lineno="1656"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_length<sp/>=<sp/>longest_match<sp/>(s,<sp/>hash_head);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>longest_match()<sp/>sets<sp/>match_start<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;match_length<sp/>&lt;=<sp/>5<sp/>&amp;&amp;<sp/>(s-&gt;strategy<sp/>==<sp/><ref refid="zlib_8h_1af01ccb5a9db8d415cde987d9553ad200" kindref="member">Z_FILTERED</ref></highlight></codeline>
<codeline lineno="1661"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><ref refid="deflate_8c_1abeff1f2c9d15b7bddefe44a4360821b3" kindref="member">TOO_FAR</ref><sp/>&lt;=<sp/>32767</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(s-&gt;match_length<sp/>==<sp/>MIN_MATCH<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart<sp/>-<sp/>s-&gt;match_start<sp/>&gt;<sp/><ref refid="deflate_8c_1abeff1f2c9d15b7bddefe44a4360821b3" kindref="member">TOO_FAR</ref>)</highlight></codeline>
<codeline lineno="1664"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>))<sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>prev_match<sp/>is<sp/>also<sp/>MIN_MATCH,<sp/>match_start<sp/>is<sp/>garbage</highlight></codeline>
<codeline lineno="1668"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>but<sp/>we<sp/>will<sp/>ignore<sp/>the<sp/>current<sp/>match<sp/>anyway.</highlight></codeline>
<codeline lineno="1669"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_length<sp/>=<sp/>MIN_MATCH-1;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there<sp/>was<sp/>a<sp/>match<sp/>at<sp/>the<sp/>previous<sp/>step<sp/>and<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="1674"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>match<sp/>is<sp/>not<sp/>better,<sp/>output<sp/>the<sp/>previous<sp/>match:</highlight></codeline>
<codeline lineno="1675"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;prev_length<sp/>&gt;=<sp/>MIN_MATCH<sp/>&amp;&amp;<sp/>s-&gt;match_length<sp/>&lt;=<sp/>s-&gt;prev_length)<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>max_insert<sp/>=<sp/>s-&gt;strstart<sp/>+<sp/>s-&gt;lookahead<sp/>-<sp/><ref refid="zutil_8h_1a7984ceb1ff48ac91172976b91ed43f60" kindref="member">MIN_MATCH</ref>;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>not<sp/>insert<sp/>strings<sp/>in<sp/>hash<sp/>table<sp/>beyond<sp/>this.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a4041db99b23ca08963d3e5c284d837d6" kindref="member">check_match</ref>(s,<sp/>s-&gt;strstart-1,<sp/>s-&gt;prev_match,<sp/>s-&gt;prev_length);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a68f55cdd396ad603d9f0b01afdbdf592" kindref="member">_tr_tally_dist</ref>(s,<sp/>s-&gt;strstart<sp/>-1<sp/>-<sp/>s-&gt;prev_match,</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;prev_length<sp/>-<sp/>MIN_MATCH,<sp/>bflush);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>in<sp/>hash<sp/>table<sp/>all<sp/>strings<sp/>up<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>match.</highlight></codeline>
<codeline lineno="1686"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>strstart-1<sp/>and<sp/>strstart<sp/>are<sp/>already<sp/>inserted.<sp/>If<sp/>there<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="1687"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>enough<sp/>lookahead,<sp/>the<sp/>last<sp/>two<sp/>strings<sp/>are<sp/>not<sp/>inserted<sp/>in</highlight></codeline>
<codeline lineno="1688"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>hash<sp/>table.</highlight></codeline>
<codeline lineno="1689"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lookahead<sp/>-=<sp/>s-&gt;prev_length-1;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;prev_length<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++s-&gt;strstart<sp/>&lt;=<sp/>max_insert)<sp/>{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a52d7ca8e864a07c0ba4a25d04588168b" kindref="member">INSERT_STRING</ref>(s,<sp/>s-&gt;strstart,<sp/>hash_head);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--s-&gt;prev_length<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_available<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_length<sp/>=<sp/>MIN_MATCH-1;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart++;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bflush)<sp/><ref refid="deflate_8c_1aa06152b875cc54ba4389f31444163886" kindref="member">FLUSH_BLOCK</ref>(s,<sp/>0);</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;match_available)<sp/>{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there<sp/>was<sp/>no<sp/>match<sp/>at<sp/>the<sp/>previous<sp/>position,<sp/>output<sp/>a</highlight></codeline>
<codeline lineno="1705"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>single<sp/>literal.<sp/>If<sp/>there<sp/>was<sp/>a<sp/>match<sp/>but<sp/>the<sp/>current<sp/>match</highlight></codeline>
<codeline lineno="1706"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>is<sp/>longer,<sp/>truncate<sp/>the<sp/>previous<sp/>match<sp/>to<sp/>a<sp/>single<sp/>literal.</highlight></codeline>
<codeline lineno="1707"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1ae65182ff511f0b12345c20b6533f32d9" kindref="member">Tracevv</ref>((stderr,</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>s-&gt;window[s-&gt;strstart-1]));</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1af3b11322da0fb4ec60a5ccc28e2554df" kindref="member">_tr_tally_lit</ref>(s,<sp/>s-&gt;window[s-&gt;strstart-1],<sp/>bflush);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bflush)<sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a140a98962b21d3838ef05baf4740e4ed" kindref="member">FLUSH_BLOCK_ONLY</ref>(s,<sp/>0);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart++;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lookahead--;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;strm-&gt;avail_out<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454aa05dd4e7c2f875eee52a6568c244c1e4" kindref="member">need_more</ref>;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>no<sp/>previous<sp/>match<sp/>to<sp/>compare<sp/>with,<sp/>wait<sp/>for</highlight></codeline>
<codeline lineno="1718"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>next<sp/>step<sp/>to<sp/>decide.</highlight></codeline>
<codeline lineno="1719"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_available<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart++;</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lookahead--;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref><sp/>(flush<sp/>!=<sp/><ref refid="zlib_8h_1ac3b62e37b9922d9496014515acd6083a" kindref="member">Z_NO_FLUSH</ref>,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>flush?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;match_available)<sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1ae65182ff511f0b12345c20b6533f32d9" kindref="member">Tracevv</ref>((stderr,</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>s-&gt;window[s-&gt;strstart-1]));</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1af3b11322da0fb4ec60a5ccc28e2554df" kindref="member">_tr_tally_lit</ref>(s,<sp/>s-&gt;window[s-&gt;strstart-1],<sp/>bflush);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_available<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1aa06152b875cc54ba4389f31444163886" kindref="member">FLUSH_BLOCK</ref>(s,<sp/>flush<sp/>==<sp/><ref refid="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" kindref="member">Z_FINISH</ref>);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flush<sp/>==<sp/><ref refid="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" kindref="member">Z_FINISH</ref><sp/>?<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454af1f0edbb0d9d8272a762de3b7be0b50c" kindref="member">finish_done</ref><sp/>:<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454a94dca976f7dcfb0605e086068f09daa1" kindref="member">block_done</ref>;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>FASTEST<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1735"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1737"><highlight class="comment"><sp/>*<sp/>For<sp/>Z_RLE,<sp/>simply<sp/>look<sp/>for<sp/>runs<sp/>of<sp/>bytes,<sp/>generate<sp/>matches<sp/>only<sp/>of<sp/>distance</highlight></codeline>
<codeline lineno="1738"><highlight class="comment"><sp/>*<sp/>one.<sp/><sp/>Do<sp/>not<sp/>maintain<sp/>a<sp/>hash<sp/>table.<sp/><sp/>(It<sp/>will<sp/>be<sp/>regenerated<sp/>if<sp/>this<sp/>run<sp/>of</highlight></codeline>
<codeline lineno="1739"><highlight class="comment"><sp/>*<sp/>deflate<sp/>switches<sp/>away<sp/>from<sp/>Z_RLE.)</highlight></codeline>
<codeline lineno="1740"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref><sp/>deflate_rle(s,<sp/>flush)</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bflush;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>if<sp/>current<sp/>block<sp/>must<sp/>be<sp/>flushed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/><ref refid="structinternal__state_1a93a7407be4c9df81f71a389eb1ff6c57" kindref="member">prev</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>byte<sp/>at<sp/>distance<sp/>one<sp/>to<sp/>match<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*scan,<sp/>*strend;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>scan<sp/>goes<sp/>up<sp/>to<sp/>strend<sp/>for<sp/>length<sp/>of<sp/>run<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>that<sp/>we<sp/>always<sp/>have<sp/>enough<sp/>lookahead,<sp/>except</highlight></codeline>
<codeline lineno="1751"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>input<sp/>file.<sp/>We<sp/>need<sp/>MAX_MATCH<sp/>bytes</highlight></codeline>
<codeline lineno="1752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>for<sp/>the<sp/>longest<sp/>encodable<sp/>run.</highlight></codeline>
<codeline lineno="1753"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>&lt;<sp/>MAX_MATCH)<sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_window(s);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>&lt;<sp/>MAX_MATCH<sp/>&amp;&amp;<sp/>flush<sp/>==<sp/><ref refid="zlib_8h_1ac3b62e37b9922d9496014515acd6083a" kindref="member">Z_NO_FLUSH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454aa05dd4e7c2f875eee52a6568c244c1e4" kindref="member">need_more</ref>;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>flush<sp/>the<sp/>current<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>how<sp/>many<sp/>times<sp/>the<sp/>previous<sp/>byte<sp/>repeats<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>&gt;=<sp/>MIN_MATCH<sp/>&amp;&amp;<sp/>s-&gt;strstart<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan<sp/>=<sp/>s-&gt;window<sp/>+<sp/>s-&gt;strstart<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>*scan;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev<sp/>==<sp/>*++scan<sp/>&amp;&amp;<sp/>prev<sp/>==<sp/>*++scan<sp/>&amp;&amp;<sp/>prev<sp/>==<sp/>*++scan)<sp/>{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strend<sp/>=<sp/>s-&gt;window<sp/>+<sp/>s-&gt;strstart<sp/>+<sp/><ref refid="zutil_8h_1ab7a9188dce25dac8d3a970c01b89b0c6" kindref="member">MAX_MATCH</ref>;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(prev<sp/>==<sp/>*++scan<sp/>&amp;&amp;<sp/>prev<sp/>==<sp/>*++scan<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>==<sp/>*++scan<sp/>&amp;&amp;<sp/>prev<sp/>==<sp/>*++scan<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>==<sp/>*++scan<sp/>&amp;&amp;<sp/>prev<sp/>==<sp/>*++scan<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>==<sp/>*++scan<sp/>&amp;&amp;<sp/>prev<sp/>==<sp/>*++scan<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan<sp/>&lt;<sp/>strend);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_length<sp/>=<sp/>MAX_MATCH<sp/>-<sp/>(int)(strend<sp/>-<sp/>scan);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;match_length<sp/>&gt;<sp/>s-&gt;lookahead)</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_length<sp/>=<sp/>s-&gt;lookahead;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>match<sp/>if<sp/>have<sp/>run<sp/>of<sp/>MIN_MATCH<sp/>or<sp/>longer,<sp/>else<sp/>emit<sp/>literal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;match_length<sp/>&gt;=<sp/>MIN_MATCH)<sp/>{</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1a4041db99b23ca08963d3e5c284d837d6" kindref="member">check_match</ref>(s,<sp/>s-&gt;strstart,<sp/>s-&gt;strstart<sp/>-<sp/>1,<sp/>s-&gt;match_length);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a68f55cdd396ad603d9f0b01afdbdf592" kindref="member">_tr_tally_dist</ref>(s,<sp/>1,<sp/>s-&gt;match_length<sp/>-<sp/>MIN_MATCH,<sp/>bflush);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lookahead<sp/>-=<sp/>s-&gt;match_length;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart<sp/>+=<sp/>s-&gt;match_length;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>match,<sp/>output<sp/>a<sp/>literal<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1ae65182ff511f0b12345c20b6533f32d9" kindref="member">Tracevv</ref>((stderr,</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>s-&gt;window[s-&gt;strstart]));</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1af3b11322da0fb4ec60a5ccc28e2554df" kindref="member">_tr_tally_lit</ref><sp/>(s,<sp/>s-&gt;window[s-&gt;strstart],<sp/>bflush);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lookahead--;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart++;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bflush)<sp/><ref refid="deflate_8c_1aa06152b875cc54ba4389f31444163886" kindref="member">FLUSH_BLOCK</ref>(s,<sp/>0);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1aa06152b875cc54ba4389f31444163886" kindref="member">FLUSH_BLOCK</ref>(s,<sp/>flush<sp/>==<sp/><ref refid="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" kindref="member">Z_FINISH</ref>);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flush<sp/>==<sp/><ref refid="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" kindref="member">Z_FINISH</ref><sp/>?<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454af1f0edbb0d9d8272a762de3b7be0b50c" kindref="member">finish_done</ref><sp/>:<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454a94dca976f7dcfb0605e086068f09daa1" kindref="member">block_done</ref>;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1804"><highlight class="comment"><sp/>*<sp/>For<sp/>Z_HUFFMAN_ONLY,<sp/>do<sp/>not<sp/>look<sp/>for<sp/>matches.<sp/><sp/>Do<sp/>not<sp/>maintain<sp/>a<sp/>hash<sp/>table.</highlight></codeline>
<codeline lineno="1805"><highlight class="comment"><sp/>*<sp/>(It<sp/>will<sp/>be<sp/>regenerated<sp/>if<sp/>this<sp/>run<sp/>of<sp/>deflate<sp/>switches<sp/>away<sp/>from<sp/>Huffman.)</highlight></codeline>
<codeline lineno="1806"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454" kindref="member">block_state</ref><sp/>deflate_huff(s,<sp/>flush)</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinternal__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bflush;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>if<sp/>current<sp/>block<sp/>must<sp/>be<sp/>flushed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>that<sp/>we<sp/>have<sp/>a<sp/>literal<sp/>to<sp/>write.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_window(s);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;lookahead<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flush<sp/>==<sp/><ref refid="zlib_8h_1ac3b62e37b9922d9496014515acd6083a" kindref="member">Z_NO_FLUSH</ref>)</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454aa05dd4e7c2f875eee52a6568c244c1e4" kindref="member">need_more</ref>;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>flush<sp/>the<sp/>current<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Output<sp/>a<sp/>literal<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;match_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1ae65182ff511f0b12345c20b6533f32d9" kindref="member">Tracevv</ref>((stderr,</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>s-&gt;window[s-&gt;strstart]));</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1af3b11322da0fb4ec60a5ccc28e2554df" kindref="member">_tr_tally_lit</ref><sp/>(s,<sp/>s-&gt;window[s-&gt;strstart],<sp/>bflush);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lookahead--;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;strstart++;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bflush)<sp/><ref refid="deflate_8c_1aa06152b875cc54ba4389f31444163886" kindref="member">FLUSH_BLOCK</ref>(s,<sp/>0);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8c_1aa06152b875cc54ba4389f31444163886" kindref="member">FLUSH_BLOCK</ref>(s,<sp/>flush<sp/>==<sp/><ref refid="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" kindref="member">Z_FINISH</ref>);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flush<sp/>==<sp/><ref refid="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" kindref="member">Z_FINISH</ref><sp/>?<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454af1f0edbb0d9d8272a762de3b7be0b50c" kindref="member">finish_done</ref><sp/>:<sp/><ref refid="deflate_8c_1a1048c01fb24f2195a6b9a2a7c12e9454a94dca976f7dcfb0605e086068f09daa1" kindref="member">block_done</ref>;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/deflate.c"/>
  </compounddef>
</doxygen>
