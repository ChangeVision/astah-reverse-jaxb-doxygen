<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="_audio_node_8cpp" kind="file">
    <compoundname>AudioNode.cpp</compoundname>
    <includes local="yes">AudioNode.h</includes>
    <includes local="yes">AudioContext.h</includes>
    <includes local="yes">nsContentUtils.h</includes>
    <includes local="yes">mozilla/ErrorResult.h</includes>
    <incdepgraph>
      <node id="541">
        <label>AudioNode.h</label>
      </node>
      <node id="540">
        <label>C:/tools/mozilla-release/content/media/webaudio/AudioNode.cpp</label>
        <link refid="AudioNode.cpp"/>
        <childnode refid="541" relation="include">
        </childnode>
        <childnode refid="542" relation="include">
        </childnode>
        <childnode refid="543" relation="include">
        </childnode>
        <childnode refid="544" relation="include">
        </childnode>
      </node>
      <node id="544">
        <label>mozilla/ErrorResult.h</label>
      </node>
      <node id="543">
        <label>nsContentUtils.h</label>
      </node>
      <node id="542">
        <label>AudioContext.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacemozilla">mozilla</innernamespace>
    <innernamespace refid="namespacemozilla_1_1dom">mozilla::dom</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>Mode:<sp/>C++;<sp/>tab-width:<sp/>2;<sp/>indent-tabs-mode:<sp/>nil;<sp/>c-basic-offset:<sp/>2<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>ts=2<sp/>sw=2<sp/>sts=2<sp/>et<sp/>cindent:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>Source<sp/>Code<sp/>Form<sp/>is<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Mozilla<sp/>Public</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>License,<sp/>v.<sp/>2.0.<sp/>If<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>MPL<sp/>was<sp/>not<sp/>distributed<sp/>with<sp/>this</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>file,<sp/>You<sp/>can<sp/>obtain<sp/>one<sp/>at<sp/>http://mozilla.org/MPL/2.0/.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AudioNode.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AudioContext.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsContentUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/ErrorResult.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mozilla<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">dom<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">TraverseElements(nsCycleCollectionTraversalCallback&amp;<sp/>cb,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nsTArray&lt;T&gt;&amp;<sp/>array,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0,<sp/>length<sp/>=<sp/>array.Length();<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_CYCLE_COLLECTION_NOTE_EDGE_NAME(cb,<sp/>name);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>AudioNode*<sp/>node<sp/>=<sp/>array[i].get();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.NoteXPCOMChild(node);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">NS_IMPL_CYCLE_COLLECTION_CLASS(AudioNode)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN(AudioNode)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>NS_IMPL_CYCLE_COLLECTION_UNLINK(mContext)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>NS_IMPL_CYCLE_COLLECTION_UNLINK(mInputs)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>NS_IMPL_CYCLE_COLLECTION_UNLINK(mOutputs)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER</highlight></codeline>
<codeline lineno="35"><highlight class="normal">NS_IMPL_CYCLE_COLLECTION_UNLINK_END</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN(AudioNode)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mContext)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>TraverseElements(cb,<sp/>tmp-&gt;mInputs,<sp/>&quot;mInputs[i]&quot;);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>TraverseElements(cb,<sp/>tmp-&gt;mOutputs,<sp/>&quot;mOutputs[i]&quot;);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_SCRIPT_OBJECTS</highlight></codeline>
<codeline lineno="42"><highlight class="normal">NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">NS_IMPL_CYCLE_COLLECTION_TRACE_WRAPPERCACHE(AudioNode)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">NS_IMPL_CYCLE_COLLECTING_ADDREF(AudioNode)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">NS_IMPL_CYCLE_COLLECTING_RELEASE(AudioNode)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(AudioNode)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>NS_INTERFACE_MAP_ENTRY(nsISupports)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">NS_INTERFACE_MAP_END</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">AudioNode::AudioNode(AudioContext*<sp/>aContext)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>:<sp/>mContext(aContext)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>MOZ_ASSERT(aContext);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>SetIsDOMBinding();</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">AudioNode::Connect(AudioNode&amp;<sp/>aDestination,<sp/>uint32_t<sp/>aOutput,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>aInput,<sp/>ErrorResult&amp;<sp/>aRv)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aOutput<sp/>&gt;=<sp/>MaxNumberOfOutputs()<sp/>||</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aInput<sp/>&gt;=<sp/>aDestination.MaxNumberOfInputs())<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>aRv.Throw(NS_ERROR_DOM_INDEX_SIZE_ERR);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Context()<sp/>!=<sp/>aDestination.Context())<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>aRv.Throw(NS_ERROR_DOM_SYNTAX_ERR);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>handle<sp/>cycle<sp/>detection<sp/>per<sp/>spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>Output<sp/>output(&amp;aDestination,<sp/>aInput);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>mOutputs.EnsureLengthAtLeast(aOutput<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>mOutputs.ReplaceElementAt(aOutput,<sp/>output);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>Input<sp/>input(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>aOutput);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>aDestination.mInputs.EnsureLengthAtLeast(aInput<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>aDestination.mInputs.ReplaceElementAt(aInput,<sp/>input);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">AudioNode::Disconnect(uint32_t<sp/>aOutput,<sp/>ErrorResult&amp;<sp/>aRv)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aOutput<sp/>&gt;=<sp/>NumberOfOutputs())<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>aRv.Throw(NS_ERROR_DOM_INDEX_SIZE_ERR);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>objects<sp/>to<sp/>AddRef<sp/>source<sp/>and<sp/>destination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>objects<sp/>so<sp/>that<sp/>they<sp/>don&apos;t<sp/>go<sp/>away<sp/>before<sp/>we&apos;re<sp/>done<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Output<sp/>output<sp/>=<sp/>mOutputs[aOutput];</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!output)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>aRv.Throw(NS_ERROR_DOM_SYNTAX_ERR);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Input<sp/>input<sp/>=<sp/>output.mDestination-&gt;mInputs[output.mInput];</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>MOZ_ASSERT(Context()<sp/>==<sp/>output.mDestination-&gt;Context());</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>MOZ_ASSERT(aOutput<sp/>==<sp/>input.mOutput);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!input<sp/>||<sp/>input.mSource<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>aRv.Throw(NS_ERROR_DOM_SYNTAX_ERR);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>output.mDestination-&gt;mInputs.ReplaceElementAt(output.mInput,<sp/>Input());</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>mOutputs.ReplaceElementAt(input.mOutput,<sp/>Output());</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/tools/mozilla-release/content/media/webaudio/AudioNode.cpp"/>
  </compounddef>
</doxygen>
