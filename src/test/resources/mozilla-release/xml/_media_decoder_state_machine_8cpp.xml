<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="_media_decoder_state_machine_8cpp" kind="file">
    <compoundname>MediaDecoderStateMachine.cpp</compoundname>
    <includes local="yes">MediaDecoderStateMachine.h</includes>
    <includes local="no">limits</includes>
    <includes local="yes">AudioStream.h</includes>
    <includes local="yes">nsTArray.h</includes>
    <includes local="yes">MediaDecoder.h</includes>
    <includes local="yes">MediaDecoderReader.h</includes>
    <includes local="yes">mozilla/mozalloc.h</includes>
    <includes local="yes">VideoUtils.h</includes>
    <includes local="yes">nsTimeRanges.h</includes>
    <includes local="yes">nsDeque.h</includes>
    <includes local="yes">AudioSegment.h</includes>
    <includes local="yes">VideoSegment.h</includes>
    <includes local="yes">ImageContainer.h</includes>
    <includes local="yes">mozilla/Preferences.h</includes>
    <includes local="yes">mozilla/StandardInteger.h</includes>
    <includes local="yes">mozilla/Util.h</includes>
    <incdepgraph>
      <node id="216">
        <label>AudioStream.h</label>
      </node>
      <node id="222">
        <label>nsTimeRanges.h</label>
      </node>
      <node id="215">
        <label>limits</label>
      </node>
      <node id="229">
        <label>mozilla/Util.h</label>
      </node>
      <node id="213">
        <label>C:/tools/mozilla-release/content/media/MediaDecoderStateMachine.cpp</label>
        <link refid="MediaDecoderStateMachine.cpp"/>
        <childnode refid="214" relation="include">
        </childnode>
        <childnode refid="215" relation="include">
        </childnode>
        <childnode refid="216" relation="include">
        </childnode>
        <childnode refid="217" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="221" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="223" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="225" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
      </node>
      <node id="225">
        <label>VideoSegment.h</label>
      </node>
      <node id="219">
        <label>MediaDecoderReader.h</label>
      </node>
      <node id="220">
        <label>mozilla/mozalloc.h</label>
      </node>
      <node id="226">
        <label>ImageContainer.h</label>
      </node>
      <node id="224">
        <label>AudioSegment.h</label>
      </node>
      <node id="221">
        <label>VideoUtils.h</label>
      </node>
      <node id="223">
        <label>nsDeque.h</label>
      </node>
      <node id="214">
        <label>MediaDecoderStateMachine.h</label>
      </node>
      <node id="218">
        <label>MediaDecoder.h</label>
      </node>
      <node id="227">
        <label>mozilla/Preferences.h</label>
      </node>
      <node id="228">
        <label>mozilla/StandardInteger.h</label>
      </node>
      <node id="217">
        <label>nsTArray.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classmozilla_1_1ns_audio_metadata_event_runner" prot="public">mozilla::nsAudioMetadataEventRunner</innerclass>
    <innerclass refid="classmozilla_1_1_state_machine_tracker" prot="public">mozilla::StateMachineTracker</innerclass>
    <innerclass refid="classmozilla_1_1ns_decoder_dispose_event" prot="public">mozilla::nsDecoderDisposeEvent</innerclass>
    <innerclass refid="classmozilla_1_1ns_dispatch_dispose_event" prot="public">mozilla::nsDispatchDisposeEvent</innerclass>
    <innernamespace refid="namespacemozilla">mozilla</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_media_decoder_state_machine_8cpp_1ae6e4cd49afe9deda788f4f9ee6ce4536" prot="public" static="no">
        <name>LOG</name>
        <param><defname>type</defname></param>
        <param><defname>msg</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/MediaDecoderStateMachine.cpp" line="34" bodyfile="C:/tools/mozilla-release/content/media/MediaDecoderStateMachine.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>vim:set<sp/>ts=2<sp/>sw=2<sp/>sts=2<sp/>et<sp/>cindent:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>Source<sp/>Code<sp/>Form<sp/>is<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Mozilla<sp/>Public</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>License,<sp/>v.<sp/>2.0.<sp/>If<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>MPL<sp/>was<sp/>not<sp/>distributed<sp/>with<sp/>this</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file,<sp/>You<sp/>can<sp/>obtain<sp/>one<sp/>at<sp/>http://mozilla.org/MPL/2.0/.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MediaDecoderStateMachine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AudioStream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsTArray.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MediaDecoder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MediaDecoderReader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/mozalloc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;VideoUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsTimeRanges.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsDeque.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AudioSegment.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;VideoSegment.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ImageContainer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/Preferences.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/StandardInteger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/Util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mozilla<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">layers;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">mozilla::layers;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">mozilla::dom;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PR_LOGGING</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>PRLogModuleInfo*<sp/>gMediaDecoderLog;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG(type,<sp/>msg)<sp/>PR_LOG(gMediaDecoderLog,<sp/>type,<sp/>msg)</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LOG(type,<sp/>msg)</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Wait<sp/>this<sp/>number<sp/>of<sp/>seconds<sp/>when<sp/>buffering,<sp/>then<sp/>leave<sp/>and<sp/>play</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>best<sp/>as<sp/>we<sp/>can<sp/>if<sp/>the<sp/>required<sp/>amount<sp/>of<sp/>data<sp/>hasn&apos;t<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>retrieved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>BUFFERING_WAIT_S<sp/>=<sp/>30;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>audio<sp/>queue<sp/>has<sp/>less<sp/>than<sp/>this<sp/>many<sp/>usecs<sp/>of<sp/>decoded<sp/>audio,<sp/>we<sp/>won&apos;t<sp/>risk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>trying<sp/>to<sp/>decode<sp/>the<sp/>video,<sp/>we&apos;ll<sp/>skip<sp/>decoding<sp/>video<sp/>up<sp/>to<sp/>the<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>keyframe.<sp/>We<sp/>may<sp/>increase<sp/>this<sp/>value<sp/>for<sp/>an<sp/>individual<sp/>decoder<sp/>if<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>encounter<sp/>video<sp/>frames<sp/>which<sp/>take<sp/>a<sp/>long<sp/>time<sp/>to<sp/>decode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>LOW_AUDIO_USECS<sp/>=<sp/>300000;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>more<sp/>than<sp/>this<sp/>many<sp/>usecs<sp/>of<sp/>decoded<sp/>audio<sp/>is<sp/>queued,<sp/>we&apos;ll<sp/>hold<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>decoding<sp/>more<sp/>audio.<sp/>If<sp/>we<sp/>increase<sp/>the<sp/>low<sp/>audio<sp/>threshold<sp/>(see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LOW_AUDIO_USECS<sp/>above)<sp/>we&apos;ll<sp/>also<sp/>increase<sp/>this<sp/>value<sp/>to<sp/>ensure<sp/>it&apos;s<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>less<sp/>than<sp/>the<sp/>low<sp/>audio<sp/>threshold.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>AMPLE_AUDIO_USECS<sp/>=<sp/>1000000;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maximum<sp/>number<sp/>of<sp/>bytes<sp/>we&apos;ll<sp/>allocate<sp/>and<sp/>write<sp/>at<sp/>once<sp/>to<sp/>the<sp/>audio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hardware<sp/>when<sp/>the<sp/>audio<sp/>stream<sp/>contains<sp/>missing<sp/>frames<sp/>and<sp/>we&apos;re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>writing<sp/>silence<sp/>in<sp/>order<sp/>to<sp/>fill<sp/>the<sp/>gap.<sp/>We<sp/>limit<sp/>our<sp/>silence-writes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>32KB<sp/>in<sp/>order<sp/>to<sp/>avoid<sp/>allocating<sp/>an<sp/>impossibly<sp/>large<sp/>chunk<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>if<sp/>we<sp/>encounter<sp/>a<sp/>large<sp/>chunk<sp/>of<sp/>silence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>SILENCE_BYTES_CHUNK<sp/>=<sp/>32<sp/>*<sp/>1024;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>fewer<sp/>than<sp/>LOW_VIDEO_FRAMES<sp/>decoded<sp/>frames,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we&apos;re<sp/>not<sp/>&quot;pumping<sp/>video&quot;,<sp/>we&apos;ll<sp/>skip<sp/>the<sp/>video<sp/>up<sp/>to<sp/>the<sp/>next<sp/>keyframe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>at<sp/>or<sp/>after<sp/>the<sp/>current<sp/>playback<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>LOW_VIDEO_FRAMES<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arbitrary<sp/>&quot;frame<sp/>duration&quot;<sp/>when<sp/>playing<sp/>only<sp/>audio.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AUDIO_DURATION_USECS<sp/>=<sp/>40000;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>increase<sp/>our<sp/>&quot;low<sp/>audio<sp/>threshold&quot;<sp/>(see<sp/>LOW_AUDIO_USECS<sp/>above),<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>this<sp/>as<sp/>a<sp/>factor<sp/>in<sp/>all<sp/>our<sp/>calculations.<sp/>Increasing<sp/>this<sp/>will<sp/>cause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>us<sp/>to<sp/>be<sp/>more<sp/>likely<sp/>to<sp/>increase<sp/>our<sp/>low<sp/>audio<sp/>threshold,<sp/>and<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>increase<sp/>it<sp/>by<sp/>more.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>THRESHOLD_FACTOR<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>less<sp/>than<sp/>this<sp/>much<sp/>undecoded<sp/>data<sp/>available,<sp/>we&apos;ll<sp/>consider</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ourselves<sp/>to<sp/>be<sp/>running<sp/>low<sp/>on<sp/>undecoded<sp/>data.<sp/>We<sp/>determine<sp/>how<sp/>much</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>undecoded<sp/>data<sp/>we<sp/>have<sp/>remaining<sp/>using<sp/>the<sp/>reader&apos;s<sp/>GetBuffered()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>LOW_DATA_THRESHOLD_USECS<sp/>=<sp/>5000000;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LOW_DATA_THRESHOLD_USECS<sp/>needs<sp/>to<sp/>be<sp/>greater<sp/>than<sp/>AMPLE_AUDIO_USECS,<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>skip-to-keyframe<sp/>logic<sp/>can<sp/>activate<sp/>when<sp/>we&apos;re<sp/>running<sp/>low<sp/>on<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">PR_STATIC_ASSERT(LOW_DATA_THRESHOLD_USECS<sp/>&gt;<sp/>AMPLE_AUDIO_USECS);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Amount<sp/>of<sp/>excess<sp/>usecs<sp/>of<sp/>data<sp/>to<sp/>add<sp/>in<sp/>to<sp/>the<sp/>&quot;should<sp/>we<sp/>buffer&quot;<sp/>calculation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>EXHAUSTED_DATA_MARGIN_USECS<sp/>=<sp/>60000;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>enter<sp/>buffering<sp/>within<sp/>QUICK_BUFFER_THRESHOLD_USECS<sp/>seconds<sp/>of<sp/>starting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>decoding,<sp/>we&apos;ll<sp/>enter<sp/>&quot;quick<sp/>buffering&quot;<sp/>mode,<sp/>which<sp/>exits<sp/>a<sp/>lot<sp/>sooner<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>normal<sp/>buffering<sp/>mode.<sp/>This<sp/>exists<sp/>so<sp/>that<sp/>if<sp/>the<sp/>decode-ahead<sp/>exhausts<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>downloaded<sp/>data<sp/>while<sp/>decode/playback<sp/>is<sp/>just<sp/>starting<sp/>up<sp/>(for<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>after<sp/>a<sp/>seek<sp/>while<sp/>the<sp/>media<sp/>is<sp/>still<sp/>playing,<sp/>or<sp/>when<sp/>playing<sp/>a<sp/>media</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>soon<sp/>as<sp/>it&apos;s<sp/>load<sp/>started),<sp/>we<sp/>won&apos;t<sp/>necessarily<sp/>stop<sp/>for<sp/>30s<sp/>and<sp/>wait</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>buffering.<sp/>We<sp/>may<sp/>actually<sp/>be<sp/>able<sp/>to<sp/>playback<sp/>in<sp/>this<sp/>case,<sp/>so<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffering<sp/>early<sp/>and<sp/>try<sp/>to<sp/>play.<sp/>If<sp/>it<sp/>turns<sp/>out<sp/>we<sp/>can&apos;t<sp/>play,<sp/>we&apos;ll<sp/>fall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>back<sp/>to<sp/>buffering<sp/>normally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>QUICK_BUFFER_THRESHOLD_USECS<sp/>=<sp/>2000000;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;re<sp/>quick<sp/>buffering,<sp/>we&apos;ll<sp/>remain<sp/>in<sp/>buffering<sp/>mode<sp/>while<sp/>we<sp/>have<sp/>less<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>QUICK_BUFFERING_LOW_DATA_USECS<sp/>of<sp/>decoded<sp/>data<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>QUICK_BUFFERING_LOW_DATA_USECS<sp/>=<sp/>1000000;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>QUICK_BUFFERING_LOW_DATA_USECS<sp/>is<sp/>&gt;<sp/>AMPLE_AUDIO_USECS,<sp/>we<sp/>won&apos;t<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>quick<sp/>buffering<sp/>in<sp/>a<sp/>timely<sp/>fashion,<sp/>as<sp/>the<sp/>decode<sp/>pauses<sp/>when<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reaches<sp/>AMPLE_AUDIO_USECS<sp/>decoded<sp/>data,<sp/>and<sp/>thus<sp/>we&apos;ll<sp/>never<sp/>reach</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>QUICK_BUFFERING_LOW_DATA_USECS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">PR_STATIC_ASSERT(QUICK_BUFFERING_LOW_DATA_USECS<sp/>&lt;=<sp/>AMPLE_AUDIO_USECS);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TimeDuration<sp/>UsecsToDuration(int64_t<sp/>aUsecs)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TimeDuration::FromMilliseconds(static_cast&lt;double&gt;(aUsecs)<sp/>/<sp/>USECS_PER_MS);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int64_t<sp/>DurationToUsecs(TimeDuration<sp/>aDuration)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(aDuration.ToSeconds()<sp/>*<sp/>USECS_PER_S);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="classmozilla_1_1ns_audio_metadata_event_runner" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmozilla_1_1ns_audio_metadata_event_runner" kindref="compound">nsAudioMetadataEventRunner</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsRunnable</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;MediaDecoder&gt;<sp/>mDecoder;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><ref refid="classmozilla_1_1ns_audio_metadata_event_runner" kindref="compound">nsAudioMetadataEventRunner</ref>(MediaDecoder*<sp/>aDecoder,<sp/>uint32_t<sp/>aChannels,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>aRate,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aHasAudio,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MetadataTags*<sp/>aTags)<sp/>:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder(aDecoder),</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>mChannels(aChannels),</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>mRate(aRate),</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>mHasAudio(aHasAudio),</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>mTags(aTags)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>NS_IMETHOD<sp/>Run()</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder-&gt;MetadataLoaded(mChannels,<sp/>mRate,<sp/>mHasAudio,<sp/>mTags);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>mChannels;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>mRate;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mHasAudio;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>MetadataTags*<sp/>mTags;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Owns<sp/>the<sp/>global<sp/>state<sp/>machine<sp/>thread<sp/>and<sp/>counts<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>state<sp/>machine<sp/>and<sp/>decoder<sp/>threads.<sp/>There<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>be<sp/>one<sp/>instance<sp/>of<sp/>this<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="classmozilla_1_1_state_machine_tracker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmozilla_1_1_state_machine_tracker" kindref="compound">StateMachineTracker</ref></highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><ref refid="classmozilla_1_1_state_machine_tracker" kindref="compound">StateMachineTracker</ref>()<sp/>:</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>mMonitor(</highlight><highlight class="stringliteral">&quot;media.statemachinetracker&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>mStateMachineCount(0),</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecodeThreadCount(0),</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>mStateMachineThread(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>MOZ_COUNT_CTOR(<ref refid="classmozilla_1_1_state_machine_tracker" kindref="compound">StateMachineTracker</ref>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>~<ref refid="classmozilla_1_1_state_machine_tracker" kindref="compound">StateMachineTracker</ref>()</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>MOZ_COUNT_DTOR(<ref refid="classmozilla_1_1_state_machine_tracker" kindref="compound">StateMachineTracker</ref>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Access<sp/>singleton<sp/>instance.<sp/>This<sp/>is<sp/>initially<sp/>called<sp/>on<sp/>the<sp/>main</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>thread<sp/>in<sp/>the<sp/>MediaDecoderStateMachine<sp/>constructor<sp/>resulting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>global<sp/>object<sp/>being<sp/>created<sp/>lazily.<sp/>Non-main<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>access<sp/>always<sp/>occurs<sp/>after<sp/>this<sp/>and<sp/>uses<sp/>the<sp/>monitor<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>safely<sp/>access<sp/>the<sp/>decode<sp/>thread<sp/>counts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classmozilla_1_1_state_machine_tracker" kindref="compound">StateMachineTracker</ref>&amp;<sp/>Instance();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Instantiate<sp/>the<sp/>global<sp/>state<sp/>machine<sp/>thread<sp/>if<sp/>required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>on<sp/>main<sp/>thread<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EnsureGlobalStateMachine();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>global<sp/>state<sp/>machine<sp/>thread<sp/>if<sp/>required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>on<sp/>main<sp/>thread<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CleanupGlobalStateMachine();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>global<sp/>state<sp/>machine<sp/>thread.<sp/>Call<sp/>from<sp/>any<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>nsIThread*<sp/>GetGlobalStateMachineThread()</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(mStateMachineThread,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>have<sp/>non-null<sp/>state<sp/>machine<sp/>thread!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mStateMachineThread;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Requests<sp/>that<sp/>a<sp/>decode<sp/>thread<sp/>be<sp/>created<sp/>for<sp/>aStateMachine.<sp/>The<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>be<sp/>created<sp/>immediately,<sp/>or<sp/>after<sp/>some<sp/>delay,<sp/>once<sp/>a<sp/>thread<sp/>becomes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>available.<sp/>The<sp/>request<sp/>can<sp/>be<sp/>cancelled<sp/>using<sp/>CancelCreateDecodeThread().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>the<sp/>callers<sp/>responsibility<sp/>to<sp/>not<sp/>call<sp/>this<sp/>more<sp/>than<sp/>once<sp/>for<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>given<sp/>state<sp/>machine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>nsresult<sp/>RequestCreateDecodeThread(MediaDecoderStateMachine*<sp/>aStateMachine);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cancels<sp/>a<sp/>request<sp/>made<sp/>by<sp/>RequestCreateDecodeThread<sp/>to<sp/>create<sp/>a<sp/>decode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>thread<sp/>for<sp/>aStateMachine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>nsresult<sp/>CancelCreateDecodeThread(MediaDecoderStateMachine*<sp/>aStateMachine);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>number<sp/>of<sp/>active<sp/>decode<sp/>threads<sp/>allowed.<sp/>When<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>this<sp/>number<sp/>are<sp/>active<sp/>the<sp/>thread<sp/>creation<sp/>will<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>MAX_DECODE_THREADS<sp/>=<sp/>25;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>active<sp/>decode<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>on<sp/>any<sp/>thread.<sp/>Holds<sp/>the<sp/>internal<sp/>monitor<sp/>so<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>with<sp/>any<sp/>other<sp/>monitor<sp/>held<sp/>to<sp/>avoid<sp/>deadlock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>uint32_t<sp/>GetDecodeThreadCount();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>track<sp/>of<sp/>the<sp/>fact<sp/>that<sp/>a<sp/>decode<sp/>thread<sp/>was<sp/>destroyed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>on<sp/>any<sp/>thread.<sp/>Holds<sp/>the<sp/>internal<sp/>monitor<sp/>so<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>with<sp/>any<sp/>other<sp/>monitor<sp/>held<sp/>to<sp/>avoid<sp/>deadlock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NoteDecodeThreadDestroyed();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>aStateMachine<sp/>has<sp/>a<sp/>pending<sp/>request<sp/>for<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>decode<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsQueued(MediaDecoderStateMachine*<sp/>aStateMachine);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Holds<sp/>global<sp/>instance<sp/>of<sp/>StateMachineTracker.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Writable<sp/>on<sp/>main<sp/>thread<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classmozilla_1_1_state_machine_tracker" kindref="compound">StateMachineTracker</ref>*<sp/>sInstance;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reentrant<sp/>monitor<sp/>that<sp/>must<sp/>be<sp/>obtained<sp/>to<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>decode<sp/>thread<sp/>count<sp/>member<sp/>and<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>ReentrantMonitor<sp/>mMonitor;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>instances<sp/>of<sp/>MediaDecoderStateMachine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>are<sp/>currently<sp/>instantiated.<sp/>Access<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>main<sp/>thread<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>uint32_t<sp/>mStateMachineCount;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>instances<sp/>of<sp/>decoder<sp/>threads<sp/>that<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>currently<sp/>instantiated.<sp/>Access<sp/>only<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mMonitor<sp/>lock<sp/>held.<sp/>Can<sp/>be<sp/>used<sp/>from<sp/>any<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>uint32_t<sp/>mDecodeThreadCount;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Global<sp/>state<sp/>machine<sp/>thread.<sp/>Write<sp/>on<sp/>the<sp/>main<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only,<sp/>read<sp/>from<sp/>the<sp/>decoder<sp/>threads.<sp/>Synchronized<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>mMonitor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>nsIThread*<sp/>mStateMachineThread;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Queue<sp/>of<sp/>state<sp/>machines<sp/>waiting<sp/>for<sp/>decode<sp/>threads.<sp/>Entries<sp/>at<sp/>the<sp/>front</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>their<sp/>threads<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>nsDeque<sp/>mPending;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">};</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><ref refid="classmozilla_1_1_state_machine_tracker" kindref="compound">StateMachineTracker</ref>*<sp/>StateMachineTracker::sInstance<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><ref refid="classmozilla_1_1_state_machine_tracker" kindref="compound">StateMachineTracker</ref>&amp;<sp/>StateMachineTracker::Instance()</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sInstance)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>sInstance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classmozilla_1_1_state_machine_tracker" kindref="compound">StateMachineTracker</ref>();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*sInstance;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StateMachineTracker::EnsureGlobalStateMachine()<sp/></highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mStateMachineCount<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(!mStateMachineThread,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>have<sp/>null<sp/>state<sp/>machine<sp/>thread!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>DebugOnly&lt;nsresult&gt;<sp/>rv<sp/>=<sp/>NS_NewNamedThread(</highlight><highlight class="stringliteral">&quot;Media<sp/>State&quot;</highlight><highlight class="normal">,<sp/>&amp;mStateMachineThread,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ABORT_IF_FALSE(NS_SUCCEEDED(rv),<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>create<sp/>media<sp/>state<sp/>machine<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>mStateMachineCount++;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StateMachineTracker::IsQueued(MediaDecoderStateMachine*<sp/>aStateMachine)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>int32_t<sp/>size<sp/>=<sp/>mPending.GetSize();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaDecoderStateMachine*<sp/>m<sp/>=</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">MediaDecoderStateMachine*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mPending.ObjectAt(i));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>aStateMachine)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StateMachineTracker::CleanupGlobalStateMachine()<sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>NS_ABORT_IF_FALSE(mStateMachineCount<sp/>&gt;<sp/>0,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;State<sp/>machine<sp/>ref<sp/>count<sp/>must<sp/>be<sp/>&gt;<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>mStateMachineCount--;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mStateMachineCount<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Destroying<sp/>media<sp/>state<sp/>machine<sp/>thread&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(mPending.GetSize()<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Shouldn&apos;t<sp/>all<sp/>requests<sp/>be<sp/>handled<sp/>by<sp/>now?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ShutdownThreadEvent(mStateMachineThread);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_RELEASE(mStateMachineThread);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mStateMachineThread<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(event);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(mDecodeThreadCount<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Decode<sp/>thread<sp/>count<sp/>must<sp/>be<sp/>zero.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sInstance<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StateMachineTracker::NoteDecodeThreadDestroyed()</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>--mDecodeThreadCount;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mDecodeThreadCount<sp/>&lt;<sp/>MAX_DECODE_THREADS<sp/>&amp;&amp;<sp/>mPending.GetSize()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaDecoderStateMachine*<sp/>m<sp/>=</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">MediaDecoderStateMachine*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mPending.PopFront());</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>nsresult<sp/>rv;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exitMon(mMonitor);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>m-&gt;StartDecodeThread();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_SUCCEEDED(rv))<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++mDecodeThreadCount;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">uint32_t<sp/>StateMachineTracker::GetDecodeThreadCount()</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mDecodeThreadCount;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">nsresult<sp/>StateMachineTracker::CancelCreateDecodeThread(MediaDecoderStateMachine*<sp/>aStateMachine)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>int32_t<sp/>size<sp/>=<sp/>mPending.GetSize();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>m<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">MediaDecoderStateMachine*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mPending.ObjectAt(i));</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>aStateMachine)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mPending.RemoveObjectAt(i);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!IsQueued(aStateMachine),<sp/></highlight><highlight class="stringliteral">&quot;State<sp/>machine<sp/>should<sp/>no<sp/>longer<sp/>have<sp/>queued<sp/>request.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">nsresult<sp/>StateMachineTracker::RequestCreateDecodeThread(MediaDecoderStateMachine*<sp/>aStateMachine)</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>NS_ENSURE_STATE(aStateMachine);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mPending.GetSize()<sp/>&gt;<sp/>0<sp/>||<sp/>mDecodeThreadCount<sp/>+<sp/>1<sp/>&gt;=<sp/>MAX_DECODE_THREADS)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there&apos;s<sp/>already<sp/>state<sp/>machines<sp/>in<sp/>the<sp/>queue,<sp/>or<sp/>we&apos;ve<sp/>exceeded<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>limit,<sp/>append<sp/>the<sp/>state<sp/>machine<sp/>to<sp/>the<sp/>queue<sp/>of<sp/>state<sp/>machines<sp/>waiting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>a<sp/>decode<sp/>thread.<sp/>This<sp/>ensures<sp/>state<sp/>machines<sp/>already<sp/>waiting<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>their<sp/>threads<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>mPending.Push(aStateMachine);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>nsresult<sp/>rv;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exitMon(mMonitor);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>aStateMachine-&gt;StartDecodeThread();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_SUCCEEDED(rv))<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>++mDecodeThreadCount;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mDecodeThreadCount<sp/>&lt;=<sp/>MAX_DECODE_THREADS,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>keep<sp/>to<sp/>thread<sp/>limit!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">MediaDecoderStateMachine::MediaDecoderStateMachine(MediaDecoder*<sp/>aDecoder,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaDecoderReader*<sp/>aReader,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aRealTime)<sp/>:</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>mDecoder(aDecoder),</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>mState(DECODER_STATE_DECODING_METADATA),</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>mPlayDuration(0),</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>mStartTime(-1),</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>mEndTime(-1),</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>mSeekTime(0),</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>mFragmentEndTime(-1),</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>mReader(aReader),</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>mCurrentFrameTime(0),</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>mAudioStartTime(-1),</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>mAudioEndTime(-1),</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>mVideoFrameEndTime(-1),</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>mVolume(1.0),</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>mAudioCaptured(false),</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>mSeekable(true),</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>mPositionChangeQueued(false),</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>mAudioCompleted(false),</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>mGotDurationFromMetaData(false),</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>mStopDecodeThread(true),</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>mDecodeThreadIdle(false),</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>mStopAudioThread(true),</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>mQuickBuffering(false),</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>mIsRunning(false),</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>mRunAgain(false),</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>mDispatchedRunEvent(false),</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>mDecodeThreadWaiting(false),</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>mRealTime(aRealTime),</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>mDidThrottleAudioDecoding(false),</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>mDidThrottleVideoDecoding(false),</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>mRequestedNewDecodeThread(false),</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>mEventManager(aDecoder)</highlight></codeline>
<codeline lineno="411"><highlight class="normal">{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>MOZ_COUNT_CTOR(MediaDecoderStateMachine);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>StateMachineTracker::Instance().EnsureGlobalStateMachine();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>enable<sp/>realtime<sp/>mode<sp/>when<sp/>&quot;media.realtime_decoder.enabled&quot;<sp/>is<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Preferences::GetBool(</highlight><highlight class="stringliteral">&quot;media.realtime_decoder.enabled&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>mRealTime<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>mBufferingWait<sp/>=<sp/>mRealTime<sp/>?<sp/>0<sp/>:<sp/>BUFFERING_WAIT_S;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>mLowDataThresholdUsecs<sp/>=<sp/>mRealTime<sp/>?<sp/>0<sp/>:<sp/>LOW_DATA_THRESHOLD_USECS;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;ve<sp/>got<sp/>more<sp/>than<sp/>mAmpleVideoFrames<sp/>decoded<sp/>video<sp/>frames<sp/>waiting<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>video<sp/>queue,<sp/>we<sp/>will<sp/>not<sp/>decode<sp/>any<sp/>more<sp/>video<sp/>frames<sp/>until<sp/>some<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>been<sp/>consumed<sp/>by<sp/>the<sp/>play<sp/>state<sp/>machine<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MOZ_WIDGET_GONK</highlight></codeline>
<codeline lineno="428"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>B2G<sp/>this<sp/>is<sp/>decided<sp/>by<sp/>a<sp/>similar<sp/>value<sp/>which<sp/>varies<sp/>for<sp/>each<sp/>OMX<sp/>decoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|OMX_PARAM_PORTDEFINITIONTYPE::nBufferCountMin|.<sp/>This<sp/>number<sp/>must<sp/>be<sp/>less</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>the<sp/>OMX<sp/>equivalent<sp/>or<sp/>gecko<sp/>will<sp/>think<sp/>it<sp/>is<sp/>chronically<sp/>starved<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>video<sp/>frames.<sp/>All<sp/>decoders<sp/>seen<sp/>so<sp/>far<sp/>have<sp/>a<sp/>value<sp/>of<sp/>at<sp/>least<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>mAmpleVideoFrames<sp/>=<sp/>Preferences::GetUint(</highlight><highlight class="stringliteral">&quot;media.video-queue.default-size&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="434"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>mAmpleVideoFrames<sp/>=<sp/>Preferences::GetUint(</highlight><highlight class="stringliteral">&quot;media.video-queue.default-size&quot;</highlight><highlight class="normal">,<sp/>10);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="436"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAmpleVideoFrames<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>mAmpleVideoFrames<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">MediaDecoderStateMachine::~MediaDecoderStateMachine()</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>MOZ_COUNT_DTOR(MediaDecoderStateMachine);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!mPendingWakeDecoder.get(),</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WakeDecoder<sp/>should<sp/>have<sp/>been<sp/>revoked<sp/>already&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!StateMachineTracker::Instance().IsQueued(</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>not<sp/>have<sp/>a<sp/>pending<sp/>request<sp/>for<sp/>a<sp/>new<sp/>decode<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!mRequestedNewDecodeThread,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>not<sp/>have<sp/>(or<sp/>flagged)<sp/>a<sp/>pending<sp/>request<sp/>for<sp/>a<sp/>new<sp/>decode<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mTimer)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>mTimer-&gt;Cancel();</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>mTimer<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>mReader<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>StateMachineTracker::Instance().CleanupGlobalStateMachine();</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::HasFutureAudio()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>NS_ASSERTION(HasAudio(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>only<sp/>call<sp/>HasFutureAudio()<sp/>when<sp/>we<sp/>have<sp/>audio&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ve<sp/>got<sp/>audio<sp/>ready<sp/>to<sp/>play<sp/>if:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>We&apos;ve<sp/>not<sp/>completed<sp/>playback<sp/>of<sp/>audio,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>we<sp/>either<sp/>have<sp/>more<sp/>than<sp/>the<sp/>threshold<sp/>of<sp/>decoded<sp/>audio<sp/>available,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>we&apos;ve<sp/>completely<sp/>decoded<sp/>all<sp/>audio<sp/>(but<sp/>not<sp/>finished<sp/>playing<sp/>it<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>as<sp/>per<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!mAudioCompleted<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(AudioDecodedUsecs()<sp/>&gt;<sp/>LOW_AUDIO_USECS<sp/>||<sp/>mReader-&gt;AudioQueue().IsFinished());</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::HaveNextFrameData()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!HasAudio()<sp/>||<sp/>HasFutureAudio())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!HasVideo()<sp/>||<sp/>mReader-&gt;VideoQueue().GetSize()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">int64_t<sp/>MediaDecoderStateMachine::GetDecodedAudioDuration()<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnDecodeThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>int64_t<sp/>audioDecoded<sp/>=<sp/>mReader-&gt;AudioQueue().Duration();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAudioEndTime<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>audioDecoded<sp/>+=<sp/>mAudioEndTime<sp/>-<sp/>GetMediaTime();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>audioDecoded;</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::DecodeThreadRun()</highlight></codeline>
<codeline lineno="488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnDecodeThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>==<sp/>DECODER_STATE_DECODING_METADATA)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(DecodeMetadata()))<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(mState<sp/>==<sp/>DECODER_STATE_SHUTDOWN,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>in<sp/>shutdown<sp/>state<sp/>if<sp/>metadata<sp/>loading<sp/>fails.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Decode<sp/>metadata<sp/>failed,<sp/>shutting<sp/>down<sp/>decode<sp/>thread&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mState<sp/>!=<sp/>DECODER_STATE_SHUTDOWN<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mState<sp/>!=<sp/>DECODER_STATE_COMPLETED<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!mStopDecodeThread)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>==<sp/>DECODER_STATE_DECODING<sp/>||<sp/>mState<sp/>==<sp/>DECODER_STATE_BUFFERING)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DecodeLoop();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>==<sp/>DECODER_STATE_SEEKING)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DecodeSeek();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>mDecodeThreadIdle<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Decode<sp/>thread<sp/>finished&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::SendStreamAudio(AudioData*<sp/>aAudio,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecodedStreamData*<sp/>aStream,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AudioSegment*<sp/>aOutput)</highlight></codeline>
<codeline lineno="518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnDecodeThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aAudio-&gt;mTime<sp/>&lt;=<sp/>aStream-&gt;mLastAudioPacketTime)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>packet<sp/>that<sp/>we&apos;ve<sp/>already<sp/>processed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>aStream-&gt;mLastAudioPacketTime<sp/>=<sp/>aAudio-&gt;mTime;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>aStream-&gt;mLastAudioPacketEndTime<sp/>=<sp/>aAudio-&gt;GetEnd();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>NS_ASSERTION(aOutput-&gt;GetChannels()<sp/>==<sp/>int32_t(aAudio-&gt;mChannels),</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Wrong<sp/>number<sp/>of<sp/>channels&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>logic<sp/>has<sp/>to<sp/>mimic<sp/>AudioLoop<sp/>closely<sp/>to<sp/>make<sp/>sure<sp/>we<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>exact<sp/>same<sp/>silences</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>CheckedInt64<sp/>audioWrittenOffset<sp/>=<sp/>UsecsToFrames(mInfo.mAudioRate,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aStream-&gt;mInitialTime<sp/>+<sp/>mStartTime)<sp/>+<sp/>aStream-&gt;mAudioFramesWritten;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>CheckedInt64<sp/>frameOffset<sp/>=<sp/>UsecsToFrames(mInfo.mAudioRate,<sp/>aAudio-&gt;mTime);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!audioWrittenOffset.isValid()<sp/>||<sp/>!frameOffset.isValid())</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(audioWrittenOffset.value()<sp/>&lt;<sp/>frameOffset.value())<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>silence<sp/>to<sp/>catch<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Decoder<sp/>writing<sp/>%d<sp/>frames<sp/>of<sp/>silence<sp/>to<sp/>MediaStream&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),<sp/>int32_t(frameOffset.value()<sp/>-<sp/>audioWrittenOffset.value())));</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>AudioSegment<sp/>silence;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>silence.InitFrom(*aOutput);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>silence.InsertNullDataAtStart(frameOffset.value()<sp/>-<sp/>audioWrittenOffset.value());</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>aStream-&gt;mAudioFramesWritten<sp/>+=<sp/>silence.GetDuration();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>aOutput-&gt;AppendFrom(&amp;silence);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>int64_t<sp/>offset;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStream-&gt;mAudioFramesWritten<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(frameOffset.value()<sp/>&lt;=<sp/>audioWrittenOffset.value(),</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Otherwise<sp/>we&apos;d<sp/>have<sp/>taken<sp/>the<sp/>write-silence<sp/>path&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>starting<sp/>in<sp/>the<sp/>middle<sp/>of<sp/>a<sp/>packet.<sp/>Split<sp/>the<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>audioWrittenOffset.value()<sp/>-<sp/>frameOffset.value();</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>the<sp/>entire<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>&gt;=<sp/>aAudio-&gt;mFrames)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>aAudio-&gt;EnsureAudioBuffer();</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;SharedBuffer&gt;<sp/>buffer<sp/>=<sp/>aAudio-&gt;mAudioBuffer;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>aOutput-&gt;AppendFrames(buffer.forget(),<sp/>aAudio-&gt;mFrames,<sp/>int32_t(offset),<sp/>aAudio-&gt;mFrames,</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AUDIO_OUTPUT_FORMAT);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Decoder<sp/>writing<sp/>%d<sp/>frames<sp/>of<sp/>data<sp/>to<sp/>MediaStream<sp/>for<sp/>AudioData<sp/>at<sp/>%lld&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),<sp/>aAudio-&gt;mFrames<sp/>-<sp/>int32_t(offset),<sp/>aAudio-&gt;mTime));</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>aStream-&gt;mAudioFramesWritten<sp/>+=<sp/>aAudio-&gt;mFrames<sp/>-<sp/>int32_t(offset);</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WriteVideoToMediaStream(mozilla::layers::Image*<sp/>aImage,</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>aDuration,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfxIntSize&amp;<sp/>aIntrinsicSize,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VideoSegment*<sp/>aOutput)</highlight></codeline>
<codeline lineno="576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;mozilla::layers::Image&gt;<sp/>image<sp/>=<sp/>aImage;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>aOutput-&gt;AppendFrame(image.forget(),<sp/>aDuration,<sp/>aIntrinsicSize);</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TrackID<sp/>TRACK_AUDIO<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TrackID<sp/>TRACK_VIDEO<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TrackRate<sp/>RATE_VIDEO<sp/>=<sp/>USECS_PER_S;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::SendStreamData()</highlight></codeline>
<codeline lineno="586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnDecodeThread()<sp/>||</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OnStateMachineThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>decode<sp/>thread<sp/>or<sp/>state<sp/>machine<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>DecodedStreamData*<sp/>stream<sp/>=<sp/>mDecoder-&gt;GetDecodedStream();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stream)</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>==<sp/>DECODER_STATE_DECODING_METADATA)</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there&apos;s<sp/>still<sp/>an<sp/>audio<sp/>thread<sp/>alive,<sp/>then<sp/>we<sp/>can&apos;t<sp/>send<sp/>any<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>yet<sp/>since<sp/>both<sp/>SendStreamData<sp/>and<sp/>the<sp/>audio<sp/>thread<sp/>want<sp/>to<sp/>be<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>charge<sp/>of<sp/>popping<sp/>the<sp/>audio<sp/>queue.<sp/>We&apos;re<sp/>waiting<sp/>for<sp/>the<sp/>audio<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>die<sp/>before<sp/>sending<sp/>anything<sp/>to<sp/>our<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAudioThread)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>int64_t<sp/>minLastAudioPacketTime<sp/>=<sp/>INT64_MAX;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>SourceMediaStream*<sp/>mediaStream<sp/>=<sp/>stream-&gt;mStream;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>StreamTime<sp/>endPosition<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stream-&gt;mStreamInitialized)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mInfo.mHasAudio)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AudioSegment*<sp/>audio<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AudioSegment();</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>audio-&gt;Init(mInfo.mAudioChannels);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mediaStream-&gt;AddTrack(TRACK_AUDIO,<sp/>mInfo.mAudioRate,<sp/>0,<sp/>audio);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mInfo.mHasVideo)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VideoSegment*<sp/>video<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>VideoSegment();</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mediaStream-&gt;AddTrack(TRACK_VIDEO,<sp/>RATE_VIDEO,<sp/>0,<sp/>video);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mStreamInitialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mInfo.mHasAudio)<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>nsAutoTArray&lt;AudioData*,10&gt;<sp/>audio;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>OK<sp/>to<sp/>hold<sp/>references<sp/>to<sp/>the<sp/>AudioData<sp/>because<sp/>while<sp/>audio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>captured,<sp/>only<sp/>the<sp/>decoder<sp/>thread<sp/>pops<sp/>from<sp/>the<sp/>queue<sp/>(see<sp/>below).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>mReader-&gt;AudioQueue().GetElementsAfter(stream-&gt;mLastAudioPacketTime,<sp/>&amp;audio);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>AudioSegment<sp/>output;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>output.Init(mInfo.mAudioChannels);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>audio.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SendStreamAudio(audio[i],<sp/>stream,<sp/>&amp;output);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output.GetDuration()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mediaStream-&gt;AppendToTrack(TRACK_AUDIO,<sp/>&amp;output);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mReader-&gt;AudioQueue().IsFinished()<sp/>&amp;&amp;<sp/>!stream-&gt;mHaveSentFinishAudio)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mediaStream-&gt;EndTrack(TRACK_AUDIO);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mHaveSentFinishAudio<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>minLastAudioPacketTime<sp/>=<sp/>NS_MIN(minLastAudioPacketTime,<sp/>stream-&gt;mLastAudioPacketTime);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>endPosition<sp/>=<sp/>NS_MAX(endPosition,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TicksToTimeRoundDown(mInfo.mAudioRate,<sp/>stream-&gt;mAudioFramesWritten));</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mInfo.mHasVideo)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>nsAutoTArray&lt;VideoData*,10&gt;<sp/>video;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>OK<sp/>to<sp/>hold<sp/>references<sp/>to<sp/>the<sp/>VideoData<sp/>only<sp/>the<sp/>decoder<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pops<sp/>from<sp/>the<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>mReader-&gt;VideoQueue().GetElementsAfter(stream-&gt;mNextVideoTime<sp/>+<sp/>mStartTime,<sp/>&amp;video);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>VideoSegment<sp/>output;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>video.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VideoData*<sp/>v<sp/>=<sp/>video[i];</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;mNextVideoTime<sp/>+<sp/>mStartTime<sp/>&lt;<sp/>v-&gt;mTime)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Decoder<sp/>writing<sp/>last<sp/>video<sp/>to<sp/>MediaStream<sp/>%p<sp/>for<sp/>%lld<sp/>ms&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),<sp/>mediaStream,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v-&gt;mTime<sp/>-<sp/>(stream-&gt;mNextVideoTime<sp/>+<sp/>mStartTime)));</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>last<sp/>video<sp/>frame<sp/>to<sp/>catch<sp/>up.<sp/>mLastVideoImage<sp/>can<sp/>be<sp/>null<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>fine,<sp/>it<sp/>just<sp/>means<sp/>there&apos;s<sp/>no<sp/>video.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteVideoToMediaStream(stream-&gt;mLastVideoImage,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v-&gt;mTime<sp/>-<sp/>(stream-&gt;mNextVideoTime<sp/>+<sp/>mStartTime),<sp/>stream-&gt;mLastVideoImageDisplaySize,</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;output);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mNextVideoTime<sp/>=<sp/>v-&gt;mTime<sp/>-<sp/>mStartTime;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;mNextVideoTime<sp/>+<sp/>mStartTime<sp/>&lt;<sp/>v-&gt;mEndTime)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Decoder<sp/>writing<sp/>video<sp/>frame<sp/>%lld<sp/>to<sp/>MediaStream<sp/>%p<sp/>for<sp/>%lld<sp/>ms&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),<sp/>v-&gt;mTime,<sp/>mediaStream,</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v-&gt;mEndTime<sp/>-<sp/>(stream-&gt;mNextVideoTime<sp/>+<sp/>mStartTime)));</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteVideoToMediaStream(v-&gt;mImage,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v-&gt;mEndTime<sp/>-<sp/>(stream-&gt;mNextVideoTime<sp/>+<sp/>mStartTime),<sp/>v-&gt;mDisplay,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;output);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mNextVideoTime<sp/>=<sp/>v-&gt;mEndTime<sp/>-<sp/>mStartTime;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mLastVideoImage<sp/>=<sp/>v-&gt;mImage;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mLastVideoImageDisplaySize<sp/>=<sp/>v-&gt;mDisplay;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Decoder<sp/>skipping<sp/>writing<sp/>video<sp/>frame<sp/>%lld<sp/>to<sp/>MediaStream&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),<sp/>v-&gt;mTime));</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output.GetDuration()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mediaStream-&gt;AppendToTrack(TRACK_VIDEO,<sp/>&amp;output);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mReader-&gt;VideoQueue().IsFinished()<sp/>&amp;&amp;<sp/>!stream-&gt;mHaveSentFinishVideo)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mediaStream-&gt;EndTrack(TRACK_VIDEO);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mHaveSentFinishVideo<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>endPosition<sp/>=<sp/>NS_MAX(endPosition,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TicksToTimeRoundDown(RATE_VIDEO,<sp/>stream-&gt;mNextVideoTime<sp/>-<sp/>stream-&gt;mInitialTime));</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stream-&gt;mHaveSentFinish)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mStream-&gt;AdvanceKnownTracksTime(endPosition);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>finished<sp/>=</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(!mInfo.mHasAudio<sp/>||<sp/>mReader-&gt;AudioQueue().IsFinished())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(!mInfo.mHasVideo<sp/>||<sp/>mReader-&gt;VideoQueue().IsFinished());</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(finished<sp/>&amp;&amp;<sp/>!stream-&gt;mHaveSentFinish)<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mHaveSentFinish<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mStream-&gt;Finish();</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAudioCaptured)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Discard<sp/>audio<sp/>packets<sp/>that<sp/>are<sp/>no<sp/>longer<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>audioPacketTimeToDiscard<sp/>=</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_MIN(minLastAudioPacketTime,<sp/>mStartTime<sp/>+<sp/>mCurrentFrameTime);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsAutoPtr&lt;AudioData&gt;<sp/>a(mReader-&gt;AudioQueue().PopFront());</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a)</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Packet<sp/>times<sp/>are<sp/>not<sp/>100%<sp/>reliable<sp/>so<sp/>this<sp/>may<sp/>discard<sp/>packets<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>actually<sp/>contain<sp/>data<sp/>for<sp/>mCurrentFrameTime.<sp/>This<sp/>means<sp/>if<sp/>someone<sp/>might</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>new<sp/>output<sp/>stream<sp/>and<sp/>we<sp/>actually<sp/>don&apos;t<sp/>have<sp/>the<sp/>audio<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>very<sp/>start.<sp/>That&apos;s<sp/>OK,<sp/>we&apos;ll<sp/>play<sp/>silence<sp/>instead<sp/>for<sp/>a<sp/>brief<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>That&apos;s<sp/>OK.<sp/>Seeking<sp/>to<sp/>this<sp/>time<sp/>would<sp/>have<sp/>a<sp/>similar<sp/>issue<sp/>for<sp/>such</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>badly<sp/>muxed<sp/>resources.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;GetEnd()<sp/>&gt;=<sp/>audioPacketTimeToDiscard)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mReader-&gt;AudioQueue().PushFront(a.forget());</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(finished)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mAudioCompleted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UpdateReadyState();</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal">MediaDecoderStateMachine::WakeDecoderRunnable*</highlight></codeline>
<codeline lineno="729"><highlight class="normal">MediaDecoderStateMachine::GetWakeDecoderRunnable()</highlight></codeline>
<codeline lineno="730"><highlight class="normal">{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mPendingWakeDecoder.get())<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>mPendingWakeDecoder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>WakeDecoderRunnable(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mPendingWakeDecoder.get();</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::HaveEnoughDecodedAudio(int64_t<sp/>aAmpleAudioUSecs)</highlight></codeline>
<codeline lineno="740"><highlight class="normal">{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mReader-&gt;AudioQueue().GetSize()<sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetDecodedAudioDuration()<sp/>&lt;<sp/>aAmpleAudioUSecs)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioCaptured)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>DecodedStreamData*<sp/>stream<sp/>=<sp/>mDecoder-&gt;GetDecodedStream();</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream<sp/>&amp;&amp;<sp/>stream-&gt;mStreamInitialized<sp/>&amp;&amp;<sp/>!stream-&gt;mHaveSentFinishAudio)<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stream-&gt;mStream-&gt;HaveEnoughBuffered(TRACK_AUDIO))<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mStream-&gt;DispatchWhenNotEnoughBuffered(TRACK_AUDIO,</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetStateMachineThread(),<sp/>GetWakeDecoderRunnable());</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::HaveEnoughDecodedVideo()</highlight></codeline>
<codeline lineno="764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;uint32_t&gt;(mReader-&gt;VideoQueue().GetSize())<sp/>&lt;<sp/>mAmpleVideoFrames)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>DecodedStreamData*<sp/>stream<sp/>=<sp/>mDecoder-&gt;GetDecodedStream();</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream<sp/>&amp;&amp;<sp/>stream-&gt;mStreamInitialized<sp/>&amp;&amp;<sp/>!stream-&gt;mHaveSentFinishVideo)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stream-&gt;mStream-&gt;HaveEnoughBuffered(TRACK_VIDEO))<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mStream-&gt;DispatchWhenNotEnoughBuffered(TRACK_VIDEO,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetStateMachineThread(),<sp/>GetWakeDecoderRunnable());</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::DecodeLoop()</highlight></codeline>
<codeline lineno="784"><highlight class="normal">{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Start<sp/>DecodeLoop()&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnDecodeThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>to<sp/>&quot;pump&quot;<sp/>the<sp/>decode<sp/>until<sp/>we&apos;ve<sp/>got<sp/>a<sp/>few<sp/>frames<sp/>decoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>we<sp/>consider<sp/>whether<sp/>decode<sp/>is<sp/>falling<sp/>behind.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>audioPump<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>videoPump<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>video<sp/>decode<sp/>is<sp/>falling<sp/>behind<sp/>the<sp/>audio,<sp/>we&apos;ll<sp/>start<sp/>dropping<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inter-frames<sp/>up<sp/>until<sp/>the<sp/>next<sp/>keyframe<sp/>which<sp/>is<sp/>at<sp/>or<sp/>before<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>playback<sp/>position.<sp/>skipToNextKeyframe<sp/>is<sp/>true<sp/>if<sp/>we&apos;re<sp/>currently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>skipping<sp/>up<sp/>to<sp/>the<sp/>next<sp/>keyframe.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>skipToNextKeyframe<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Once<sp/>we&apos;ve<sp/>decoded<sp/>more<sp/>than<sp/>videoPumpThreshold<sp/>video<sp/>frames,<sp/>we&apos;ll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>longer<sp/>be<sp/>considered<sp/>to<sp/>be<sp/>&quot;pumping<sp/>video&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>videoPumpThreshold<sp/>=<sp/>mRealTime<sp/>?<sp/>0<sp/>:<sp/>mAmpleVideoFrames<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>the<sp/>audio<sp/>decode<sp/>fills<sp/>with<sp/>more<sp/>than<sp/>audioPumpThreshold<sp/>usecs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>decoded<sp/>audio,<sp/>we&apos;ll<sp/>start<sp/>to<sp/>check<sp/>whether<sp/>the<sp/>audio<sp/>or<sp/>video<sp/>decode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>falling<sp/>behind.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>audioPumpThreshold<sp/>=<sp/>mRealTime<sp/>?<sp/>0<sp/>:<sp/>LOW_AUDIO_USECS<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>local<sp/>low<sp/>audio<sp/>threshold.<sp/>We<sp/>may<sp/>increase<sp/>this<sp/>if<sp/>we&apos;re<sp/>slow<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>decode<sp/>video<sp/>frames,<sp/>in<sp/>order<sp/>to<sp/>reduce<sp/>the<sp/>chance<sp/>of<sp/>audio<sp/>underruns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>int64_t<sp/>lowAudioThreshold<sp/>=<sp/>LOW_AUDIO_USECS;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>local<sp/>ample<sp/>audio<sp/>threshold.<sp/>If<sp/>we<sp/>increase<sp/>lowAudioThreshold,<sp/>we&apos;ll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>increase<sp/>this<sp/>too<sp/>appropriately<sp/>(we<sp/>don&apos;t<sp/>want<sp/>lowAudioThreshold<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>greater<sp/>than<sp/>ampleAudioThreshold,<sp/>else<sp/>we&apos;d<sp/>stop<sp/>decoding!).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>int64_t<sp/>ampleAudioThreshold<sp/>=<sp/>AMPLE_AUDIO_USECS;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Main<sp/>decode<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>videoPlaying<sp/>=<sp/>HasVideo();</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>audioPlaying<sp/>=<sp/>HasAudio();</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((mState<sp/>==<sp/>DECODER_STATE_DECODING<sp/>||<sp/>mState<sp/>==<sp/>DECODER_STATE_BUFFERING)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!mStopDecodeThread<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(videoPlaying<sp/>||<sp/>audioPlaying))</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>want<sp/>to<sp/>consider<sp/>skipping<sp/>to<sp/>the<sp/>next<sp/>keyframe<sp/>if<sp/>we&apos;ve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>just<sp/>started<sp/>up<sp/>the<sp/>decode<sp/>loop,<sp/>so<sp/>wait<sp/>until<sp/>we&apos;ve<sp/>decoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>frames<sp/>before<sp/>enabling<sp/>the<sp/>keyframe<sp/>skip<sp/>logic<sp/>on<sp/>video.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(videoPump<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(static_cast&lt;uint32_t&gt;(mReader-&gt;VideoQueue().GetSize())</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;=<sp/>videoPumpThreshold))</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>videoPump<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>want<sp/>to<sp/>consider<sp/>skipping<sp/>to<sp/>the<sp/>next<sp/>keyframe<sp/>if<sp/>we&apos;ve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>just<sp/>started<sp/>up<sp/>the<sp/>decode<sp/>loop,<sp/>so<sp/>wait<sp/>until<sp/>we&apos;ve<sp/>decoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>audio<sp/>data<sp/>before<sp/>enabling<sp/>the<sp/>keyframe<sp/>skip<sp/>logic<sp/>on<sp/>audio.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(audioPump<sp/>&amp;&amp;<sp/>GetDecodedAudioDuration()<sp/>&gt;=<sp/>audioPumpThreshold)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>audioPump<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ll<sp/>skip<sp/>the<sp/>video<sp/>decode<sp/>to<sp/>the<sp/>nearest<sp/>keyframe<sp/>if<sp/>we&apos;re<sp/>low<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>audio,<sp/>or<sp/>if<sp/>we&apos;re<sp/>low<sp/>on<sp/>video,<sp/>provided<sp/>we&apos;re<sp/>not<sp/>running<sp/>low<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>to<sp/>decode.<sp/>If<sp/>we&apos;re<sp/>running<sp/>low<sp/>on<sp/>downloaded<sp/>data<sp/>to<sp/>decode,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>won&apos;t<sp/>start<sp/>keyframe<sp/>skipping,<sp/>as<sp/>we&apos;ll<sp/>be<sp/>pausing<sp/>playback<sp/>to<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>soon<sp/>anyway<sp/>and<sp/>we&apos;ll<sp/>want<sp/>to<sp/>be<sp/>able<sp/>to<sp/>display<sp/>frames<sp/>immediately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>buffering<sp/>finishes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>==<sp/>DECODER_STATE_DECODING<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!skipToNextKeyframe<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>videoPlaying<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((!audioPump<sp/>&amp;&amp;<sp/>audioPlaying<sp/>&amp;&amp;<sp/>!mDidThrottleAudioDecoding<sp/>&amp;&amp;<sp/>GetDecodedAudioDuration()<sp/>&lt;<sp/>lowAudioThreshold)<sp/>||</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!videoPump<sp/>&amp;&amp;<sp/>videoPlaying<sp/>&amp;&amp;<sp/>!mDidThrottleVideoDecoding<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(static_cast&lt;uint32_t&gt;(mReader-&gt;VideoQueue().GetSize())</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;<sp/>LOW_VIDEO_FRAMES)))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!HasLowUndecodedData())</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>skipToNextKeyframe<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Skipping<sp/>video<sp/>decode<sp/>to<sp/>the<sp/>next<sp/>keyframe&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Video<sp/>decode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>throttleVideoDecoding<sp/>=<sp/>!videoPlaying<sp/>||<sp/>HaveEnoughDecodedVideo();</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDidThrottleVideoDecoding<sp/>&amp;&amp;<sp/>!throttleVideoDecoding)<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>videoPump<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>mDidThrottleVideoDecoding<sp/>=<sp/>throttleVideoDecoding;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!throttleVideoDecoding)</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>the<sp/>video<sp/>decode,<sp/>so<sp/>that<sp/>if<sp/>it&apos;s<sp/>slow,<sp/>we<sp/>can<sp/>increase<sp/>our<sp/>low</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>audio<sp/>threshold<sp/>to<sp/>reduce<sp/>the<sp/>chance<sp/>of<sp/>an<sp/>audio<sp/>underrun<sp/>while<sp/>we&apos;re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>waiting<sp/>for<sp/>a<sp/>video<sp/>decode<sp/>to<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TimeDuration<sp/>decodeTime;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>currentTime<sp/>=<sp/>GetMediaTime();</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exitMon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeStamp<sp/>start<sp/>=<sp/>TimeStamp::Now();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>videoPlaying<sp/>=<sp/>mReader-&gt;DecodeVideoFrame(skipToNextKeyframe,<sp/>currentTime);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decodeTime<sp/>=<sp/>TimeStamp::Now()<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(THRESHOLD_FACTOR<sp/>*<sp/>DurationToUsecs(decodeTime)<sp/>&gt;<sp/>lowAudioThreshold<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!HasLowUndecodedData())</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowAudioThreshold<sp/>=</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_MIN(THRESHOLD_FACTOR<sp/>*<sp/>DurationToUsecs(decodeTime),<sp/>AMPLE_AUDIO_USECS);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampleAudioThreshold<sp/>=<sp/>NS_MAX(THRESHOLD_FACTOR<sp/>*<sp/>lowAudioThreshold,</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampleAudioThreshold);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Slow<sp/>video<sp/>decode,<sp/>set<sp/>lowAudioThreshold=%lld<sp/>ampleAudioThreshold=%lld&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowAudioThreshold,<sp/>ampleAudioThreshold));</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Audio<sp/>decode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>throttleAudioDecoding<sp/>=<sp/>!audioPlaying<sp/>||<sp/>HaveEnoughDecodedAudio(ampleAudioThreshold);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDidThrottleAudioDecoding<sp/>&amp;&amp;<sp/>!throttleAudioDecoding)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>audioPump<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>mDidThrottleAudioDecoding<sp/>=<sp/>throttleAudioDecoding;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mDidThrottleAudioDecoding)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exitMon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>audioPlaying<sp/>=<sp/>mReader-&gt;DecodeAudioData();</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>SendStreamData();</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>AudioLoop()<sp/>is<sp/>not<sp/>waiting,<sp/>in<sp/>case<sp/>it<sp/>was</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>waiting<sp/>for<sp/>more<sp/>audio<sp/>to<sp/>be<sp/>decoded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().NotifyAll();</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>ready<sp/>state<sp/>can<sp/>change<sp/>when<sp/>we&apos;ve<sp/>decoded<sp/>data,<sp/>so<sp/>update<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ready<sp/>state,<sp/>so<sp/>that<sp/>DOM<sp/>events<sp/>can<sp/>fire.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateReadyState();</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mState<sp/>==<sp/>DECODER_STATE_DECODING<sp/>||<sp/>mState<sp/>==<sp/>DECODER_STATE_BUFFERING)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!mStopDecodeThread<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(videoPlaying<sp/>||<sp/>audioPlaying)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throttleAudioDecoding<sp/>&amp;&amp;<sp/>throttleVideoDecoding)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>active<sp/>bitstreams&apos;<sp/>decode<sp/>is<sp/>well<sp/>ahead<sp/>of<sp/>the<sp/>playback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>position,<sp/>we<sp/>may<sp/>as<sp/>well<sp/>wait<sp/>for<sp/>the<sp/>playback<sp/>to<sp/>catch<sp/>up.<sp/>Note<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>audio<sp/>push<sp/>thread<sp/>acquires<sp/>and<sp/>notifies<sp/>the<sp/>decoder<sp/>monitor<sp/>every<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>pops<sp/>AudioData<sp/>off<sp/>the<sp/>audio<sp/>queue.<sp/>So<sp/>if<sp/>the<sp/>audio<sp/>push<sp/>thread<sp/>pops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>AudioData<sp/>off<sp/>the<sp/>audio<sp/>queue<sp/>right<sp/>after<sp/>that<sp/>queue<sp/>reported</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>was<sp/>non-empty<sp/>here,<sp/>we&apos;ll<sp/>receive<sp/>a<sp/>notification<sp/>on<sp/>the<sp/>decoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>monitor<sp/>which<sp/>will<sp/>wake<sp/>us<sp/>up<sp/>shortly<sp/>after<sp/>we<sp/>sleep,<sp/>thus<sp/>preventing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>both<sp/>the<sp/>decode<sp/>and<sp/>audio<sp/>push<sp/>threads<sp/>waiting<sp/>at<sp/>the<sp/>same<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>bug<sp/>620326.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDecodeThreadWaiting<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDecoder-&gt;GetState()<sp/>!=<sp/>MediaDecoder::PLAY_STATE_PLAYING)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>not<sp/>playing,<sp/>and<sp/>the<sp/>decode<sp/>is<sp/>about<sp/>to<sp/>wait.<sp/>This<sp/>means</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>decode<sp/>thread<sp/>may<sp/>not<sp/>be<sp/>needed<sp/>in<sp/>future.<sp/>Signal<sp/>the<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>machine<sp/>thread<sp/>to<sp/>run,<sp/>so<sp/>it<sp/>can<sp/>decide<sp/>whether<sp/>to<sp/>shutdown<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decode<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScheduleStateMachine();</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().Wait();</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDecodeThreadWaiting<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>decode<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mStopDecodeThread<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mState<sp/>!=<sp/>DECODER_STATE_SHUTDOWN<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mState<sp/>!=<sp/>DECODER_STATE_SEEKING)</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>mState<sp/>=<sp/>DECODER_STATE_COMPLETED;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>ScheduleStateMachine();</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Exiting<sp/>DecodeLoop&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::IsPlaying()</highlight></codeline>
<codeline lineno="955"><highlight class="normal">{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!mPlayStartTime.IsNull();</highlight></codeline>
<codeline lineno="959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WriteSilence(AudioStream*<sp/>aStream,<sp/>uint32_t<sp/>aFrames)</highlight></codeline>
<codeline lineno="962"><highlight class="normal">{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>uint32_t<sp/>numSamples<sp/>=<sp/>aFrames<sp/>*<sp/>aStream-&gt;GetChannels();</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>nsAutoTArray&lt;AudioDataValue,<sp/>1000&gt;<sp/>buf;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>buf.SetLength(numSamples);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>memset(buf.Elements(),<sp/>0,<sp/>numSamples<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(AudioDataValue));</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>aStream-&gt;Write(buf.Elements(),<sp/>aFrames);</highlight></codeline>
<codeline lineno="968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::AudioLoop()</highlight></codeline>
<codeline lineno="971"><highlight class="normal">{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnAudioThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>audio<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Begun<sp/>audio<sp/>thread/loop&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>int64_t<sp/>audioDuration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>int64_t<sp/>audioStartTime<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>uint32_t<sp/>channels,<sp/>rate;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>volume<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setVolume;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>int32_t<sp/>minWriteFrames<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioCompleted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>audioStartTime<sp/>=<sp/>mAudioStartTime;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>channels<sp/>=<sp/>mInfo.mAudioChannels;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>rate<sp/>=<sp/>mInfo.mAudioRate;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(audioStartTime<sp/>!=<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>have<sp/>audio<sp/>start<sp/>time<sp/>by<sp/>now&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>unsafe<sp/>to<sp/>call<sp/>some<sp/>methods<sp/>of<sp/>AudioStream<sp/>with<sp/>the<sp/>decoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>monitor<sp/>held,<sp/>as<sp/>on<sp/>Android<sp/>those<sp/>methods<sp/>do<sp/>a<sp/>synchronous<sp/>dispatch<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>main<sp/>thread.<sp/>If<sp/>the<sp/>audio<sp/>thread<sp/>holds<sp/>the<sp/>decoder<sp/>monitor<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>does<sp/>a<sp/>synchronous<sp/>dispatch<sp/>to<sp/>the<sp/>main<sp/>thread,<sp/>we<sp/>can<sp/>get<sp/>deadlocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>main<sp/>thread<sp/>tries<sp/>to<sp/>acquire<sp/>the<sp/>decoder<sp/>monitor<sp/>before<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dispatched<sp/>event<sp/>has<sp/>finished<sp/>(or<sp/>even<sp/>started!)<sp/>running.<sp/>Methods<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>unsafe<sp/>to<sp/>call<sp/>with<sp/>the<sp/>decoder<sp/>monitor<sp/>held<sp/>are<sp/>documented<sp/>as<sp/>such</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>AudioStream.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;AudioStream&gt;<sp/>audioStream<sp/>=<sp/>AudioStream::AllocateStream();</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>access<sp/>decoder<sp/>with<sp/>the<sp/>monitor<sp/>held<sp/>but<sp/>avoid<sp/>the<sp/>dead<sp/>lock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>issue<sp/>explaned<sp/>above,<sp/>to<sp/>hold<sp/>monitor<sp/>here<sp/>only<sp/>for<sp/>getting<sp/>audio<sp/>channel<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>AudioChannelType<sp/>audioChannelType;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>audioChannelType<sp/>=<sp/>mDecoder-&gt;GetAudioChannelType();</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>audioStream-&gt;Init(channels,<sp/>rate,<sp/>audioChannelType);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>must<sp/>hold<sp/>the<sp/>monitor<sp/>while<sp/>setting<sp/>mAudioStream<sp/>or<sp/>whenever<sp/>we<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>playback<sp/>position<sp/>off<sp/>the<sp/>audio<sp/>thread.<sp/>This<sp/>ensures<sp/>the<sp/>audio<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>always<sp/>alive<sp/>when<sp/>we<sp/>use<sp/>it<sp/>off<sp/>the<sp/>audio<sp/>thread.<sp/>Note<sp/>that<sp/>querying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>playback<sp/>position<sp/>does<sp/>not<sp/>do<sp/>a<sp/>synchronous<sp/>dispatch<sp/>to<sp/>the<sp/>main</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thread,<sp/>so<sp/>it&apos;s<sp/>safe<sp/>to<sp/>call<sp/>with<sp/>the<sp/>decoder<sp/>monitor<sp/>held.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioStream<sp/>=<sp/>audioStream;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>volume<sp/>=<sp/>mVolume;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioStream-&gt;SetVolume(volume);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>while<sp/>we&apos;re<sp/>not<sp/>playing,<sp/>and<sp/>we&apos;re<sp/>not<sp/>shutting<sp/>down,<sp/>or<sp/>we&apos;re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>playing<sp/>and<sp/>we&apos;ve<sp/>got<sp/>no<sp/>audio<sp/>to<sp/>play.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(mState<sp/>!=<sp/>DECODER_STATE_DECODING_METADATA,</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>have<sp/>meta<sp/>data<sp/>before<sp/>audio<sp/>started<sp/>playing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mState<sp/>!=<sp/>DECODER_STATE_SHUTDOWN<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!mStopAudioThread<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!IsPlaying()<sp/>||</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mState<sp/>==<sp/>DECODER_STATE_BUFFERING<sp/>||</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mReader-&gt;AudioQueue().GetSize()<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!mReader-&gt;AudioQueue().AtEndOfStream())))</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsPlaying()<sp/>&amp;&amp;<sp/>!mAudioStream-&gt;IsPaused())<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mAudioStream-&gt;Pause();</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mon.Wait();</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;re<sp/>shutting<sp/>down,<sp/>break<sp/>out<sp/>and<sp/>exit<sp/>the<sp/>audio<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>break<sp/>out<sp/>if<sp/>audio<sp/>is<sp/>being<sp/>captured.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>==<sp/>DECODER_STATE_SHUTDOWN<sp/>||</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStopAudioThread<sp/>||</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mReader-&gt;AudioQueue().AtEndOfStream())</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>only<sp/>want<sp/>to<sp/>go<sp/>to<sp/>the<sp/>expense<sp/>of<sp/>changing<sp/>the<sp/>volume<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>volume<sp/>has<sp/>changed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setVolume<sp/>=<sp/>volume<sp/>!=<sp/>mVolume;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>volume<sp/>=<sp/>mVolume;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>audio<sp/>stream<sp/>IsPaused()<sp/>does<sp/>not<sp/>do<sp/>synchronous<sp/>dispatch<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>main<sp/>thread<sp/>on<sp/>Android,<sp/>so<sp/>can<sp/>be<sp/>called<sp/>safely<sp/>with<sp/>the<sp/>decoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>monitor<sp/>held.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsPlaying()<sp/>&amp;&amp;<sp/>mAudioStream-&gt;IsPaused())<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mAudioStream-&gt;Resume();</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setVolume)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mAudioStream-&gt;SetVolume(volume);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minWriteFrames<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minWriteFrames<sp/>=<sp/>mAudioStream-&gt;GetMinWriteSize();</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(mReader-&gt;AudioQueue().GetSize()<sp/>&gt;<sp/>0,</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>have<sp/>data<sp/>to<sp/>play&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>if<sp/>there&apos;s<sp/>a<sp/>gap<sp/>in<sp/>the<sp/>audio.<sp/>If<sp/>there<sp/>is,<sp/>push<sp/>silence<sp/>into<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>audio<sp/>hardware,<sp/>so<sp/>we<sp/>can<sp/>play<sp/>across<sp/>the<sp/>gap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AudioData*<sp/>s<sp/>=<sp/>mReader-&gt;AudioQueue().PeekFront();</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>number<sp/>of<sp/>frames<sp/>that<sp/>have<sp/>been<sp/>pushed<sp/>onto<sp/>the<sp/>audio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hardware.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckedInt64<sp/>playedFrames<sp/>=<sp/>UsecsToFrames(audioStartTime,<sp/>rate)<sp/>+</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>audioDuration;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>timestamp<sp/>of<sp/>the<sp/>next<sp/>chunk<sp/>of<sp/>audio<sp/>in<sp/>numbers<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckedInt64<sp/>sampleTime<sp/>=<sp/>UsecsToFrames(s-&gt;mTime,<sp/>rate);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckedInt64<sp/>missingFrames<sp/>=<sp/>sampleTime<sp/>-<sp/>playedFrames;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!missingFrames.isValid()<sp/>||<sp/>!sampleTime.isValid())<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_WARNING(</highlight><highlight class="stringliteral">&quot;Int<sp/>overflow<sp/>adding<sp/>in<sp/>AudioLoop()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>framesWritten<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(missingFrames.value()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>next<sp/>audio<sp/>chunk<sp/>begins<sp/>some<sp/>time<sp/>after<sp/>the<sp/>end<sp/>of<sp/>the<sp/>last<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>pushed<sp/>to<sp/>the<sp/>audio<sp/>hardware.<sp/>We<sp/>must<sp/>push<sp/>silence<sp/>into<sp/>the<sp/>audio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hardware<sp/>so<sp/>that<sp/>the<sp/>next<sp/>audio<sp/>chunk<sp/>begins<sp/>playback<sp/>at<sp/>the<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>missingFrames<sp/>=<sp/>NS_MIN&lt;int64_t&gt;(UINT32_MAX,<sp/>missingFrames.value());</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Decoder<sp/>playing<sp/>%d<sp/>frames<sp/>of<sp/>silence&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),<sp/>int32_t(missingFrames.value())));</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>framesWritten<sp/>=<sp/>PlaySilence(static_cast&lt;uint32_t&gt;(missingFrames.value()),</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels,<sp/>playedFrames.value());</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>framesWritten<sp/>=<sp/>PlayFromAudioQueue(sampleTime.value(),<sp/>channels);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>audioDuration<sp/>+=<sp/>framesWritten;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckedInt64<sp/>playedUsecs<sp/>=<sp/>FramesToUsecs(audioDuration,<sp/>rate)<sp/>+<sp/>audioStartTime;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!playedUsecs.isValid())<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_WARNING(</highlight><highlight class="stringliteral">&quot;Int<sp/>overflow<sp/>calculating<sp/>audio<sp/>end<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mAudioEndTime<sp/>=<sp/>playedUsecs.value();</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mReader-&gt;AudioQueue().AtEndOfStream()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mState<sp/>!=<sp/>DECODER_STATE_SHUTDOWN<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!mStopAudioThread)</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>frame<sp/>pushed<sp/>to<sp/>audio<sp/>hardware,<sp/>wait<sp/>for<sp/>the<sp/>audio<sp/>to<sp/>finish,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>the<sp/>audio<sp/>thread<sp/>terminates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>seeking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>unplayedFrames<sp/>=<sp/>audioDuration<sp/>%<sp/>minWriteFrames;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minWriteFrames<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>unplayedFrames<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sound<sp/>is<sp/>written<sp/>by<sp/>libsydneyaudio<sp/>to<sp/>the<sp/>hardware<sp/>in<sp/>blocks<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>frames<sp/>of<sp/>size<sp/>minWriteFrames.<sp/>So<sp/>if<sp/>the<sp/>number<sp/>of<sp/>frames<sp/>we&apos;ve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>written<sp/>isn&apos;t<sp/>an<sp/>exact<sp/>multiple<sp/>of<sp/>minWriteFrames,<sp/>we&apos;ll<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>left<sp/>over<sp/>audio<sp/>data<sp/>which<sp/>hasn&apos;t<sp/>yet<sp/>been<sp/>written<sp/>to<sp/>the<sp/>hardware,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>so<sp/>that<sp/>audio<sp/>will<sp/>not<sp/>start<sp/>playing.<sp/>Write<sp/>silence<sp/>to<sp/>ensure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>block<sp/>gets<sp/>pushed<sp/>to<sp/>hardware,<sp/>so<sp/>that<sp/>playback<sp/>starts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>framesToWrite<sp/>=<sp/>minWriteFrames<sp/>-<sp/>unplayedFrames;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(framesToWrite<sp/>&lt;<sp/>UINT32_MAX<sp/>/<sp/>channels)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>silence<sp/>manually<sp/>rather<sp/>than<sp/>using<sp/>PlaySilence(),<sp/>so<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>AudioAPI<sp/>doesn&apos;t<sp/>get<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>audio<sp/>frames.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exit(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteSilence(mAudioStream,<sp/>framesToWrite);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>oldPosition<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>position<sp/>=<sp/>GetMediaTime();</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(oldPosition<sp/>!=<sp/>position<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mAudioEndTime<sp/>-<sp/>position<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mState<sp/>!=<sp/>DECODER_STATE_SEEKING<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mState<sp/>!=<sp/>DECODER_STATE_SHUTDOWN)</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>DRAIN_BLOCK_USECS<sp/>=<sp/>100000;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Wait(NS_MIN(mAudioEndTime<sp/>-<sp/>position,<sp/>DRAIN_BLOCK_USECS));</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldPosition<sp/>=<sp/>position;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/>=<sp/>GetMediaTime();</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seeking<sp/>=<sp/>mState<sp/>==<sp/>DECODER_STATE_SEEKING;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!seeking<sp/>&amp;&amp;<sp/>!mAudioStream-&gt;IsPaused())<sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exit(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mAudioStream-&gt;Drain();</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fire<sp/>one<sp/>last<sp/>event<sp/>for<sp/>any<sp/>extra<sp/>frames<sp/>that<sp/>didn&apos;t<sp/>fill<sp/>a<sp/>framebuffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mEventManager.Drain(mAudioEndTime);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Reached<sp/>audio<sp/>stream<sp/>end.&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>hold<sp/>lock<sp/>while<sp/>anulling<sp/>the<sp/>audio<sp/>stream<sp/>to<sp/>prevent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>machine<sp/>thread<sp/>trying<sp/>to<sp/>use<sp/>it<sp/>while<sp/>we&apos;re<sp/>destroying<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioStream<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>mEventManager.Clear();</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioCaptured)<sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mAudioCompleted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UpdateReadyState();</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Kick<sp/>the<sp/>decode<sp/>thread;<sp/>it<sp/>may<sp/>be<sp/>sleeping<sp/>waiting<sp/>for<sp/>this<sp/>to<sp/>finish.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().NotifyAll();</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>not<sp/>hold<sp/>the<sp/>decoder<sp/>monitor<sp/>while<sp/>we<sp/>shutdown<sp/>the<sp/>audio<sp/>stream,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>makes<sp/>a<sp/>synchronous<sp/>dispatch<sp/>on<sp/>Android.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>audioStream-&gt;Shutdown();</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>audioStream<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Audio<sp/>stream<sp/>finished<sp/>playing,<sp/>audio<sp/>thread<sp/>exit&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal">uint32_t<sp/>MediaDecoderStateMachine::PlaySilence(uint32_t<sp/>aFrames,</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>aChannels,</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>aFrameOffset)</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnAudioThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>audio<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!mAudioStream-&gt;IsPaused(),<sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>play<sp/>when<sp/>paused&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>uint32_t<sp/>maxFrames<sp/>=<sp/>SILENCE_BYTES_CHUNK<sp/>/<sp/>aChannels<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(AudioDataValue);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>uint32_t<sp/>frames<sp/>=<sp/>NS_MIN(aFrames,<sp/>maxFrames);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>WriteSilence(mAudioStream,<sp/>frames);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Dispatch<sp/>events<sp/>to<sp/>the<sp/>DOM<sp/>for<sp/>the<sp/>audio<sp/>just<sp/>written.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>mEventManager.QueueWrittenAudioData(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>frames<sp/>*<sp/>aChannels,</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(aFrameOffset<sp/>+<sp/>frames)<sp/>*<sp/>aChannels);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frames;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal">uint32_t<sp/>MediaDecoderStateMachine::PlayFromAudioQueue(uint64_t<sp/>aFrameOffset,</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>aChannels)</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnAudioThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>audio<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!mAudioStream-&gt;IsPaused(),<sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>play<sp/>when<sp/>paused&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>nsAutoPtr&lt;AudioData&gt;<sp/>audio(mReader-&gt;AudioQueue().PopFront());</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_WARN_IF_FALSE(IsPlaying(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>playing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(!mAudioCaptured,<sp/></highlight><highlight class="stringliteral">&quot;Audio<sp/>cannot<sp/>be<sp/>captured<sp/>here!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Awaken<sp/>the<sp/>decode<sp/>loop<sp/>if<sp/>it&apos;s<sp/>waiting<sp/>for<sp/>space<sp/>to<sp/>free<sp/>up<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>audio<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().NotifyAll();</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>int64_t<sp/>offset<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>uint32_t<sp/>frames<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Decoder<sp/>playing<sp/>%d<sp/>frames<sp/>of<sp/>data<sp/>to<sp/>stream<sp/>for<sp/>AudioData<sp/>at<sp/>%lld&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),<sp/>audio-&gt;mFrames,<sp/>audio-&gt;mTime));</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>mAudioStream-&gt;Write(audio-&gt;mAudioData,</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>audio-&gt;mFrames);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>offset<sp/>=<sp/>audio-&gt;mOffset;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/>frames<sp/>=<sp/>audio-&gt;mFrames;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Dispatch<sp/>events<sp/>to<sp/>the<sp/>DOM<sp/>for<sp/>the<sp/>audio<sp/>just<sp/>written.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>mEventManager.QueueWrittenAudioData(audio-&gt;mAudioData.get(),</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>audio-&gt;mFrames<sp/>*<sp/>aChannels,</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(aFrameOffset<sp/>+<sp/>frames)<sp/>*<sp/>aChannels);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder-&gt;UpdatePlaybackOffset(offset);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frames;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal">nsresult<sp/>MediaDecoderStateMachine::Init(MediaDecoderStateMachine*<sp/>aCloneDonor)</highlight></codeline>
<codeline lineno="1237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>MediaDecoderReader*<sp/>cloneReader<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aCloneDonor)<sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>cloneReader<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">MediaDecoderStateMachine*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(aCloneDonor)-&gt;mReader;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mReader-&gt;Init(cloneReader);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::StopPlayback()</highlight></codeline>
<codeline lineno="1246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>StopPlayback()&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnStateMachineThread()<sp/>||<sp/>OnDecodeThread(),</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>state<sp/>machine<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/>mDecoder-&gt;mPlaybackStatistics.Stop(TimeStamp::Now());</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsPlaying())<sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>mPlayDuration<sp/>+=<sp/>DurationToUsecs(TimeStamp::Now()<sp/>-<sp/>mPlayStartTime);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>mPlayStartTime<sp/>=<sp/>TimeStamp();</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>the<sp/>audio<sp/>thread,<sp/>so<sp/>that<sp/>it<sp/>notices<sp/>that<sp/>we&apos;ve<sp/>stopped<sp/>playing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>it<sp/>can<sp/>pause<sp/>audio<sp/>playback.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().NotifyAll();</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!IsPlaying(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>report<sp/>not<sp/>playing<sp/>at<sp/>end<sp/>of<sp/>StopPlayback()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::StartPlayback()</highlight></codeline>
<codeline lineno="1266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>StartPlayback()&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!IsPlaying(),<sp/></highlight><highlight class="stringliteral">&quot;Shouldn&apos;t<sp/>be<sp/>playing<sp/>when<sp/>StartPlayback()<sp/>is<sp/>called&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>StartPlayback&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>mDecoder-&gt;mPlaybackStatistics.Start(TimeStamp::Now());</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>mPlayStartTime<sp/>=<sp/>TimeStamp::Now();</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>NS_ASSERTION(IsPlaying(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>report<sp/>playing<sp/>by<sp/>end<sp/>of<sp/>StartPlayback()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(StartAudioThread()))<sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_WARNING(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>audio<sp/>thread&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().NotifyAll();</highlight></codeline>
<codeline lineno="1280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::UpdatePlaybackPositionInternal(int64_t<sp/>aTime)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnStateMachineThread()<sp/>||<sp/>OnDecodeThread(),</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>state<sp/>machine<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mStartTime<sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>have<sp/>positive<sp/>mStartTime&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/>mCurrentFrameTime<sp/>=<sp/>aTime<sp/>-<sp/>mStartTime;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mCurrentFrameTime<sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;CurrentTime<sp/>should<sp/>be<sp/>positive!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aTime<sp/>&gt;<sp/>mEndTime)<sp/>{</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(mCurrentFrameTime<sp/>&gt;<sp/>GetDuration(),</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CurrentTime<sp/>must<sp/>be<sp/>after<sp/>duration<sp/>if<sp/>aTime<sp/>&gt;<sp/>endTime!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>mEndTime<sp/>=<sp/>aTime;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(mDecoder,<sp/>&amp;MediaDecoder::DurationChanged);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(event,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::UpdatePlaybackPosition(int64_t<sp/>aTime)</highlight></codeline>
<codeline lineno="1302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>UpdatePlaybackPositionInternal(aTime);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fragmentEnded<sp/>=<sp/>mFragmentEndTime<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>GetMediaTime()<sp/>&gt;=<sp/>mFragmentEndTime;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mPositionChangeQueued<sp/>||<sp/>fragmentEnded)<sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>mPositionChangeQueued<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(mDecoder,<sp/>&amp;MediaDecoder::PlaybackPositionChanged);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(event,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>DOM<sp/>of<sp/>any<sp/>queued<sp/>up<sp/>audioavailable<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>mEventManager.DispatchPendingEvents(GetMediaTime());</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fragmentEnded)<sp/>{</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>StopPlayback();</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::ClearPositionChangeFlag()</highlight></codeline>
<codeline lineno="1322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/>mPositionChangeQueued<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal">MediaDecoderOwner::NextFrameStatus<sp/>MediaDecoderStateMachine::GetNextFrameStatus()</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsBuffering()<sp/>||<sp/>IsSeeking())<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MediaDecoderOwner::NEXT_FRAME_UNAVAILABLE_BUFFERING;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HaveNextFrameData())<sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MediaDecoderOwner::NEXT_FRAME_AVAILABLE;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MediaDecoderOwner::NEXT_FRAME_UNAVAILABLE;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::SetVolume(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>volume)</highlight></codeline>
<codeline lineno="1341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>mVolume<sp/>=<sp/>volume;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::SetAudioCaptured(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aCaptured)</highlight></codeline>
<codeline lineno="1348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioCaptured<sp/>&amp;&amp;<sp/>aCaptured<sp/>&amp;&amp;<sp/>!mStopAudioThread)<sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>state<sp/>machine<sp/>runs<sp/>as<sp/>soon<sp/>as<sp/>possible.<sp/>That<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>the<sp/>audio<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>mStopAudioThread<sp/>is<sp/>true<sp/>then<sp/>we&apos;re<sp/>already<sp/>stopping<sp/>the<sp/>audio<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>since<sp/>we<sp/>set<sp/>mAudioCaptured<sp/>to<sp/>true,<sp/>nothing<sp/>can<sp/>start<sp/>it<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>ScheduleStateMachine();</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>mAudioCaptured<sp/>=<sp/>aCaptured;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::GetCurrentTime()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1362"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread()<sp/>||</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OnStateMachineThread()<sp/>||</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OnDecodeThread(),</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main,<sp/>decode,<sp/>or<sp/>state<sp/>machine<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mCurrentFrameTime)<sp/>/<sp/>static_cast&lt;double&gt;(USECS_PER_S);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal">int64_t<sp/>MediaDecoderStateMachine::GetDuration()</highlight></codeline>
<codeline lineno="1372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mEndTime<sp/>==<sp/>-1<sp/>||<sp/>mStartTime<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mEndTime<sp/>-<sp/>mStartTime;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::SetDuration(int64_t<sp/>aDuration)</highlight></codeline>
<codeline lineno="1381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread()<sp/>||<sp/>OnDecodeThread(),</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>or<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aDuration<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mStartTime<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>mEndTime<sp/>=<sp/>mStartTime<sp/>+<sp/>aDuration;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>mStartTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>mEndTime<sp/>=<sp/>aDuration;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::SetEndTime(int64_t<sp/>aEndTime)</highlight></codeline>
<codeline lineno="1399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnDecodeThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>decode<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>mEndTime<sp/>=<sp/>aEndTime;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::SetFragmentEndTime(int64_t<sp/>aEndTime)</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/>mFragmentEndTime<sp/>=<sp/>aEndTime<sp/>&lt;<sp/>0<sp/>?<sp/>aEndTime<sp/>:<sp/>aEndTime<sp/>+<sp/>mStartTime;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::SetSeekable(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aSeekable)</highlight></codeline>
<codeline lineno="1414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/>mSeekable<sp/>=<sp/>aSeekable;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::Shutdown()</highlight></codeline>
<codeline lineno="1422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Once<sp/>we&apos;ve<sp/>entered<sp/>the<sp/>shutdown<sp/>state<sp/>here<sp/>there&apos;s<sp/>no<sp/>going<sp/>back.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>state<sp/>before<sp/>issuing<sp/>shutdown<sp/>request<sp/>to<sp/>threads<sp/>so<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>threads<sp/>can<sp/>start<sp/>exiting<sp/>cleanly<sp/>during<sp/>the<sp/>Shutdown<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Changed<sp/>state<sp/>to<sp/>SHUTDOWN&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>ScheduleStateMachine();</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/>mState<sp/>=<sp/>DECODER_STATE_SHUTDOWN;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().NotifyAll();</highlight></codeline>
<codeline lineno="1434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::StartDecoding()</highlight></codeline>
<codeline lineno="1437"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnStateMachineThread()<sp/>||<sp/>OnDecodeThread(),</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>state<sp/>machine<sp/>or<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>!=<sp/>DECODER_STATE_DECODING)<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecodeStartTime<sp/>=<sp/>TimeStamp::Now();</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>mState<sp/>=<sp/>DECODER_STATE_DECODING;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>ScheduleStateMachine();</highlight></codeline>
<codeline lineno="1446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::Play()</highlight></codeline>
<codeline lineno="1449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>asked<sp/>to<sp/>play,<sp/>switch<sp/>to<sp/>decoding<sp/>state<sp/>only<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>currently<sp/>buffering.<sp/>In<sp/>other<sp/>cases,<sp/>we&apos;ll<sp/>start<sp/>playing<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>the<sp/>state<sp/>machine<sp/>notices<sp/>the<sp/>decoder&apos;s<sp/>state<sp/>change<sp/>to<sp/>PLAYING.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>==<sp/>DECODER_STATE_BUFFERING)<sp/>{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Changed<sp/>state<sp/>from<sp/>BUFFERING<sp/>to<sp/>DECODING&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>mState<sp/>=<sp/>DECODER_STATE_DECODING;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecodeStartTime<sp/>=<sp/>TimeStamp::Now();</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/>ScheduleStateMachine();</highlight></codeline>
<codeline lineno="1461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::ResetPlayback()</highlight></codeline>
<codeline lineno="1464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnDecodeThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/>mVideoFrameEndTime<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>mAudioStartTime<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>mAudioEndTime<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>mAudioCompleted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::NotifyDataArrived(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aBuffer,</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>aLength,</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>aOffset)</highlight></codeline>
<codeline lineno="1475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/>mReader-&gt;NotifyDataArrived(aBuffer,<sp/>aLength,<sp/>aOffset);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>While<sp/>playing<sp/>an<sp/>unseekable<sp/>stream<sp/>of<sp/>unknown<sp/>duration,<sp/>mEndTime<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>updated<sp/>(in<sp/>AdvanceFrame())<sp/>as<sp/>we<sp/>play.<sp/>But<sp/>if<sp/>data<sp/>is<sp/>being<sp/>downloaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>faster<sp/>than<sp/>played,<sp/>mEndTime<sp/>won&apos;t<sp/>reflect<sp/>the<sp/>end<sp/>of<sp/>playable<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>we<sp/>haven&apos;t<sp/>played<sp/>the<sp/>frame<sp/>at<sp/>the<sp/>end<sp/>of<sp/>buffered<sp/>data.<sp/>So<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mEndTime<sp/>here<sp/>as<sp/>new<sp/>data<sp/>is<sp/>downloaded<sp/>to<sp/>prevent<sp/>such<sp/>a<sp/>lag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>nsTimeRanges<sp/>buffered;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDecoder-&gt;IsInfinite()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_SUCCEEDED(mDecoder-&gt;GetBuffered(&amp;buffered)))</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>buffered.GetLength(&amp;length);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length)<sp/>{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffered.End(length<sp/>-<sp/>1,<sp/>&amp;end);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mEndTime<sp/>=<sp/>NS_MAX&lt;int64_t&gt;(mEndTime,<sp/>end<sp/>*<sp/>USECS_PER_S);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::Seek(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aTime)</highlight></codeline>
<codeline lineno="1500"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MediaDecoder::mPlayState<sp/>should<sp/>be<sp/>SEEKING<sp/>while<sp/>we<sp/>seek,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>that<sp/>case<sp/>MediaDecoder<sp/>shouldn&apos;t<sp/>be<sp/>calling<sp/>us.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mState<sp/>!=<sp/>DECODER_STATE_SEEKING,</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;We<sp/>shouldn&apos;t<sp/>already<sp/>be<sp/>seeking&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mState<sp/>&gt;=<sp/>DECODER_STATE_DECODING,</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;We<sp/>should<sp/>have<sp/>loaded<sp/>metadata&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>aTime<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(USECS_PER_S);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>INT64_MAX)<sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>integer<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/>mSeekTime<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t)<sp/>+<sp/>mStartTime;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mSeekTime<sp/>&gt;=<sp/>mStartTime<sp/>&amp;&amp;<sp/>mSeekTime<sp/>&lt;=<sp/>mEndTime,</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>only<sp/>seek<sp/>in<sp/>range<sp/>[0,duration]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Bound<sp/>the<sp/>seek<sp/>time<sp/>to<sp/>be<sp/>inside<sp/>the<sp/>media<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mStartTime<sp/>!=<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>know<sp/>start<sp/>time<sp/>by<sp/>now&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mEndTime<sp/>!=<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>know<sp/>end<sp/>time<sp/>by<sp/>now&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/>mSeekTime<sp/>=<sp/>NS_MIN(mSeekTime,<sp/>mEndTime);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/>mSeekTime<sp/>=<sp/>NS_MAX(mStartTime,<sp/>mSeekTime);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Changed<sp/>state<sp/>to<sp/>SEEKING<sp/>(to<sp/>%f)&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get(),<sp/>aTime));</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/>mState<sp/>=<sp/>DECODER_STATE_SEEKING;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDecoder-&gt;GetDecodedStream())<sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder-&gt;RecreateDecodedStream(mSeekTime<sp/>-<sp/>mStartTime);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>ScheduleStateMachine();</highlight></codeline>
<codeline lineno="1530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::StopDecodeThread()</highlight></codeline>
<codeline lineno="1533"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnStateMachineThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>state<sp/>machine<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mRequestedNewDecodeThread)<sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ve<sp/>requested<sp/>that<sp/>the<sp/>decode<sp/>be<sp/>created,<sp/>but<sp/>it<sp/>hasn&apos;t<sp/>been<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cancel<sp/>that<sp/>request.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(!mDecodeThread,</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Shouldn&apos;t<sp/>have<sp/>a<sp/>decode<sp/>thread<sp/>until<sp/>after<sp/>request<sp/>processed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>StateMachineTracker::Instance().CancelCreateDecodeThread(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>mRequestedNewDecodeThread<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>mStopDecodeThread<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().NotifyAll();</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDecodeThread)<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Shutdown<sp/>decode<sp/>thread&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exitMon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDecodeThread-&gt;Shutdown();</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StateMachineTracker::Instance().NoteDecodeThreadDestroyed();</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecodeThread<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecodeThreadIdle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!mRequestedNewDecodeThread,</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Any<sp/>pending<sp/>requests<sp/>for<sp/>decode<sp/>threads<sp/>must<sp/>be<sp/>canceled<sp/>and<sp/>unflagged&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!StateMachineTracker::Instance().IsQueued(</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Any<sp/>pending<sp/>requests<sp/>for<sp/>decode<sp/>threads<sp/>must<sp/>be<sp/>canceled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::StopAudioThread()</highlight></codeline>
<codeline lineno="1563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnDecodeThread()<sp/>||</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OnStateMachineThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>decode<sp/>thread<sp/>or<sp/>state<sp/>machine<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mStopAudioThread)<sp/>{</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do,<sp/>since<sp/>the<sp/>thread<sp/>is<sp/>already<sp/>stopping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/>mStopAudioThread<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().NotifyAll();</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAudioThread)<sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Shutdown<sp/>audio<sp/>thread&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exitMon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mAudioThread-&gt;Shutdown();</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioThread<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>that<sp/>the<sp/>audio<sp/>thread<sp/>is<sp/>dead,<sp/>try<sp/>sending<sp/>data<sp/>to<sp/>our<sp/>MediaStream(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>That<sp/>may<sp/>have<sp/>been<sp/>waiting<sp/>for<sp/>the<sp/>audio<sp/>thread<sp/>to<sp/>stop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>SendStreamData();</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="1589"><highlight class="normal">MediaDecoderStateMachine::ScheduleDecodeThread()</highlight></codeline>
<codeline lineno="1590"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnStateMachineThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>state<sp/>machine<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/>mStopDecodeThread<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>&gt;=<sp/>DECODER_STATE_COMPLETED)<sp/>{</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDecodeThread)<sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(!mRequestedNewDecodeThread,</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Shouldn&apos;t<sp/>have<sp/>requested<sp/>new<sp/>decode<sp/>thread<sp/>when<sp/>we<sp/>have<sp/>a<sp/>decode<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>already<sp/>have<sp/>a<sp/>decode<sp/>thread...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDecodeThreadIdle)<sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>and<sp/>it&apos;s<sp/>not<sp/>been<sp/>shutdown<sp/>yet,<sp/>wake<sp/>it<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;MediaDecoderStateMachine::DecodeThreadRun);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDecodeThread-&gt;Dispatch(event,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDecodeThreadIdle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mRequestedNewDecodeThread)<sp/>{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>already<sp/>have<sp/>a<sp/>decode<sp/>thread,<sp/>request<sp/>a<sp/>new<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>mRequestedNewDecodeThread<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>StateMachineTracker::Instance().RequestCreateDecodeThread(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="1620"><highlight class="normal">MediaDecoderStateMachine::StartDecodeThread()</highlight></codeline>
<codeline lineno="1621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/>NS_ASSERTION(StateMachineTracker::Instance().GetDecodeThreadCount()<sp/>&lt;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StateMachineTracker::MAX_DECODE_THREADS,</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>not<sp/>have<sp/>reached<sp/>decode<sp/>thread<sp/>limit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!StateMachineTracker::Instance().IsQueued(</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>not<sp/>already<sp/>have<sp/>a<sp/>pending<sp/>request<sp/>for<sp/>a<sp/>new<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnStateMachineThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>state<sp/>machine<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!mDecodeThread,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>not<sp/>have<sp/>decode<sp/>thread<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mRequestedNewDecodeThread,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>have<sp/>requested<sp/>this...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/>mRequestedNewDecodeThread<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>NS_NewNamedThread(</highlight><highlight class="stringliteral">&quot;Media<sp/>Decode&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getter_AddRefs(mDecodeThread),</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_THREAD_STACK_SIZE);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))<sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Give<sp/>up,<sp/>report<sp/>error<sp/>to<sp/>media<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(mDecoder,<sp/>&amp;MediaDecoder::DecodeError);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(event,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;MediaDecoderStateMachine::DecodeThreadRun);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>mDecodeThread-&gt;Dispatch(event,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/>mDecodeThreadIdle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="1656"><highlight class="normal">MediaDecoderStateMachine::StartAudioThread()</highlight></codeline>
<codeline lineno="1657"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnStateMachineThread()<sp/>||<sp/>OnDecodeThread(),</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>state<sp/>machine<sp/>or<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAudioCaptured)<sp/>{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(mStopAudioThread,<sp/></highlight><highlight class="stringliteral">&quot;mStopAudioThread<sp/>must<sp/>always<sp/>be<sp/>true<sp/>if<sp/>audio<sp/>is<sp/>captured&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/>mStopAudioThread<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasAudio()<sp/>&amp;&amp;<sp/>!mAudioThread)<sp/>{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>NS_NewNamedThread(</highlight><highlight class="stringliteral">&quot;Media<sp/>Audio&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getter_AddRefs(mAudioThread),</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_THREAD_STACK_SIZE);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))<sp/>{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Changed<sp/>state<sp/>to<sp/>SHUTDOWN<sp/>because<sp/>failed<sp/>to<sp/>create<sp/>audio<sp/>thread&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mState<sp/>=<sp/>DECODER_STATE_SHUTDOWN;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;MediaDecoderStateMachine::AudioLoop);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioThread-&gt;Dispatch(event,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal">int64_t<sp/>MediaDecoderStateMachine::AudioDecodedUsecs()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1686"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/>NS_ASSERTION(HasAudio(),</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>only<sp/>call<sp/>AudioDecodedUsecs()<sp/>when<sp/>we<sp/>have<sp/>audio&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>amount<sp/>of<sp/>audio<sp/>we<sp/>have<sp/>decoded<sp/>is<sp/>the<sp/>amount<sp/>of<sp/>audio<sp/>data<sp/>we&apos;ve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>decoded<sp/>and<sp/>pushed<sp/>to<sp/>the<sp/>hardware,<sp/>plus<sp/>the<sp/>amount<sp/>of<sp/>audio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>waiting<sp/>to<sp/>be<sp/>pushed<sp/>to<sp/>the<sp/>hardware.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/>int64_t<sp/>pushed<sp/>=<sp/>(mAudioEndTime<sp/>!=<sp/>-1)<sp/>?<sp/>(mAudioEndTime<sp/>-<sp/>GetMediaTime())<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pushed<sp/>+<sp/>mReader-&gt;AudioQueue().Duration();</highlight></codeline>
<codeline lineno="1694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::HasLowDecodedData(int64_t<sp/>aAudioUsecs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1697"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>consider<sp/>ourselves<sp/>low<sp/>on<sp/>decoded<sp/>data<sp/>if<sp/>we&apos;re<sp/>low<sp/>on<sp/>audio,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>provided<sp/>we&apos;ve<sp/>not<sp/>decoded<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>audio<sp/>stream,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we&apos;re<sp/>only<sp/>playing<sp/>video<sp/>and<sp/>we&apos;re<sp/>low<sp/>on<sp/>video<sp/>frames,<sp/>provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;ve<sp/>not<sp/>decoded<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>video<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((HasAudio()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!mReader-&gt;AudioQueue().IsFinished()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AudioDecodedUsecs()<sp/>&lt;<sp/>aAudioUsecs)</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!HasAudio()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasVideo()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!mReader-&gt;VideoQueue().IsFinished()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mReader-&gt;VideoQueue().GetSize())<sp/>&lt;<sp/>LOW_VIDEO_FRAMES));</highlight></codeline>
<codeline lineno="1711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::HasLowUndecodedData()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1714"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetUndecodedData()<sp/>&lt;<sp/>mLowDataThresholdUsecs;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal">int64_t<sp/>MediaDecoderStateMachine::GetUndecodedData()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1719"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mState<sp/>&gt;<sp/>DECODER_STATE_DECODING_METADATA,</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>have<sp/>loaded<sp/>metadata<sp/>for<sp/>GetBuffered()<sp/>to<sp/>work&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/>nsTimeRanges<sp/>buffered;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/>nsresult<sp/>res<sp/>=<sp/>mDecoder-&gt;GetBuffered(&amp;buffered);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/>NS_ENSURE_SUCCESS(res,<sp/>0);</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentTime<sp/>=<sp/>GetCurrentTime();</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/>nsIDOMTimeRanges*<sp/>r<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">nsIDOMTimeRanges*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;buffered);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/>uint32_t<sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>r-&gt;GetLength(&amp;length);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/>NS_ENSURE_SUCCESS(res,<sp/>0);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>length;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start,<sp/>end;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>r-&gt;Start(index,<sp/>&amp;start);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ENSURE_SUCCESS(res,<sp/>0);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>r-&gt;End(index,<sp/>&amp;end);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ENSURE_SUCCESS(res,<sp/>0);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>currentTime<sp/>&amp;&amp;<sp/>end<sp/>&gt;=<sp/>currentTime)<sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((end<sp/>-<sp/>currentTime)<sp/>*<sp/>USECS_PER_S);</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::SetFrameBufferLength(uint32_t<sp/>aLength)</highlight></codeline>
<codeline lineno="1750"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/>NS_ASSERTION(aLength<sp/>&gt;=<sp/>512<sp/>&amp;&amp;<sp/>aLength<sp/>&lt;=<sp/>16384,</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>length<sp/>must<sp/>be<sp/>between<sp/>512<sp/>and<sp/>16384&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/>mEventManager.SetSignalBufferLength(aLength);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal">nsresult<sp/>MediaDecoderStateMachine::DecodeMetadata()</highlight></codeline>
<codeline lineno="1758"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnDecodeThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mState<sp/>==<sp/>DECODER_STATE_DECODING_METADATA,</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>when<sp/>in<sp/>metadata<sp/>decoding<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Decoding<sp/>Media<sp/>Headers&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/>nsresult<sp/>res;</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/>nsVideoInfo<sp/>info;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/>MetadataTags*<sp/>tags;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exitMon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>mReader-&gt;ReadMetadata(&amp;info,<sp/>&amp;tags);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/>mInfo<sp/>=<sp/>info;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(res)<sp/>||<sp/>(!info.mHasVideo<sp/>&amp;&amp;<sp/>!info.mHasAudio))<sp/>{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dispatch<sp/>the<sp/>event<sp/>to<sp/>call<sp/>DecodeError<sp/>synchronously.<sp/>This<sp/>ensures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;re<sp/>in<sp/>shutdown<sp/>state<sp/>by<sp/>the<sp/>time<sp/>we<sp/>exit<sp/>the<sp/>decode<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>just<sp/>moved<sp/>to<sp/>shutdown<sp/>state<sp/>here<sp/>on<sp/>the<sp/>decode<sp/>thread,<sp/>we<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cause<sp/>the<sp/>state<sp/>machine<sp/>to<sp/>shutdown/free<sp/>memory<sp/>without<sp/>closing<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>media<sp/>stream<sp/>properly,<sp/>and<sp/>we&apos;ll<sp/>get<sp/>callbacks<sp/>from<sp/>the<sp/>media<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>causing<sp/>a<sp/>crash.<sp/>Note<sp/>the<sp/>state<sp/>machine<sp/>shutdown<sp/>joins<sp/>this<sp/>decode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thread<sp/>during<sp/>shutdown<sp/>(and<sp/>other<sp/>state<sp/>machines<sp/>can<sp/>run<sp/>on<sp/>the<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>machine<sp/>thread<sp/>while<sp/>the<sp/>join<sp/>is<sp/>waiting),<sp/>so<sp/>it&apos;s<sp/>safe<sp/>to<sp/>do<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>synchronously.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(mDecoder,<sp/>&amp;MediaDecoder::DecodeError);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exitMon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(event,<sp/>NS_DISPATCH_SYNC);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/>mDecoder-&gt;StartProgressUpdates();</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/>mGotDurationFromMetaData<sp/>=<sp/>(GetDuration()<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/>VideoData*<sp/>videoData<sp/>=<sp/>FindStartTime();</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(videoData)<sp/>{</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exitMon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>RenderVideoFrame(videoData,<sp/>TimeStamp::Now());</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>==<sp/>DECODER_STATE_SHUTDOWN)<sp/>{</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mStartTime<sp/>!=<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>have<sp/>start<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/>NS_ASSERTION((!HasVideo()<sp/>&amp;&amp;<sp/>!HasAudio())<sp/>||</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!mSeekable<sp/>||<sp/>mEndTime<sp/>!=<sp/>-1,</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Active<sp/>seekable<sp/>media<sp/>should<sp/>have<sp/>end<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!mSeekable<sp/>||<sp/>GetDuration()<sp/>!=<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Seekable<sp/>media<sp/>should<sp/>have<sp/>duration&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Media<sp/>goes<sp/>from<sp/>%lld<sp/>to<sp/>%lld<sp/>(duration<sp/>%lld)<sp/>seekable=%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),<sp/>mStartTime,<sp/>mEndTime,<sp/>GetDuration(),<sp/>mSeekable));</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Inform<sp/>the<sp/>element<sp/>that<sp/>we&apos;ve<sp/>loaded<sp/>the<sp/>metadata<sp/>and<sp/>the<sp/>first<sp/>frame,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>the<sp/>default<sp/>framebuffer<sp/>size<sp/>for<sp/>audioavailable<sp/>events.<sp/><sp/>Also,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>is<sp/>audio,<sp/>let<sp/>the<sp/>MozAudioAvailable<sp/>event<sp/>manager<sp/>know<sp/>about</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>metadata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasAudio())<sp/>{</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>mEventManager.Init(mInfo.mAudioChannels,<sp/>mInfo.mAudioRate);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>buffer<sp/>length<sp/>at<sp/>the<sp/>decoder<sp/>level<sp/>to<sp/>be<sp/>able,<sp/>to<sp/>be<sp/>able</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>retrive<sp/>the<sp/>value<sp/>via<sp/>media<sp/>element<sp/>method.<sp/>The<sp/>RequestFrameBufferLength</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>call<sp/>the<sp/>MediaDecoderStateMachine::SetFrameBufferLength().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>frameBufferLength<sp/>=<sp/>mInfo.mAudioChannels<sp/>*<sp/>FRAMEBUFFER_LENGTH_PER_CHANNEL;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder-&gt;RequestFrameBufferLength(frameBufferLength);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/>metadataLoadedEvent<sp/>=</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>nsAudioMetadataEventRunner(mDecoder,</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mInfo.mAudioChannels,</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mInfo.mAudioRate,</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasAudio(),</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tags);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/>NS_DispatchToMainThread(metadataLoadedEvent,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>==<sp/>DECODER_STATE_DECODING_METADATA)<sp/>{</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Changed<sp/>state<sp/>from<sp/>DECODING_METADATA<sp/>to<sp/>DECODING&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>StartDecoding();</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mState<sp/>==<sp/>DECODER_STATE_DECODING<sp/>||<sp/>mState<sp/>==<sp/>DECODER_STATE_COMPLETED)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder-&gt;GetState()<sp/>==<sp/>MediaDecoder::PLAY_STATE_PLAYING<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!IsPlaying())</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/>StartPlayback();</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::DecodeSeek()</highlight></codeline>
<codeline lineno="1847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnDecodeThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mState<sp/>==<sp/>DECODER_STATE_SEEKING,</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>when<sp/>in<sp/>seeking<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/>mDidThrottleAudioDecoding<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/>mDidThrottleVideoDecoding<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>During<sp/>the<sp/>seek,<sp/>don&apos;t<sp/>have<sp/>a<sp/>lock<sp/>on<sp/>the<sp/>decoder<sp/>state,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>long<sp/>seek<sp/>operations<sp/>can<sp/>block<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>events<sp/>dispatched<sp/>to<sp/>the<sp/>main<sp/>thread<sp/>are<sp/>SYNC<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>calls<sp/>are<sp/>made<sp/>outside<sp/>of<sp/>the<sp/>decode<sp/>monitor<sp/>lock<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>safe<sp/>for<sp/>the<sp/>main<sp/>thread<sp/>to<sp/>makes<sp/>calls<sp/>that<sp/>acquire</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>lock<sp/>since<sp/>it<sp/>won&apos;t<sp/>deadlock.<sp/>We<sp/>check<sp/>the<sp/>state<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>acquiring<sp/>the<sp/>lock<sp/>again<sp/>in<sp/>case<sp/>shutdown<sp/>has<sp/>occurred</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>during<sp/>the<sp/>time<sp/>when<sp/>we<sp/>didn&apos;t<sp/>have<sp/>the<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/>int64_t<sp/>seekTime<sp/>=<sp/>mSeekTime;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/>mDecoder-&gt;StopProgressUpdates();</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>currentTimeChanged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/>int64_t<sp/>mediaTime<sp/>=<sp/>GetMediaTime();</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mediaTime<sp/>!=<sp/>seekTime)<sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>currentTimeChanged<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>playback<sp/>now<sp/>to<sp/>ensure<sp/>that<sp/>while<sp/>we&apos;re<sp/>outside<sp/>the<sp/>monitor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dispatching<sp/>SeekingStarted,<sp/>playback<sp/>doesn&apos;t<sp/>advance<sp/>and<sp/>mess<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mCurrentFrameTime<sp/>that<sp/>we&apos;ve<sp/>setting<sp/>to<sp/>seekTime<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>StopPlayback();</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdatePlaybackPositionInternal(seekTime);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SeekingStarted<sp/>will<sp/>do<sp/>a<sp/>UpdateReadyStateForData<sp/>which<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inform<sp/>the<sp/>element<sp/>and<sp/>its<sp/>users<sp/>that<sp/>we<sp/>have<sp/>no<sp/>frames</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exitMon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/>startEvent<sp/>=</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(mDecoder,<sp/>&amp;MediaDecoder::SeekingStarted);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(startEvent,<sp/>NS_DISPATCH_SYNC);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentTimeChanged)<sp/>{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>seek<sp/>target<sp/>is<sp/>different<sp/>than<sp/>the<sp/>current<sp/>playback<sp/>position,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;ll<sp/>need<sp/>to<sp/>seek<sp/>the<sp/>playback<sp/>position,<sp/>so<sp/>shutdown<sp/>our<sp/>decode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>audio<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/>StopAudioThread();</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>ResetPlayback();</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>nsresult<sp/>res;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exitMon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>perform<sp/>the<sp/>seek.<sp/>We<sp/>must<sp/>not<sp/>hold<sp/>the<sp/>state<sp/>machine<sp/>monitor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>while<sp/>we<sp/>seek,<sp/>since<sp/>the<sp/>seek<sp/>reads,<sp/>which<sp/>could<sp/>block<sp/>on<sp/>I/O.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>mReader-&gt;Seek(seekTime,</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStartTime,</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mEndTime,</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mediaTime);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_SUCCEEDED(res))<sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AudioData*<sp/>audio<sp/>=<sp/>HasAudio()<sp/>?<sp/>mReader-&gt;AudioQueue().PeekFront()<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(!audio<sp/>||<sp/>(audio-&gt;mTime<sp/>&lt;=<sp/>seekTime<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seekTime<sp/>&lt;=<sp/>audio-&gt;mTime<sp/>+<sp/>audio-&gt;mDuration),</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Seek<sp/>target<sp/>should<sp/>lie<sp/>inside<sp/>the<sp/>first<sp/>audio<sp/>block<sp/>after<sp/>seek&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>startTime<sp/>=<sp/>(audio<sp/>&amp;&amp;<sp/>audio-&gt;mTime<sp/>&lt;<sp/>seekTime)<sp/>?<sp/>audio-&gt;mTime<sp/>:<sp/>seekTime;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mAudioStartTime<sp/>=<sp/>startTime;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mPlayDuration<sp/>=<sp/>startTime<sp/>-<sp/>mStartTime;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(HasVideo())<sp/>{</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VideoData*<sp/>video<sp/>=<sp/>mReader-&gt;VideoQueue().PeekFront();</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(video)<sp/>{</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(video-&gt;mTime<sp/>&lt;=<sp/>seekTime<sp/>&amp;&amp;<sp/>seekTime<sp/>&lt;=<sp/>video-&gt;mEndTime,</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Seek<sp/>target<sp/>should<sp/>lie<sp/>inside<sp/>the<sp/>first<sp/>frame<sp/>after<sp/>seek&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exitMon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RenderVideoFrame(video,<sp/>TimeStamp::Now());</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(mDecoder,<sp/>&amp;MediaDecoder::Invalidate);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(event,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/>mDecoder-&gt;StartProgressUpdates();</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>==<sp/>DECODER_STATE_SHUTDOWN)</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>decode<sp/>another<sp/>frame<sp/>to<sp/>detect<sp/>if<sp/>we&apos;re<sp/>at<sp/>the<sp/>end...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Seek<sp/>completed,<sp/>mCurrentFrameTime=%lld\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),<sp/>mCurrentFrameTime));</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>state<sp/>to<sp/>DECODING<sp/>or<sp/>COMPLETED<sp/>now.<sp/>SeekingStopped<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>MediaDecoderStateMachine::Seek<sp/>to<sp/>reset<sp/>our<sp/>state<sp/>to<sp/>SEEKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>need<sp/>to<sp/>seek<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/>stopEvent;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLiveStream<sp/>=<sp/>mDecoder-&gt;GetResource()-&gt;GetLength()<sp/>==<sp/>-1;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetMediaTime()<sp/>==<sp/>mEndTime<sp/>&amp;&amp;<sp/>!isLiveStream)<sp/>{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Seeked<sp/>to<sp/>end<sp/>of<sp/>media,<sp/>move<sp/>to<sp/>COMPLETED<sp/>state.<sp/>Note<sp/>we<sp/>don&apos;t<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>if<sp/>we&apos;re<sp/>playing<sp/>a<sp/>live<sp/>stream,<sp/>since<sp/>the<sp/>end<sp/>of<sp/>media<sp/>will<sp/>advance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>once<sp/>we<sp/>download<sp/>more<sp/>data!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Changed<sp/>state<sp/>from<sp/>SEEKING<sp/>(to<sp/>%lld)<sp/>to<sp/>COMPLETED&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),<sp/>seekTime));</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/>stopEvent<sp/>=<sp/>NS_NewRunnableMethod(mDecoder,<sp/>&amp;MediaDecoder::SeekingStoppedAtEnd);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>mState<sp/>=<sp/>DECODER_STATE_COMPLETED;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Changed<sp/>state<sp/>from<sp/>SEEKING<sp/>(to<sp/>%lld)<sp/>to<sp/>DECODING&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),<sp/>seekTime));</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/>stopEvent<sp/>=<sp/>NS_NewRunnableMethod(mDecoder,<sp/>&amp;MediaDecoder::SeekingStopped);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/>StartDecoding();</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exitMon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(stopEvent,<sp/>NS_DISPATCH_SYNC);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>quick<sp/>buffering<sp/>status.<sp/>This<sp/>ensures<sp/>that<sp/>if<sp/>we<sp/>began<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>seek<sp/>while<sp/>quick-buffering,<sp/>we<sp/>won&apos;t<sp/>bypass<sp/>quick<sp/>buffering<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>need<sp/>to<sp/>buffer<sp/>after<sp/>the<sp/>seek.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/>mQuickBuffering<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/>ScheduleStateMachine();</highlight></codeline>
<codeline lineno="1967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runnable<sp/>to<sp/>dispose<sp/>of<sp/>the<sp/>decoder<sp/>and<sp/>state<sp/>machine<sp/>on<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1970" refid="classmozilla_1_1ns_decoder_dispose_event" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmozilla_1_1ns_decoder_dispose_event" kindref="compound">nsDecoderDisposeEvent</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsRunnable<sp/>{</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><ref refid="classmozilla_1_1ns_decoder_dispose_event" kindref="compound">nsDecoderDisposeEvent</ref>(already_AddRefed&lt;MediaDecoder&gt;<sp/>aDecoder,</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>already_AddRefed&lt;MediaDecoderStateMachine&gt;<sp/>aStateMachine)</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>mDecoder(aDecoder),<sp/>mStateMachine(aStateMachine)<sp/>{}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/>NS_IMETHOD<sp/>Run()<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/>mStateMachine-&gt;ReleaseDecoder();</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder-&gt;ReleaseStateMachine();</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>mStateMachine<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;MediaDecoder&gt;<sp/>mDecoder;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;MediaDecoderStateMachine&gt;<sp/>mStateMachine;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runnable<sp/>which<sp/>dispatches<sp/>an<sp/>event<sp/>to<sp/>the<sp/>main<sp/>thread<sp/>to<sp/>dispose<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight><highlight class="comment">//<sp/>decoder<sp/>and<sp/>state<sp/>machine.<sp/>This<sp/>runs<sp/>on<sp/>the<sp/>state<sp/>machine<sp/>thread<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>state<sp/>machine<sp/>has<sp/>shutdown,<sp/>and<sp/>all<sp/>events<sp/>for<sp/>that<sp/>state<sp/>machine<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>finished<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992" refid="classmozilla_1_1ns_dispatch_dispose_event" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmozilla_1_1ns_dispatch_dispose_event" kindref="compound">nsDispatchDisposeEvent</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsRunnable<sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><ref refid="classmozilla_1_1ns_dispatch_dispose_event" kindref="compound">nsDispatchDisposeEvent</ref>(MediaDecoder*<sp/>aDecoder,</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaDecoderStateMachine*<sp/>aStateMachine)</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>mDecoder(aDecoder),<sp/>mStateMachine(aStateMachine)<sp/>{}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/>NS_IMETHOD<sp/>Run()<sp/>{</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classmozilla_1_1ns_decoder_dispose_event" kindref="compound">nsDecoderDisposeEvent</ref>(mDecoder.forget(),</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStateMachine.forget()));</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;MediaDecoder&gt;<sp/>mDecoder;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;MediaDecoderStateMachine&gt;<sp/>mStateMachine;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal">nsresult<sp/>MediaDecoderStateMachine::RunStateMachine()</highlight></codeline>
<codeline lineno="2008"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/>MediaResource*<sp/>resource<sp/>=<sp/>mDecoder-&gt;GetResource();</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(resource,<sp/>NS_ERROR_NULL_POINTER);</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mState)<sp/>{</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DECODER_STATE_SHUTDOWN:<sp/>{</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsPlaying())<sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StopPlayback();</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StopAudioThread();</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StopDecodeThread();</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>that<sp/>those<sp/>threads<sp/>are<sp/>stopped,<sp/>there&apos;s<sp/>no<sp/>possibility<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mPendingWakeDecoder<sp/>being<sp/>needed<sp/>again.<sp/>Revoke<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mPendingWakeDecoder<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(mState<sp/>==<sp/>DECODER_STATE_SHUTDOWN,</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;How<sp/>did<sp/>we<sp/>escape<sp/>from<sp/>the<sp/>shutdown<sp/>state?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>must<sp/>daisy-chain<sp/>these<sp/>events<sp/>to<sp/>destroy<sp/>the<sp/>decoder.<sp/>We<sp/>must</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destroy<sp/>the<sp/>decoder<sp/>on<sp/>the<sp/>main<sp/>thread,<sp/>but<sp/>we<sp/>can&apos;t<sp/>destroy<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decoder<sp/>while<sp/>this<sp/>thread<sp/>holds<sp/>the<sp/>decoder<sp/>monitor.<sp/>We<sp/>can&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dispatch<sp/>an<sp/>event<sp/>to<sp/>the<sp/>main<sp/>thread<sp/>to<sp/>destroy<sp/>the<sp/>decoder<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here,<sp/>as<sp/>the<sp/>event<sp/>may<sp/>run<sp/>before<sp/>the<sp/>dispatch<sp/>returns,<sp/>and<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hold<sp/>the<sp/>decoder<sp/>monitor<sp/>here.<sp/>We<sp/>also<sp/>want<sp/>to<sp/>guarantee<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>machine<sp/>is<sp/>destroyed<sp/>on<sp/>the<sp/>main<sp/>thread,<sp/>and<sp/>so<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>event<sp/>runner<sp/>running<sp/>this<sp/>function<sp/>(which<sp/>holds<sp/>a<sp/>reference<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>machine)<sp/>needs<sp/>to<sp/>finish<sp/>and<sp/>be<sp/>released<sp/>in<sp/>order<sp/>to<sp/>allow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that.<sp/>So<sp/>we<sp/>dispatch<sp/>an<sp/>event<sp/>to<sp/>run<sp/>after<sp/>this<sp/>event<sp/>runner<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finished<sp/>and<sp/>released<sp/>its<sp/>monitor/references.<sp/>That<sp/>event<sp/>then<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dispatch<sp/>an<sp/>event<sp/>to<sp/>the<sp/>main<sp/>thread<sp/>to<sp/>release<sp/>the<sp/>decoder<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>machine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_DispatchToCurrentThread(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>nsDispatchDisposeEvent(mDecoder,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DECODER_STATE_DECODING_METADATA:<sp/>{</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we<sp/>have<sp/>a<sp/>decode<sp/>thread<sp/>to<sp/>decode<sp/>metadata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ScheduleDecodeThread();</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DECODER_STATE_DECODING:<sp/>{</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDecoder-&gt;GetState()<sp/>!=<sp/>MediaDecoder::PLAY_STATE_PLAYING<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsPlaying())</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>playing,<sp/>but<sp/>the<sp/>element/decoder<sp/>is<sp/>in<sp/>paused<sp/>state.<sp/>Stop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>playing!<sp/>Note<sp/>we<sp/>do<sp/>this<sp/>before<sp/>StopDecodeThread()<sp/>below<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>blocks<sp/>this<sp/>state<sp/>machine&apos;s<sp/>execution,<sp/>and<sp/>can<sp/>cause<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>perceptible<sp/>delay<sp/>between<sp/>the<sp/>pause<sp/>command,<sp/>and<sp/>playback<sp/>actually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pausing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StopPlayback();</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsPausedAndDecoderWaiting())<sp/>{</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>decode<sp/>buffers<sp/>are<sp/>full,<sp/>and<sp/>playback<sp/>is<sp/>paused.<sp/>Shutdown<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decode<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StopDecodeThread();</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>playing<sp/>and/or<sp/>our<sp/>decode<sp/>buffers<sp/>aren&apos;t<sp/>full.<sp/>Ensure<sp/>we<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>active<sp/>decode<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(ScheduleDecodeThread()))<sp/>{</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_WARNING(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>start<sp/>media<sp/>decode<sp/>thread!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AdvanceFrame();</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(mDecoder-&gt;GetState()<sp/>!=<sp/>MediaDecoder::PLAY_STATE_PLAYING<sp/>||</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsStateMachineScheduled(),<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>have<sp/>timer<sp/>scheduled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DECODER_STATE_BUFFERING:<sp/>{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsPausedAndDecoderWaiting())<sp/>{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>decode<sp/>buffers<sp/>are<sp/>full,<sp/>and<sp/>playback<sp/>is<sp/>paused.<sp/>Shutdown<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decode<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StopDecodeThread();</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TimeStamp<sp/>now<sp/>=<sp/>TimeStamp::Now();</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(!mBufferingStart.IsNull(),<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>know<sp/>buffering<sp/>start<sp/>time.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>remain<sp/>in<sp/>the<sp/>buffering<sp/>state<sp/>if<sp/>we&apos;ve<sp/>not<sp/>decoded<sp/>enough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>to<sp/>begin<sp/>playback,<sp/>or<sp/>if<sp/>we&apos;ve<sp/>not<sp/>downloaded<sp/>a<sp/>reasonable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>amount<sp/>of<sp/>data<sp/>inside<sp/>our<sp/>buffering<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TimeDuration<sp/>elapsed<sp/>=<sp/>now<sp/>-<sp/>mBufferingStart;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLiveStream<sp/>=<sp/>mDecoder-&gt;GetResource()-&gt;GetLength()<sp/>==<sp/>-1;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((isLiveStream<sp/>||<sp/>!mDecoder-&gt;CanPlayThrough())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elapsed<sp/>&lt;<sp/>TimeDuration::FromSeconds(mBufferingWait)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mQuickBuffering<sp/>?<sp/>HasLowDecodedData(QUICK_BUFFERING_LOW_DATA_USECS)</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(GetUndecodedData()<sp/>&lt;<sp/>mBufferingWait<sp/>*<sp/>USECS_PER_S))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!resource-&gt;IsDataCachedToEndOfResource(mDecoder-&gt;mDecoderPosition)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!resource-&gt;IsSuspended())</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Buffering:<sp/>%.3lfs/%ds,<sp/>timeout<sp/>in<sp/>%.3lfs<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetUndecodedData()<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(USECS_PER_S),</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mBufferingWait,</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mBufferingWait<sp/>-<sp/>elapsed.ToSeconds(),</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mQuickBuffering<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;(quick<sp/>exit)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScheduleStateMachine(USECS_PER_S);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Changed<sp/>state<sp/>from<sp/>BUFFERING<sp/>to<sp/>DECODING&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get()));</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Buffered<sp/>for<sp/>%.3lfs&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(now<sp/>-<sp/>mBufferingStart).ToSeconds()));</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartDecoding();</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>to<sp/>allow<sp/>blocked<sp/>decoder<sp/>thread<sp/>to<sp/>continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().NotifyAll();</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UpdateReadyState();</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDecoder-&gt;GetState()<sp/>==<sp/>MediaDecoder::PLAY_STATE_PLAYING<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!IsPlaying())</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartPlayback();</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(IsStateMachineScheduled(),<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>have<sp/>timer<sp/>scheduled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DECODER_STATE_SEEKING:<sp/>{</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we<sp/>have<sp/>a<sp/>decode<sp/>thread<sp/>to<sp/>perform<sp/>the<sp/>seek.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ScheduleDecodeThread();</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DECODER_STATE_COMPLETED:<sp/>{</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StopDecodeThread();</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>!=<sp/>DECODER_STATE_COMPLETED)<sp/>{</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>While<sp/>we&apos;re<sp/>waiting<sp/>for<sp/>the<sp/>decode<sp/>thread<sp/>to<sp/>shutdown,<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>state,<sp/>for<sp/>example<sp/>to<sp/>seeking<sp/>or<sp/>shutdown<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Whatever<sp/>changed<sp/>our<sp/>state<sp/>should<sp/>have<sp/>scheduled<sp/>another<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>machine<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(IsStateMachineScheduled(),<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>have<sp/>timer<sp/>scheduled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Play<sp/>the<sp/>remaining<sp/>media.<sp/>We<sp/>want<sp/>to<sp/>run<sp/>AdvanceFrame()<sp/>at<sp/>least</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>once<sp/>to<sp/>ensure<sp/>the<sp/>current<sp/>playback<sp/>position<sp/>is<sp/>advanced<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>the<sp/>media,<sp/>and<sp/>so<sp/>that<sp/>we<sp/>update<sp/>the<sp/>readyState.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>==<sp/>DECODER_STATE_COMPLETED<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mReader-&gt;VideoQueue().GetSize()<sp/>&gt;<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(HasAudio()<sp/>&amp;&amp;<sp/>!mAudioCompleted)))</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AdvanceFrame();</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(mDecoder-&gt;GetState()<sp/>!=<sp/>MediaDecoder::PLAY_STATE_PLAYING<sp/>||</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsStateMachineScheduled(),</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>have<sp/>timer<sp/>scheduled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StopPlayback<sp/>in<sp/>order<sp/>to<sp/>reset<sp/>the<sp/>IsPlaying()<sp/>state<sp/>so<sp/>audio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>restarted<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StopPlayback();</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>!=<sp/>DECODER_STATE_COMPLETED)<sp/>{</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>While<sp/>we&apos;re<sp/>presenting<sp/>a<sp/>frame<sp/>we<sp/>can<sp/>change<sp/>state.<sp/>Whatever<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>our<sp/>state<sp/>should<sp/>have<sp/>scheduled<sp/>another<sp/>state<sp/>machine<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(IsStateMachineScheduled(),<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>have<sp/>timer<sp/>scheduled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StopAudioThread();</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDecoder-&gt;GetState()<sp/>==<sp/>MediaDecoder::PLAY_STATE_PLAYING)<sp/>{</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>videoTime<sp/>=<sp/>HasVideo()<sp/>?<sp/>mVideoFrameEndTime<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>clockTime<sp/>=<sp/>NS_MAX(mEndTime,<sp/>NS_MAX(videoTime,<sp/>GetAudioClock()));</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdatePlaybackPosition(clockTime);</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(mDecoder,<sp/>&amp;MediaDecoder::PlaybackEnded);</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(event,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::RenderVideoFrame(VideoData*<sp/>aData,</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeStamp<sp/>aTarget)</highlight></codeline>
<codeline lineno="2192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnStateMachineThread()<sp/>||<sp/>OnDecodeThread(),</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>state<sp/>machine<sp/>or<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertNotCurrentThreadIn();</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aData-&gt;mDuplicate)<sp/>{</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Decoder<sp/>playing<sp/>video<sp/>frame<sp/>%lld&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),<sp/>aData-&gt;mTime));</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/>VideoFrameContainer*<sp/>container<sp/>=<sp/>mDecoder-&gt;GetVideoFrameContainer();</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container)<sp/>{</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>container-&gt;SetCurrentFrame(aData-&gt;mDisplay,<sp/>aData-&gt;mImage,<sp/>aTarget);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="2211"><highlight class="normal">MediaDecoderStateMachine::GetAudioClock()</highlight></codeline>
<codeline lineno="2212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnStateMachineThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>state<sp/>machine<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasAudio()<sp/>||<sp/>mAudioCaptured)</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>must<sp/>hold<sp/>the<sp/>decoder<sp/>monitor<sp/>while<sp/>using<sp/>the<sp/>audio<sp/>stream<sp/>off<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>audio<sp/>thread<sp/>to<sp/>ensure<sp/>that<sp/>it<sp/>doesn&apos;t<sp/>get<sp/>destroyed<sp/>on<sp/>the<sp/>audio<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>while<sp/>we&apos;re<sp/>using<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioStream)<sp/>{</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Audio<sp/>thread<sp/>hasn&apos;t<sp/>played<sp/>any<sp/>data<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mAudioStartTime;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>querying<sp/>the<sp/>playback<sp/>position<sp/>does<sp/>not<sp/>do<sp/>a<sp/>synchronous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dispatch<sp/>to<sp/>the<sp/>main<sp/>thread<sp/>on<sp/>Android,<sp/>so<sp/>it&apos;s<sp/>safe<sp/>to<sp/>call<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>decoder<sp/>monitor<sp/>held<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/>int64_t<sp/>t<sp/>=<sp/>mAudioStream-&gt;GetPosition();</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>-1)<sp/>?<sp/>-1<sp/>:<sp/>t<sp/>+<sp/>mAudioStartTime;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::AdvanceFrame()</highlight></codeline>
<codeline lineno="2232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnStateMachineThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>state<sp/>machine<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!HasAudio()<sp/>||<sp/>mAudioStartTime<sp/>!=<sp/>-1,</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>know<sp/>audio<sp/>start<sp/>time<sp/>if<sp/>we<sp/>have<sp/>audio.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDecoder-&gt;GetState()<sp/>!=<sp/>MediaDecoder::PLAY_STATE_PLAYING)<sp/>{</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>clock<sp/>time.<sp/>If<sp/>we&apos;ve<sp/>got<sp/>audio,<sp/>and<sp/>we&apos;ve<sp/>not<sp/>reached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>end<sp/>of<sp/>the<sp/>audio,<sp/>use<sp/>the<sp/>audio<sp/>clock.<sp/>However<sp/>if<sp/>we&apos;ve<sp/>finished</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>audio,<sp/>or<sp/>don&apos;t<sp/>have<sp/>audio,<sp/>use<sp/>the<sp/>system<sp/>clock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/>int64_t<sp/>clock_time<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsPlaying())<sp/>{</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_time<sp/>=<sp/>mPlayDuration<sp/>+<sp/>mStartTime;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>audio_time<sp/>=<sp/>GetAudioClock();</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasAudio()<sp/>&amp;&amp;<sp/>!mAudioCompleted<sp/>&amp;&amp;<sp/>audio_time<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clock_time<sp/>=<sp/>audio_time;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resync<sp/>against<sp/>the<sp/>audio<sp/>clock,<sp/>while<sp/>we&apos;re<sp/>trusting<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>audio<sp/>clock.<sp/>This<sp/>ensures<sp/>no<sp/>&quot;drift&quot;,<sp/>particularly<sp/>on<sp/>Linux.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mPlayDuration<sp/>=<sp/>clock_time<sp/>-<sp/>mStartTime;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mPlayStartTime<sp/>=<sp/>TimeStamp::Now();</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Audio<sp/>is<sp/>disabled<sp/>on<sp/>this<sp/>system.<sp/>Sync<sp/>to<sp/>the<sp/>system<sp/>clock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clock_time<sp/>=<sp/>DurationToUsecs(TimeStamp::Now()<sp/>-<sp/>mPlayStartTime)<sp/>+<sp/>mPlayDuration;</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>the<sp/>clock<sp/>can<sp/>never<sp/>go<sp/>backwards.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(mCurrentFrameTime<sp/>&lt;=<sp/>clock_time,<sp/></highlight><highlight class="stringliteral">&quot;Clock<sp/>should<sp/>go<sp/>forwards&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clock_time<sp/>=<sp/>NS_MAX(mCurrentFrameTime,<sp/>clock_time)<sp/>+<sp/>mStartTime;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>frames<sp/>up<sp/>to<sp/>the<sp/>frame<sp/>at<sp/>the<sp/>playback<sp/>position,<sp/>and<sp/>figure<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>time<sp/>remaining<sp/>until<sp/>it&apos;s<sp/>time<sp/>to<sp/>display<sp/>the<sp/>next<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/>int64_t<sp/>remainingTime<sp/>=<sp/>AUDIO_DURATION_USECS;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/>NS_ASSERTION(clock_time<sp/>&gt;=<sp/>mStartTime,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>have<sp/>positive<sp/>clock<sp/>time.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/>nsAutoPtr&lt;VideoData&gt;<sp/>currentFrame;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PR_LOGGING</highlight></codeline>
<codeline lineno="2271"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>int32_t<sp/>droppedFrames<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2273"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mReader-&gt;VideoQueue().GetSize()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/>VideoData*<sp/>frame<sp/>=<sp/>mReader-&gt;VideoQueue().PeekFront();</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mRealTime<sp/>||<sp/>clock_time<sp/>&gt;=<sp/>frame-&gt;mTime)<sp/>{</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mVideoFrameEndTime<sp/>=<sp/>frame-&gt;mEndTime;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentFrame<sp/>=<sp/>frame;</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Decoder<sp/>discarding<sp/>video<sp/>frame<sp/>%lld&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get(),<sp/>frame-&gt;mTime));</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PR_LOGGING</highlight></codeline>
<codeline lineno="2280"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(droppedFrames++)<sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Decoder<sp/>discarding<sp/>video<sp/>frame<sp/>%lld<sp/>(%d<sp/>so<sp/>far)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),<sp/>frame-&gt;mTime,<sp/>droppedFrames<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2285"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mReader-&gt;VideoQueue().PopFront();</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>the<sp/>decode<sp/>thread<sp/>that<sp/>the<sp/>video<sp/>queue&apos;s<sp/>buffers<sp/>may<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free&apos;d<sp/>up<sp/>space<sp/>for<sp/>more<sp/>frames.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().NotifyAll();</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder-&gt;UpdatePlaybackOffset(frame-&gt;mOffset);</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mReader-&gt;VideoQueue().GetSize()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>mReader-&gt;VideoQueue().PeekFront();</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>frame<sp/>has<sp/>already<sp/>been<sp/>presented,<sp/>wait<sp/>until<sp/>it&apos;s<sp/>time<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>present<sp/>the<sp/>next<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame<sp/>&amp;&amp;<sp/>!currentFrame)<sp/>{</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>now<sp/>=<sp/>IsPlaying()</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(DurationToUsecs(TimeStamp::Now()<sp/>-<sp/>mPlayStartTime)<sp/>+<sp/>mPlayDuration)</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>mPlayDuration;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remainingTime<sp/>=<sp/>frame-&gt;mTime<sp/>-<sp/>mStartTime<sp/>-<sp/>now;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>to<sp/>see<sp/>if<sp/>we<sp/>don&apos;t<sp/>have<sp/>enough<sp/>data<sp/>to<sp/>play<sp/>up<sp/>to<sp/>the<sp/>next<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>don&apos;t,<sp/>switch<sp/>to<sp/>buffering<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/>MediaResource*<sp/>resource<sp/>=<sp/>mDecoder-&gt;GetResource();</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>==<sp/>DECODER_STATE_DECODING<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder-&gt;GetState()<sp/>==<sp/>MediaDecoder::PLAY_STATE_PLAYING<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HasLowDecodedData(remainingTime<sp/>+<sp/>EXHAUSTED_DATA_MARGIN_USECS)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!resource-&gt;IsDataCachedToEndOfResource(mDecoder-&gt;mDecoderPosition)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!resource-&gt;IsSuspended()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(JustExitedQuickBuffering()<sp/>||<sp/>HasLowUndecodedData()))</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentFrame)<sp/>{</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mReader-&gt;VideoQueue().PushFront(currentFrame.forget());</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>StartBuffering();</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/>ScheduleStateMachine();</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ve<sp/>got<sp/>enough<sp/>data<sp/>to<sp/>keep<sp/>playing<sp/>until<sp/>at<sp/>least<sp/>the<sp/>next<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>playing<sp/>now<sp/>if<sp/>need<sp/>be.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsPlaying()<sp/>&amp;&amp;<sp/>((mFragmentEndTime<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>clock_time<sp/>&lt;<sp/>mFragmentEndTime)<sp/>||<sp/>mFragmentEndTime<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/>StartPlayback();</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentFrame)<sp/>{</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decode<sp/>one<sp/>frame<sp/>and<sp/>display<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeStamp<sp/>presTime<sp/>=<sp/>mPlayStartTime<sp/>-<sp/>UsecsToDuration(mPlayDuration)<sp/>+</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UsecsToDuration(currentFrame-&gt;mTime<sp/>-<sp/>mStartTime);</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(currentFrame-&gt;mTime<sp/>&gt;=<sp/>mStartTime,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>have<sp/>positive<sp/>frame<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exitMon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>video,<sp/>we<sp/>want<sp/>to<sp/>increment<sp/>the<sp/>clock<sp/>in<sp/>steps<sp/>of<sp/>the<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>duration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RenderVideoFrame(currentFrame,<sp/>presTime);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;re<sp/>no<sp/>longer<sp/>playing<sp/>after<sp/>dropping<sp/>and<sp/>reacquiring<sp/>the<sp/>lock,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>playback<sp/>must&apos;ve<sp/>been<sp/>stopped<sp/>on<sp/>the<sp/>decode<sp/>thread<sp/>(by<sp/>a<sp/>seek,<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>example).<sp/><sp/>In<sp/>that<sp/>case,<sp/>the<sp/>current<sp/>frame<sp/>is<sp/>probably<sp/>out<sp/>of<sp/>date.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsPlaying())<sp/>{</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ScheduleStateMachine();</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder-&gt;GetFrameStatistics().NotifyPresentedFrame();</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>now<sp/>=<sp/>DurationToUsecs(TimeStamp::Now()<sp/>-<sp/>mPlayStartTime)<sp/>+<sp/>mPlayDuration;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/>remainingTime<sp/>=<sp/>currentFrame-&gt;mEndTime<sp/>-<sp/>mStartTime<sp/>-<sp/>now;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/>currentFrame<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cap<sp/>the<sp/>current<sp/>time<sp/>to<sp/>the<sp/>larger<sp/>of<sp/>the<sp/>audio<sp/>and<sp/>video<sp/>end<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>ensures<sp/>that<sp/>if<sp/>we&apos;re<sp/>running<sp/>off<sp/>the<sp/>system<sp/>clock,<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>advance<sp/>the<sp/>clock<sp/>to<sp/>after<sp/>the<sp/>media<sp/>end<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mVideoFrameEndTime<sp/>!=<sp/>-1<sp/>||<sp/>mAudioEndTime<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>will<sp/>be<sp/>non<sp/>-1<sp/>if<sp/>we&apos;ve<sp/>displayed<sp/>a<sp/>video<sp/>frame,<sp/>or<sp/>played<sp/>an<sp/>audio<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_time<sp/>=<sp/>NS_MIN(clock_time,<sp/>NS_MAX(mVideoFrameEndTime,<sp/>mAudioEndTime));</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clock_time<sp/>&gt;<sp/>GetMediaTime())<sp/>{</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>update<sp/>the<sp/>playback<sp/>position<sp/>if<sp/>the<sp/>clock<sp/>time<sp/>is<sp/>greater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>the<sp/>previous<sp/>playback<sp/>position.<sp/>The<sp/>audio<sp/>clock<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sometimes<sp/>report<sp/>a<sp/>time<sp/>less<sp/>than<sp/>its<sp/>previously<sp/>reported<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>situations,<sp/>and<sp/>we<sp/>need<sp/>to<sp/>gracefully<sp/>handle<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UpdatePlaybackPosition(clock_time);</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>number<sp/>of<sp/>audio/video<sp/>frames<sp/>queued<sp/>has<sp/>changed,<sp/>either<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>function<sp/>popping<sp/>and<sp/>playing<sp/>a<sp/>video<sp/>frame,<sp/>or<sp/>by<sp/>the<sp/>audio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>thread<sp/>popping<sp/>and<sp/>playing<sp/>an<sp/>audio<sp/>frame,<sp/>we<sp/>may<sp/>need<sp/>to<sp/>update<sp/>our</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ready<sp/>state.<sp/>Post<sp/>an<sp/>update<sp/>to<sp/>do<sp/>so.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/>UpdateReadyState();</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/>ScheduleStateMachine(remainingTime);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::Wait(int64_t<sp/>aUsecs)<sp/>{</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnAudioThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>the<sp/>audio<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/>TimeStamp<sp/>end<sp/>=<sp/>TimeStamp::Now()<sp/>+<sp/>UsecsToDuration(NS_MAX&lt;int64_t&gt;(USECS_PER_MS,<sp/>aUsecs));</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/>TimeStamp<sp/>now;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((now<sp/>=<sp/>TimeStamp::Now())<sp/>&lt;<sp/>end<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mState<sp/>!=<sp/>DECODER_STATE_SHUTDOWN<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mState<sp/>!=<sp/>DECODER_STATE_SEEKING<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!mStopAudioThread<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsPlaying())</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>ms<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(NS_round((end<sp/>-<sp/>now).ToSeconds()<sp/>*<sp/>1000));</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ms<sp/>==<sp/>0<sp/>||<sp/>ms<sp/>&gt;<sp/>UINT32_MAX)<sp/>{</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().Wait(PR_MillisecondsToInterval(static_cast&lt;uint32_t&gt;(ms)));</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal">VideoData*<sp/>MediaDecoderStateMachine::FindStartTime()</highlight></codeline>
<codeline lineno="2396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnDecodeThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/>int64_t<sp/>startTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/>mStartTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/>VideoData*<sp/>v<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoExit<sp/>exitMon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>mReader-&gt;FindStartTime(startTime);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startTime<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/>mStartTime<sp/>=<sp/>startTime;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mGotDurationFromMetaData)<sp/>{</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(mEndTime<sp/>!=<sp/>-1,</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;We<sp/>should<sp/>have<sp/>mEndTime<sp/>as<sp/>supplied<sp/>duration<sp/>here&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>were<sp/>specified<sp/>a<sp/>duration<sp/>from<sp/>a<sp/>Content-Duration<sp/>HTTP<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>mEndTime<sp/>so<sp/>that<sp/>mEndTime-mStartTime<sp/>matches<sp/>the<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>duration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mEndTime<sp/>=<sp/>mStartTime<sp/>+<sp/>mEndTime;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>audio<sp/>start<sp/>time<sp/>to<sp/>be<sp/>start<sp/>of<sp/>media.<sp/>If<sp/>this<sp/>lies<sp/>before<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>actual<sp/>audio<sp/>frame<sp/>we<sp/>have,<sp/>we&apos;ll<sp/>inject<sp/>silence<sp/>during<sp/>playback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>ensure<sp/>the<sp/>audio<sp/>starts<sp/>at<sp/>the<sp/>correct<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/>mAudioStartTime<sp/>=<sp/>mStartTime;</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Media<sp/>start<sp/>time<sp/>is<sp/>%lld&quot;</highlight><highlight class="normal">,<sp/>mDecoder.get(),<sp/>mStartTime));</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::UpdateReadyState()<sp/>{</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/>event;</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(GetNextFrameStatus())<sp/>{</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MediaDecoderOwner::NEXT_FRAME_UNAVAILABLE_BUFFERING:</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>NS_NewRunnableMethod(mDecoder,<sp/>&amp;MediaDecoder::NextFrameUnavailableBuffering);</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MediaDecoderOwner::NEXT_FRAME_AVAILABLE:</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>NS_NewRunnableMethod(mDecoder,<sp/>&amp;MediaDecoder::NextFrameAvailable);</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MediaDecoderOwner::NEXT_FRAME_UNAVAILABLE:</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>NS_NewRunnableMethod(mDecoder,<sp/>&amp;MediaDecoder::NextFrameUnavailable);</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PR_NOT_REACHED(</highlight><highlight class="stringliteral">&quot;unhandled<sp/>frame<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/>NS_DispatchToMainThread(event,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="2444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::JustExitedQuickBuffering()</highlight></codeline>
<codeline lineno="2447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!mDecodeStartTime.IsNull()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/>mQuickBuffering<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/>(TimeStamp::Now()<sp/>-<sp/>mDecodeStartTime)<sp/>&lt;<sp/>TimeDuration::FromMicroseconds(QUICK_BUFFER_THRESHOLD_USECS);</highlight></codeline>
<codeline lineno="2451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::StartBuffering()</highlight></codeline>
<codeline lineno="2454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsPlaying())<sp/>{</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/>StopPlayback();</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/>TimeDuration<sp/>decodeDuration<sp/>=<sp/>TimeStamp::Now()<sp/>-<sp/>mDecodeStartTime;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Go<sp/>into<sp/>quick<sp/>buffering<sp/>mode<sp/>provided<sp/>we&apos;ve<sp/>not<sp/>just<sp/>left<sp/>buffering<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>&quot;quick<sp/>exit&quot;.<sp/>This<sp/>stops<sp/>us<sp/>flip-flopping<sp/>between<sp/>playing<sp/>and<sp/>buffering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>the<sp/>download<sp/>speed<sp/>is<sp/>similar<sp/>to<sp/>the<sp/>decode<sp/>speed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/>mQuickBuffering<sp/>=</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/>!JustExitedQuickBuffering()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/>decodeDuration<sp/>&lt;<sp/>UsecsToDuration(QUICK_BUFFER_THRESHOLD_USECS);</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/>mBufferingStart<sp/>=<sp/>TimeStamp::Now();</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>tell<sp/>the<sp/>element<sp/>that<sp/>buffering<sp/>has<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can&apos;t<sp/>just<sp/>directly<sp/>send<sp/>an<sp/>asynchronous<sp/>runnable<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>eventually<sp/>fires<sp/>the<sp/>&quot;waiting&quot;<sp/>event.<sp/>The<sp/>problem<sp/>is<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>might<sp/>be<sp/>pending<sp/>main-thread<sp/>events,<sp/>such<sp/>as<sp/>&quot;data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>received&quot;<sp/>notifications,<sp/>that<sp/>mean<sp/>we&apos;re<sp/>not<sp/>actually<sp/>still</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>buffering<sp/>by<sp/>the<sp/>time<sp/>this<sp/>runnable<sp/>executes.<sp/>So<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>just<sp/>trigger<sp/>UpdateReadyStateForData;<sp/>when<sp/>it<sp/>runs,<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>check<sp/>the<sp/>current<sp/>state<sp/>and<sp/>decide<sp/>whether<sp/>to<sp/>tell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>element<sp/>we&apos;re<sp/>buffering<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/>UpdateReadyState();</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/>mState<sp/>=<sp/>DECODER_STATE_BUFFERING;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Changed<sp/>state<sp/>from<sp/>DECODING<sp/>to<sp/>BUFFERING,<sp/>decoded<sp/>for<sp/>%.3lfs&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder.get(),<sp/>decodeDuration.ToSeconds()));</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PR_LOGGING</highlight></codeline>
<codeline lineno="2484"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>MediaDecoder::Statistics<sp/>stats<sp/>=<sp/>mDecoder-&gt;GetStatistics();</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2486"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Playback<sp/>rate:<sp/>%.1lfKB/s%s<sp/>download<sp/>rate:<sp/>%.1lfKB/s%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder.get(),</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.mPlaybackRate/1024,<sp/>stats.mPlaybackRateReliable<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(unreliable)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.mDownloadRate/1024,<sp/>stats.mDownloadRateReliable<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(unreliable)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal">nsresult<sp/>MediaDecoderStateMachine::GetBuffered(nsTimeRanges*<sp/>aBuffered)<sp/>{</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/>MediaResource*<sp/>resource<sp/>=<sp/>mDecoder-&gt;GetResource();</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(resource,<sp/>NS_ERROR_FAILURE);</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/>resource-&gt;Pin();</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/>nsresult<sp/>res<sp/>=<sp/>mReader-&gt;GetBuffered(aBuffered,<sp/>mStartTime);</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/>resource-&gt;Unpin();</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="2499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::IsPausedAndDecoderWaiting()<sp/>{</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnStateMachineThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>state<sp/>machine<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecodeThreadWaiting<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder-&gt;GetState()<sp/>!=<sp/>MediaDecoder::PLAY_STATE_PLAYING<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/>(mState<sp/>==<sp/>DECODER_STATE_DECODING<sp/>||<sp/>mState<sp/>==<sp/>DECODER_STATE_BUFFERING);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal">nsresult<sp/>MediaDecoderStateMachine::Run()</highlight></codeline>
<codeline lineno="2512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnStateMachineThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>state<sp/>machine<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CallRunStateMachine();</highlight></codeline>
<codeline lineno="2517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"></highlight></codeline>
<codeline lineno="2519"><highlight class="normal">nsresult<sp/>MediaDecoderStateMachine::CallRunStateMachine()</highlight></codeline>
<codeline lineno="2520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnStateMachineThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>state<sp/>machine<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>set<sp/>to<sp/>true<sp/>by<sp/>ScheduleStateMachine()<sp/>if<sp/>it&apos;s<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>while<sp/>we&apos;re<sp/>in<sp/>RunStateMachine().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/>mRunAgain<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>to<sp/>true<sp/>whenever<sp/>we<sp/>dispatch<sp/>an<sp/>event<sp/>to<sp/>run<sp/>this<sp/>state<sp/>machine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>prevents<sp/>us<sp/>from<sp/>dispatching</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/>mDispatchedRunEvent<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>audio<sp/>is<sp/>being<sp/>captured,<sp/>stop<sp/>the<sp/>audio<sp/>thread<sp/>if<sp/>it&apos;s<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAudioCaptured)<sp/>{</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/>StopAudioThread();</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/>mTimeout<sp/>=<sp/>TimeStamp();</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/>mIsRunning<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/>nsresult<sp/>res<sp/>=<sp/>RunStateMachine();</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/>mIsRunning<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mRunAgain<sp/>&amp;&amp;<sp/>!mDispatchedRunEvent)<sp/>{</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/>mDispatchedRunEvent<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_DispatchToCurrentThread(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TimeoutExpired(nsITimer<sp/>*aTimer,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*aClosure)<sp/>{</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/>MediaDecoderStateMachine<sp/>*machine<sp/>=</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">MediaDecoderStateMachine*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(aClosure);</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/>NS_ASSERTION(machine,<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>have<sp/>been<sp/>passed<sp/>state<sp/>machine&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/>machine-&gt;TimeoutExpired();</highlight></codeline>
<codeline lineno="2555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::TimeoutExpired()</highlight></codeline>
<codeline lineno="2558"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/>NS_ASSERTION(OnStateMachineThread(),<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>be<sp/>on<sp/>state<sp/>machine<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mIsRunning)<sp/>{</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/>mRunAgain<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mDispatchedRunEvent)<sp/>{</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>have<sp/>an<sp/>event<sp/>dispatched<sp/>to<sp/>run<sp/>the<sp/>state<sp/>machine,<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>just<sp/>run<sp/>it<sp/>from<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/>CallRunStateMachine();</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>an<sp/>event<sp/>has<sp/>already<sp/>been<sp/>dispatched<sp/>to<sp/>run<sp/>the<sp/>state<sp/>machine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>soon<sp/>as<sp/>possible.<sp/>Nothing<sp/>else<sp/>needed<sp/>to<sp/>do,<sp/>the<sp/>state<sp/>machine<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>going<sp/>to<sp/>run<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal">nsresult<sp/>MediaDecoderStateMachine::ScheduleStateMachine()<sp/>{</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ScheduleStateMachine(0);</highlight></codeline>
<codeline lineno="2575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::ScheduleStateMachineWithLockAndWakeDecoder()<sp/>{</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/>mon.NotifyAll();</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/>ScheduleStateMachine(0);</highlight></codeline>
<codeline lineno="2581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal">nsresult<sp/>MediaDecoderStateMachine::ScheduleStateMachine(int64_t<sp/>aUsecs)<sp/>{</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/>NS_ABORT_IF_FALSE(GetStateMachineThread(),</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>have<sp/>a<sp/>state<sp/>machine<sp/>thread<sp/>to<sp/>schedule&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>==<sp/>DECODER_STATE_SHUTDOWN)<sp/>{</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/>aUsecs<sp/>=<sp/>NS_MAX&lt;int64_t&gt;(aUsecs,<sp/>0);</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/>TimeStamp<sp/>timeout<sp/>=<sp/>TimeStamp::Now()<sp/>+<sp/>UsecsToDuration(aUsecs);</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mTimeout.IsNull())<sp/>{</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout<sp/>&gt;=<sp/>mTimeout)<sp/>{</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ve<sp/>already<sp/>scheduled<sp/>a<sp/>timer<sp/>set<sp/>to<sp/>expire<sp/>at<sp/>or<sp/>before<sp/>this<sp/>time,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>have<sp/>an<sp/>event<sp/>dispatched<sp/>to<sp/>run<sp/>the<sp/>state<sp/>machine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mTimer)<sp/>{</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ve<sp/>been<sp/>asked<sp/>to<sp/>schedule<sp/>a<sp/>timer<sp/>to<sp/>run<sp/>before<sp/>an<sp/>existing<sp/>timer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cancel<sp/>the<sp/>existing<sp/>timer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mTimer-&gt;Cancel();</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/>uint32_t<sp/>ms<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((aUsecs<sp/>/<sp/>USECS_PER_MS)<sp/>&amp;<sp/>0xFFFFFFFF);</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mRealTime<sp/>&amp;&amp;<sp/>ms<sp/>&gt;<sp/>40)</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/>ms<sp/>=<sp/>40;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ms<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mIsRunning)<sp/>{</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>currently<sp/>running<sp/>this<sp/>state<sp/>machine<sp/>on<sp/>the<sp/>state<sp/>machine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thread.<sp/>Signal<sp/>it<sp/>to<sp/>run<sp/>again<sp/>once<sp/>it<sp/>finishes<sp/>its<sp/>current<sp/>cycle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mRunAgain<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mDispatchedRunEvent)<sp/>{</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>not<sp/>currently<sp/>running<sp/>this<sp/>state<sp/>machine<sp/>on<sp/>the<sp/>state<sp/>machine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thread.<sp/>Dispatch<sp/>an<sp/>event<sp/>to<sp/>run<sp/>one<sp/>cycle<sp/>of<sp/>the<sp/>state<sp/>machine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDispatchedRunEvent<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetStateMachineThread()-&gt;Dispatch(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>not<sp/>currently<sp/>running<sp/>this<sp/>state<sp/>machine<sp/>on<sp/>the<sp/>state<sp/>machine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thread,<sp/>but<sp/>something<sp/>has<sp/>already<sp/>dispatched<sp/>an<sp/>event<sp/>to<sp/>run<sp/>it<sp/>again,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>just<sp/>exit;<sp/>it&apos;s<sp/>going<sp/>to<sp/>run<sp/>real<sp/>soon.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/>mTimeout<sp/>=<sp/>timeout;</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"></highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/>nsresult<sp/>res;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mTimer)<sp/>{</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/>mTimer<sp/>=<sp/>do_CreateInstance(</highlight><highlight class="stringliteral">&quot;@mozilla.org/timer;1&quot;</highlight><highlight class="normal">,<sp/>&amp;res);</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(res))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/>mTimer-&gt;SetTarget(GetStateMachineThread());</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>mTimer-&gt;InitWithFuncCallback(mozilla::TimeoutExpired,</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ms,</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsITimer::TYPE_ONE_SHOT);</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="2642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::OnStateMachineThread()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2645"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsCurrentThread(GetStateMachineThread());</highlight></codeline>
<codeline lineno="2647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal">nsIThread*<sp/>MediaDecoderStateMachine::GetStateMachineThread()</highlight></codeline>
<codeline lineno="2650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StateMachineTracker::Instance().GetGlobalStateMachineThread();</highlight></codeline>
<codeline lineno="2652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::NotifyAudioAvailableListener()</highlight></codeline>
<codeline lineno="2655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/>mEventManager.NotifyAudioAvailableListener();</highlight></codeline>
<codeline lineno="2658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine::IsShutdown()</highlight></codeline>
<codeline lineno="2661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetState()<sp/>==<sp/>DECODER_STATE_SHUTDOWN;</highlight></codeline>
<codeline lineno="2664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mozilla</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/tools/mozilla-release/content/media/MediaDecoderStateMachine.cpp"/>
  </compounddef>
</doxygen>
