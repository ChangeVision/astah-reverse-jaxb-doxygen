<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="_media_stream_graph_8cpp" kind="file">
    <compoundname>MediaStreamGraph.cpp</compoundname>
    <includes local="yes">MediaStreamGraph.h</includes>
    <includes local="yes">mozilla/Monitor.h</includes>
    <includes local="yes">mozilla/TimeStamp.h</includes>
    <includes local="yes">AudioSegment.h</includes>
    <includes local="yes">VideoSegment.h</includes>
    <includes local="yes">nsContentUtils.h</includes>
    <includes local="yes">nsIAppShell.h</includes>
    <includes local="yes">nsIObserver.h</includes>
    <includes local="yes">nsServiceManagerUtils.h</includes>
    <includes local="yes">nsWidgetsCID.h</includes>
    <includes local="yes">nsXPCOMCIDInternal.h</includes>
    <includes local="yes">prlog.h</includes>
    <includes local="yes">VideoUtils.h</includes>
    <includes local="yes">mozilla/Attributes.h</includes>
    <includes local="yes">TrackUnionStream.h</includes>
    <includes local="yes">C:/tools/mozilla-release/content/media/MediaStreamGraph.h</includes>
    <includes local="yes">ImageContainer.h</includes>
    <includes local="yes">AudioChannelCommon.h</includes>
    <incdepgraph>
      <node id="271">
        <label>mozilla/Attributes.h</label>
      </node>
      <node id="266">
        <label>nsServiceManagerUtils.h</label>
      </node>
      <node id="268">
        <label>nsXPCOMCIDInternal.h</label>
      </node>
      <node id="262">
        <label>VideoSegment.h</label>
      </node>
      <node id="257">
        <label>C:/tools/mozilla-release/content/media/MediaStreamGraph.cpp</label>
        <link refid="MediaStreamGraph.cpp"/>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="259" relation="include">
        </childnode>
        <childnode refid="260" relation="include">
        </childnode>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="264" relation="include">
        </childnode>
        <childnode refid="265" relation="include">
        </childnode>
        <childnode refid="266" relation="include">
        </childnode>
        <childnode refid="267" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
        <childnode refid="270" relation="include">
        </childnode>
        <childnode refid="271" relation="include">
        </childnode>
        <childnode refid="272" relation="include">
        </childnode>
        <childnode refid="273" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
        <childnode refid="275" relation="include">
        </childnode>
      </node>
      <node id="274">
        <label>ImageContainer.h</label>
      </node>
      <node id="265">
        <label>nsIObserver.h</label>
      </node>
      <node id="261">
        <label>AudioSegment.h</label>
      </node>
      <node id="267">
        <label>nsWidgetsCID.h</label>
      </node>
      <node id="270">
        <label>VideoUtils.h</label>
      </node>
      <node id="273">
        <label>C:/tools/mozilla-release/content/media/MediaStreamGraph.h</label>
      </node>
      <node id="258">
        <label>MediaStreamGraph.h</label>
      </node>
      <node id="264">
        <label>nsIAppShell.h</label>
      </node>
      <node id="269">
        <label>prlog.h</label>
      </node>
      <node id="263">
        <label>nsContentUtils.h</label>
      </node>
      <node id="260">
        <label>mozilla/TimeStamp.h</label>
      </node>
      <node id="259">
        <label>mozilla/Monitor.h</label>
      </node>
      <node id="272">
        <label>TrackUnionStream.h</label>
      </node>
      <node id="275">
        <label>AudioChannelCommon.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classmozilla_1_1_media_stream_graph_impl" prot="public">mozilla::MediaStreamGraphImpl</innerclass>
    <innerclass refid="structmozilla_1_1_media_stream_graph_impl_1_1_message_block" prot="public">mozilla::MediaStreamGraphImpl::MessageBlock</innerclass>
    <innernamespace refid="namespacemozilla">mozilla</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_media_stream_graph_8cpp_1ae6e4cd49afe9deda788f4f9ee6ce4536" prot="public" static="no">
        <name>LOG</name>
        <param><defname>type</defname></param>
        <param><defname>msg</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/MediaStreamGraph.cpp" line="34" bodyfile="C:/tools/mozilla-release/content/media/MediaStreamGraph.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_media_stream_graph_8cpp_1aed86bf84d5178dc0616d719948150ce3" prot="public" static="yes" mutable="no">
        <type>int64_t</type>
        <definition>int64_t mGraphUpdateIndex</definition>
        <argsstring></argsstring>
        <name>mGraphUpdateIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/MediaStreamGraph.cpp" line="77" bodyfile="C:/tools/mozilla-release/content/media/MediaStreamGraph.cpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_media_stream_graph_8cpp_1ae997b8f8217bea80acadff4e49f901d7" prot="public" static="no" mutable="no">
        <type>nsRefPtr&lt; MediaStream &gt;</type>
        <definition>MediaStream* mStream</definition>
        <argsstring></argsstring>
        <name>mStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/MediaStreamGraph.cpp" line="78" bodyfile="C:/tools/mozilla-release/content/media/MediaStreamGraph.cpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_media_stream_graph_8cpp_1a4b3c4fcc0ccc66fe8dd3e341681db371" prot="public" static="no" mutable="no">
        <type>StreamTime</type>
        <definition>StreamTime mNextMainThreadCurrentTime</definition>
        <argsstring></argsstring>
        <name>mNextMainThreadCurrentTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/MediaStreamGraph.cpp" line="79" bodyfile="C:/tools/mozilla-release/content/media/MediaStreamGraph.cpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_media_stream_graph_8cpp_1aae9e69cb2cae0d0c6aee4dee367d8f3f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mNextMainThreadFinished</definition>
        <argsstring></argsstring>
        <name>mNextMainThreadFinished</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/MediaStreamGraph.cpp" line="80" bodyfile="C:/tools/mozilla-release/content/media/MediaStreamGraph.cpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_media_stream_graph_8cpp_1aa2dcc7e4138f8755194cfdd2dc27cbdf" prot="public" static="no" mutable="no">
        <type>MediaStreamGraphImpl *</type>
        <definition>MediaStreamGraphImpl* mGraph</definition>
        <argsstring></argsstring>
        <name>mGraph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/MediaStreamGraph.cpp" line="1554" bodyfile="C:/tools/mozilla-release/content/media/MediaStreamGraph.cpp" bodystart="1554" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>Mode:<sp/>C++;<sp/>tab-width:<sp/>2;<sp/>indent-tabs-mode:<sp/>nil;<sp/>c-basic-offset:<sp/>2<sp/>-*-*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>Source<sp/>Code<sp/>Form<sp/>is<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Mozilla<sp/>Public</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>License,<sp/>v.<sp/>2.0.<sp/>If<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>MPL<sp/>was<sp/>not<sp/>distributed<sp/>with<sp/>this<sp/>file,</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>You<sp/>can<sp/>obtain<sp/>one<sp/>at<sp/>http://mozilla.org/MPL/2.0/.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MediaStreamGraph.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/Monitor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/TimeStamp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AudioSegment.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;VideoSegment.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsContentUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsIAppShell.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsIObserver.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsServiceManagerUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsWidgetsCID.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsXPCOMCIDInternal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;prlog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;VideoUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/Attributes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrackUnionStream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ImageContainer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AudioChannelCommon.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">mozilla::layers;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">mozilla::dom;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mozilla<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PR_LOGGING</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal">PRLogModuleInfo*<sp/>gMediaStreamGraphLog;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG(type,<sp/>msg)<sp/>PR_LOG(gMediaStreamGraphLog,<sp/>type,<sp/>msg)</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LOG(type,<sp/>msg)</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MEDIA_GRAPH_TARGET_PERIOD_MS<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SCHEDULE_SAFETY_MARGIN_MS<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AUDIO_TARGET_MS<sp/>=<sp/>2*MEDIA_GRAPH_TARGET_PERIOD_MS<sp/>+</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>SCHEDULE_SAFETY_MARGIN_MS;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VIDEO_TARGET_MS<sp/>=<sp/>2*MEDIA_GRAPH_TARGET_PERIOD_MS<sp/>+</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>SCHEDULE_SAFETY_MARGIN_MS;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StreamUpdate<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>int64_t<sp/>mGraphUpdateIndex;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;MediaStream&gt;<sp/>mStream;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>StreamTime<sp/>mNextMainThreadCurrentTime;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mNextMainThreadFinished;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ControlMessage<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>ControlMessage(MediaStream*<sp/>aStream)<sp/>:<sp/>mStream(aStream)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>MOZ_COUNT_CTOR(ControlMessage);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>these<sp/>run<sp/>on<sp/>the<sp/>graph<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ControlMessage()</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>MOZ_COUNT_DTOR(ControlMessage);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>action<sp/>of<sp/>this<sp/>message<sp/>on<sp/>the<sp/>MediaStreamGraph<sp/>thread.<sp/>Any<sp/>actions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>affecting<sp/>graph<sp/>processing<sp/>should<sp/>take<sp/>effect<sp/>at<sp/>mStateComputedTime.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>stream<sp/>data<sp/>for<sp/>times<sp/>&lt;<sp/>mStateComputedTime<sp/>has<sp/>already<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>computed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>we&apos;re<sp/>shutting<sp/>down<sp/>the<sp/>application,<sp/>most<sp/>messages<sp/>are<sp/>ignored<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>cleanup<sp/>messages<sp/>should<sp/>still<sp/>be<sp/>processed<sp/>(on<sp/>the<sp/>main<sp/>thread).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunDuringShutdown()<sp/>{}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>MediaStream*<sp/>GetStream()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mStream;<sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>not<sp/>hold<sp/>a<sp/>reference<sp/>to<sp/>mStream.<sp/>The<sp/>graph<sp/>will<sp/>be<sp/>holding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>reference<sp/>to<sp/>the<sp/>stream<sp/>until<sp/>the<sp/>Destroy<sp/>message<sp/>is<sp/>processed.<sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>message<sp/>referencing<sp/>a<sp/>stream<sp/>is<sp/>the<sp/>Destroy<sp/>message<sp/>for<sp/>that<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>MediaStream*<sp/>mStream;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classmozilla_1_1_media_stream_graph_impl" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl" kindref="compound">MediaStreamGraphImpl</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MediaStreamGraph<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="classmozilla_1_1_media_stream_graph_impl" kindref="compound">MediaStreamGraphImpl</ref>();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>~<ref refid="classmozilla_1_1_media_stream_graph_impl" kindref="compound">MediaStreamGraphImpl</ref>()</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(IsEmpty(),</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;All<sp/>streams<sp/>should<sp/>have<sp/>been<sp/>destroyed<sp/>by<sp/>messages<sp/>from<sp/>the<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;MediaStreamGraph<sp/>%p<sp/>destroyed&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Main<sp/>thread<sp/>only.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunInStableState();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EnsureRunInStableState();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ApplyStreamUpdate(StreamUpdate*<sp/>aUpdate);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppendMessage(ControlMessage*<sp/>aMessage);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ForceShutDown();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShutdownThreads();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>methods<sp/>run<sp/>on<sp/>the<sp/>graph<sp/>thread<sp/>(or<sp/>possibly<sp/>the<sp/>main<sp/>thread<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mLifecycleState<sp/>&gt;<sp/>LIFECYCLE_RUNNING)</highlight></codeline>
<codeline lineno="175"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunThread();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EnsureNextIteration();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EnsureNextIterationLocked(MonitorAutoLock&amp;<sp/>aLock);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EnsureImmediateWakeUpLocked(MonitorAutoLock&amp;<sp/>aLock);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EnsureStableStateEventPosted();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrepareUpdatesToMainThreadState();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>methods<sp/>are<sp/>the<sp/>various<sp/>stages<sp/>of<sp/>RunThread<sp/>processing.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UpdateCurrentTime();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UpdateConsumptionState(SourceMediaStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExtractPendingInput(SourceMediaStream*<sp/>aStream,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime<sp/>aDesiredUpToTime,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>aEnsureNextIteration);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UpdateBufferSufficiencyState(SourceMediaStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/>*<sp/>If<sp/>aStream<sp/>hasn&apos;t<sp/>already<sp/>been<sp/>ordered,<sp/>push<sp/>it<sp/>onto<sp/>aStack<sp/>and<sp/>order</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/>*<sp/>its<sp/>children.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UpdateStreamOrderForStream(nsTArray&lt;MediaStream*&gt;*<sp/>aStack,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>already_AddRefed&lt;MediaStream&gt;<sp/>aStream);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MarkConsumed(MediaStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UpdateStreamOrder();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecomputeBlocking(GraphTime<sp/>aEndBlockingDecisions);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>methods<sp/>are<sp/>used<sp/>to<sp/>help<sp/>RecomputeBlocking.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddBlockingRelatedStreamsToSet(nsTArray&lt;MediaStream*&gt;*<sp/>aStreams,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MarkStreamBlocking(MediaStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecomputeBlockingAt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nsTArray&lt;MediaStream*&gt;&amp;<sp/>aStreams,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime<sp/>aTime,<sp/>GraphTime<sp/>aEndBlockingDecisions,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime*<sp/>aEnd);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>WillUnderrun(MediaStream*<sp/>aStream,<sp/>GraphTime<sp/>aTime,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime<sp/>aEndBlockingDecisions,<sp/>GraphTime*<sp/>aEnd);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>StreamTime<sp/>GraphTimeToStreamTime(MediaStream*<sp/>aStream,<sp/>GraphTime<sp/>aTime);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>INCLUDE_TRAILING_BLOCKED_INTERVAL<sp/>=<sp/>0x01</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>GraphTime<sp/>StreamTimeToGraphTime(MediaStream*<sp/>aStream,<sp/>StreamTime<sp/>aTime,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>aFlags<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>GraphTime<sp/>GetAudioPosition(MediaStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NotifyHasCurrentData(MediaStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CreateOrDestroyAudioStreams(GraphTime<sp/>aAudioOutputStartTime,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PlayAudio(MediaStream*<sp/>aStream,<sp/>GraphTime<sp/>aFrom,<sp/>GraphTime<sp/>aTo);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PlayVideo(MediaStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FinishStream(MediaStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>StreamTime<sp/>GetDesiredBufferEnd(MediaStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsEmpty()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mStreams.IsEmpty()<sp/>&amp;&amp;<sp/>mPortCount<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>use<sp/>by<sp/>control<sp/>messages</highlight></codeline>
<codeline lineno="337"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>int64_t<sp/>GetProcessingGraphUpdateIndex()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mProcessingGraphUpdateIndex;<sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddStream(MediaStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RemoveStream(MediaStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DestroyPort(MediaInputPort*<sp/>aPort);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIThread&gt;<sp/>mThread;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>state<sp/>is<sp/>managed<sp/>on<sp/>the<sp/>graph<sp/>thread<sp/>only,<sp/>unless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mLifecycleState<sp/>&gt;<sp/>LIFECYCLE_RUNNING<sp/>in<sp/>which<sp/>case<sp/>the<sp/>graph<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>running<sp/>and<sp/>this<sp/>state<sp/>can<sp/>be<sp/>used<sp/>from<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>nsTArray&lt;nsRefPtr&lt;MediaStream&gt;<sp/>&gt;<sp/>mStreams;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>GraphTime<sp/>mCurrentTime;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>GraphTime<sp/>mStateComputedTime;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>TimeStamp<sp/>mInitialTimeStamp;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>TimeStamp<sp/>mCurrentTimeStamp;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>int64_t<sp/>mProcessingGraphUpdateIndex;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>int32_t<sp/>mPortCount;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mMonitor<sp/>guards<sp/>the<sp/>data<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MediaStreamGraph<sp/>normally<sp/>does<sp/>its<sp/>work<sp/>without<sp/>holding<sp/>mMonitor,<sp/>so<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>safe<sp/>to<sp/>just<sp/>grab<sp/>mMonitor<sp/>from<sp/>some<sp/>thread<sp/>and<sp/>start<sp/>monkeying<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>graph.<sp/>Instead,<sp/>communicate<sp/>with<sp/>the<sp/>graph<sp/>thread<sp/>using<sp/>provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mechanisms<sp/>such<sp/>as<sp/>the<sp/>ControlMessage<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>Monitor<sp/>mMonitor;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>guarded<sp/>by<sp/>mMonitor<sp/>(must<sp/>always<sp/>be<sp/>accessed<sp/>with<sp/>mMonitor<sp/>held,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>regardless<sp/>of<sp/>the<sp/>value<sp/>of<sp/>mLifecycleState.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>nsTArray&lt;StreamUpdate&gt;<sp/>mStreamUpdates;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>nsTArray&lt;nsCOMPtr&lt;nsIRunnable&gt;<sp/>&gt;<sp/>mUpdateRunnables;</highlight></codeline>
<codeline lineno="411" refid="structmozilla_1_1_media_stream_graph_impl_1_1_message_block" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmozilla_1_1_media_stream_graph_impl_1_1_message_block" kindref="compound">MessageBlock</ref><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>mGraphUpdateIndex;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>nsTArray&lt;nsAutoPtr&lt;ControlMessage&gt;<sp/>&gt;<sp/>mMessages;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>nsTArray&lt;MessageBlock&gt;<sp/>mMessageQueue;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="classmozilla_1_1_media_stream_graph_impl_1a9053102f620d043f4b921e73400f00e5" kindref="member">LifecycleState</ref><sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>graph<sp/>thread<sp/>hasn&apos;t<sp/>started<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>LIFECYCLE_THREAD_NOT_STARTED,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RunThread()<sp/>is<sp/>running<sp/>normally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>LIFECYCLE_RUNNING,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>following<sp/>states,<sp/>the<sp/>graph<sp/>thread<sp/>is<sp/>not<sp/>running<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>&quot;graph<sp/>thread<sp/>only&quot;<sp/>state<sp/>in<sp/>this<sp/>class<sp/>can<sp/>be<sp/>used<sp/>safely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RunThread()<sp/>has<sp/>exited<sp/>and<sp/>we&apos;re<sp/>waiting<sp/>for<sp/>the<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RunInStableState(),<sp/>at<sp/>which<sp/>point<sp/>we<sp/>can<sp/>clean<sp/>up<sp/>the<sp/>main-thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>side<sp/>of<sp/>the<sp/>graph.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>LIFECYCLE_WAITING_FOR_MAIN_THREAD_CLEANUP,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RunInStableState()<sp/>posted<sp/>a<sp/>ShutdownRunnable,<sp/>and<sp/>we&apos;re<sp/>waiting<sp/>for<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>shut<sp/>down<sp/>the<sp/>graph<sp/>thread(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>LIFECYCLE_WAITING_FOR_THREAD_SHUTDOWN,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Graph<sp/>threads<sp/>have<sp/>shut<sp/>down<sp/>but<sp/>we&apos;re<sp/>waiting<sp/>for<sp/>remaining<sp/>streams</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>destroyed.<sp/>Only<sp/>happens<sp/>during<sp/>application<sp/>shutdown<sp/>since<sp/>normally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;d<sp/>only<sp/>shut<sp/>down<sp/>a<sp/>graph<sp/>when<sp/>it<sp/>has<sp/>no<sp/>streams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>LIFECYCLE_WAITING_FOR_STREAM_DESTRUCTION</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>LifecycleState<sp/>mLifecycleState;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>WaitState<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RunThread()<sp/>is<sp/>running<sp/>normally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>WAITSTATE_RUNNING,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RunThread()<sp/>is<sp/>paused<sp/>waiting<sp/>for<sp/>its<sp/>next<sp/>iteration,<sp/>which<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>happen<sp/>soon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>WAITSTATE_WAITING_FOR_NEXT_ITERATION,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RunThread()<sp/>is<sp/>paused<sp/>indefinitely<sp/>waiting<sp/>for<sp/>something<sp/>to<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>WAITSTATE_WAITING_INDEFINITELY,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Something<sp/>has<sp/>signaled<sp/>RunThread()<sp/>to<sp/>wake<sp/>up<sp/>immediately,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>it<sp/>hasn&apos;t<sp/>done<sp/>so<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>WAITSTATE_WAKING_UP</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>WaitState<sp/>mWaitState;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mNeedAnotherIteration;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mForceShutDown;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mPostedRunInStableStateEvent;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Main<sp/>thread<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>nsTArray&lt;nsAutoPtr&lt;ControlMessage&gt;<sp/>&gt;<sp/>mCurrentTaskMessageQueue;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mDetectedNotRunning;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mPostedRunInStableState;</highlight></codeline>
<codeline lineno="510"><highlight class="normal">};</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MediaStreamGraphImpl*<sp/>gGraph;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal">StreamTime</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1aef9cea5c6724536c94874c42cf9bd868" kindref="member">MediaStreamGraphImpl::GetDesiredBufferEnd</ref>(MediaStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>StreamTime<sp/>current<sp/>=<sp/>mCurrentTime<sp/>-<sp/>aStream-&gt;mBufferStartTime;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current<sp/>+</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MillisecondsToMediaTime(NS_MAX(AUDIO_TARGET_MS,<sp/>VIDEO_TARGET_MS));</highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1ad9a53a61cc58c5060a70822422e33973" kindref="member">MediaStreamGraphImpl::FinishStream</ref>(MediaStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="527"><highlight class="normal">{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStream-&gt;mFinished)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;MediaStream<sp/>%p<sp/>will<sp/>finish&quot;</highlight><highlight class="normal">,<sp/>aStream));</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>aStream-&gt;mFinished<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Force<sp/>at<sp/>least<sp/>one<sp/>more<sp/>iteration<sp/>of<sp/>the<sp/>control<sp/>loop,<sp/>since<sp/>we<sp/>rely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>UpdateCurrentTime<sp/>to<sp/>notify<sp/>our<sp/>listeners<sp/>once<sp/>the<sp/>stream<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>been<sp/>reached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>EnsureNextIteration();</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a52b00d2ba9cd519da06e97aa379e4dbb" kindref="member">MediaStreamGraphImpl::AddStream</ref>(MediaStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>aStream-&gt;mBufferStartTime<sp/>=<sp/>mCurrentTime;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>*mStreams.AppendElement()<sp/>=<sp/>already_AddRefed&lt;MediaStream&gt;(aStream);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Adding<sp/>media<sp/>stream<sp/>%p<sp/>to<sp/>the<sp/>graph&quot;</highlight><highlight class="normal">,<sp/>aStream));</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1ad88cfc147a2a148cbec812a600e5b211" kindref="member">MediaStreamGraphImpl::RemoveStream</ref>(MediaStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="548"><highlight class="normal">{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>references<sp/>in<sp/>mStreamUpdates<sp/>before<sp/>we<sp/>allow<sp/>aStream<sp/>to<sp/>die.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pending<sp/>updates<sp/>are<sp/>not<sp/>needed<sp/>(since<sp/>the<sp/>main<sp/>thread<sp/>has<sp/>already<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>up<sp/>the<sp/>stream)<sp/>so<sp/>we<sp/>will<sp/>just<sp/>drop<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>MonitorAutoLock<sp/>lock(mMonitor);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mStreamUpdates.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mStreamUpdates[i].mStream<sp/>==<sp/>aStream)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStreamUpdates[i].mStream<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>unrefs<sp/>the<sp/>stream,<sp/>probably<sp/>destroying<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>mStreams.RemoveElement(aStream);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Removing<sp/>media<sp/>stream<sp/>%p<sp/>from<sp/>the<sp/>graph&quot;</highlight><highlight class="normal">,<sp/>aStream));</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1af4d56ec75780401f0618085754d9783e" kindref="member">MediaStreamGraphImpl::UpdateConsumptionState</ref>(SourceMediaStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>MediaStreamListener::Consumption<sp/>state<sp/>=</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aStream-&gt;mIsConsumed<sp/>?<sp/>MediaStreamListener::CONSUMED</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>MediaStreamListener::NOT_CONSUMED;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>!=<sp/>aStream-&gt;mLastConsumptionState)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>aStream-&gt;mLastConsumptionState<sp/>=<sp/>state;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>aStream-&gt;mListeners.Length();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MediaStreamListener*<sp/>l<sp/>=<sp/>aStream-&gt;mListeners[j];</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l-&gt;NotifyConsumptionChanged(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>state);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a1643ab49fe6dd9f45594705e3890317c" kindref="member">MediaStreamGraphImpl::ExtractPendingInput</ref>(SourceMediaStream*<sp/>aStream,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime<sp/>aDesiredUpToTime,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>aEnsureNextIteration)</highlight></codeline>
<codeline lineno="586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>finished;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>MutexAutoLock<sp/>lock(aStream-&gt;mMutex);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStream-&gt;mPullEnabled<sp/>&amp;&amp;<sp/>!aStream-&gt;mFinished)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>aStream-&gt;mListeners.Length();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaStreamListener*<sp/>l<sp/>=<sp/>aStream-&gt;mListeners[j];</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>how<sp/>much<sp/>stream<sp/>time<sp/>we&apos;ll<sp/>need<sp/>assuming<sp/>we<sp/>don&apos;t<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>stream<sp/>at<sp/>all<sp/>between<sp/>mBlockingDecisionsMadeUntilTime<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>aDesiredUpToTime.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamTime<sp/>t<sp/>=</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GraphTimeToStreamTime(aStream,<sp/>mStateComputedTime)<sp/>+</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(aDesiredUpToTime<sp/>-<sp/>mStateComputedTime);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MutexAutoUnlock<sp/>unlock(aStream-&gt;mMutex);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l-&gt;NotifyPull(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>t);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*aEnsureNextIteration<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>finished<sp/>=<sp/>aStream-&gt;mUpdateFinished;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>i<sp/>=<sp/>aStream-&gt;mUpdateTracks.Length()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SourceMediaStream::TrackData*<sp/>data<sp/>=<sp/>&amp;aStream-&gt;mUpdateTracks[i];</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>aStream-&gt;mListeners.Length();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaStreamListener*<sp/>l<sp/>=<sp/>aStream-&gt;mListeners[j];</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TrackTicks<sp/>offset<sp/>=<sp/>(data-&gt;mCommands<sp/>&amp;<sp/>SourceMediaStream::TRACK_CREATE)</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>data-&gt;mStart<sp/>:<sp/>aStream-&gt;mBuffer.FindTrack(data-&gt;mID)-&gt;GetSegment()-&gt;GetDuration();</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l-&gt;NotifyQueuedTrackChanges(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>data-&gt;mID,<sp/>data-&gt;mRate,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset,<sp/>data-&gt;mCommands,<sp/>*data-&gt;mData);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;mCommands<sp/>&amp;<sp/>SourceMediaStream::TRACK_CREATE)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaSegment*<sp/>segment<sp/>=<sp/>data-&gt;mData.forget();</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;SourceMediaStream<sp/>%p<sp/>creating<sp/>track<sp/>%d,<sp/>rate<sp/>%d,<sp/>start<sp/>%lld,<sp/>initial<sp/>end<sp/>%lld&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aStream,<sp/>data-&gt;mID,<sp/>data-&gt;mRate,<sp/>int64_t(data-&gt;mStart),</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t(segment-&gt;GetDuration())));</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aStream-&gt;mBuffer.AddTrack(data-&gt;mID,<sp/>data-&gt;mRate,<sp/>data-&gt;mStart,<sp/>segment);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>track<sp/>has<sp/>taken<sp/>ownership<sp/>of<sp/>data-&gt;mData,<sp/>so<sp/>let&apos;s<sp/>replace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>data-&gt;mData<sp/>with<sp/>an<sp/>empty<sp/>clone.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;mData<sp/>=<sp/>segment-&gt;CreateEmptyClone();</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;mCommands<sp/>&amp;=<sp/>~SourceMediaStream::TRACK_CREATE;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;mData-&gt;GetDuration()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaSegment*<sp/>dest<sp/>=<sp/>aStream-&gt;mBuffer.FindTrack(data-&gt;mID)-&gt;GetSegment();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;SourceMediaStream<sp/>%p<sp/>track<sp/>%d,<sp/>advancing<sp/>end<sp/>from<sp/>%lld<sp/>to<sp/>%lld&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aStream,<sp/>data-&gt;mID,</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t(dest-&gt;GetDuration()),</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t(dest-&gt;GetDuration()<sp/>+<sp/>data-&gt;mData-&gt;GetDuration())));</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest-&gt;AppendFrom(data-&gt;mData);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;mCommands<sp/>&amp;<sp/>SourceMediaStream::TRACK_END)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aStream-&gt;mBuffer.FindTrack(data-&gt;mID)-&gt;SetEnded();</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aStream-&gt;mUpdateTracks.RemoveElementAt(i);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>aStream-&gt;mBuffer.AdvanceKnownTracksTime(aStream-&gt;mUpdateKnownTracksTime);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(finished)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>FinishStream(aStream);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1add775cd4edc157001cc1f8b870e144a1" kindref="member">MediaStreamGraphImpl::UpdateBufferSufficiencyState</ref>(SourceMediaStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="648"><highlight class="normal">{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>StreamTime<sp/>desiredEnd<sp/>=<sp/>GetDesiredBufferEnd(aStream);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>nsTArray&lt;SourceMediaStream::ThreadAndRunnable&gt;<sp/>runnables;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>MutexAutoLock<sp/>lock(aStream-&gt;mMutex);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aStream-&gt;mUpdateTracks.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SourceMediaStream::TrackData*<sp/>data<sp/>=<sp/>&amp;aStream-&gt;mUpdateTracks[i];</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;mCommands<sp/>&amp;<sp/>SourceMediaStream::TRACK_CREATE)<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>track<sp/>hasn&apos;t<sp/>been<sp/>created<sp/>yet,<sp/>so<sp/>we<sp/>have<sp/>no<sp/>sufficiency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>data.<sp/>The<sp/>track<sp/>will<sp/>be<sp/>created<sp/>in<sp/>the<sp/>next<sp/>iteration<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>control<sp/>loop<sp/>and<sp/>then<sp/>we&apos;ll<sp/>fire<sp/>insufficiency<sp/>notifications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;mCommands<sp/>&amp;<sp/>SourceMediaStream::TRACK_END)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>track<sp/>will<sp/>end,<sp/>so<sp/>no<sp/>point<sp/>in<sp/>firing<sp/>not-enough-data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>callbacks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StreamBuffer::Track*<sp/>track<sp/>=<sp/>aStream-&gt;mBuffer.FindTrack(data-&gt;mID);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>track-&gt;IsEnded()<sp/>must<sp/>be<sp/>false,<sp/>otherwise<sp/>we<sp/>would<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>removed<sp/>the<sp/>track<sp/>from<sp/>mUpdateTracks<sp/>already.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(!track-&gt;IsEnded(),<sp/></highlight><highlight class="stringliteral">&quot;What<sp/>is<sp/>this<sp/>track<sp/>doing<sp/>here?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;mHaveEnough<sp/>=<sp/>track-&gt;GetEndTimeRoundDown()<sp/>&gt;=<sp/>desiredEnd;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!data-&gt;mHaveEnough)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runnables.MoveElementsFrom(data-&gt;mDispatchWhenNotEnough);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>runnables.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>runnables[i].mThread-&gt;Dispatch(runnables[i].mRunnable,<sp/>0);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal">StreamTime</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1af9ad9c9df4782b1614313578d2ae3bed" kindref="member">MediaStreamGraphImpl::GraphTimeToStreamTime</ref>(MediaStream*<sp/>aStream,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime<sp/>aTime)</highlight></codeline>
<codeline lineno="687"><highlight class="normal">{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>NS_ASSERTION(aTime<sp/>&lt;=<sp/>mStateComputedTime,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>ask<sp/>about<sp/>times<sp/>where<sp/>we<sp/>haven&apos;t<sp/>made<sp/>blocking<sp/>decisions<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aTime<sp/>&lt;=<sp/>mCurrentTime)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_MAX&lt;StreamTime&gt;(0,<sp/>aTime<sp/>-<sp/>aStream-&gt;mBufferStartTime);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>GraphTime<sp/>t<sp/>=<sp/>mCurrentTime;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>StreamTime<sp/>s<sp/>=<sp/>t<sp/>-<sp/>aStream-&gt;mBufferStartTime;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>aTime)<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphTime<sp/>end;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!aStream-&gt;mBlocked.GetAt(t,<sp/>&amp;end))<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>NS_MIN(aTime,<sp/>end)<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_MAX&lt;StreamTime&gt;(0,<sp/>s);</highlight></codeline>
<codeline lineno="703"><highlight class="normal">}<sp/><sp/></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal">GraphTime</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1ac53b204cef6945ff2fc953d05eeadf20" kindref="member">MediaStreamGraphImpl::StreamTimeToGraphTime</ref>(MediaStream*<sp/>aStream,</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamTime<sp/>aTime,<sp/>uint32_t<sp/>aFlags)</highlight></codeline>
<codeline lineno="708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aTime<sp/>&gt;=<sp/>STREAM_TIME_MAX)<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GRAPH_TIME_MAX;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>MediaTime<sp/>bufferElapsedToCurrentTime<sp/>=<sp/>mCurrentTime<sp/>-<sp/>aStream-&gt;mBufferStartTime;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aTime<sp/>&lt;<sp/>bufferElapsedToCurrentTime<sp/>||</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(aTime<sp/>==<sp/>bufferElapsedToCurrentTime<sp/>&amp;&amp;<sp/>!(aFlags<sp/>&amp;<sp/>INCLUDE_TRAILING_BLOCKED_INTERVAL)))<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aTime<sp/>+<sp/>aStream-&gt;mBufferStartTime;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>MediaTime<sp/>streamAmount<sp/>=<sp/>aTime<sp/>-<sp/>bufferElapsedToCurrentTime;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>NS_ASSERTION(streamAmount<sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>answer<sp/>queries<sp/>before<sp/>current<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>GraphTime<sp/>t<sp/>=<sp/>mCurrentTime;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>GRAPH_TIME_MAX)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>blocked;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphTime<sp/>end;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>mStateComputedTime)<sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blocked<sp/>=<sp/>aStream-&gt;mBlocked.GetAt(t,<sp/>&amp;end);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>NS_MIN(end,<sp/>mStateComputedTime);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blocked<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>GRAPH_TIME_MAX;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blocked)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(streamAmount<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>more<sp/>stream<sp/>time<sp/>to<sp/>consume<sp/>at<sp/>time<sp/>t,<sp/>so<sp/>we&apos;re<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MediaTime<sp/>consume<sp/>=<sp/>NS_MIN(end<sp/>-<sp/>t,<sp/>streamAmount);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>streamAmount<sp/>-=<sp/>consume;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>consume;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal">GraphTime</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a5cce1c0e9e3a3ff69a27dfbfbbfe5861" kindref="member">MediaStreamGraphImpl::GetAudioPosition</ref>(MediaStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="749"><highlight class="normal">{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStream-&gt;mAudioOutputStreams.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mCurrentTime;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>int64_t<sp/>positionInFrames<sp/>=<sp/>aStream-&gt;mAudioOutputStreams[0].mStream-&gt;GetPositionInFrames();</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(positionInFrames<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mCurrentTime;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aStream-&gt;mAudioOutputStreams[0].mAudioPlaybackStartTime<sp/>+</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TicksToTimeRoundDown(aStream-&gt;mAudioOutputStreams[0].mStream-&gt;GetRate(),</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positionInFrames);</highlight></codeline>
<codeline lineno="760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a62f2c08944047785b3ad0451c334904e" kindref="member">MediaStreamGraphImpl::UpdateCurrentTime</ref>()</highlight></codeline>
<codeline lineno="764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>GraphTime<sp/>prevCurrentTime<sp/>=<sp/>mCurrentTime;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>TimeStamp<sp/>now<sp/>=<sp/>TimeStamp::Now();</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>GraphTime<sp/>nextCurrentTime<sp/>=</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>SecondsToMediaTime((now<sp/>-<sp/>mCurrentTimeStamp).ToSeconds())<sp/>+<sp/>mCurrentTime;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mStateComputedTime<sp/>&lt;<sp/>nextCurrentTime)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_WARNING,<sp/>(</highlight><highlight class="stringliteral">&quot;Media<sp/>graph<sp/>global<sp/>underrun<sp/>detected&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Advancing<sp/>mStateComputedTime<sp/>from<sp/>%f<sp/>to<sp/>%f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaTimeToSeconds(mStateComputedTime),</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaTimeToSeconds(nextCurrentTime)));</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advance<sp/>mStateComputedTime<sp/>to<sp/>nextCurrentTime<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adding<sp/>blocked<sp/>time<sp/>to<sp/>all<sp/>streams<sp/>starting<sp/>at<sp/>mStateComputedTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mStreams[i]-&gt;mBlocked.SetAtAndAfter(mStateComputedTime,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>mStateComputedTime<sp/>=<sp/>nextCurrentTime;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>mCurrentTimeStamp<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Updating<sp/>current<sp/>time<sp/>to<sp/>%f<sp/>(real<sp/>%f,<sp/>mStateComputedTime<sp/>%f)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaTimeToSeconds(nextCurrentTime),</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(now<sp/>-<sp/>mInitialTimeStamp).ToSeconds(),</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaTimeToSeconds(mStateComputedTime)));</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevCurrentTime<sp/>&gt;=<sp/>nextCurrentTime)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(prevCurrentTime<sp/>==<sp/>nextCurrentTime,<sp/></highlight><highlight class="stringliteral">&quot;Time<sp/>can&apos;t<sp/>go<sp/>backwards!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>could<sp/>happen<sp/>due<sp/>to<sp/>low<sp/>clock<sp/>resolution,<sp/>maybe?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Time<sp/>did<sp/>not<sp/>advance&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There&apos;s<sp/>not<sp/>much<sp/>left<sp/>to<sp/>do<sp/>here,<sp/>but<sp/>the<sp/>code<sp/>below<sp/>that<sp/>notifies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>listeners<sp/>that<sp/>streams<sp/>have<sp/>ended<sp/>still<sp/>needs<sp/>to<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaStream*<sp/>stream<sp/>=<sp/>mStreams[i];</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>blocked<sp/>time<sp/>and<sp/>fire<sp/>Blocked/Unblocked<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphTime<sp/>blockedTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphTime<sp/>t<sp/>=<sp/>prevCurrentTime;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>current<sp/>blocked<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wasBlocked<sp/>=<sp/>stream-&gt;mBlocked.GetAt(prevCurrentTime);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>nextCurrentTime)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime<sp/>end;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>blocked<sp/>=<sp/>stream-&gt;mBlocked.GetAt(t,<sp/>&amp;end);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blocked)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockedTime<sp/>+=<sp/>NS_MIN(end,<sp/>nextCurrentTime)<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blocked<sp/>!=<sp/>wasBlocked)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>stream-&gt;mListeners.Length();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaStreamListener*<sp/>l<sp/>=<sp/>stream-&gt;mListeners[j];</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l-&gt;NotifyBlockingChanged(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocked<sp/>?<sp/>MediaStreamListener::BLOCKED<sp/>:<sp/>MediaStreamListener::UNBLOCKED);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wasBlocked<sp/>=<sp/>blocked;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;AdvanceTimeVaryingValuesToCurrentTime(nextCurrentTime,<sp/>blockedTime);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advance<sp/>mBlocked<sp/>last<sp/>so<sp/>that<sp/>implementations<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AdvanceTimeVaryingValuesToCurrentTime<sp/>can<sp/>rely<sp/>on<sp/>the<sp/>value<sp/>of<sp/>mBlocked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mBlocked.AdvanceCurrentTime(nextCurrentTime);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockedTime<sp/>&lt;<sp/>nextCurrentTime<sp/>-<sp/>prevCurrentTime)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stream-&gt;mListeners.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaStreamListener*<sp/>l<sp/>=<sp/>stream-&gt;mListeners[i];</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l-&gt;NotifyOutput(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;mFinished<sp/>&amp;&amp;<sp/>!stream-&gt;mNotifiedFinished<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mBufferStartTime<sp/>+<sp/>stream-&gt;GetBufferEnd()<sp/>&lt;=<sp/>nextCurrentTime)<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mNotifiedFinished<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mLastPlayedVideoFrame.SetNull();</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>stream-&gt;mListeners.Length();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaStreamListener*<sp/>l<sp/>=<sp/>stream-&gt;mListeners[j];</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l-&gt;NotifyFinished(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;MediaStream<sp/>%p<sp/>bufferStartTime=%f<sp/>blockedTime=%f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream,<sp/>MediaTimeToSeconds(stream-&gt;mBufferStartTime),</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaTimeToSeconds(blockedTime)));</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>mCurrentTime<sp/>=<sp/>nextCurrentTime;</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1ae69a5f3821b9f3e2aaa1858a0a548135" kindref="member">MediaStreamGraphImpl::WillUnderrun</ref>(MediaStream*<sp/>aStream,<sp/>GraphTime<sp/>aTime,</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime<sp/>aEndBlockingDecisions,<sp/>GraphTime*<sp/>aEnd)</highlight></codeline>
<codeline lineno="854"><highlight class="normal">{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Finished<sp/>streams<sp/>can&apos;t<sp/>underrun.<sp/>ProcessedMediaStreams<sp/>also<sp/>can&apos;t<sp/>cause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>underrun<sp/>currently,<sp/>since<sp/>we&apos;ll<sp/>always<sp/>be<sp/>able<sp/>to<sp/>produce<sp/>data<sp/>for<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unless<sp/>they<sp/>block<sp/>on<sp/>some<sp/>other<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStream-&gt;mFinished<sp/>||<sp/>aStream-&gt;AsProcessedStream())<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>GraphTime<sp/>bufferEnd<sp/>=</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>StreamTimeToGraphTime(aStream,<sp/>aStream-&gt;GetBufferEnd(),</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INCLUDE_TRAILING_BLOCKED_INTERVAL);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>NS_ASSERTION(bufferEnd<sp/>&gt;=<sp/>mCurrentTime,<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>underran&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>should<sp/>block<sp/>after<sp/>bufferEnd.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bufferEnd<sp/>&lt;=<sp/>aTime)<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;MediaStream<sp/>%p<sp/>will<sp/>block<sp/>due<sp/>to<sp/>data<sp/>underrun,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bufferEnd<sp/>%f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aStream,<sp/>MediaTimeToSeconds(bufferEnd)));</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>should<sp/>keep<sp/>blocking<sp/>if<sp/>we&apos;re<sp/>currently<sp/>blocked<sp/>and<sp/>we<sp/>don&apos;t<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>all<sp/>the<sp/>way<sp/>through<sp/>to<sp/>aEndBlockingDecisions.<sp/>If<sp/>we<sp/>don&apos;t<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>all<sp/>the<sp/>way<sp/>through<sp/>to<sp/>aEndBlockingDecisions,<sp/>we&apos;ll<sp/>block<sp/>soon,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>we<sp/>might<sp/>as<sp/>well<sp/>remain<sp/>unblocked<sp/>and<sp/>play<sp/>the<sp/>data<sp/>we&apos;ve<sp/>got<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>can.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bufferEnd<sp/>&lt;=<sp/>aEndBlockingDecisions<sp/>&amp;&amp;<sp/>aStream-&gt;mBlocked.GetBefore(aTime))<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;MediaStream<sp/>%p<sp/>will<sp/>block<sp/>due<sp/>to<sp/>speculative<sp/>data<sp/>underrun,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bufferEnd<sp/>%f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aStream,<sp/>MediaTimeToSeconds(bufferEnd)));</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reconsider<sp/>decisions<sp/>at<sp/>bufferEnd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>*aEnd<sp/>=<sp/>NS_MIN(*aEnd,<sp/>bufferEnd);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1ac9b2bf95375227d6d3353da98e5b9eaf" kindref="member">MediaStreamGraphImpl::MarkConsumed</ref>(MediaStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="890"><highlight class="normal">{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStream-&gt;mIsConsumed)<sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>aStream-&gt;mIsConsumed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>ProcessedMediaStream*<sp/>ps<sp/>=<sp/>aStream-&gt;AsProcessedStream();</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ps)<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>all<sp/>the<sp/>inputs<sp/>to<sp/>this<sp/>stream<sp/>as<sp/>consumed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ps-&gt;mInputs.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>MarkConsumed(ps-&gt;mInputs[i]-&gt;mSource);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal">MediaStreamGraphImpl::UpdateStreamOrderForStream(nsTArray&lt;MediaStream*&gt;*<sp/>aStack,</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>already_AddRefed&lt;MediaStream&gt;<sp/>aStream)</highlight></codeline>
<codeline lineno="909"><highlight class="normal">{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;MediaStream&gt;<sp/>stream<sp/>=<sp/>aStream;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!stream-&gt;mHasBeenOrdered,<sp/></highlight><highlight class="stringliteral">&quot;stream<sp/>should<sp/>not<sp/>have<sp/>already<sp/>been<sp/>ordered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;mIsOnOrderingStack)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>i<sp/>=<sp/>aStack-&gt;Length()<sp/>-<sp/>1;<sp/>;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aStack-&gt;ElementAt(i)-&gt;AsProcessedStream()-&gt;mInCycle<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStack-&gt;ElementAt(i)<sp/>==<sp/>stream)</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>ProcessedMediaStream*<sp/>ps<sp/>=<sp/>stream-&gt;AsProcessedStream();</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ps)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>aStack-&gt;AppendElement(stream);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mIsOnOrderingStack<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ps-&gt;mInputs.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MediaStream*<sp/>source<sp/>=<sp/>ps-&gt;mInputs[i]-&gt;mSource;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!source-&gt;mHasBeenOrdered)<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsRefPtr&lt;MediaStream&gt;<sp/>s<sp/>=<sp/>source;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateStreamOrderForStream(aStack,<sp/>s.forget());</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>aStack-&gt;RemoveElementAt(aStack-&gt;Length()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mIsOnOrderingStack<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>stream-&gt;mHasBeenOrdered<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>*mStreams.AppendElement()<sp/>=<sp/>stream.forget();</highlight></codeline>
<codeline lineno="937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1aae78122c988dc064bae7edf10c1b9d26" kindref="member">MediaStreamGraphImpl::UpdateStreamOrder</ref>()</highlight></codeline>
<codeline lineno="941"><highlight class="normal">{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>nsTArray&lt;nsRefPtr&lt;MediaStream&gt;<sp/>&gt;<sp/>oldStreams;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>oldStreams.SwapElements(mStreams);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>oldStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaStream*<sp/>stream<sp/>=<sp/>oldStreams[i];</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mHasBeenOrdered<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mIsConsumed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mIsOnOrderingStack<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mInBlockingSet<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessedMediaStream*<sp/>ps<sp/>=<sp/>stream-&gt;AsProcessedStream();</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ps)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ps-&gt;mInCycle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>nsAutoTArray&lt;MediaStream*,10&gt;<sp/>stack;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>oldStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>nsRefPtr&lt;MediaStream&gt;&amp;<sp/>s<sp/>=<sp/>oldStreams[i];</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s-&gt;mAudioOutputs.IsEmpty()<sp/>||<sp/>!s-&gt;mVideoOutputs.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MarkConsumed(s);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s-&gt;mHasBeenOrdered)<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UpdateStreamOrderForStream(&amp;stack,<sp/>s.forget());</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a010022e639450d6a0f6fd32d70d4ca6c" kindref="member">MediaStreamGraphImpl::RecomputeBlocking</ref>(GraphTime<sp/>aEndBlockingDecisions)</highlight></codeline>
<codeline lineno="970"><highlight class="normal">{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>blockingDecisionsWillChange<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Media<sp/>graph<sp/>%p<sp/>computing<sp/>blocking<sp/>for<sp/>time<sp/>%f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>MediaTimeToSeconds(mStateComputedTime)));</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaStream*<sp/>stream<sp/>=<sp/>mStreams[i];</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stream-&gt;mInBlockingSet)<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>a<sp/>partition<sp/>of<sp/>the<sp/>streams<sp/>containing<sp/>&apos;stream&apos;<sp/>such<sp/>that<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>blocking<sp/>status<sp/>of<sp/>each<sp/>subset<sp/>independently.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsAutoTArray&lt;MediaStream*,10&gt;<sp/>streamSet;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AddBlockingRelatedStreamsToSet(&amp;streamSet,<sp/>stream);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime<sp/>end;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(GraphTime<sp/>t<sp/>=<sp/>mStateComputedTime;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&lt;<sp/>aEndBlockingDecisions;<sp/>t<sp/>=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>GRAPH_TIME_MAX;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecomputeBlockingAt(streamSet,<sp/>t,<sp/>aEndBlockingDecisions,<sp/>&amp;end);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&lt;<sp/>GRAPH_TIME_MAX)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockingDecisionsWillChange<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphTime<sp/>end;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mBlocked.GetAt(mCurrentTime,<sp/>&amp;end);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&lt;<sp/>GRAPH_TIME_MAX)<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blockingDecisionsWillChange<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Media<sp/>graph<sp/>%p<sp/>computed<sp/>blocking<sp/>for<sp/>interval<sp/>%f<sp/>to<sp/>%f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>MediaTimeToSeconds(mStateComputedTime),</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaTimeToSeconds(aEndBlockingDecisions)));</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>mStateComputedTime<sp/>=<sp/>aEndBlockingDecisions;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockingDecisionsWillChange)<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>we<sp/>wake<sp/>up<sp/>to<sp/>notify<sp/>listeners<sp/>about<sp/>these<sp/>changes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>EnsureNextIteration();</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a6ab88709094e3a33e8ecc80814c0abda" kindref="member">MediaStreamGraphImpl::AddBlockingRelatedStreamsToSet</ref>(nsTArray&lt;MediaStream*&gt;*<sp/>aStreams,</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStream-&gt;mInBlockingSet)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>aStream-&gt;mInBlockingSet<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>aStreams-&gt;AppendElement(aStream);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aStream-&gt;mConsumers.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaInputPort*<sp/>port<sp/>=<sp/>aStream-&gt;mConsumers[i];</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port-&gt;mFlags<sp/>&amp;<sp/>(MediaInputPort::FLAG_BLOCK_INPUT<sp/>|<sp/>MediaInputPort::FLAG_BLOCK_OUTPUT))<sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AddBlockingRelatedStreamsToSet(aStreams,<sp/>port-&gt;mDest);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/>ProcessedMediaStream*<sp/>ps<sp/>=<sp/>aStream-&gt;AsProcessedStream();</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ps)<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ps-&gt;mInputs.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MediaInputPort*<sp/>port<sp/>=<sp/>ps-&gt;mInputs[i];</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port-&gt;mFlags<sp/>&amp;<sp/>(MediaInputPort::FLAG_BLOCK_INPUT<sp/>|<sp/>MediaInputPort::FLAG_BLOCK_OUTPUT))<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddBlockingRelatedStreamsToSet(aStreams,<sp/>port-&gt;mSource);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a569f92de060733f9cabd3da112a9e88f" kindref="member">MediaStreamGraphImpl::MarkStreamBlocking</ref>(MediaStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStream-&gt;mBlockInThisPhase)</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/>aStream-&gt;mBlockInThisPhase<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aStream-&gt;mConsumers.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaInputPort*<sp/>port<sp/>=<sp/>aStream-&gt;mConsumers[i];</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port-&gt;mFlags<sp/>&amp;<sp/>MediaInputPort::FLAG_BLOCK_OUTPUT)<sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MarkStreamBlocking(port-&gt;mDest);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>ProcessedMediaStream*<sp/>ps<sp/>=<sp/>aStream-&gt;AsProcessedStream();</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ps)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ps-&gt;mInputs.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MediaInputPort*<sp/>port<sp/>=<sp/>ps-&gt;mInputs[i];</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port-&gt;mFlags<sp/>&amp;<sp/>MediaInputPort::FLAG_BLOCK_INPUT)<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MarkStreamBlocking(port-&gt;mSource);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1ab2ea77ef63a0e2bc5f8db086ecdeb350" kindref="member">MediaStreamGraphImpl::RecomputeBlockingAt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nsTArray&lt;MediaStream*&gt;&amp;<sp/>aStreams,</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime<sp/>aTime,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime<sp/>aEndBlockingDecisions,</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime*<sp/>aEnd)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaStream*<sp/>stream<sp/>=<sp/>aStreams[i];</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mBlockInThisPhase<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaStream*<sp/>stream<sp/>=<sp/>aStreams[i];</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;mFinished)<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime<sp/>endTime<sp/>=<sp/>StreamTimeToGraphTime(stream,<sp/>stream-&gt;GetBufferEnd());</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endTime<sp/>&lt;=<sp/>aTime)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;MediaStream<sp/>%p<sp/>is<sp/>blocked<sp/>due<sp/>to<sp/>being<sp/>finished&quot;</highlight><highlight class="normal">,<sp/>stream));</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ll<sp/>block<sp/>indefinitely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MarkStreamBlocking(stream);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*aEnd<sp/>=<sp/>aEndBlockingDecisions;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;MediaStream<sp/>%p<sp/>is<sp/>finished,<sp/>but<sp/>not<sp/>blocked<sp/>yet<sp/>(end<sp/>at<sp/>%f,<sp/>with<sp/>blocking<sp/>at<sp/>%f)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream,<sp/>MediaTimeToSeconds(stream-&gt;GetBufferEnd()),</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaTimeToSeconds(endTime)));</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*aEnd<sp/>=<sp/>NS_MIN(*aEnd,<sp/>endTime);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphTime<sp/>end;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>explicitBlock<sp/>=<sp/>stream-&gt;mExplicitBlockerCount.GetAt(aTime,<sp/>&amp;end)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>*aEnd<sp/>=<sp/>NS_MIN(*aEnd,<sp/>end);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(explicitBlock)<sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;MediaStream<sp/>%p<sp/>is<sp/>blocked<sp/>due<sp/>to<sp/>explicit<sp/>blocker&quot;</highlight><highlight class="normal">,<sp/>stream));</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MarkStreamBlocking(stream);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>underrun<sp/>=<sp/>WillUnderrun(stream,<sp/>aTime,<sp/>aEndBlockingDecisions,<sp/>aEnd);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(underrun)<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ll<sp/>block<sp/>indefinitely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MarkStreamBlocking(stream);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*aEnd<sp/>=<sp/>aEndBlockingDecisions;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>NS_ASSERTION(*aEnd<sp/>&gt;<sp/>aTime,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>advance!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaStream*<sp/>stream<sp/>=<sp/>aStreams[i];</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mBlocked.SetAtAndAfter(aTime,<sp/>stream-&gt;mBlockInThisPhase);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a8f6439a864e23dff61fa241a80fbf10f" kindref="member">MediaStreamGraphImpl::NotifyHasCurrentData</ref>(MediaStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="1116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>aStream-&gt;mListeners.Length();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaStreamListener*<sp/>l<sp/>=<sp/>aStream-&gt;mListeners[j];</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>l-&gt;NotifyHasCurrentData(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GraphTimeToStreamTime(aStream,<sp/>mCurrentTime)<sp/>&lt;<sp/>aStream-&gt;mBuffer.GetEnd());</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a5f21f96d0f6cc2ffc2e202e536d12e48" kindref="member">MediaStreamGraphImpl::CreateOrDestroyAudioStreams</ref>(GraphTime<sp/>aAudioOutputStartTime,</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="1127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/>nsAutoTArray&lt;bool,2&gt;<sp/>audioOutputStreamsFound;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aStream-&gt;mAudioOutputStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>audioOutputStreamsFound.AppendElement(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!aStream-&gt;mAudioOutputs.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(StreamBuffer::TrackIter<sp/>tracks(aStream-&gt;GetStreamBuffer(),<sp/>MediaSegment::AUDIO);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!tracks.IsEnded();<sp/>tracks.Next())<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>audioOutputStreamsFound.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStream-&gt;mAudioOutputStreams[i].mTrackID<sp/>==<sp/>tracks-&gt;GetID())<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>audioOutputStreamsFound.Length())<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>audioOutputStreamsFound[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>output<sp/>stream<sp/>created<sp/>for<sp/>this<sp/>track<sp/>yet.<sp/>Check<sp/>if<sp/>it&apos;s<sp/>time<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime<sp/>startTime<sp/>=</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamTimeToGraphTime(aStream,<sp/>tracks-&gt;GetStartTimeRoundDown(),</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INCLUDE_TRAILING_BLOCKED_INTERVAL);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startTime<sp/>&gt;=<sp/>mStateComputedTime)<sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>stream<sp/>wants<sp/>to<sp/>play<sp/>audio,<sp/>but<sp/>nothing<sp/>will<sp/>play<sp/>for<sp/>the<sp/>forseeable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>future,<sp/>so<sp/>don&apos;t<sp/>create<sp/>the<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>allocating<sp/>a<sp/>AudioStream<sp/>could<sp/>be<sp/>slow<sp/>so<sp/>we&apos;re<sp/>going<sp/>to<sp/>have<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>something<sp/>here<sp/>...<sp/>preallocation,<sp/>async<sp/>allocation,<sp/>multiplexing<sp/>onto<sp/>a<sp/>single</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stream<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AudioSegment*<sp/>audio<sp/>=<sp/>tracks-&gt;Get&lt;AudioSegment&gt;();</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaStream::AudioOutputStream*<sp/>audioOutputStream<sp/>=</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aStream-&gt;mAudioOutputStreams.AppendElement();</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>audioOutputStream-&gt;mAudioPlaybackStartTime<sp/>=<sp/>aAudioOutputStartTime;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>audioOutputStream-&gt;mBlockedAudioTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>audioOutputStream-&gt;mStream<sp/>=<sp/>AudioStream::AllocateStream();</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>audioOutputStream-&gt;mStream-&gt;Init(audio-&gt;GetChannels(),</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tracks-&gt;GetRate(),<sp/>AUDIO_CHANNEL_NORMAL);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>audioOutputStream-&gt;mTrackID<sp/>=<sp/>tracks-&gt;GetID();</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>i<sp/>=<sp/>audioOutputStreamsFound.Length()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!audioOutputStreamsFound[i])<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aStream-&gt;mAudioOutputStreams[i].mStream-&gt;Shutdown();</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aStream-&gt;mAudioOutputStreams.RemoveElementAt(i);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1adc508535ab191a4cfa2754e71218adfd" kindref="member">MediaStreamGraphImpl::PlayAudio</ref>(MediaStream*<sp/>aStream,</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime<sp/>aFrom,<sp/>GraphTime<sp/>aTo)</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStream-&gt;mAudioOutputStreams.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>we&apos;re<sp/>playing<sp/>multiple<sp/>copies<sp/>of<sp/>this<sp/>stream<sp/>at<sp/>the<sp/>same<sp/>time,<sp/>they&apos;re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>perfectly<sp/>correlated<sp/>so<sp/>adding<sp/>volumes<sp/>is<sp/>the<sp/>right<sp/>thing<sp/>to<sp/>do.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>volume<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aStream-&gt;mAudioOutputs.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>volume<sp/>+=<sp/>aStream-&gt;mAudioOutputs[i].mVolume;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aStream-&gt;mAudioOutputStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaStream::AudioOutputStream&amp;<sp/>audioOutput<sp/>=<sp/>aStream-&gt;mAudioOutputStreams[i];</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>StreamBuffer::Track*<sp/>track<sp/>=<sp/>aStream-&gt;mBuffer.FindTrack(audioOutput.mTrackID);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>AudioSegment*<sp/>audio<sp/>=<sp/>track-&gt;Get&lt;AudioSegment&gt;();</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>update<sp/>aStream-&gt;mBufferStartTime<sp/>here<sp/>to<sp/>account<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>spent<sp/>blocked.<sp/>Instead,<sp/>we&apos;ll<sp/>update<sp/>it<sp/>in<sp/>UpdateCurrentTime<sp/>after<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>blocked<sp/>period<sp/>has<sp/>completed.<sp/>But<sp/>we<sp/>do<sp/>need<sp/>to<sp/>make<sp/>sure<sp/>we<sp/>play<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>right<sp/>offsets<sp/>in<sp/>the<sp/>stream<sp/>buffer,<sp/>even<sp/>if<sp/>we&apos;ve<sp/>already<sp/>written<sp/>silence<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>amount<sp/>of<sp/>blocked<sp/>time<sp/>after<sp/>the<sp/>current<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphTime<sp/>t<sp/>=<sp/>aFrom;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>aTo)<sp/>{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime<sp/>end;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>blocked<sp/>=<sp/>aStream-&gt;mBlocked.GetAt(t,<sp/>&amp;end);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>NS_MIN(end,<sp/>aTo);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AudioSegment<sp/>output;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output.InitFrom(*audio);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blocked)<sp/>{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Track<sp/>total<sp/>blocked<sp/>time<sp/>in<sp/>aStream-&gt;mBlockedAudioTime<sp/>so<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>amount<sp/>of<sp/>silent<sp/>samples<sp/>we&apos;ve<sp/>inserted<sp/>for<sp/>blocking<sp/>never<sp/>gets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>more<sp/>than<sp/>one<sp/>sample<sp/>away<sp/>from<sp/>the<sp/>ideal<sp/>amount.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TrackTicks<sp/>startTicks<sp/>=</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeToTicksRoundDown(track-&gt;GetRate(),<sp/>audioOutput.mBlockedAudioTime);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>audioOutput.mBlockedAudioTime<sp/>+=<sp/>end<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TrackTicks<sp/>endTicks<sp/>=</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeToTicksRoundDown(track-&gt;GetRate(),<sp/>audioOutput.mBlockedAudioTime);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.InsertNullDataAtStart(endTicks<sp/>-<sp/>startTicks);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;MediaStream<sp/>%p<sp/>writing<sp/>blocking-silence<sp/>samples<sp/>for<sp/>%f<sp/>to<sp/>%f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aStream,<sp/>MediaTimeToSeconds(t),<sp/>MediaTimeToSeconds(end)));</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TrackTicks<sp/>startTicks<sp/>=</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track-&gt;TimeToTicksRoundDown(GraphTimeToStreamTime(aStream,<sp/>t));</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TrackTicks<sp/>endTicks<sp/>=</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track-&gt;TimeToTicksRoundDown(GraphTimeToStreamTime(aStream,<sp/>end));</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>startTicks<sp/>is<sp/>before<sp/>the<sp/>track<sp/>start,<sp/>then<sp/>that<sp/>part<sp/>of<sp/>&apos;audio&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>just<sp/>be<sp/>silence,<sp/>which<sp/>is<sp/>fine<sp/>here.<sp/>But<sp/>if<sp/>endTicks<sp/>is<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>track<sp/>end,<sp/>then<sp/>&apos;audio&apos;<sp/>won&apos;t<sp/>be<sp/>long<sp/>enough,<sp/>so<sp/>we&apos;ll<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>explicitly<sp/>play<sp/>silence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TrackTicks<sp/>sliceEnd<sp/>=<sp/>NS_MIN(endTicks,<sp/>audio-&gt;GetDuration());</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sliceEnd<sp/>&gt;<sp/>startTicks)<sp/>{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.AppendSlice(*audio,<sp/>startTicks,<sp/>sliceEnd);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Play<sp/>silence<sp/>where<sp/>the<sp/>track<sp/>has<sp/>ended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.AppendNullData(endTicks<sp/>-<sp/>sliceEnd);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(endTicks<sp/>==<sp/>sliceEnd<sp/>||<sp/>track-&gt;IsEnded(),</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Ran<sp/>out<sp/>of<sp/>data<sp/>but<sp/>track<sp/>not<sp/>ended?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.ApplyVolume(volume);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;MediaStream<sp/>%p<sp/>writing<sp/>samples<sp/>for<sp/>%f<sp/>to<sp/>%f<sp/>(samples<sp/>%lld<sp/>to<sp/>%lld)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aStream,<sp/>MediaTimeToSeconds(t),<sp/>MediaTimeToSeconds(end),</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startTicks,<sp/>endTicks));</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output.WriteTo(audioOutput.mStream);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1adc2f8203f44bac578505820aca2828b9" kindref="member">MediaStreamGraphImpl::PlayVideo</ref>(MediaStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="1257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStream-&gt;mVideoOutputs.IsEmpty())</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>the<sp/>next<sp/>frame<sp/>a<sp/>bit<sp/>early.<sp/>This<sp/>is<sp/>better<sp/>than<sp/>letting<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>frame<sp/>be<sp/>displayed<sp/>for<sp/>too<sp/>long.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/>GraphTime<sp/>framePosition<sp/>=<sp/>mCurrentTime<sp/>+<sp/>MEDIA_GRAPH_TARGET_PERIOD_MS;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/>NS_ASSERTION(framePosition<sp/>&gt;=<sp/>aStream-&gt;mBufferStartTime,<sp/></highlight><highlight class="stringliteral">&quot;frame<sp/>position<sp/>before<sp/>buffer?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>StreamTime<sp/>frameBufferTime<sp/>=<sp/>GraphTimeToStreamTime(aStream,<sp/>framePosition);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>TrackTicks<sp/>start;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VideoFrame*<sp/>frame<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>StreamBuffer::Track*<sp/>track;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(StreamBuffer::TrackIter<sp/>tracks(aStream-&gt;GetStreamBuffer(),<sp/>MediaSegment::VIDEO);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!tracks.IsEnded();<sp/>tracks.Next())<sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>VideoSegment*<sp/>segment<sp/>=<sp/>tracks-&gt;Get&lt;VideoSegment&gt;();</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>TrackTicks<sp/>thisStart;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VideoFrame*<sp/>thisFrame<sp/>=</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segment-&gt;GetFrameAt(tracks-&gt;TimeToTicksRoundDown(frameBufferTime),<sp/>&amp;thisStart);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thisFrame<sp/>&amp;&amp;<sp/>thisFrame-&gt;GetImage())<sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>thisStart;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>thisFrame;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>track<sp/>=<sp/>tracks.get();</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!frame<sp/>||<sp/>*frame<sp/>==<sp/>aStream-&gt;mLastPlayedVideoFrame)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;MediaStream<sp/>%p<sp/>writing<sp/>video<sp/>frame<sp/>%p<sp/>(%dx%d)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aStream,<sp/>frame-&gt;GetImage(),<sp/>frame-&gt;GetIntrinsicSize().width,</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;GetIntrinsicSize().height));</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/>GraphTime<sp/>startTime<sp/>=<sp/>StreamTimeToGraphTime(aStream,</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>track-&gt;TicksToTimeRoundDown(start),<sp/>INCLUDE_TRAILING_BLOCKED_INTERVAL);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>TimeStamp<sp/>targetTime<sp/>=<sp/>mCurrentTimeStamp<sp/>+</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TimeDuration::FromMilliseconds(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(startTime<sp/>-<sp/>mCurrentTime));</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aStream-&gt;mVideoOutputs.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>VideoFrameContainer*<sp/>output<sp/>=<sp/>aStream-&gt;mVideoOutputs[i];</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;SetCurrentFrame(frame-&gt;GetIntrinsicSize(),<sp/>frame-&gt;GetImage(),</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetTime);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(output,<sp/>&amp;VideoFrameContainer::Invalidate);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(event,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!aStream-&gt;mNotifiedFinished)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>aStream-&gt;mLastPlayedVideoFrame<sp/>=<sp/>*frame;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1ab9d97a9b63665f21af4a01d63ee6db4c" kindref="member">MediaStreamGraphImpl::PrepareUpdatesToMainThreadState</ref>()</highlight></codeline>
<codeline lineno="1307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>mMonitor.AssertCurrentThreadOwns();</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaStream*<sp/>stream<sp/>=<sp/>mStreams[i];</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>StreamUpdate*<sp/>update<sp/>=<sp/>mStreamUpdates.AppendElement();</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>update-&gt;mGraphUpdateIndex<sp/>=<sp/>stream-&gt;mGraphUpdateIndices.GetAt(mCurrentTime);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>update-&gt;mStream<sp/>=<sp/>stream;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>update-&gt;mNextMainThreadCurrentTime<sp/>=</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GraphTimeToStreamTime(stream,<sp/>mCurrentTime);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>update-&gt;mNextMainThreadFinished<sp/>=</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mFinished<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StreamTimeToGraphTime(stream,<sp/>stream-&gt;GetBufferEnd())<sp/>&lt;=<sp/>mCurrentTime;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>mUpdateRunnables.MoveElementsFrom(mPendingUpdateRunnables);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/>EnsureStableStateEventPosted();</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a9acb1ee98ff40b587a77e7e98811e7c5" kindref="member">MediaStreamGraphImpl::EnsureImmediateWakeUpLocked</ref>(MonitorAutoLock&amp;<sp/>aLock)</highlight></codeline>
<codeline lineno="1328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mWaitState<sp/>==<sp/>WAITSTATE_WAITING_FOR_NEXT_ITERATION<sp/>||</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mWaitState<sp/>==<sp/>WAITSTATE_WAITING_INDEFINITELY)<sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>mWaitState<sp/>=<sp/>WAITSTATE_WAKING_UP;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>aLock.Notify();</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a68d4a767d7f2d53d1919cb64db0233fe" kindref="member">MediaStreamGraphImpl::EnsureNextIteration</ref>()</highlight></codeline>
<codeline lineno="1338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>MonitorAutoLock<sp/>lock(mMonitor);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>EnsureNextIterationLocked(lock);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1ac0e888dfce3acb0d7dc26efd00c6f8a8" kindref="member">MediaStreamGraphImpl::EnsureNextIterationLocked</ref>(MonitorAutoLock&amp;<sp/>aLock)</highlight></codeline>
<codeline lineno="1345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mNeedAnotherIteration)</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>mNeedAnotherIteration<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mWaitState<sp/>==<sp/>WAITSTATE_WAITING_INDEFINITELY)<sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>mWaitState<sp/>=<sp/>WAITSTATE_WAKING_UP;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>aLock.Notify();</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1ae3fd1e97b1dcda969a76de94025134dd" kindref="member">MediaStreamGraphImpl::RunThread</ref>()</highlight></codeline>
<codeline lineno="1357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>nsTArray&lt;MessageBlock&gt;<sp/>messageQueue;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>MonitorAutoLock<sp/>lock(mMonitor);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>messageQueue.SwapElements(mMessageQueue);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!messageQueue.IsEmpty(),</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Shouldn&apos;t<sp/>have<sp/>started<sp/>a<sp/>graph<sp/>with<sp/>empty<sp/>message<sp/>queue!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>mCurrentTime<sp/>to<sp/>the<sp/>min<sp/>of<sp/>the<sp/>playing<sp/>audio<sp/>times,<sp/>or<sp/>using<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wall-clock<sp/>time<sp/>change<sp/>if<sp/>no<sp/>audio<sp/>is<sp/>playing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateCurrentTime();</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>independent<sp/>action<sp/>times<sp/>for<sp/>each<sp/>batch<sp/>of<sp/>messages<sp/>(each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>batch<sp/>corresponding<sp/>to<sp/>an<sp/>event<sp/>loop<sp/>task).<sp/>This<sp/>isolates<sp/>the<sp/>performance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>different<sp/>scripts<sp/>to<sp/>some<sp/>extent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>messageQueue.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mProcessingGraphUpdateIndex<sp/>=<sp/>messageQueue[i].mGraphUpdateIndex;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsTArray&lt;nsAutoPtr&lt;ControlMessage&gt;<sp/>&gt;&amp;<sp/>messages<sp/>=<sp/>messageQueue[i].mMessages;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>messages.Length();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messages[j]-&gt;Run();</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>messageQueue.Clear();</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateStreamOrder();</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>writeAudioUpTo<sp/>=<sp/>AUDIO_TARGET_MS;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphTime<sp/>endBlockingDecisions<sp/>=</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mCurrentTime<sp/>+<sp/>MillisecondsToMediaTime(writeAudioUpTo);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ensureNextIteration<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Grab<sp/>pending<sp/>stream<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SourceMediaStream*<sp/>is<sp/>=<sp/>mStreams[i]-&gt;AsSourceStream();</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is)<sp/>{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateConsumptionState(is);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtractPendingInput(is,<sp/>endBlockingDecisions,<sp/>&amp;ensureNextIteration);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Figure<sp/>out<sp/>which<sp/>streams<sp/>are<sp/>blocked<sp/>and<sp/>when.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphTime<sp/>prevComputedTime<sp/>=<sp/>mStateComputedTime;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>RecomputeBlocking(endBlockingDecisions);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Play<sp/>stream<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>audioStreamsActive<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allBlockedForever<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Figure<sp/>out<sp/>what<sp/>each<sp/>stream<sp/>wants<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MediaStream*<sp/>stream<sp/>=<sp/>mStreams[i];</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ProcessedMediaStream*<sp/>ps<sp/>=<sp/>stream-&gt;AsProcessedStream();</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ps<sp/>&amp;&amp;<sp/>!ps-&gt;mFinished)<sp/>{</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ps-&gt;ProduceOutput(prevComputedTime,<sp/>mStateComputedTime);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(stream-&gt;mBuffer.GetEnd()<sp/>&gt;=</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GraphTimeToStreamTime(stream,<sp/>mStateComputedTime),</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Stream<sp/>did<sp/>not<sp/>produce<sp/>enough<sp/>data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NotifyHasCurrentData(stream);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CreateOrDestroyAudioStreams(prevComputedTime,<sp/>stream);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PlayAudio(stream,<sp/>prevComputedTime,<sp/>mStateComputedTime);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>audioStreamsActive<sp/>+=<sp/>stream-&gt;mAudioOutputStreams.Length();</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PlayVideo(stream);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SourceMediaStream*<sp/>is<sp/>=<sp/>stream-&gt;AsSourceStream();</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is)<sp/>{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateBufferSufficiencyState(is);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GraphTime<sp/>end;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stream-&gt;mBlocked.GetAt(mCurrentTime,<sp/>&amp;end)<sp/>||<sp/>end<sp/>&lt;<sp/>GRAPH_TIME_MAX)<sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allBlockedForever<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ensureNextIteration<sp/>||<sp/>!allBlockedForever<sp/>||<sp/>audioStreamsActive<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EnsureNextIteration();</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>updates<sp/>to<sp/>the<sp/>main<sp/>thread<sp/>and<sp/>wait<sp/>for<sp/>the<sp/>next<sp/>control<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iteration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>using<sp/>MonitorAutoLock<sp/>since<sp/>we<sp/>need<sp/>to<sp/>unlock<sp/>in<sp/>a<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>doesn&apos;t<sp/>match<sp/>lexical<sp/>scopes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MonitorAutoLock<sp/>lock(mMonitor);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrepareUpdatesToMainThreadState();</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mForceShutDown<sp/>||<sp/>(IsEmpty()<sp/>&amp;&amp;<sp/>mMessageQueue.IsEmpty()))<sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enter<sp/>shutdown<sp/>mode.<sp/>The<sp/>stable-state<sp/>handler<sp/>will<sp/>detect<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>complete<sp/>shutdown.<sp/>Destroy<sp/>any<sp/>streams<sp/>immediately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;MediaStreamGraph<sp/>%p<sp/>waiting<sp/>for<sp/>main<sp/>thread<sp/>cleanup&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Commit<sp/>to<sp/>shutting<sp/>down<sp/>this<sp/>graph<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mLifecycleState<sp/>=<sp/>LIFECYCLE_WAITING_FOR_MAIN_THREAD_CLEANUP;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>Destroy<sp/>streams<sp/>here.<sp/>The<sp/>main-thread<sp/>owner<sp/>of<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stream<sp/>is<sp/>responsible<sp/>for<sp/>calling<sp/>Destroy<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PRIntervalTime<sp/>timeout<sp/>=<sp/>PR_INTERVAL_NO_TIMEOUT;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TimeStamp<sp/>now<sp/>=<sp/>TimeStamp::Now();</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mNeedAnotherIteration)<sp/>{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>timeoutMS<sp/>=<sp/>MEDIA_GRAPH_TARGET_PERIOD_MS<sp/>-</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t((now<sp/>-<sp/>mCurrentTimeStamp).ToMilliseconds());</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>timeoutMS<sp/>doesn&apos;t<sp/>overflow<sp/>32<sp/>bits<sp/>by<sp/>waking<sp/>up<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>least<sp/>once<sp/>a<sp/>minute,<sp/>if<sp/>we<sp/>need<sp/>to<sp/>wake<sp/>up<sp/>at<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeoutMS<sp/>=<sp/>NS_MAX&lt;int64_t&gt;(0,<sp/>NS_MIN&lt;int64_t&gt;(timeoutMS,<sp/>60*1000));</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout<sp/>=<sp/>PR_MillisecondsToInterval(uint32_t(timeoutMS));</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Waiting<sp/>for<sp/>next<sp/>iteration;<sp/>at<sp/>%f,<sp/>timeout=%f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(now<sp/>-<sp/>mInitialTimeStamp).ToSeconds(),<sp/>timeoutMS/1000.0));</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mWaitState<sp/>=<sp/>WAITSTATE_WAITING_FOR_NEXT_ITERATION;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mWaitState<sp/>=<sp/>WAITSTATE_WAITING_INDEFINITELY;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mMonitor.Wait(timeout);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Resuming<sp/>after<sp/>timeout;<sp/>at<sp/>%f,<sp/>elapsed=%f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TimeStamp::Now()<sp/>-<sp/>mInitialTimeStamp).ToSeconds(),</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TimeStamp::Now()<sp/>-<sp/>now).ToSeconds()));</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mWaitState<sp/>=<sp/>WAITSTATE_RUNNING;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mNeedAnotherIteration<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>messageQueue.SwapElements(mMessageQueue);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1ae2ea0bd13e138103972e69db41c6c18c" kindref="member">MediaStreamGraphImpl::ApplyStreamUpdate</ref>(StreamUpdate*<sp/>aUpdate)</highlight></codeline>
<codeline lineno="1483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>mMonitor.AssertCurrentThreadOwns();</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>MediaStream*<sp/>stream<sp/>=<sp/>aUpdate-&gt;mStream;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stream)</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>stream-&gt;mMainThreadCurrentTime<sp/>=<sp/>aUpdate-&gt;mNextMainThreadCurrentTime;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>stream-&gt;mMainThreadFinished<sp/>=<sp/>aUpdate-&gt;mNextMainThreadFinished;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>i<sp/>=<sp/>stream-&gt;mMainThreadListeners.Length()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mMainThreadListeners[i]-&gt;NotifyMainThreadStateChanged();</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a1a8f240ddcfeee7aadb2d04cf0b64ad4" kindref="member">MediaStreamGraphImpl::ShutdownThreads</ref>()</highlight></codeline>
<codeline lineno="1499"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>be<sp/>called<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mGraph&apos;s<sp/>thread<sp/>is<sp/>not<sp/>running<sp/>so<sp/>it&apos;s<sp/>OK<sp/>to<sp/>do<sp/>whatever<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>threads<sp/>for<sp/>MediaStreamGraph<sp/>%p&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mThread)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>mThread-&gt;Shutdown();</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>mThread<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a92debcd400111704088f1e0c23774fd0" kindref="member">MediaStreamGraphImpl::ForceShutDown</ref>()</highlight></codeline>
<codeline lineno="1512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>be<sp/>called<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;MediaStreamGraph<sp/>%p<sp/>ForceShutdown&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>MonitorAutoLock<sp/>lock(mMonitor);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>mForceShutDown<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>EnsureImmediateWakeUpLocked(lock);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MediaStreamGraphThreadRunnable<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsRunnable<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/>NS_IMETHOD<sp/>Run()</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>gGraph-&gt;<ref refid="classmozilla_1_1_media_stream_graph_impl_1ae3fd1e97b1dcda969a76de94025134dd" kindref="member">RunThread</ref>();</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MediaStreamGraphShutDownRunnable<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsRunnable<sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/>MediaStreamGraphShutDownRunnable(MediaStreamGraphImpl*<sp/>aGraph)<sp/>:<sp/>mGraph(aGraph)<sp/>{}</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>NS_IMETHOD<sp/>Run()</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(mGraph-&gt;mDetectedNotRunning,</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;We<sp/>should<sp/>know<sp/>the<sp/>graph<sp/>thread<sp/>control<sp/>loop<sp/>isn&apos;t<sp/>running!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mGraph&apos;s<sp/>thread<sp/>is<sp/>not<sp/>running<sp/>so<sp/>it&apos;s<sp/>OK<sp/>to<sp/>do<sp/>whatever<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mGraph-&gt;IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mGraph<sp/>is<sp/>no<sp/>longer<sp/>needed,<sp/>so<sp/>delete<sp/>it.<sp/>If<sp/>the<sp/>graph<sp/>is<sp/>not<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>we<sp/>must<sp/>be<sp/>in<sp/>a<sp/>forced<sp/>shutdown<sp/>and<sp/>some<sp/>later<sp/>AppendMessage<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>detect<sp/>that<sp/>the<sp/>manager<sp/>has<sp/>been<sp/>emptied,<sp/>and<sp/>delete<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mGraph;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(mGraph-&gt;mForceShutDown,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>in<sp/>forced<sp/>shutdown?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mGraph-&gt;mLifecycleState<sp/>=</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaStreamGraphImpl::LIFECYCLE_WAITING_FOR_STREAM_DESTRUCTION;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/>MediaStreamGraphImpl*<sp/>mGraph;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MediaStreamGraphStableStateRunnable<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsRunnable<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/>NS_IMETHOD<sp/>Run()</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gGraph)<sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gGraph-&gt;<ref refid="classmozilla_1_1_media_stream_graph_impl_1a6fd5da3e6fbd6d7bebc4befee946f526" kindref="member">RunInStableState</ref>();</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1569"><highlight class="comment"><sp/>*<sp/>Control<sp/>messages<sp/>forwarded<sp/>from<sp/>main<sp/>thread<sp/>to<sp/>graph<sp/>manager<sp/>thread</highlight></codeline>
<codeline lineno="1570"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CreateMessage<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ControlMessage<sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/>CreateMessage(MediaStream*<sp/>aStream)<sp/>:<sp/>ControlMessage(aStream)<sp/>{}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>mStream-&gt;GraphImpl()-&gt;AddStream(mStream);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>mStream-&gt;Init();</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MediaStreamGraphShutdownObserver<sp/>MOZ_FINAL<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsIObserver</highlight></codeline>
<codeline lineno="1582"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/>NS_DECL_ISUPPORTS</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/>NS_DECL_NSIOBSERVER</highlight></codeline>
<codeline lineno="1586"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a6fd5da3e6fbd6d7bebc4befee946f526" kindref="member">MediaStreamGraphImpl::RunInStableState</ref>()</highlight></codeline>
<codeline lineno="1592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>be<sp/>called<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/>nsTArray&lt;nsCOMPtr&lt;nsIRunnable&gt;<sp/>&gt;<sp/>runnables;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>we&apos;re<sp/>doing<sp/>a<sp/>forced<sp/>shutdown,<sp/>pending<sp/>control<sp/>messages<sp/>may<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>on<sp/>the<sp/>main<sp/>thread<sp/>via<sp/>RunDuringShutdown.<sp/>Those<sp/>messages<sp/>must</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>without<sp/>the<sp/>graph<sp/>monitor<sp/>being<sp/>held.<sp/>So,<sp/>we<sp/>collect<sp/>them<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/>nsTArray&lt;nsAutoPtr&lt;ControlMessage&gt;<sp/>&gt;<sp/>controlMessagesToRunDuringShutdown;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>MonitorAutoLock<sp/>lock(mMonitor);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>mPostedRunInStableStateEvent<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>runnables.SwapElements(mUpdateRunnables);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mStreamUpdates.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StreamUpdate*<sp/>update<sp/>=<sp/>&amp;mStreamUpdates[i];</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(update-&gt;mStream)<sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ApplyStreamUpdate(update);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>mStreamUpdates.Clear();</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mLifecycleState<sp/>==<sp/>LIFECYCLE_WAITING_FOR_MAIN_THREAD_CLEANUP<sp/>&amp;&amp;<sp/>mForceShutDown)<sp/>{</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Defer<sp/>calls<sp/>to<sp/>RunDuringShutdown()<sp/>to<sp/>happen<sp/>while<sp/>mMonitor<sp/>is<sp/>not<sp/>held.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mMessageQueue.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MessageBlock&amp;<sp/>mb<sp/>=<sp/>mMessageQueue[i];</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>controlMessagesToRunDuringShutdown.MoveElementsFrom(mb.mMessages);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mMessageQueue.Clear();</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>controlMessagesToRunDuringShutdown.MoveElementsFrom(mCurrentTaskMessageQueue);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>MediaStreamGraph<sp/>threads.<sp/>Do<sp/>not<sp/>clear<sp/>gGraph<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>outstanding<sp/>DOM<sp/>objects<sp/>that<sp/>may<sp/>need<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mLifecycleState<sp/>=<sp/>LIFECYCLE_WAITING_FOR_THREAD_SHUTDOWN;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MediaStreamGraphShutDownRunnable(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(event);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mLifecycleState<sp/>==<sp/>LIFECYCLE_THREAD_NOT_STARTED)<sp/>{</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mLifecycleState<sp/>=<sp/>LIFECYCLE_RUNNING;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>the<sp/>thread<sp/>now.<sp/>We<sp/>couldn&apos;t<sp/>start<sp/>it<sp/>earlier<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>graph<sp/>might<sp/>exit<sp/>immediately<sp/>on<sp/>finding<sp/>it<sp/>has<sp/>no<sp/>streams.<sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>message<sp/>for<sp/>a<sp/>new<sp/>graph<sp/>must<sp/>create<sp/>a<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MediaStreamGraphThreadRunnable();</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_NewThread(getter_AddRefs(mThread),<sp/>event);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mCurrentTaskMessageQueue.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mLifecycleState<sp/>==<sp/>LIFECYCLE_WAITING_FOR_MAIN_THREAD_CLEANUP<sp/>&amp;&amp;<sp/>IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(gGraph<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>current<sp/>graph??&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Complete<sp/>shutdown.<sp/>First,<sp/>ensure<sp/>that<sp/>this<sp/>graph<sp/>is<sp/>no<sp/>longer<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>new<sp/>graph<sp/>graph<sp/>will<sp/>be<sp/>created<sp/>if<sp/>one<sp/>is<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Disconnecting<sp/>MediaStreamGraph<sp/>%p&quot;</highlight><highlight class="normal">,<sp/>gGraph));</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gGraph<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Asynchronously<sp/>clean<sp/>up<sp/>old<sp/>graph.<sp/>We<sp/>don&apos;t<sp/>want<sp/>to<sp/>do<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>synchronously<sp/>because<sp/>it<sp/>spins<sp/>the<sp/>event<sp/>loop<sp/>waiting<sp/>for<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>shut<sp/>down,<sp/>and<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>do<sp/>that<sp/>in<sp/>a<sp/>stable<sp/>state<sp/>handler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mLifecycleState<sp/>=<sp/>LIFECYCLE_WAITING_FOR_THREAD_SHUTDOWN;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MediaStreamGraphShutDownRunnable(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(event);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mLifecycleState<sp/>&lt;=<sp/>LIFECYCLE_WAITING_FOR_MAIN_THREAD_CLEANUP)<sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MessageBlock*<sp/>block<sp/>=<sp/>mMessageQueue.AppendElement();</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;mMessages.SwapElements(mCurrentTaskMessageQueue);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;mGraphUpdateIndex<sp/>=<sp/>mGraphUpdatesSent;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++mGraphUpdatesSent;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnsureNextIterationLocked(lock);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mLifecycleState<sp/>==<sp/>LIFECYCLE_WAITING_FOR_MAIN_THREAD_CLEANUP)<sp/>{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mLifecycleState<sp/>=<sp/>LIFECYCLE_RUNNING;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Revive<sp/>the<sp/>MediaStreamGraph<sp/>since<sp/>we<sp/>have<sp/>more<sp/>messages<sp/>going<sp/>to<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>we<sp/>need<sp/>to<sp/>put<sp/>messages<sp/>into<sp/>its<sp/>queue<sp/>before<sp/>reviving<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>it<sp/>might<sp/>exit<sp/>immediately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MediaStreamGraphThreadRunnable();</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mThread-&gt;Dispatch(event,<sp/>0);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>mDetectedNotRunning<sp/>=<sp/>mLifecycleState<sp/>&gt;<sp/>LIFECYCLE_RUNNING;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>we<sp/>get<sp/>a<sp/>new<sp/>current<sp/>time<sp/>in<sp/>the<sp/>next<sp/>event<sp/>loop<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/>mPostedRunInStableState<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>runnables.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>runnables[i]-&gt;Run();</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>controlMessagesToRunDuringShutdown.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>controlMessagesToRunDuringShutdown[i]-&gt;RunDuringShutdown();</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>NS_DEFINE_CID(kAppShellCID,<sp/>NS_APPSHELL_CID);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a960749a1b82780accbc7781bac8fa94e" kindref="member">MediaStreamGraphImpl::EnsureRunInStableState</ref>()</highlight></codeline>
<codeline lineno="1689"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;main<sp/>thread<sp/>only&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mPostedRunInStableState)</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/>mPostedRunInStableState<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MediaStreamGraphStableStateRunnable();</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIAppShell&gt;<sp/>appShell<sp/>=<sp/>do_GetService(kAppShellCID);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(appShell)<sp/>{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>appShell-&gt;RunInStableState(event);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ERROR(</highlight><highlight class="stringliteral">&quot;Appshell<sp/>already<sp/>destroyed?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a6723ce3a0c2566fd80ac609b0e3ecf33" kindref="member">MediaStreamGraphImpl::EnsureStableStateEventPosted</ref>()</highlight></codeline>
<codeline lineno="1706"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/>mMonitor.AssertCurrentThreadOwns();</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mPostedRunInStableStateEvent)</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/>mPostedRunInStableStateEvent<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MediaStreamGraphStableStateRunnable();</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/>NS_DispatchToMainThread(event);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><ref refid="classmozilla_1_1_media_stream_graph_impl_1a5c71597c6bd4c3f442690553c9ce7400" kindref="member">MediaStreamGraphImpl::AppendMessage</ref>(ControlMessage*<sp/>aMessage)</highlight></codeline>
<codeline lineno="1718"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;main<sp/>thread<sp/>only&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!aMessage-&gt;GetStream()<sp/>||</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!aMessage-&gt;GetStream()-&gt;IsDestroyed(),</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Stream<sp/>already<sp/>destroyed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDetectedNotRunning<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mLifecycleState<sp/>&gt;<sp/>LIFECYCLE_WAITING_FOR_MAIN_THREAD_CLEANUP)<sp/>{</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>graph<sp/>control<sp/>loop<sp/>is<sp/>not<sp/>running<sp/>and<sp/>main<sp/>thread<sp/>cleanup<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>happened.<sp/>From<sp/>now<sp/>on<sp/>we<sp/>can&apos;t<sp/>append<sp/>messages<sp/>to<sp/>mCurrentTaskMessageQueue,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>that<sp/>will<sp/>never<sp/>be<sp/>processed<sp/>again,<sp/>so<sp/>just<sp/>RunDuringShutdown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>only<sp/>happen<sp/>during<sp/>forced<sp/>shutdown.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>aMessage-&gt;RunDuringShutdown();</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>aMessage;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(gGraph<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Switched<sp/>managers<sp/>during<sp/>forced<sp/>shutdown?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gGraph<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/>mCurrentTaskMessageQueue.AppendElement(aMessage);</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/>EnsureRunInStableState();</highlight></codeline>
<codeline lineno="1743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal">MediaStream::Init()</highlight></codeline>
<codeline lineno="1747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/>MediaStreamGraphImpl*<sp/>graph<sp/>=<sp/>GraphImpl();</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/>mBlocked.SetAtAndAfter(graph-&gt;mCurrentTime,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/>mExplicitBlockerCount.SetAtAndAfter(graph-&gt;mCurrentTime,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/>mExplicitBlockerCount.SetAtAndAfter(graph-&gt;mStateComputedTime,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal">MediaStreamGraphImpl*</highlight></codeline>
<codeline lineno="1755"><highlight class="normal">MediaStream::GraphImpl()</highlight></codeline>
<codeline lineno="1756"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gGraph;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal">MediaStreamGraph*</highlight></codeline>
<codeline lineno="1761"><highlight class="normal">MediaStream::Graph()</highlight></codeline>
<codeline lineno="1762"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gGraph;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal">StreamTime</highlight></codeline>
<codeline lineno="1767"><highlight class="normal">MediaStream::GraphTimeToStreamTime(GraphTime<sp/>aTime)</highlight></codeline>
<codeline lineno="1768"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GraphImpl()-&gt;<ref refid="classmozilla_1_1_media_stream_graph_impl_1af9ad9c9df4782b1614313578d2ae3bed" kindref="member">GraphTimeToStreamTime</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>aTime);</highlight></codeline>
<codeline lineno="1770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal">MediaStream::FinishOnGraphThread()</highlight></codeline>
<codeline lineno="1774"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/>GraphImpl()-&gt;FinishStream(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal">MediaStream::DestroyImpl()</highlight></codeline>
<codeline lineno="1780"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>i<sp/>=<sp/>mConsumers.Length()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/>mConsumers[i]-&gt;Disconnect();</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mAudioOutputStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioOutputStreams[i].mStream-&gt;Shutdown();</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/>mAudioOutputStreams.Clear();</highlight></codeline>
<codeline lineno="1788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal">MediaStream::Destroy()</highlight></codeline>
<codeline lineno="1792"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>this<sp/>stream<sp/>alive<sp/>until<sp/>we<sp/>leave<sp/>this<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;MediaStream&gt;<sp/>kungFuDeathGrip<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ControlMessage<sp/>{</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/>Message(MediaStream*<sp/>aStream)<sp/>:<sp/>ControlMessage(aStream)<sp/>{}</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mStream-&gt;DestroyImpl();</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mStream-&gt;GraphImpl()-&gt;RemoveStream(mStream);</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunDuringShutdown()</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>Run();<sp/>}</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/>mWrapper<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/>GraphImpl()-&gt;AppendMessage(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Message::RunDuringShutdown<sp/>may<sp/>have<sp/>removed<sp/>this<sp/>stream<sp/>from<sp/>the<sp/>graph,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>our<sp/>kungFuDeathGrip<sp/>above<sp/>will<sp/>have<sp/>kept<sp/>this<sp/>stream<sp/>alive<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/>mMainThreadDestroyed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal">MediaStream::AddAudioOutput(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aKey)</highlight></codeline>
<codeline lineno="1817"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ControlMessage<sp/>{</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/>Message(MediaStream*<sp/>aStream,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aKey)<sp/>:<sp/>ControlMessage(aStream),<sp/>mKey(aKey)<sp/>{}</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mStream-&gt;AddAudioOutputImpl(mKey);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mKey;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/>GraphImpl()-&gt;AppendMessage(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>aKey));</highlight></codeline>
<codeline lineno="1828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal">MediaStream::SetAudioOutputVolumeImpl(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aKey,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aVolume)</highlight></codeline>
<codeline lineno="1832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mAudioOutputs.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAudioOutputs[i].mKey<sp/>==<sp/>aKey)<sp/>{</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mAudioOutputs[i].mVolume<sp/>=<sp/>aVolume;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/>NS_ERROR(</highlight><highlight class="stringliteral">&quot;Audio<sp/>output<sp/>key<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal">MediaStream::SetAudioOutputVolume(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aKey,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aVolume)</highlight></codeline>
<codeline lineno="1844"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ControlMessage<sp/>{</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/>Message(MediaStream*<sp/>aStream,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aKey,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aVolume)<sp/>:</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ControlMessage(aStream),<sp/>mKey(aKey),<sp/>mVolume(aVolume)<sp/>{}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mStream-&gt;SetAudioOutputVolumeImpl(mKey,<sp/>mVolume);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mKey;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mVolume;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/>GraphImpl()-&gt;AppendMessage(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>aKey,<sp/>aVolume));</highlight></codeline>
<codeline lineno="1857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal">MediaStream::RemoveAudioOutputImpl(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aKey)</highlight></codeline>
<codeline lineno="1861"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mAudioOutputs.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAudioOutputs[i].mKey<sp/>==<sp/>aKey)<sp/>{</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mAudioOutputs.RemoveElementAt(i);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/>NS_ERROR(</highlight><highlight class="stringliteral">&quot;Audio<sp/>output<sp/>key<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal">MediaStream::RemoveAudioOutput(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aKey)</highlight></codeline>
<codeline lineno="1873"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ControlMessage<sp/>{</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>Message(MediaStream*<sp/>aStream,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aKey)<sp/>:</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ControlMessage(aStream),<sp/>mKey(aKey)<sp/>{}</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mStream-&gt;RemoveAudioOutputImpl(mKey);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mKey;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/>GraphImpl()-&gt;AppendMessage(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>aKey));</highlight></codeline>
<codeline lineno="1885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal">MediaStream::AddVideoOutput(VideoFrameContainer*<sp/>aContainer)</highlight></codeline>
<codeline lineno="1889"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ControlMessage<sp/>{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/>Message(MediaStream*<sp/>aStream,<sp/>VideoFrameContainer*<sp/>aContainer)<sp/>:</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ControlMessage(aStream),<sp/>mContainer(aContainer)<sp/>{}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mStream-&gt;AddVideoOutputImpl(mContainer.forget());</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>nsRefPtr&lt;VideoFrameContainer&gt;<sp/>mContainer;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/>GraphImpl()-&gt;AppendMessage(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>aContainer));</highlight></codeline>
<codeline lineno="1901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal">MediaStream::RemoveVideoOutput(VideoFrameContainer*<sp/>aContainer)</highlight></codeline>
<codeline lineno="1905"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ControlMessage<sp/>{</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>Message(MediaStream*<sp/>aStream,<sp/>VideoFrameContainer*<sp/>aContainer)<sp/>:</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ControlMessage(aStream),<sp/>mContainer(aContainer)<sp/>{}</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mStream-&gt;RemoveVideoOutputImpl(mContainer);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/>nsRefPtr&lt;VideoFrameContainer&gt;<sp/>mContainer;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/>GraphImpl()-&gt;AppendMessage(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>aContainer));</highlight></codeline>
<codeline lineno="1917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal">MediaStream::ChangeExplicitBlockerCount(int32_t<sp/>aDelta)</highlight></codeline>
<codeline lineno="1921"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ControlMessage<sp/>{</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>Message(MediaStream*<sp/>aStream,<sp/>int32_t<sp/>aDelta)<sp/>:</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ControlMessage(aStream),<sp/>mDelta(aDelta)<sp/>{}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mStream-&gt;ChangeExplicitBlockerCountImpl(</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStream-&gt;GraphImpl()-&gt;mStateComputedTime,<sp/>mDelta);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>mDelta;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/>GraphImpl()-&gt;AppendMessage(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>aDelta));</highlight></codeline>
<codeline lineno="1934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal">MediaStream::AddListenerImpl(already_AddRefed&lt;MediaStreamListener&gt;<sp/>aListener)</highlight></codeline>
<codeline lineno="1938"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/>MediaStreamListener*<sp/>listener<sp/>=<sp/>*mListeners.AppendElement()<sp/>=<sp/>aListener;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/>listener-&gt;NotifyBlockingChanged(GraphImpl(),</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>mBlocked.GetAt(GraphImpl()-&gt;mCurrentTime)<sp/>?<sp/>MediaStreamListener::BLOCKED<sp/>:<sp/>MediaStreamListener::UNBLOCKED);</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mNotifiedFinished)<sp/>{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/>listener-&gt;NotifyFinished(GraphImpl());</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal">MediaStream::AddListener(MediaStreamListener*<sp/>aListener)</highlight></codeline>
<codeline lineno="1949"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ControlMessage<sp/>{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>Message(MediaStream*<sp/>aStream,<sp/>MediaStreamListener*<sp/>aListener)<sp/>:</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ControlMessage(aStream),<sp/>mListener(aListener)<sp/>{}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mStream-&gt;AddListenerImpl(mListener.forget());</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>nsRefPtr&lt;MediaStreamListener&gt;<sp/>mListener;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/>GraphImpl()-&gt;AppendMessage(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>aListener));</highlight></codeline>
<codeline lineno="1961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal">MediaStream::RemoveListener(MediaStreamListener*<sp/>aListener)</highlight></codeline>
<codeline lineno="1965"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ControlMessage<sp/>{</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>Message(MediaStream*<sp/>aStream,<sp/>MediaStreamListener*<sp/>aListener)<sp/>:</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ControlMessage(aStream),<sp/>mListener(aListener)<sp/>{}</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mStream-&gt;RemoveListenerImpl(mListener);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>nsRefPtr&lt;MediaStreamListener&gt;<sp/>mListener;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/>GraphImpl()-&gt;AppendMessage(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>aListener));</highlight></codeline>
<codeline lineno="1977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal">SourceMediaStream::DestroyImpl()</highlight></codeline>
<codeline lineno="1981"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/>MutexAutoLock<sp/>lock(mMutex);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/>mDestroyed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/>MediaStream::DestroyImpl();</highlight></codeline>
<codeline lineno="1987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal">SourceMediaStream::SetPullEnabled(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aEnabled)</highlight></codeline>
<codeline lineno="1991"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/>MutexAutoLock<sp/>lock(mMutex);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/>mPullEnabled<sp/>=<sp/>aEnabled;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mPullEnabled<sp/>&amp;&amp;<sp/>!mDestroyed)<sp/>{</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphImpl()-&gt;EnsureNextIteration();</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal">SourceMediaStream::AddTrack(TrackID<sp/>aID,<sp/>TrackRate<sp/>aRate,<sp/>TrackTicks<sp/>aStart,</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaSegment*<sp/>aSegment)</highlight></codeline>
<codeline lineno="2002"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/>MutexAutoLock<sp/>lock(mMutex);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/>TrackData*<sp/>data<sp/>=<sp/>mUpdateTracks.AppendElement();</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/>data-&gt;mID<sp/>=<sp/>aID;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/>data-&gt;mRate<sp/>=<sp/>aRate;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/>data-&gt;mStart<sp/>=<sp/>aStart;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/>data-&gt;mCommands<sp/>=<sp/>TRACK_CREATE;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/>data-&gt;mData<sp/>=<sp/>aSegment;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/>data-&gt;mHaveEnough<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mDestroyed)<sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphImpl()-&gt;EnsureNextIteration();</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal">SourceMediaStream::AppendToTrack(TrackID<sp/>aID,<sp/>MediaSegment*<sp/>aSegment)</highlight></codeline>
<codeline lineno="2018"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/>MutexAutoLock<sp/>lock(mMutex);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>::EndAllTrackAndFinished()<sp/>can<sp/>end<sp/>these<sp/>before<sp/>the<sp/>sources<sp/>notice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mFinished)<sp/>{</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/>TrackData<sp/>*track<sp/>=<sp/>FindDataForTrack(aID);</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(track)<sp/>{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>track-&gt;mData-&gt;AppendFrom(aSegment);</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ERROR(</highlight><highlight class="stringliteral">&quot;Append<sp/>to<sp/>non-existent<sp/>track!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mDestroyed)<sp/>{</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphImpl()-&gt;EnsureNextIteration();</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal">SourceMediaStream::HaveEnoughBuffered(TrackID<sp/>aID)</highlight></codeline>
<codeline lineno="2036"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/>MutexAutoLock<sp/>lock(mMutex);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/>TrackData<sp/>*track<sp/>=<sp/>FindDataForTrack(aID);</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(track)<sp/>{</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>track-&gt;mHaveEnough;</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/>NS_ERROR(</highlight><highlight class="stringliteral">&quot;No<sp/>track<sp/>in<sp/>HaveEnoughBuffered!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal">SourceMediaStream::DispatchWhenNotEnoughBuffered(TrackID<sp/>aID,</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>nsIThread*<sp/>aSignalThread,<sp/>nsIRunnable*<sp/>aSignalRunnable)</highlight></codeline>
<codeline lineno="2049"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/>MutexAutoLock<sp/>lock(mMutex);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/>TrackData*<sp/>data<sp/>=<sp/>FindDataForTrack(aID);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!data)<sp/>{</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ERROR(</highlight><highlight class="stringliteral">&quot;No<sp/>track<sp/>in<sp/>DispatchWhenNotEnoughBuffered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;mHaveEnough)<sp/>{</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/>data-&gt;mDispatchWhenNotEnough.AppendElement()-&gt;Init(aSignalThread,<sp/>aSignalRunnable);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/>aSignalThread-&gt;Dispatch(aSignalRunnable,<sp/>0);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal">SourceMediaStream::EndTrack(TrackID<sp/>aID)</highlight></codeline>
<codeline lineno="2066"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/>MutexAutoLock<sp/>lock(mMutex);</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>::EndAllTrackAndFinished()<sp/>can<sp/>end<sp/>these<sp/>before<sp/>the<sp/>sources<sp/>call<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mFinished)<sp/>{</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/>TrackData<sp/>*track<sp/>=<sp/>FindDataForTrack(aID);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(track)<sp/>{</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>track-&gt;mCommands<sp/>|=<sp/>TRACK_END;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ERROR(</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>non-existant<sp/>track&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mDestroyed)<sp/>{</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphImpl()-&gt;EnsureNextIteration();</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal">SourceMediaStream::AdvanceKnownTracksTime(StreamTime<sp/>aKnownTime)</highlight></codeline>
<codeline lineno="2084"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/>MutexAutoLock<sp/>lock(mMutex);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/>mUpdateKnownTracksTime<sp/>=<sp/>aKnownTime;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mDestroyed)<sp/>{</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphImpl()-&gt;EnsureNextIteration();</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal">SourceMediaStream::FinishWithLockHeld()</highlight></codeline>
<codeline lineno="2094"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/>mUpdateFinished<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mDestroyed)<sp/>{</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphImpl()-&gt;EnsureNextIteration();</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal">SourceMediaStream::EndAllTrackAndFinish()</highlight></codeline>
<codeline lineno="2103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/>MutexAutoLock<sp/>lock(mMutex);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mUpdateTracks.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SourceMediaStream::TrackData*<sp/>data<sp/>=<sp/>&amp;mUpdateTracks[i];</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;mCommands<sp/>|=<sp/>TRACK_END;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/>FinishWithLockHeld();</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>call<sp/>NotifyFinished()<sp/>to<sp/>let<sp/>GetUserMedia<sp/>know</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal">MediaInputPort::Init()</highlight></codeline>
<codeline lineno="2117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Adding<sp/>MediaInputPort<sp/>%p<sp/>(from<sp/>%p<sp/>to<sp/>%p)<sp/>to<sp/>the<sp/>graph&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>mSource,<sp/>mDest));</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/>mSource-&gt;AddConsumer(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/>mDest-&gt;AddInput(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mPortCount<sp/>decremented<sp/>via<sp/>MediaInputPort::Destroy&apos;s<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/>++mDest-&gt;GraphImpl()-&gt;mPortCount;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal">MediaInputPort::Disconnect()</highlight></codeline>
<codeline lineno="2128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!mSource<sp/>==<sp/>!mDest,</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mSource<sp/>must<sp/>either<sp/>both<sp/>be<sp/>null<sp/>or<sp/>both<sp/>non-null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mSource)</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/>mSource-&gt;RemoveConsumer(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/>mSource<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/>mDest-&gt;RemoveInput(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/>mDest<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal">MediaInputPort::InputInterval</highlight></codeline>
<codeline lineno="2141"><highlight class="normal">MediaInputPort::GetNextInputInterval(GraphTime<sp/>aTime)</highlight></codeline>
<codeline lineno="2142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/>InputInterval<sp/>result<sp/>=<sp/>{<sp/>GRAPH_TIME_MAX,<sp/>GRAPH_TIME_MAX,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/>GraphTime<sp/>t<sp/>=<sp/>aTime;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/>GraphTime<sp/>end;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mDest-&gt;mBlocked.GetAt(t,<sp/>&amp;end))</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>==<sp/>GRAPH_TIME_MAX)</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/>result.mStart<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/>GraphTime<sp/>sourceEnd;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/>result.mInputIsBlocked<sp/>=<sp/>mSource-&gt;mBlocked.GetAt(t,<sp/>&amp;sourceEnd);</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/>result.mEnd<sp/>=<sp/>NS_MIN(end,<sp/>sourceEnd);</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal">MediaInputPort::Destroy()</highlight></codeline>
<codeline lineno="2162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ControlMessage<sp/>{</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/>Message(MediaInputPort*<sp/>aPort)</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ControlMessage(nullptr),<sp/>mPort(aPort)<sp/>{}</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mPort-&gt;Disconnect();</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--mPort-&gt;GraphImpl()-&gt;mPortCount;</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_RELEASE(mPort);</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunDuringShutdown()</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Run();</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>strongly<sp/>referenced;<sp/>the<sp/>graph<sp/>is<sp/>holding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>strong<sp/>reference<sp/>to<sp/>the<sp/>port,<sp/>which<sp/>we<sp/>will<sp/>remove.<sp/>This<sp/>will<sp/>be<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>message<sp/>for<sp/>the<sp/>port.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaInputPort*<sp/>mPort;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/>GraphImpl()-&gt;AppendMessage(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal">MediaStreamGraphImpl*</highlight></codeline>
<codeline lineno="2186"><highlight class="normal">MediaInputPort::GraphImpl()</highlight></codeline>
<codeline lineno="2187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gGraph;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal">MediaStreamGraph*</highlight></codeline>
<codeline lineno="2192"><highlight class="normal">MediaInputPort::Graph()</highlight></codeline>
<codeline lineno="2193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gGraph;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal">MediaInputPort*</highlight></codeline>
<codeline lineno="2198"><highlight class="normal">ProcessedMediaStream::AllocateInputPort(MediaStream*<sp/>aStream,<sp/>uint32_t<sp/>aFlags)</highlight></codeline>
<codeline lineno="2199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ControlMessage<sp/>{</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>Message(MediaInputPort*<sp/>aPort)</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ControlMessage(aPort-&gt;GetDestination()),</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mPort(aPort)<sp/>{}</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mPort-&gt;Init();</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaInputPort*<sp/>mPort;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/>MediaInputPort*<sp/>port<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MediaInputPort(aStream,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>aFlags);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/>NS_ADDREF(port);</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/>GraphImpl()-&gt;AppendMessage(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message(port));</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>port;</highlight></codeline>
<codeline lineno="2215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal">ProcessedMediaStream::Finish()</highlight></codeline>
<codeline lineno="2219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ControlMessage<sp/>{</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/>Message(ProcessedMediaStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ControlMessage(aStream)<sp/>{}</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mStream-&gt;GraphImpl()-&gt;FinishStream(mStream);</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/>GraphImpl()-&gt;AppendMessage(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal">ProcessedMediaStream::SetAutofinish(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aAutofinish)</highlight></codeline>
<codeline lineno="2234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ControlMessage<sp/>{</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/>Message(ProcessedMediaStream*<sp/>aStream,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aAutofinish)</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ControlMessage(aStream),<sp/>mAutofinish(aAutofinish)<sp/>{}</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mStream-&gt;AsProcessedStream()-&gt;SetAutofinishImpl(mAutofinish);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mAutofinish;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/>GraphImpl()-&gt;AppendMessage(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>aAutofinish));</highlight></codeline>
<codeline lineno="2246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal">ProcessedMediaStream::DestroyImpl()</highlight></codeline>
<codeline lineno="2250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>i<sp/>=<sp/>mInputs.Length()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/>mInputs[i]-&gt;Disconnect();</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/>MediaStream::DestroyImpl();</highlight></codeline>
<codeline lineno="2255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>INITIAL_CURRENT_TIME<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal">MediaStreamGraphImpl::MediaStreamGraphImpl()</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/>:<sp/>mCurrentTime(INITIAL_CURRENT_TIME)</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/>,<sp/>mStateComputedTime(INITIAL_CURRENT_TIME)</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/>,<sp/>mProcessingGraphUpdateIndex(0)</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/>,<sp/>mPortCount(0)</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/>,<sp/>mMonitor(</highlight><highlight class="stringliteral">&quot;MediaStreamGraphImpl&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/>,<sp/>mLifecycleState(LIFECYCLE_THREAD_NOT_STARTED)</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/>,<sp/>mWaitState(WAITSTATE_RUNNING)</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/>,<sp/>mNeedAnotherIteration(false)</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/>,<sp/>mForceShutDown(false)</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/>,<sp/>mPostedRunInStableStateEvent(false)</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/>,<sp/>mDetectedNotRunning(false)</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/>,<sp/>mPostedRunInStableState(false)</highlight></codeline>
<codeline lineno="2276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PR_LOGGING</highlight></codeline>
<codeline lineno="2278"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gMediaStreamGraphLog)<sp/>{</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/>gMediaStreamGraphLog<sp/>=<sp/>PR_NewLogModule(</highlight><highlight class="stringliteral">&quot;MediaStreamGraph&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2282"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><ref refid="classmozilla_1_1_media_stream_graph_impl_1ab96135e9aee09b46072a5f9319ffc4be" kindref="member">mCurrentTimeStamp</ref><sp/>=<sp/><ref refid="classmozilla_1_1_media_stream_graph_impl_1a46fe545df99f3fbd4e7ba1e4496eb7db" kindref="member">mInitialTimeStamp</ref><sp/>=<sp/>TimeStamp::Now();</highlight></codeline>
<codeline lineno="2284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"></highlight></codeline>
<codeline lineno="2286"><highlight class="normal">NS_IMPL_ISUPPORTS1(MediaStreamGraphShutdownObserver,<sp/>nsIObserver)</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal">static<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gShutdownObserverRegistered<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal">NS_IMETHODIMP</highlight></codeline>
<codeline lineno="2291"><highlight class="normal">MediaStreamGraphShutdownObserver::Observe(nsISupports<sp/>*aSubject,</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aTopic,</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>PRUnichar<sp/>*aData)</highlight></codeline>
<codeline lineno="2294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(aTopic,<sp/>NS_XPCOM_SHUTDOWN_OBSERVER_ID)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gGraph)<sp/>{</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gGraph-&gt;<ref refid="classmozilla_1_1_media_stream_graph_impl_1a92debcd400111704088f1e0c23774fd0" kindref="member">ForceShutDown</ref>();</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/>nsContentUtils::UnregisterShutdownObserver(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/>gShutdownObserverRegistered<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal">MediaStreamGraph*</highlight></codeline>
<codeline lineno="2306"><highlight class="normal">MediaStreamGraph::GetInstance()</highlight></codeline>
<codeline lineno="2307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Main<sp/>thread<sp/>only&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gGraph)<sp/>{</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gShutdownObserverRegistered)<sp/>{</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gShutdownObserverRegistered<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsContentUtils::RegisterShutdownObserver(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MediaStreamGraphShutdownObserver());</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/>gGraph<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MediaStreamGraphImpl();</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Starting<sp/>up<sp/>MediaStreamGraph<sp/>%p&quot;</highlight><highlight class="normal">,<sp/>gGraph));</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gGraph;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal">SourceMediaStream*</highlight></codeline>
<codeline lineno="2324"><highlight class="normal">MediaStreamGraph::CreateSourceStream(nsDOMMediaStream*<sp/>aWrapper)</highlight></codeline>
<codeline lineno="2325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/>SourceMediaStream*<sp/>stream<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SourceMediaStream(aWrapper);</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/>NS_ADDREF(stream);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">MediaStreamGraphImpl*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;<ref refid="classmozilla_1_1_media_stream_graph_impl_1a5c71597c6bd4c3f442690553c9ce7400" kindref="member">AppendMessage</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CreateMessage(stream));</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal">ProcessedMediaStream*</highlight></codeline>
<codeline lineno="2333"><highlight class="normal">MediaStreamGraph::CreateTrackUnionStream(nsDOMMediaStream*<sp/>aWrapper)</highlight></codeline>
<codeline lineno="2334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/>TrackUnionStream*<sp/>stream<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TrackUnionStream(aWrapper);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/>NS_ADDREF(stream);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">MediaStreamGraphImpl*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;<ref refid="classmozilla_1_1_media_stream_graph_impl_1a5c71597c6bd4c3f442690553c9ce7400" kindref="member">AppendMessage</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CreateMessage(stream));</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/tools/mozilla-release/content/media/MediaStreamGraph.cpp"/>
  </compounddef>
</doxygen>
