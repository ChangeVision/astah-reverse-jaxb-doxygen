<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="_d_a_s_h_decoder_8cpp" kind="file">
    <compoundname>DASHDecoder.cpp</compoundname>
    <includes local="no">limits</includes>
    <includes local="no">prdtoa.h</includes>
    <includes local="yes">nsIURI.h</includes>
    <includes local="yes">nsIFileURL.h</includes>
    <includes local="yes">nsNetUtil.h</includes>
    <includes local="yes">VideoUtils.h</includes>
    <includes local="yes">nsThreadUtils.h</includes>
    <includes local="yes">nsContentUtils.h</includes>
    <includes local="yes">nsIContentPolicy.h</includes>
    <includes local="yes">nsIContentSecurityPolicy.h</includes>
    <includes local="yes">nsICachingChannel.h</includes>
    <includes local="yes">MediaDecoderStateMachine.h</includes>
    <includes local="yes">C:/tools/mozilla-release/content/media/MediaDecoder.h</includes>
    <includes local="yes">C:/tools/mozilla-release/content/media/AudioAvailableEventManager.h</includes>
    <includes local="yes">mozilla/ReentrantMonitor.h</includes>
    <includes local="yes">nsITimer.h</includes>
    <includes local="yes">C:/tools/mozilla-release/content/media/AudioSegment.h</includes>
    <includes local="yes">C:/tools/mozilla-release/content/media/VideoSegment.h</includes>
    <includes local="yes">WebMDecoder.h</includes>
    <includes local="yes">WebMReader.h</includes>
    <includes local="yes">mozilla/StandardInteger.h</includes>
    <includes local="yes">nsDeque.h</includes>
    <includes local="yes">C:/tools/mozilla-release/content/media/MediaDecoderReader.h</includes>
    <includes local="yes">nsAutoRef.h</includes>
    <includes local="yes">nestegg/nestegg.h</includes>
    <includes local="yes">vpx/vpx_codec.h</includes>
    <includes local="yes">vorbis/codec.h</includes>
    <includes local="yes">DASHReader.h</includes>
    <includes local="yes">nsDASHMPDParser.h</includes>
    <includes local="yes">DASHRepDecoder.h</includes>
    <includes local="yes">Representation.h</includes>
    <includes local="yes">ImageLayers.h</includes>
    <includes local="yes">C:/tools/mozilla-release/content/media/dash/DASHDecoder.h</includes>
    <includes local="yes">nsTArray.h</includes>
    <includes local="yes">C:/tools/mozilla-release/content/media/dash/DASHReader.h</includes>
    <includes local="yes">C:/tools/mozilla-release/content/media/webm/WebMDecoder.h</includes>
    <includes local="yes">C:/tools/mozilla-release/content/media/webm/WebMReader.h</includes>
    <includes local="yes">DASHDecoder.h</includes>
    <incdepgraph>
      <node id="115">
        <label>ImageLayers.h</label>
      </node>
      <node id="101">
        <label>C:/tools/mozilla-release/content/media/VideoSegment.h</label>
      </node>
      <node id="96">
        <label>C:/tools/mozilla-release/content/media/MediaDecoder.h</label>
      </node>
      <node id="109">
        <label>vpx/vpx_codec.h</label>
      </node>
      <node id="113">
        <label>DASHRepDecoder.h</label>
      </node>
      <node id="84">
        <label>limits</label>
      </node>
      <node id="93">
        <label>nsIContentSecurityPolicy.h</label>
      </node>
      <node id="102">
        <label>WebMDecoder.h</label>
      </node>
      <node id="85">
        <label>prdtoa.h</label>
      </node>
      <node id="90">
        <label>nsThreadUtils.h</label>
      </node>
      <node id="121">
        <label>DASHDecoder.h</label>
      </node>
      <node id="88">
        <label>nsNetUtil.h</label>
      </node>
      <node id="97">
        <label>C:/tools/mozilla-release/content/media/AudioAvailableEventManager.h</label>
      </node>
      <node id="86">
        <label>nsIURI.h</label>
      </node>
      <node id="87">
        <label>nsIFileURL.h</label>
      </node>
      <node id="83">
        <label>C:/tools/mozilla-release/content/media/dash/DASHDecoder.cpp</label>
        <link refid="DASHDecoder.cpp"/>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>C:/tools/mozilla-release/content/media/dash/DASHDecoder.h</label>
      </node>
      <node id="106">
        <label>C:/tools/mozilla-release/content/media/MediaDecoderReader.h</label>
      </node>
      <node id="107">
        <label>nsAutoRef.h</label>
      </node>
      <node id="110">
        <label>vorbis/codec.h</label>
      </node>
      <node id="112">
        <label>nsDASHMPDParser.h</label>
      </node>
      <node id="89">
        <label>VideoUtils.h</label>
      </node>
      <node id="105">
        <label>nsDeque.h</label>
      </node>
      <node id="118">
        <label>C:/tools/mozilla-release/content/media/dash/DASHReader.h</label>
      </node>
      <node id="95">
        <label>MediaDecoderStateMachine.h</label>
      </node>
      <node id="111">
        <label>DASHReader.h</label>
      </node>
      <node id="120">
        <label>C:/tools/mozilla-release/content/media/webm/WebMReader.h</label>
      </node>
      <node id="100">
        <label>C:/tools/mozilla-release/content/media/AudioSegment.h</label>
      </node>
      <node id="94">
        <label>nsICachingChannel.h</label>
      </node>
      <node id="91">
        <label>nsContentUtils.h</label>
      </node>
      <node id="119">
        <label>C:/tools/mozilla-release/content/media/webm/WebMDecoder.h</label>
      </node>
      <node id="103">
        <label>WebMReader.h</label>
      </node>
      <node id="104">
        <label>mozilla/StandardInteger.h</label>
      </node>
      <node id="99">
        <label>nsITimer.h</label>
      </node>
      <node id="98">
        <label>mozilla/ReentrantMonitor.h</label>
      </node>
      <node id="117">
        <label>nsTArray.h</label>
      </node>
      <node id="108">
        <label>nestegg/nestegg.h</label>
      </node>
      <node id="92">
        <label>nsIContentPolicy.h</label>
      </node>
      <node id="114">
        <label>Representation.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacemozilla">mozilla</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_d_a_s_h_decoder_8cpp_1ad285b8d43b6e90320e33e7438e3e171b" prot="public" static="no">
        <name>LOG</name>
        <param><defname>msg</defname></param>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/dash/DASHDecoder.cpp" line="140" bodyfile="C:/tools/mozilla-release/content/media/dash/DASHDecoder.cpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_a_s_h_decoder_8cpp_1ab25a77e7e48124e7060c8ef6ba96819e" prot="public" static="no">
        <name>LOG1</name>
        <param><defname>msg</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/dash/DASHDecoder.cpp" line="141" bodyfile="C:/tools/mozilla-release/content/media/dash/DASHDecoder.cpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>Mode:<sp/>C++;<sp/>tab-width:<sp/>2;<sp/>indent-tabs-mode:<sp/>nil;<sp/>c-basic-offset:<sp/>2<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>ts=2<sp/>sw=2<sp/>sts=2<sp/>et<sp/>cindent:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>Source<sp/>Code<sp/>Form<sp/>Is<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Mozilla<sp/>Public</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>License,<sp/>v.<sp/>2.0.<sp/>If<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>MPL<sp/>was<sp/>not<sp/>distributed<sp/>with<sp/>this<sp/>file,</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>can<sp/>obtain<sp/>one<sp/>at<sp/>http://mozilla.org/MPL/2.0/.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>DASH<sp/>-<sp/>Dynamic<sp/>Adaptive<sp/>Streaming<sp/>over<sp/>HTTP.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>DASH<sp/>is<sp/>an<sp/>adaptive<sp/>bitrate<sp/>streaming<sp/>technology<sp/>where<sp/>a<sp/>multimedia<sp/>file<sp/>is</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>partitioned<sp/>into<sp/>one<sp/>or<sp/>more<sp/>segments<sp/>and<sp/>delivered<sp/>to<sp/>a<sp/>client<sp/>using<sp/>HTTP.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Interaction<sp/>with<sp/>MediaDecoderStateMachine,<sp/>nsHTMLMediaElement,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>ChannelMediaResource<sp/>and<sp/>sub-decoders<sp/>(WebMDecoder).</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaDecoderStateMachine<sp/><sp/><sp/><sp/><sp/><sp/>nsHTMLMediaElement</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\<sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>1</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\<sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>1</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>DASHReader<sp/>------<sp/>DASHDecoder<sp/>------------<sp/>ChannelMediaResource</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/>|1<sp/><sp/><sp/><sp/><sp/><sp/>\1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(for<sp/>MPD<sp/>Manifest)</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>------------</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>WebMReader<sp/>-------<sp/>DASHRepDecoder<sp/>-------<sp/>ChannelMediaResource</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>(for<sp/>media<sp/>streams)</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>One<sp/>decoder<sp/>and<sp/>state-machine,<sp/>as<sp/>with<sp/>current,<sp/>non-DASH<sp/>decoders.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>DASH<sp/>adds<sp/>multiple<sp/>readers,<sp/>decoders<sp/>and<sp/>resources,<sp/>in<sp/>order<sp/>to<sp/>manage</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>download<sp/>and<sp/>decode<sp/>of<sp/>the<sp/>MPD<sp/>manifest<sp/>and<sp/>individual<sp/>media<sp/>streams.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>Rep/|Representation|<sp/>is<sp/>for<sp/>an<sp/>individual<sp/>media<sp/>stream,<sp/>e.g.<sp/>audio</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>DASHRepDecoder<sp/>is<sp/>the<sp/>decoder<sp/>for<sp/>a<sp/>rep/|Representation|.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>FLOW</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>1<sp/>-<sp/>Download<sp/>and<sp/>parse<sp/>the<sp/>MPD<sp/>(DASH<sp/>XML-based<sp/>manifest).</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>Media<sp/>element<sp/>creates<sp/>new<sp/>|DASHDecoder|<sp/>object:</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/><sp/>member<sp/>var<sp/>initialization<sp/>to<sp/>default<sp/>values,<sp/>including<sp/>a/v<sp/>sub-decoders.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/><sp/>MediaDecoder<sp/>and<sp/>MediaDecoder<sp/>constructors<sp/>are<sp/>called.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/><sp/>MediaDecoder::Init()<sp/>is<sp/>called.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>Media<sp/>element<sp/>creates<sp/>new<sp/>|ChannelMediaResource|:</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/><sp/>used<sp/>to<sp/>download<sp/>MPD<sp/>manifest.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>Media<sp/>element<sp/>calls<sp/>|DASHDecoder|-&gt;Load()<sp/>to<sp/>download<sp/>the<sp/>MPD<sp/>file:</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/><sp/>creates<sp/>an<sp/>|DASHReader|<sp/>object<sp/>to<sp/>forward<sp/>calls<sp/>to<sp/>multiple</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>WebMReaders<sp/>(corresponding<sp/>to<sp/>MPD<sp/>|Representation|s<sp/>i.e.<sp/>streams).</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>Note:<sp/>1<sp/>|DASHReader|<sp/>per<sp/>DASH/WebM<sp/>MPD.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/>also<sp/>calls<sp/>|ChannelMediaResource|::Open().</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>uses<sp/>nsHttpChannel<sp/>to<sp/>download<sp/>MPD;<sp/>notifies<sp/>DASHDecoder.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>Meanwhile,<sp/>back<sp/>in<sp/>|DASHDecoder|-&gt;Load():</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/><sp/>MediaDecoderStateMachine<sp/>is<sp/>created.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>has<sp/>ref<sp/>to<sp/>|DASHReader|<sp/>object.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>state<sp/>machine<sp/>is<sp/>scheduled.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>Media<sp/>element<sp/>finishes<sp/>decoder<sp/>setup:</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/><sp/>element<sp/>added<sp/>to<sp/>media<sp/>URI<sp/>table<sp/>etc.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>--<sp/>At<sp/>this<sp/>point,<sp/>objects<sp/>are<sp/>waiting<sp/>on<sp/>HTTP<sp/>returning<sp/>MPD<sp/>data.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>MPD<sp/>Download<sp/>(Async<sp/>|ChannelMediaResource|<sp/>channel<sp/>callbacks):</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/><sp/>calls<sp/>DASHDecoder::|NotifyDownloadEnded|().</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>DASHDecoder<sp/>parses<sp/>MPD<sp/>XML<sp/>to<sp/>DOM<sp/>to<sp/>MPD<sp/>classes.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>gets<sp/>|Segment|<sp/>URLs<sp/>from<sp/>MPD<sp/>for<sp/>audio<sp/>and<sp/>video<sp/>streams.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>creates<sp/>|nsIChannel|s,<sp/>|ChannelMediaResource|s.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stores<sp/>resources<sp/>as<sp/>member<sp/>vars<sp/>(to<sp/>forward<sp/>function<sp/>calls<sp/>later).</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>creates<sp/>|WebMReader|s<sp/>and<sp/>|DASHRepDecoder|s.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DASHreader<sp/>creates<sp/>|WebMReader|s.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|Representation|<sp/>decoders<sp/>are<sp/>connected<sp/>to<sp/>the<sp/>|ChannelMediaResource|s.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>|DASHDecoder|-&gt;|LoadRepresentations|()<sp/>starts<sp/>download<sp/>and<sp/>decode.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>2<sp/>-<sp/>Media<sp/>Stream,<sp/>Byte<sp/>Range<sp/>downloads.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>--<sp/>At<sp/>this<sp/>point<sp/>the<sp/>Segment<sp/>media<sp/>stream<sp/>downloads<sp/>are<sp/>managed<sp/>by</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>individual<sp/>|ChannelMediaResource|s<sp/>and<sp/>|WebMReader|s.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>A<sp/>single<sp/>|DASHDecoder|<sp/>and<sp/>|MediaDecoderStateMachine|<sp/>manage<sp/>them</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>and<sp/>communicate<sp/>to<sp/>|nsHTMLMediaElement|.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>Each<sp/>|DASHRepDecoder|<sp/>gets<sp/>init<sp/>range<sp/>and<sp/>index<sp/>range<sp/>from<sp/>its<sp/>MPD</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>|Representation|.<sp/>|DASHRepDecoder|<sp/>uses<sp/>ChannelMediaResource<sp/>to<sp/>start<sp/>the</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>byte<sp/>range<sp/>downloads,<sp/>calling<sp/>|OpenByteRange|<sp/>with<sp/>a<sp/>|MediaByteRange|</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>object.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>Once<sp/>the<sp/>init<sp/>and<sp/>index<sp/>segments<sp/>have<sp/>been<sp/>downloaded<sp/>and<sp/>|ReadMetadata|<sp/>has</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>completed,<sp/>each<sp/>|WebMReader|<sp/>notifies<sp/>it&apos;s<sp/>peer<sp/>|DASHRepDecoder|.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>Note:<sp/>the<sp/>decoder<sp/>must<sp/>wait<sp/>until<sp/>index<sp/>data<sp/>is<sp/>parsed<sp/>because<sp/>it<sp/>needs<sp/>to</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>get<sp/>the<sp/>offsets<sp/>of<sp/>the<sp/>subsegments<sp/>(WebM<sp/>clusters)<sp/>from<sp/>the<sp/>media<sp/>file</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>itself.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>Since<sp/>byte<sp/>ranges<sp/>for<sp/>subsegments<sp/>are<sp/>obtained,<sp/>|nsDASHRepdecoder|<sp/>continues</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>downloading<sp/>the<sp/>files<sp/>in<sp/>byte<sp/>range<sp/>chunks.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>XXX<sp/>Note<sp/>that<sp/>this<sp/>implementation<sp/>of<sp/>DASHRepDecoder<sp/>is<sp/>focused<sp/>on<sp/>DASH</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>WebM<sp/>On<sp/>Demand<sp/>profile:<sp/>on<sp/>the<sp/>todo<sp/>list<sp/>is<sp/>an<sp/>action<sp/>item<sp/>to<sp/>make<sp/>this</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>more<sp/>abstract.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>Note<sp/>on<sp/>|Seek|:<sp/>Currently,<sp/>|MediaCache|<sp/>requires<sp/>that<sp/>seeking<sp/>start<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beginning<sp/>of<sp/>the<sp/>block<sp/>in<sp/>which<sp/>the<sp/>desired<sp/>offset<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found.<sp/>As<sp/>such,<sp/>when<sp/>|ChannelMediaResource|<sp/>does<sp/>a<sp/>seek</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>DASH<sp/>WebM<sp/>subsegments<sp/>(clusters),<sp/>it<sp/>requests<sp/>a<sp/>start</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>that<sp/>corresponds<sp/>to<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>block,<sp/>not</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>start<sp/>offset<sp/>of<sp/>the<sp/>cluster.<sp/>For<sp/>DASH<sp/>Webm,<sp/>which<sp/>has</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>media<sp/>encoded<sp/>in<sp/>single<sp/>files,<sp/>this<sp/>is<sp/>fine.<sp/>Future<sp/>work<sp/>on</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other<sp/>profiles<sp/>will<sp/>require<sp/>this<sp/>to<sp/>be<sp/>re-examined.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;prdtoa.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsIURI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsIFileURL.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsNetUtil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;VideoUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsThreadUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsContentUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsIContentPolicy.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsIContentSecurityPolicy.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsICachingChannel.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MediaDecoderStateMachine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WebMDecoder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WebMReader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;DASHReader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsDASHMPDParser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;DASHRepDecoder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;DASHDecoder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mozilla<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PR_LOGGING</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>PRLogModuleInfo*<sp/>gMediaDecoderLog;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG(msg,<sp/>...)<sp/>PR_LOG(gMediaDecoderLog,<sp/>PR_LOG_DEBUG,<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;%p<sp/>[DASHDecoder]<sp/>&quot;<sp/>msg,<sp/>this,<sp/>__VA_ARGS__))</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LOG1(msg)<sp/>PR_LOG(gMediaDecoderLog,<sp/>PR_LOG_DEBUG,<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;%p<sp/>[DASHDecoder]<sp/>&quot;<sp/>msg,<sp/>this))</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LOG(msg,<sp/>...)</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LOG1(msg)</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">DASHDecoder::DASHDecoder()<sp/>:</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>MediaDecoder(),</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>mNotifiedLoadAborted(false),</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>mBuffer(nullptr),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>mBufferLength(0),</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>mMPDReaderThread(nullptr),</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>mPrincipal(nullptr),</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>mDASHReader(nullptr),</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>mAudioRepDecoder(nullptr),</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>mVideoRepDecoder(nullptr)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>MOZ_COUNT_CTOR(DASHDecoder);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">DASHDecoder::~DASHDecoder()</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>MOZ_COUNT_DTOR(DASHDecoder);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">MediaDecoderStateMachine*</highlight></codeline>
<codeline lineno="164"><highlight class="normal">DASHDecoder::CreateStateMachine()</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MediaDecoderStateMachine(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>mDASHReader);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">DASHDecoder::ReleaseStateMachine()</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>state<sp/>machine<sp/>owns<sp/>mDASHReader,<sp/>remove<sp/>reference<sp/>to<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>mDASHReader<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>MediaDecoder::ReleaseStateMachine();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mAudioRepDecoders.Length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioRepDecoders[i]-&gt;ReleaseStateMachine();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mVideoRepDecoders.Length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>mVideoRepDecoders[i]-&gt;ReleaseStateMachine();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="188"><highlight class="normal">DASHDecoder::Load(MediaResource*<sp/>aResource,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsIStreamListener**<sp/>aStreamListener,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaDecoder*<sp/>aCloneDonor)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>mDASHReader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DASHReader(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>OpenResource(aResource,<sp/>aStreamListener);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>NS_ENSURE_SUCCESS(rv,<sp/>rv);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>mDecoderStateMachine<sp/>=<sp/>CreateStateMachine();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mDecoderStateMachine)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG1(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>state<sp/>machine!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">DASHDecoder::NotifyDownloadEnded(nsresult<sp/>aStatus)</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>be<sp/>no<sp/>download<sp/>ended<sp/>notification<sp/>if<sp/>MPD<sp/>Manager<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mMPDManager)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Network<sp/>Error!<sp/>Repeated<sp/>MPD<sp/>download<sp/>notification<sp/>but<sp/>MPD<sp/>Manager<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[%p]<sp/>already<sp/>exists!&quot;</highlight><highlight class="normal">,<sp/>mMPDManager.get());</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>NetworkError();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_SUCCEEDED(aStatus))<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG1(</highlight><highlight class="stringliteral">&quot;MPD<sp/>downloaded.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mPrincipal<sp/>must<sp/>be<sp/>set<sp/>on<sp/>main<sp/>thread<sp/>before<sp/>dispatch<sp/>to<sp/>parser<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>mPrincipal<sp/>=<sp/>GetCurrentPrincipal();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>reader<sp/>thread<sp/>for<sp/>|ChannelMediaResource|::|Read|.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;DASHDecoder::ReadMPDBuffer);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ENSURE_TRUE(event,<sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>NS_NewNamedThread(</highlight><highlight class="stringliteral">&quot;DASH<sp/>MPD<sp/>Reader&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getter_AddRefs(mMPDReaderThread),</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_THREAD_STACK_SIZE);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv)<sp/>||<sp/>!mMPDReaderThread)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Error<sp/>creating<sp/>MPD<sp/>reader<sp/>thread:<sp/>rv[%x]<sp/>thread<sp/>[%p].&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv,<sp/>mMPDReaderThread.get());</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DecodeError();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStatus<sp/>==<sp/>NS_BINDING_ABORTED)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;MPD<sp/>download<sp/>has<sp/>been<sp/>cancelled<sp/>by<sp/>the<sp/>user:<sp/>aStatus<sp/>[%x].&quot;</highlight><highlight class="normal">,<sp/>aStatus);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mOwner)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mOwner-&gt;LoadAborted();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStatus<sp/>!=<sp/>NS_BASE_STREAM_CLOSED)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Network<sp/>error<sp/>trying<sp/>to<sp/>download<sp/>MPD:<sp/>aStatus<sp/>[%x].&quot;</highlight><highlight class="normal">,<sp/>aStatus);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>NetworkError();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">DASHDecoder::ReadMPDBuffer()</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>not<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>LOG1(</highlight><highlight class="stringliteral">&quot;Started<sp/>reading<sp/>from<sp/>the<sp/>MPD<sp/>buffer.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>int64_t<sp/>length<sp/>=<sp/>mResource-&gt;GetLength();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&lt;=<sp/>0<sp/>||<sp/>length<sp/>&gt;<sp/>DASH_MAX_MPD_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;MPD<sp/>is<sp/>larger<sp/>than<sp/>[%d]MB.&quot;</highlight><highlight class="normal">,<sp/>DASH_MAX_MPD_SIZE/(1024*1024));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>DecodeError();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>mBuffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[length];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>mResource-&gt;Read(mBuffer,<sp/>length,<sp/>&amp;count);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>this<sp/>point,<sp/>all<sp/>bytes<sp/>should<sp/>be<sp/>available<sp/>for<sp/>reading.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv)<sp/>||<sp/>count<sp/>!=<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Error<sp/>reading<sp/>MPD<sp/>buffer:<sp/>rv<sp/>[%x]<sp/>count<sp/>[%d]<sp/>length<sp/>[%d].&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv,<sp/>count,<sp/>length);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>DecodeError();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>buffer<sp/>length<sp/>for<sp/>processing<sp/>on<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>mBufferLength<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(length);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>LOG1(</highlight><highlight class="stringliteral">&quot;Finished<sp/>reading<sp/>MPD<sp/>buffer;<sp/>back<sp/>to<sp/>main<sp/>thread<sp/>for<sp/>parsing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Dispatch<sp/>event<sp/>to<sp/>Main<sp/>thread<sp/>to<sp/>parse<sp/>MPD<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;DASHDecoder::OnReadMPDBufferCompleted);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>rv<sp/>=<sp/>NS_DispatchToMainThread(event,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Error<sp/>dispatching<sp/>parse<sp/>event<sp/>to<sp/>main<sp/>thread:<sp/>rv[%x]&quot;</highlight><highlight class="normal">,<sp/>rv);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>DecodeError();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">DASHDecoder::OnReadMPDBufferCompleted()</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mShuttingDown)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shutdown<sp/>the<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mMPDReaderThread)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG1(</highlight><highlight class="stringliteral">&quot;Error:<sp/>MPD<sp/>reader<sp/>thread<sp/>does<sp/>not<sp/>exist!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>DecodeError();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>mMPDReaderThread-&gt;Shutdown();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;MPD<sp/>reader<sp/>thread<sp/>did<sp/>not<sp/>shutdown<sp/>correctly!<sp/>rv<sp/>[%x]&quot;</highlight><highlight class="normal">,<sp/>rv);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>DecodeError();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>mMPDReaderThread<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>the<sp/>MPD<sp/>resource.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>rv<sp/>=<sp/>mResource<sp/>?<sp/>mResource-&gt;Close()<sp/>:<sp/>NS_ERROR_NULL_POINTER;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Media<sp/>Resource<sp/>did<sp/>not<sp/>close<sp/>correctly!<sp/>rv<sp/>[%x]&quot;</highlight><highlight class="normal">,<sp/>rv);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>NetworkError();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>parsing<sp/>the<sp/>MPD<sp/>data<sp/>and<sp/>loading<sp/>the<sp/>media.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>rv<sp/>=<sp/>ParseMPDBuffer();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>MPD<sp/>buffer!<sp/>rv<sp/>[%x]&quot;</highlight><highlight class="normal">,<sp/>rv);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>DecodeError();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>rv<sp/>=<sp/>CreateRepDecoders();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Error<sp/>creating<sp/>decoders<sp/>for<sp/>Representations!<sp/>rv<sp/>[%x]&quot;</highlight><highlight class="normal">,<sp/>rv);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>DecodeError();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>rv<sp/>=<sp/>LoadRepresentations();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Error<sp/>loading<sp/>Representations!<sp/>rv<sp/>[%x]&quot;</highlight><highlight class="normal">,<sp/>rv);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>NetworkError();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>reader<sp/>that<sp/>it<sp/>can<sp/>start<sp/>reading<sp/>metadata.<sp/>Sub-readers<sp/>will<sp/>still</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>until<sp/>sub-resources<sp/>have<sp/>downloaded<sp/>data<sp/>into<sp/>the<sp/>media<sp/>cache.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>mDASHReader-&gt;ReadyToReadMetadata();</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="352"><highlight class="normal">DASHDecoder::ParseMPDBuffer()</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(mBuffer,<sp/>NS_ERROR_NULL_POINTER);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>LOG1(</highlight><highlight class="stringliteral">&quot;Started<sp/>parsing<sp/>the<sp/>MPD<sp/>buffer.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>MPD<sp/>buffer<sp/>and<sp/>get<sp/>root<sp/>DOM<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>nsAutoPtr&lt;nsDASHMPDParser&gt;<sp/>parser;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>parser<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>nsDASHMPDParser(mBuffer.forget(),<sp/>mBufferLength,<sp/>mPrincipal,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mResource-&gt;URI());</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>mozilla::net::DASHMPDProfile<sp/>profile;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>parser-&gt;Parse(getter_Transfers(mMPDManager),<sp/>&amp;profile);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>mBuffer<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(mMPDManager,<sp/>NS_ERROR_NULL_POINTER);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Finished<sp/>parsing<sp/>the<sp/>MPD<sp/>buffer.<sp/>Profile<sp/>is<sp/>[%d].&quot;</highlight><highlight class="normal">,<sp/>profile);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="374"><highlight class="normal">DASHDecoder::CreateRepDecoders()</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(mMPDManager,<sp/>NS_ERROR_NULL_POINTER);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Global<sp/>settings<sp/>for<sp/>the<sp/>presentation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>int64_t<sp/>startTime<sp/>=<sp/>mMPDManager-&gt;GetStartTime();</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>mDuration<sp/>=<sp/>mMPDManager-&gt;GetDuration();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(startTime<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>mDuration<sp/>&gt;<sp/>0,<sp/>NS_ERROR_ILLEGAL_VALUE);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>audio/video<sp/>stream,<sp/>create<sp/>a<sp/>|ChannelMediaResource|<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mMPDManager-&gt;GetNumAdaptationSets();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>IMPDManager::AdaptationSetType<sp/>asType<sp/>=<sp/>mMPDManager-&gt;GetAdaptationSetType(i);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>mMPDManager-&gt;GetNumRepresentations(i);<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>URL<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsAutoString<sp/>segmentUrl;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>mMPDManager-&gt;GetFirstSegmentUrl(i,<sp/>j,<sp/>segmentUrl);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ENSURE_SUCCESS(rv,<sp/>rv);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>segment<sp/>|nsIURI|;<sp/>use<sp/>MPD&apos;s<sp/>base<sp/>URI<sp/>in<sp/>case<sp/>of<sp/>relative<sp/>paths.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIURI&gt;<sp/>url;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>NS_NewURI(getter_AddRefs(url),<sp/>segmentUrl,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>mResource-&gt;URI());</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ENSURE_SUCCESS(rv,<sp/>rv);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PR_LOGGING</highlight></codeline>
<codeline lineno="399"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsAutoCString<sp/>newUrl;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>url-&gt;GetSpec(newUrl);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ENSURE_SUCCESS(rv,<sp/>rv);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Using<sp/>URL=\&quot;%s\&quot;<sp/>for<sp/>AdaptationSet<sp/>[%d]<sp/>Representation<sp/>[%d]&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newUrl.get(),<sp/>i,<sp/>j);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;file://&apos;<sp/>URLs<sp/>are<sp/>not<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIFileURL&gt;<sp/>fileURL<sp/>=<sp/>do_QueryInterface(url);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ENSURE_FALSE(fileURL,<sp/>NS_ERROR_ILLEGAL_VALUE);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>|DASHRepDecoder|<sp/>objects<sp/>for<sp/>each<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asType<sp/>==<sp/>IMPDManager::DASH_VIDEO_STREAM)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Representation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>rep<sp/>=<sp/>mMPDManager-&gt;GetRepresentation(i,<sp/>j);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_ENSURE_TRUE(rep,<sp/>NS_ERROR_NULL_POINTER);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>CreateVideoRepDecoder(url,<sp/>rep);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_ENSURE_SUCCESS(rv,<sp/>rv);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asType<sp/>==<sp/>IMPDManager::DASH_AUDIO_STREAM)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Representation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>rep<sp/>=<sp/>mMPDManager-&gt;GetRepresentation(i,<sp/>j);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_ENSURE_TRUE(rep,<sp/>NS_ERROR_NULL_POINTER);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>CreateAudioRepDecoder(url,<sp/>rep);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_ENSURE_SUCCESS(rv,<sp/>rv);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(mVideoRepDecoder,<sp/>NS_ERROR_NOT_INITIALIZED);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(mAudioRepDecoder,<sp/>NS_ERROR_NOT_INITIALIZED);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="432"><highlight class="normal">DASHDecoder::CreateAudioRepDecoder(nsIURI*<sp/>aUrl,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mozilla::net::Representation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>aRep)</highlight></codeline>
<codeline lineno="434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>NS_ENSURE_ARG(aUrl);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>NS_ENSURE_ARG(aRep);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(mOwner,<sp/>NS_ERROR_NOT_INITIALIZED);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>subdecoder<sp/>and<sp/>init<sp/>with<sp/>media<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>DASHRepDecoder*<sp/>audioDecoder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DASHRepDecoder(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(audioDecoder-&gt;Init(mOwner),<sp/>NS_ERROR_NOT_INITIALIZED);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioRepDecoder)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioRepDecoder<sp/>=<sp/>audioDecoder;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>mAudioRepDecoders.AppendElement(audioDecoder);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>sub-reader;<sp/>attach<sp/>to<sp/>DASH<sp/>reader<sp/>and<sp/>sub-decoder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>WebMReader*<sp/>audioReader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>WebMReader(audioDecoder);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDASHReader)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>mDASHReader-&gt;AddAudioReader(audioReader);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>audioDecoder-&gt;SetReader(audioReader);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>media<sp/>resource<sp/>with<sp/>URL<sp/>and<sp/>connect<sp/>to<sp/>sub-decoder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>MediaResource*<sp/>audioResource</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>CreateAudioSubResource(aUrl,<sp/>static_cast&lt;MediaDecoder*&gt;(audioDecoder));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(audioResource,<sp/>NS_ERROR_NOT_INITIALIZED);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>audioDecoder-&gt;SetResource(audioResource);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>audioDecoder-&gt;SetMPDRepresentation(aRep);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="468"><highlight class="normal">DASHDecoder::CreateVideoRepDecoder(nsIURI*<sp/>aUrl,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mozilla::net::Representation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>aRep)</highlight></codeline>
<codeline lineno="470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>NS_ENSURE_ARG(aUrl);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>NS_ENSURE_ARG(aRep);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(mOwner,<sp/>NS_ERROR_NOT_INITIALIZED);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>subdecoder<sp/>and<sp/>init<sp/>with<sp/>media<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>DASHRepDecoder*<sp/>videoDecoder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DASHRepDecoder(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(videoDecoder-&gt;Init(mOwner),<sp/>NS_ERROR_NOT_INITIALIZED);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mVideoRepDecoder)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>mVideoRepDecoder<sp/>=<sp/>videoDecoder;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>mVideoRepDecoders.AppendElement(videoDecoder);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>sub-reader;<sp/>attach<sp/>to<sp/>DASH<sp/>reader<sp/>and<sp/>sub-decoder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>WebMReader*<sp/>videoReader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>WebMReader(videoDecoder);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDASHReader)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>mDASHReader-&gt;AddVideoReader(videoReader);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>videoDecoder-&gt;SetReader(videoReader);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>media<sp/>resource<sp/>with<sp/>URL<sp/>and<sp/>connect<sp/>to<sp/>sub-decoder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>MediaResource*<sp/>videoResource</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>CreateVideoSubResource(aUrl,<sp/>static_cast&lt;MediaDecoder*&gt;(videoDecoder));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(videoResource,<sp/>NS_ERROR_NOT_INITIALIZED);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>videoDecoder-&gt;SetResource(videoResource);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>videoDecoder-&gt;SetMPDRepresentation(aRep);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal">MediaResource*</highlight></codeline>
<codeline lineno="504"><highlight class="normal">DASHDecoder::CreateAudioSubResource(nsIURI*<sp/>aUrl,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaDecoder*<sp/>aAudioDecoder)</highlight></codeline>
<codeline lineno="506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(aUrl,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(aAudioDecoder,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>channel<sp/>for<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIChannel&gt;<sp/>channel;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>CreateSubChannel(aUrl,<sp/>getter_AddRefs(channel));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>NS_ENSURE_SUCCESS(rv,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>resource<sp/>for<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>MediaResource*<sp/>audioResource</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>MediaResource::Create(aAudioDecoder,<sp/>channel);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(audioResource,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>audioResource;</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">MediaResource*</highlight></codeline>
<codeline lineno="525"><highlight class="normal">DASHDecoder::CreateVideoSubResource(nsIURI*<sp/>aUrl,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaDecoder*<sp/>aVideoDecoder)</highlight></codeline>
<codeline lineno="527"><highlight class="normal">{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(aUrl,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(aVideoDecoder,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>channel<sp/>for<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIChannel&gt;<sp/>channel;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>CreateSubChannel(aUrl,<sp/>getter_AddRefs(channel));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>NS_ENSURE_SUCCESS(rv,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>resource<sp/>for<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>MediaResource*<sp/>videoResource</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>MediaResource::Create(aVideoDecoder,<sp/>channel);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(videoResource,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>videoResource;</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="546"><highlight class="normal">DASHDecoder::CreateSubChannel(nsIURI*<sp/>aUrl,<sp/>nsIChannel**<sp/>aChannel)</highlight></codeline>
<codeline lineno="547"><highlight class="normal">{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>NS_ENSURE_ARG(aUrl);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(mOwner,<sp/>NS_ERROR_NULL_POINTER);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>nsHTMLMediaElement*<sp/>element<sp/>=<sp/>mOwner-&gt;GetMediaElement();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(element,<sp/>NS_ERROR_NULL_POINTER);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsILoadGroup&gt;<sp/>loadGroup<sp/>=</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>element-&gt;GetDocumentLoadGroup();</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(loadGroup,<sp/>NS_ERROR_NULL_POINTER);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>a<sp/>Content<sp/>Security<sp/>Policy<sp/>to<sp/>pass<sp/>down<sp/>to<sp/>the<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>created<sp/>to<sp/>load<sp/>the<sp/>media<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIChannelPolicy&gt;<sp/>channelPolicy;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIContentSecurityPolicy&gt;<sp/>csp;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>element-&gt;NodePrincipal()-&gt;GetCsp(getter_AddRefs(csp));</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>NS_ENSURE_SUCCESS(rv,rv);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csp)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>channelPolicy<sp/>=<sp/>do_CreateInstance(</highlight><highlight class="stringliteral">&quot;@mozilla.org/nschannelpolicy;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>channelPolicy-&gt;SetContentSecurityPolicy(csp);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>channelPolicy-&gt;SetLoadType(nsIContentPolicy::TYPE_MEDIA);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIChannel&gt;<sp/>channel;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>rv<sp/>=<sp/>NS_NewChannel(getter_AddRefs(channel),</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aUrl,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loadGroup,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsICachingChannel::LOAD_BYPASS_LOCAL_CACHE_IF_BUSY,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channelPolicy);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>NS_ENSURE_SUCCESS(rv,rv);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(channel,<sp/>NS_ERROR_NULL_POINTER);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>NS_ADDREF(*aChannel<sp/>=<sp/>channel);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="586"><highlight class="normal">DASHDecoder::LoadRepresentations()</highlight></codeline>
<codeline lineno="587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>nsresult<sp/>rv;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hold<sp/>the<sp/>lock<sp/>while<sp/>we<sp/>do<sp/>this<sp/>to<sp/>set<sp/>proper<sp/>lock<sp/>ordering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expectations<sp/>for<sp/>dynamic<sp/>deadlock<sp/>detectors:<sp/>decoder<sp/>lock(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>grabbed<sp/>before<sp/>the<sp/>cache<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(GetReentrantMonitor());</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>the<sp/>decoders<sp/>for<sp/>each<sp/>|Representation|&apos;s<sp/>media<sp/>streams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAudioRepDecoder)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>mAudioRepDecoder-&gt;Load();</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ENSURE_SUCCESS(rv,<sp/>rv);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mVideoRepDecoder)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>mVideoRepDecoder-&gt;Load();</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ENSURE_SUCCESS(rv,<sp/>rv);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>stream!<sp/>rv<sp/>[%x].&quot;</highlight><highlight class="normal">,<sp/>rv);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAudioRepDecoder)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioRepDecoder-&gt;SetStateMachine(mDecoderStateMachine);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mVideoRepDecoder)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>mVideoRepDecoder-&gt;SetStateMachine(mDecoderStateMachine);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>that<sp/>subreaders<sp/>are<sp/>init&apos;d,<sp/>it&apos;s<sp/>ok<sp/>to<sp/>init<sp/>state<sp/>machine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InitializeStateMachine(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">DASHDecoder::NotifyDownloadEnded(DASHRepDecoder*<sp/>aRepDecoder,</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsresult<sp/>aStatus,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaByteRange<sp/>&amp;aRange)</highlight></codeline>
<codeline lineno="627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MPD<sp/>Manager<sp/>must<sp/>exist,<sp/>indicating<sp/>MPD<sp/>has<sp/>been<sp/>downloaded<sp/>and<sp/>parsed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mMPDManager)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG1(</highlight><highlight class="stringliteral">&quot;Network<sp/>Error!<sp/>MPD<sp/>Manager<sp/>must<sp/>exist,<sp/>indicating<sp/>MPD<sp/>has<sp/>been<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;downloaded<sp/>and<sp/>parsed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>NetworkError();</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Decoder<sp/>for<sp/>the<sp/>media<sp/>|Representation|<sp/>must<sp/>not<sp/>be<sp/>null.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!aRepDecoder)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG1(</highlight><highlight class="stringliteral">&quot;Decoder<sp/>for<sp/>Representation<sp/>is<sp/>reported<sp/>as<sp/>null.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>DecodeError();</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_SUCCEEDED(aStatus))<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>error<sp/>if<sp/>|aRepDecoder|<sp/>does<sp/>not<sp/>match<sp/>current<sp/>audio/video<sp/>decoder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aRepDecoder<sp/>!=<sp/>mAudioRepDecoder<sp/>&amp;&amp;<sp/>aRepDecoder<sp/>!=<sp/>mVideoRepDecoder)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Error!<sp/>Decoder<sp/>[%p]<sp/>does<sp/>not<sp/>match<sp/>current<sp/>sub-decoders!&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aRepDecoder);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DecodeError();</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Byte<sp/>range<sp/>downloaded:<sp/>decoder<sp/>[%p]<sp/>range<sp/>requested<sp/>[%d<sp/>-<sp/>%d]&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aRepDecoder,<sp/>aRange.mStart,<sp/>aRange.mEnd);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>Do<sp/>Stream<sp/>Switching<sp/>here<sp/>before<sp/>loading<sp/>next<sp/>bytes,<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decoder<sp/>=<sp/>PossiblySwitchDecoder(aRepDecoder);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decoder-&gt;LoadNextByteRange();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>aRepDecoder-&gt;LoadNextByteRange();</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStatus<sp/>==<sp/>NS_BINDING_ABORTED)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;MPD<sp/>download<sp/>has<sp/>been<sp/>cancelled<sp/>by<sp/>the<sp/>user:<sp/>aStatus<sp/>[%x].&quot;</highlight><highlight class="normal">,<sp/>aStatus);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mOwner)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mOwner-&gt;LoadAborted();</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aStatus<sp/>!=<sp/>NS_BASE_STREAM_CLOSED)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Network<sp/>error<sp/>trying<sp/>to<sp/>download<sp/>MPD:<sp/>aStatus<sp/>[%x].&quot;</highlight><highlight class="normal">,<sp/>aStatus);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>NetworkError();</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal">DASHDecoder::LoadAborted()</highlight></codeline>
<codeline lineno="675"><highlight class="normal">{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mNotifiedLoadAborted<sp/>&amp;&amp;<sp/>mOwner)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>mOwner-&gt;LoadAborted();</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>mNotifiedLoadAborted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG1(</highlight><highlight class="stringliteral">&quot;Load<sp/>Aborted!<sp/>Notifying<sp/>media<sp/>element.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal">DASHDecoder::Shutdown()</highlight></codeline>
<codeline lineno="687"><highlight class="normal">{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>main<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>reader<sp/>of<sp/>shutdown<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDASHReader)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>mDASHReader-&gt;NotifyDecoderShuttingDown();</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>parent<sp/>class<sp/>shutdown.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>MediaDecoder::Shutdown();</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>NS_ENSURE_TRUE(mShuttingDown,<sp/>);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shutdown<sp/>reader<sp/>thread<sp/>if<sp/>not<sp/>already<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mMPDReaderThread)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>mMPDReaderThread-&gt;Shutdown();</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ENSURE_SUCCESS(rv,<sp/>);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>mMPDReaderThread<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Forward<sp/>to<sp/>sub-decoders.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mAudioRepDecoders.Length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAudioRepDecoders[i])<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mAudioRepDecoders[i]-&gt;Shutdown();</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mVideoRepDecoders.Length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mVideoRepDecoders[i])<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mVideoRepDecoders[i]-&gt;Shutdown();</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal">DASHDecoder::DecodeError()</highlight></codeline>
<codeline lineno="721"><highlight class="normal">{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_IsMainThread())<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaDecoder::DecodeError();</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;MediaDecoder::DecodeError);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>NS_DispatchToMainThread(event,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(</highlight><highlight class="stringliteral">&quot;Error<sp/>dispatching<sp/>DecodeError<sp/>event<sp/>to<sp/>main<sp/>thread:<sp/>rv[%x]&quot;</highlight><highlight class="normal">,<sp/>rv);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mozilla</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/tools/mozilla-release/content/media/dash/DASHDecoder.cpp"/>
  </compounddef>
</doxygen>
