<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="_g_streamer_reader_8cpp" kind="file">
    <compoundname>GStreamerReader.cpp</compoundname>
    <includes local="yes">nsError.h</includes>
    <includes local="yes">MediaDecoderStateMachine.h</includes>
    <includes local="yes">MediaDecoder.h</includes>
    <includes local="yes">MediaResource.h</includes>
    <includes local="yes">GStreamerReader.h</includes>
    <includes local="yes">VideoUtils.h</includes>
    <includes local="yes">nsTimeRanges.h</includes>
    <includes local="yes">mozilla/Preferences.h</includes>
    <incdepgraph>
      <node id="160">
        <label>nsError.h</label>
      </node>
      <node id="166">
        <label>nsTimeRanges.h</label>
      </node>
      <node id="164">
        <label>GStreamerReader.h</label>
      </node>
      <node id="163">
        <label>MediaResource.h</label>
      </node>
      <node id="165">
        <label>VideoUtils.h</label>
      </node>
      <node id="161">
        <label>MediaDecoderStateMachine.h</label>
      </node>
      <node id="162">
        <label>MediaDecoder.h</label>
      </node>
      <node id="167">
        <label>mozilla/Preferences.h</label>
      </node>
      <node id="159">
        <label>C:/tools/mozilla-release/content/media/gstreamer/GStreamerReader.cpp</label>
        <link refid="GStreamerReader.cpp"/>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacemozilla">mozilla</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_g_streamer_reader_8cpp_1ae6e4cd49afe9deda788f4f9ee6ce4536" prot="public" static="no">
        <name>LOG</name>
        <param><defname>type</defname></param>
        <param><defname>msg</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/gstreamer/GStreamerReader.cpp" line="27" bodyfile="C:/tools/mozilla-release/content/media/gstreamer/GStreamerReader.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>Mode:<sp/>C++;<sp/>tab-width:<sp/>2;<sp/>indent-tabs-mode:<sp/>nil;<sp/>c-basic-offset:<sp/>2<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>ts=2<sp/>sw=2<sp/>sts=2<sp/>et<sp/>cindent:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>Source<sp/>Code<sp/>Form<sp/>is<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Mozilla<sp/>Public</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>License,<sp/>v.<sp/>2.0.<sp/>If<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>MPL<sp/>was<sp/>not<sp/>distributed<sp/>with<sp/>this<sp/>file,</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>You<sp/>can<sp/>obtain<sp/>one<sp/>at<sp/>http://mozilla.org/MPL/2.0/.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsError.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MediaDecoderStateMachine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MediaDecoder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MediaResource.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GStreamerReader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;VideoUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsTimeRanges.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/Preferences.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mozilla<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">layers;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Un-comment<sp/>to<sp/>enable<sp/>logging<sp/>of<sp/>seek<sp/>bisections.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>SEEK_LOGGING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PR_LOGGING</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>PRLogModuleInfo*<sp/>gMediaDecoderLog;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG(type,<sp/>msg)<sp/>PR_LOG(gMediaDecoderLog,<sp/>type,<sp/>msg)</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LOG(type,<sp/>msg)</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAX_CHANNELS<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Let<sp/>the<sp/>demuxer<sp/>work<sp/>in<sp/>pull<sp/>mode<sp/>for<sp/>short<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SHORT_FILE_SIZE<sp/>=<sp/>1024<sp/>*<sp/>1024;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>resource-&gt;Read()<sp/>size<sp/>when<sp/>working<sp/>in<sp/>push<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DEFAULT_SOURCE_READ_SIZE<sp/>=<sp/>50<sp/>*<sp/>1024;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>GST_PLAY_FLAG_VIDEO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>0),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>GST_PLAY_FLAG_AUDIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>1),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>GST_PLAY_FLAG_TEXT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>2),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>GST_PLAY_FLAG_VIS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>3),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>GST_PLAY_FLAG_SOFT_VOLUME<sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>4),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>GST_PLAY_FLAG_NATIVE_AUDIO<sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>5),</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>GST_PLAY_FLAG_NATIVE_VIDEO<sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>6),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>GST_PLAY_FLAG_DOWNLOAD<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>7),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>GST_PLAY_FLAG_BUFFERING<sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>8),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>GST_PLAY_FLAG_DEINTERLACE<sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>9),</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>GST_PLAY_FLAG_SOFT_COLORBALANCE<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>10)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}<sp/>PlayFlags;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">GStreamerReader::GStreamerReader(MediaDecoder*<sp/>aDecoder)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>:<sp/>MediaDecoderReader(aDecoder),</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>mPlayBin(NULL),</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>mBus(NULL),</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>mSource(NULL),</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>mVideoSink(NULL),</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>mVideoAppSink(NULL),</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>mAudioSink(NULL),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>mAudioAppSink(NULL),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>mFormat(GST_VIDEO_FORMAT_UNKNOWN),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>mVideoSinkBufferCount(0),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>mAudioSinkBufferCount(0),</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>mGstThreadsMonitor(</highlight><highlight class="stringliteral">&quot;media.gst.threads&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>mReachedEos(false),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>mByteOffset(0),</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>mLastReportedByteOffset(0),</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>fpsNum(0),</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>fpsDen(0)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>MOZ_COUNT_CTOR(GStreamerReader);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>mSrcCallbacks.need_data<sp/>=<sp/>GStreamerReader::NeedDataCb;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>mSrcCallbacks.enough_data<sp/>=<sp/>GStreamerReader::EnoughDataCb;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>mSrcCallbacks.seek_data<sp/>=<sp/>GStreamerReader::SeekDataCb;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>mSinkCallbacks.eos<sp/>=<sp/>GStreamerReader::EosCb;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>mSinkCallbacks.new_preroll<sp/>=<sp/>GStreamerReader::NewPrerollCb;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>mSinkCallbacks.new_buffer<sp/>=<sp/>GStreamerReader::NewBufferCb;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>mSinkCallbacks.new_buffer_list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>gst_segment_init(&amp;mVideoSegment,<sp/>GST_FORMAT_UNDEFINED);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>gst_segment_init(&amp;mAudioSegment,<sp/>GST_FORMAT_UNDEFINED);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">GStreamerReader::~GStreamerReader()</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>MOZ_COUNT_DTOR(GStreamerReader);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>ResetDecode();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mPlayBin)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>gst_app_src_end_of_stream(mSource);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>gst_element_set_state(mPlayBin,<sp/>GST_STATE_NULL);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>gst_object_unref(mPlayBin);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>mPlayBin<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>mVideoSink<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>mVideoAppSink<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioSink<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioAppSink<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>gst_object_unref(mBus);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>mBus<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">nsresult<sp/>GStreamerReader::Init(MediaDecoderReader*<sp/>aCloneDonor)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>GError<sp/>*error<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gst_init_check(0,<sp/>0,<sp/>&amp;error))<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_ERROR,<sp/>(</highlight><highlight class="stringliteral">&quot;gst<sp/>initialization<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>error-&gt;message));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>g_error_free(error);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>mPlayBin<sp/>=<sp/>gst_element_factory_make(</highlight><highlight class="stringliteral">&quot;playbin2&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mPlayBin<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_ERROR,<sp/>(</highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>create<sp/>playbin2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>g_object_set(mPlayBin,<sp/></highlight><highlight class="stringliteral">&quot;buffer-size&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>mBus<sp/>=<sp/>gst_pipeline_get_bus(GST_PIPELINE(mPlayBin));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>mVideoSink<sp/>=<sp/>gst_parse_bin_from_description(</highlight><highlight class="stringliteral">&quot;capsfilter<sp/>name=filter<sp/>!<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;appsink<sp/>name=videosink<sp/>sync=true<sp/>max-buffers=1<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;caps=video/x-raw-yuv,format=(fourcc)I420&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>TRUE,<sp/>NULL);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>mVideoAppSink<sp/>=<sp/>GST_APP_SINK(gst_bin_get_by_name(GST_BIN(mVideoSink),</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;videosink&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>gst_app_sink_set_callbacks(mVideoAppSink,<sp/>&amp;mSinkCallbacks,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(gpointer)<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>GstPad<sp/>*sinkpad<sp/>=<sp/>gst_element_get_pad(GST_ELEMENT(mVideoAppSink),<sp/></highlight><highlight class="stringliteral">&quot;sink&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>gst_pad_add_event_probe(sinkpad,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_CALLBACK(&amp;GStreamerReader::EventProbeCb),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>gst_object_unref(sinkpad);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>mAudioSink<sp/>=<sp/>gst_parse_bin_from_description(</highlight><highlight class="stringliteral">&quot;capsfilter<sp/>name=filter<sp/>!<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">#ifdef<sp/>MOZ_SAMPLE_TYPE_FLOAT32</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;appsink<sp/>name=audiosink<sp/>sync=true<sp/>caps=audio/x-raw-float,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">#ifdef<sp/>IS_LITTLE_ENDIAN</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;channels={1,2},rate=44100,width=32,endianness=1234&quot;</highlight><highlight class="normal">,<sp/>TRUE,<sp/>NULL);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;channels={1,2},rate=44100,width=32,endianness=4321&quot;</highlight><highlight class="normal">,<sp/>TRUE,<sp/>NULL);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;appsink<sp/>name=audiosink<sp/>sync=true<sp/>caps=audio/x-raw-int,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IS_LITTLE_ENDIAN</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;channels={1,2},rate=48000,width=16,endianness=1234&quot;</highlight><highlight class="normal">,<sp/>TRUE,<sp/>NULL);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;channels={1,2},rate=48000,width=16,endianness=4321&quot;</highlight><highlight class="normal">,<sp/>TRUE,<sp/>NULL);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>mAudioAppSink<sp/>=<sp/>GST_APP_SINK(gst_bin_get_by_name(GST_BIN(mAudioSink),</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;audiosink&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>gst_app_sink_set_callbacks(mAudioAppSink,<sp/>&amp;mSinkCallbacks,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(gpointer)<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>sinkpad<sp/>=<sp/>gst_element_get_pad(GST_ELEMENT(mAudioAppSink),<sp/></highlight><highlight class="stringliteral">&quot;sink&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>gst_pad_add_event_probe(sinkpad,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_CALLBACK(&amp;GStreamerReader::EventProbeCb),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>gst_object_unref(sinkpad);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>g_object_set(mPlayBin,<sp/></highlight><highlight class="stringliteral">&quot;uri&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;appsrc://&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;video-sink&quot;</highlight><highlight class="normal">,<sp/>mVideoSink,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;audio-sink&quot;</highlight><highlight class="normal">,<sp/>mAudioSink,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>g_object_connect(mPlayBin,<sp/></highlight><highlight class="stringliteral">&quot;signal::source-setup&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GStreamerReader::PlayBinSourceSetupCb,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GStreamerReader::PlayBinSourceSetupCb(GstElement<sp/>*aPlayBin,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GstElement<sp/>*aSource,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpointer<sp/>aUserData)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>GStreamerReader<sp/>*reader<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">GStreamerReader*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(aUserData);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>reader-&gt;PlayBinSourceSetup(GST_APP_SRC(aSource));</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GStreamerReader::PlayBinSourceSetup(GstAppSrc<sp/>*aSource)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>mSource<sp/>=<sp/>GST_APP_SRC(aSource);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>gst_app_src_set_callbacks(mSource,<sp/>&amp;mSrcCallbacks,<sp/>(gpointer)<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>MediaResource*<sp/>resource<sp/>=<sp/>mDecoder-&gt;GetResource();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>int64_t<sp/>len<sp/>=<sp/>resource-&gt;GetLength();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>gst_app_src_set_size(mSource,<sp/>len);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resource-&gt;IsDataCachedToEndOfResource(0)<sp/>||</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(len<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>len<sp/>&lt;=<sp/>SHORT_FILE_SIZE))<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>let<sp/>the<sp/>demuxer<sp/>work<sp/>in<sp/>pull<sp/>mode<sp/>for<sp/>local<sp/>files<sp/>(or<sp/>very<sp/>short<sp/>files)</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>so<sp/>that<sp/>we<sp/>get<sp/>optimal<sp/>seeking<sp/>accuracy/performance</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_ERROR,<sp/>(</highlight><highlight class="stringliteral">&quot;configuring<sp/>random<sp/>access&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>gst_app_src_set_stream_type(mSource,<sp/>GST_APP_STREAM_TYPE_RANDOM_ACCESS);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>the<sp/>demuxer<sp/>work<sp/>in<sp/>push<sp/>mode<sp/>so<sp/>that<sp/>seeking<sp/>is<sp/>kept<sp/>to<sp/>a<sp/>minimum</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>gst_app_src_set_stream_type(mSource,<sp/>GST_APP_STREAM_TYPE_SEEKABLE);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">nsresult<sp/>GStreamerReader::ReadMetadata(nsVideoInfo*<sp/>aInfo,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MetadataTags**<sp/>aTags)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mDecoder-&gt;OnDecodeThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>nsresult<sp/>ret<sp/>=<sp/>NS_OK;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>do<sp/>3<sp/>attempts<sp/>here:<sp/>decoding<sp/>audio<sp/>and<sp/>video,<sp/>decoding<sp/>video<sp/>only,</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/>*<sp/>decoding<sp/>audio<sp/>only.<sp/>This<sp/>allows<sp/>us<sp/>to<sp/>play<sp/>streams<sp/>that<sp/>have<sp/>one<sp/>broken</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/>*<sp/>stream<sp/>but<sp/>that<sp/>are<sp/>otherwise<sp/>decodeable.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>guint<sp/>flags[3]<sp/>=<sp/>{GST_PLAY_FLAG_VIDEO|GST_PLAY_FLAG_AUDIO,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">guint</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(~GST_PLAY_FLAG_AUDIO),<sp/>static_cast&lt;guint&gt;(~GST_PLAY_FLAG_VIDEO)};</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>guint<sp/>default_flags,<sp/>current_flags;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>g_object_get(mPlayBin,<sp/></highlight><highlight class="stringliteral">&quot;flags&quot;</highlight><highlight class="normal">,<sp/>&amp;default_flags,<sp/>NULL);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>GstMessage<sp/>*message<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>G_N_ELEMENTS(flags);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>current_flags<sp/>=<sp/>default_flags<sp/>&amp;<sp/>flags[i];</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>g_object_set(G_OBJECT(mPlayBin),<sp/></highlight><highlight class="stringliteral">&quot;flags&quot;</highlight><highlight class="normal">,<sp/>current_flags,<sp/>NULL);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reset<sp/>filter<sp/>caps<sp/>to<sp/>ANY<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>GstCaps<sp/>*caps<sp/>=<sp/>gst_caps_new_any();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>GstElement<sp/>*filter<sp/>=<sp/>gst_bin_get_by_name(GST_BIN(mAudioSink),<sp/></highlight><highlight class="stringliteral">&quot;filter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>g_object_set(filter,<sp/></highlight><highlight class="stringliteral">&quot;caps&quot;</highlight><highlight class="normal">,<sp/>caps,<sp/>NULL);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>gst_object_unref(filter);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>filter<sp/>=<sp/>gst_bin_get_by_name(GST_BIN(mVideoSink),<sp/></highlight><highlight class="stringliteral">&quot;filter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>g_object_set(filter,<sp/></highlight><highlight class="stringliteral">&quot;caps&quot;</highlight><highlight class="normal">,<sp/>caps,<sp/>NULL);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>gst_object_unref(filter);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>gst_caps_unref(caps);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>filter<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(current_flags<sp/>&amp;<sp/>GST_PLAY_FLAG_AUDIO))</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filter<sp/>=<sp/>gst_bin_get_by_name(GST_BIN(mAudioSink),<sp/></highlight><highlight class="stringliteral">&quot;filter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(current_flags<sp/>&amp;<sp/>GST_PLAY_FLAG_VIDEO))</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filter<sp/>=<sp/>gst_bin_get_by_name(GST_BIN(mVideoSink),<sp/></highlight><highlight class="stringliteral">&quot;filter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Little<sp/>trick:<sp/>set<sp/>the<sp/>target<sp/>caps<sp/>to<sp/>&quot;skip&quot;<sp/>so<sp/>that<sp/>playbin2<sp/>fails<sp/>to</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>find<sp/>a<sp/>decoder<sp/>for<sp/>the<sp/>stream<sp/>we<sp/>want<sp/>to<sp/>skip.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GstCaps<sp/>*filterCaps<sp/>=<sp/>gst_caps_new_simple<sp/>(</highlight><highlight class="stringliteral">&quot;skip&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_object_set(filter,<sp/></highlight><highlight class="stringliteral">&quot;caps&quot;</highlight><highlight class="normal">,<sp/>filterCaps,<sp/>NULL);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gst_caps_unref(filterCaps);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gst_object_unref(filter);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>start<sp/>the<sp/>pipeline<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>gst_element_set_state(mPlayBin,<sp/>GST_STATE_PAUSED);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>for<sp/>ASYNC_DONE,<sp/>which<sp/>is<sp/>emitted<sp/>when<sp/>the<sp/>pipeline<sp/>is<sp/>built,</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>prerolled<sp/>and<sp/>ready<sp/>to<sp/>play.<sp/>Also<sp/>watch<sp/>for<sp/>errors.</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>=<sp/>gst_bus_timed_pop_filtered(mBus,<sp/>GST_CLOCK_TIME_NONE,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GstMessageType)(GST_MESSAGE_ASYNC_DONE<sp/>|<sp/>GST_MESSAGE_ERROR));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GST_MESSAGE_TYPE(message)<sp/>==<sp/>GST_MESSAGE_ERROR)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GError<sp/>*error;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gchar<sp/>*debug;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gst_message_parse_error(message,<sp/>&amp;error,<sp/>&amp;debug);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_ERROR,<sp/>(</highlight><highlight class="stringliteral">&quot;read<sp/>metadata<sp/>error:<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>error-&gt;message,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_error_free(error);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_free(debug);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gst_element_set_state(mPlayBin,<sp/>GST_STATE_NULL);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gst_message_unref(message);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gst_message_unref(message);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>NS_OK;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(ret))</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>couldn&apos;t<sp/>get<sp/>this<sp/>to<sp/>play<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>workaround<sp/>for<sp/>a<sp/>bug<sp/>in<sp/>matroskademux.<sp/>This<sp/>seek<sp/>makes<sp/>matroskademux</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/><sp/>*<sp/>parse<sp/>the<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gst_element_seek_simple(mPlayBin,<sp/>GST_FORMAT_TIME,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GST_SEEK_FLAG_FLUSH,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>after<sp/>a<sp/>seek<sp/>we<sp/>need<sp/>to<sp/>wait<sp/>again<sp/>for<sp/>ASYNC_DONE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>=<sp/>gst_bus_timed_pop_filtered(mBus,<sp/>GST_CLOCK_TIME_NONE,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GstMessageType)(GST_MESSAGE_ASYNC_DONE<sp/>|<sp/>GST_MESSAGE_ERROR));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GST_MESSAGE_TYPE(message)<sp/>==<sp/>GST_MESSAGE_ERROR)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gst_element_set_state(mPlayBin,<sp/>GST_STATE_NULL);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gst_message_unref(message);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>report<sp/>the<sp/>duration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>gint64<sp/>duration;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>GstFormat<sp/>format<sp/>=<sp/>GST_FORMAT_TIME;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gst_element_query_duration(GST_ELEMENT(mPlayBin),</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;format,<sp/>&amp;duration)<sp/>&amp;&amp;<sp/>format<sp/>==<sp/>GST_FORMAT_TIME)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;returning<sp/>duration<sp/>%&quot;</highlight><highlight class="normal"><sp/>GST_TIME_FORMAT,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GST_TIME_ARGS<sp/>(duration)));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>GST_TIME_AS_USECONDS<sp/>(duration);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder-&gt;GetStateMachine()-&gt;SetDuration(duration);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_video<sp/>=<sp/>0,<sp/>n_audio<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>g_object_get(mPlayBin,<sp/></highlight><highlight class="stringliteral">&quot;n-video&quot;</highlight><highlight class="normal">,<sp/>&amp;n_video,<sp/></highlight><highlight class="stringliteral">&quot;n-audio&quot;</highlight><highlight class="normal">,<sp/>&amp;n_audio,<sp/>NULL);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>mInfo.mHasVideo<sp/>=<sp/>n_video<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>mInfo.mHasAudio<sp/>=<sp/>n_audio<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>*aInfo<sp/>=<sp/>mInfo;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>*aTags<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>the<sp/>pipeline<sp/>to<sp/>PLAYING<sp/>so<sp/>that<sp/>it<sp/>starts<sp/>decoding<sp/>and<sp/>queueing<sp/>data<sp/>in</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>appsinks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>gst_element_set_state(mPlayBin,<sp/>GST_STATE_PLAYING);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">nsresult<sp/>GStreamerReader::ResetDecode()</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>nsresult<sp/>res<sp/>=<sp/>NS_OK;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(MediaDecoderReader::ResetDecode()))<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>mVideoQueue.Reset();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>mAudioQueue.Reset();</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>mVideoSinkBufferCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>mAudioSinkBufferCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>mReachedEos<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>mLastReportedByteOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>mByteOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GStreamerReader::NotifyBytesConsumed()</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mByteOffset<sp/>&gt;=<sp/>mLastReportedByteOffset,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;current<sp/>byte<sp/>offset<sp/>less<sp/>than<sp/>prev<sp/>offset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>mDecoder-&gt;NotifyBytesConsumed(mByteOffset<sp/>-<sp/>mLastReportedByteOffset);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>mLastReportedByteOffset<sp/>=<sp/>mByteOffset;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GStreamerReader::WaitForDecodedData(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*aCounter)</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mGstThreadsMonitor);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>consumed<sp/>bytes<sp/>from<sp/>here<sp/>as<sp/>we<sp/>can&apos;t<sp/>do<sp/>it<sp/>from<sp/>gst<sp/>threads<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>NotifyBytesConsumed();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(*aCounter<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mReachedEos)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>mon.Wait();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>NotifyBytesConsumed();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>(*aCounter)--;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GStreamerReader::DecodeAudioData()</highlight></codeline>
<codeline lineno="365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mDecoder-&gt;OnDecodeThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!WaitForDecodedData(&amp;mAudioSinkBufferCount))<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioQueue.Finish();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>GstBuffer<sp/>*buffer<sp/>=<sp/>gst_app_sink_pull_buffer(mAudioAppSink);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>int64_t<sp/>timestamp<sp/>=<sp/>GST_BUFFER_TIMESTAMP(buffer);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>timestamp<sp/>=<sp/>gst_segment_to_stream_time(&amp;mAudioSegment,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GST_FORMAT_TIME,<sp/>timestamp);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>timestamp<sp/>=<sp/>GST_TIME_AS_USECONDS(timestamp);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>int64_t<sp/>duration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GST_CLOCK_TIME_IS_VALID(GST_BUFFER_DURATION(buffer)))</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>GST_TIME_AS_USECONDS(GST_BUFFER_DURATION(buffer));</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>int64_t<sp/>offset<sp/>=<sp/>GST_BUFFER_OFFSET(buffer);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>GST_BUFFER_SIZE(buffer);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>int32_t<sp/>frames<sp/>=<sp/>(size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(AudioDataValue))<sp/>/<sp/>mInfo.mAudioChannels;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>ssize_t<sp/>outSize<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(AudioDataValue));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>nsAutoArrayPtr&lt;AudioDataValue&gt;<sp/>data(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AudioDataValue[outSize]);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>memcpy(data,<sp/>GST_BUFFER_DATA(buffer),<sp/>GST_BUFFER_SIZE(buffer));</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>AudioData<sp/>*audio<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AudioData(offset,<sp/>timestamp,<sp/>duration,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frames,<sp/>data.forget(),<sp/>mInfo.mAudioChannels);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>mAudioQueue.Push(audio);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>gst_buffer_unref(buffer);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAudioQueue.GetSize()<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(mDecoder,<sp/>&amp;MediaDecoder::NextFrameAvailable);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(event,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GStreamerReader::DecodeVideoFrame(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;aKeyFrameSkip,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>aTimeThreshold)</highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mDecoder-&gt;OnDecodeThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>GstBuffer<sp/>*buffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>int64_t<sp/>timestamp,<sp/>nextTimestamp;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!WaitForDecodedData(&amp;mVideoSinkBufferCount))<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mVideoQueue.Finish();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder-&gt;GetFrameStatistics().NotifyDecodedFrames(0,<sp/>1);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>gst_app_sink_pull_buffer(mVideoAppSink);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isKeyframe<sp/>=<sp/>!GST_BUFFER_FLAG_IS_SET(buffer,<sp/>GST_BUFFER_FLAG_DISCONT);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((aKeyFrameSkip<sp/>&amp;&amp;<sp/>!isKeyframe))<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gst_buffer_unref(buffer);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>timestamp<sp/>=<sp/>GST_BUFFER_TIMESTAMP(buffer);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mGstThreadsMonitor);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timestamp<sp/>=<sp/>gst_segment_to_stream_time(&amp;mVideoSegment,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GST_FORMAT_TIME,<sp/>timestamp);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(GST_CLOCK_TIME_IS_VALID(timestamp),</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;frame<sp/>has<sp/>invalid<sp/>timestamp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>timestamp<sp/>=<sp/>nextTimestamp<sp/>=<sp/>GST_TIME_AS_USECONDS(timestamp);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GST_CLOCK_TIME_IS_VALID(GST_BUFFER_DURATION(buffer)))</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextTimestamp<sp/>+=<sp/>GST_TIME_AS_USECONDS(GST_BUFFER_DURATION(buffer));</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fpsNum<sp/>&amp;&amp;<sp/>fpsDen)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>add<sp/>1-frame<sp/>duration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextTimestamp<sp/>+=<sp/>gst_util_uint64_scale(GST_USECOND,<sp/>fpsNum,<sp/>fpsDen);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timestamp<sp/>&lt;<sp/>aTimeThreshold)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;skipping<sp/>frame<sp/>%&quot;</highlight><highlight class="normal"><sp/>GST_TIME_FORMAT</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>threshold<sp/>%&quot;</highlight><highlight class="normal"><sp/>GST_TIME_FORMAT,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GST_TIME_ARGS(timestamp),<sp/>GST_TIME_ARGS(aTimeThreshold)));</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gst_buffer_unref(buffer);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>more<sp/>frames<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>guint8<sp/>*data<sp/>=<sp/>GST_BUFFER_DATA(buffer);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>mPicture.width;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>mPicture.height;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>GstVideoFormat<sp/>format<sp/>=<sp/>mFormat;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>VideoData::YCbCrBuffer<sp/>b;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>b.mPlanes[i].mData<sp/>=<sp/>data<sp/>+<sp/>gst_video_format_get_component_offset(format,<sp/>i,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>b.mPlanes[i].mStride<sp/>=<sp/>gst_video_format_get_row_stride(format,<sp/>i,<sp/>width);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>b.mPlanes[i].mHeight<sp/>=<sp/>gst_video_format_get_component_height(format,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>height);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>b.mPlanes[i].mWidth<sp/>=<sp/>gst_video_format_get_component_width(format,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>width);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>b.mPlanes[i].mOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>b.mPlanes[i].mSkip<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isKeyframe<sp/>=<sp/>!GST_BUFFER_FLAG_IS_SET(buffer,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GST_BUFFER_FLAG_DELTA_UNIT);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>XXX<sp/>?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>int64_t<sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>VideoData<sp/>*video<sp/>=<sp/>VideoData::Create(mInfo,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder-&gt;GetImageContainer(),</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timestamp,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextTimestamp,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isKeyframe,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mPicture);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>mVideoQueue.Push(video);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>gst_buffer_unref(buffer);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mVideoQueue.GetSize()<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_NewRunnableMethod(mDecoder,<sp/>&amp;MediaDecoder::NextFrameAvailable);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(event,<sp/>NS_DISPATCH_NORMAL);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal">nsresult<sp/>GStreamerReader::Seek(int64_t<sp/>aTarget,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>aStartTime,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>aEndTime,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>aCurrentTime)</highlight></codeline>
<codeline lineno="505"><highlight class="normal">{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mDecoder-&gt;OnDecodeThread(),<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>on<sp/>decode<sp/>thread.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>gint64<sp/>seekPos<sp/>=<sp/>aTarget<sp/>*<sp/>GST_USECOND;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;%p<sp/>About<sp/>to<sp/>seek<sp/>to<sp/>%&quot;</highlight><highlight class="normal"><sp/>GST_TIME_FORMAT,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder,<sp/>GST_TIME_ARGS(seekPos)));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gst_element_seek_simple(mPlayBin,<sp/>GST_FORMAT_TIME,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;GstSeekFlags&gt;(GST_SEEK_FLAG_FLUSH<sp/>|<sp/>GST_SEEK_FLAG_ACCURATE),<sp/>seekPos))<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_ERROR,<sp/>(</highlight><highlight class="stringliteral">&quot;seek<sp/>failed&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;seek<sp/>succeeded&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DecodeToTarget(aTarget);</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal">nsresult<sp/>GStreamerReader::GetBuffered(nsTimeRanges*<sp/>aBuffered,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>aStartTime)</highlight></codeline>
<codeline lineno="524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mInfo.mHasVideo<sp/>&amp;&amp;<sp/>!mInfo.mHasAudio)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>GstFormat<sp/>format<sp/>=<sp/>GST_FORMAT_TIME;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>MediaResource*<sp/>resource<sp/>=<sp/>mDecoder-&gt;GetResource();</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>gint64<sp/>resourceLength<sp/>=<sp/>resource-&gt;GetLength();</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>nsTArray&lt;MediaByteRange&gt;<sp/>ranges;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>resource-&gt;GetCachedRanges(ranges);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDecoder-&gt;OnStateMachineThread())</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>the<sp/>position<sp/>from<sp/>here<sp/>while<sp/>buffering<sp/>as<sp/>we<sp/>can&apos;t<sp/>report<sp/>it<sp/>from</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>gstreamer<sp/>threads<sp/>that<sp/>are<sp/>actually<sp/>reading<sp/>from<sp/>the<sp/>resource</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>NotifyBytesConsumed();</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resource-&gt;IsDataCachedToEndOfResource(0))<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fast<sp/>path<sp/>for<sp/>local<sp/>or<sp/>completely<sp/>cached<sp/>files<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>gint64<sp/>duration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>GstFormat<sp/>format<sp/>=<sp/>GST_FORMAT_TIME;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>QueryDuration();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>(double)<sp/>duration<sp/>/<sp/>GST_MSECOND;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;complete<sp/>range<sp/>[0,<sp/>%f]<sp/>for<sp/>[0,<sp/>%li]&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end,<sp/>resourceLength));</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>aBuffered-&gt;Add(0,<sp/>end);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>ranges.Length();<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>startOffset<sp/>=<sp/>ranges[index].mStart;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>endOffset<sp/>=<sp/>ranges[index].mEnd;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>gint64<sp/>startTime,<sp/>endTime;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gst_element_query_convert(GST_ELEMENT(mPlayBin),<sp/>GST_FORMAT_BYTES,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startOffset,<sp/>&amp;format,<sp/>&amp;startTime)<sp/>||<sp/>format<sp/>!=<sp/>GST_FORMAT_TIME)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gst_element_query_convert(GST_ELEMENT(mPlayBin),<sp/>GST_FORMAT_BYTES,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endOffset,<sp/>&amp;format,<sp/>&amp;endTime)<sp/>||<sp/>format<sp/>!=<sp/>GST_FORMAT_TIME)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>start<sp/>=<sp/>(double)<sp/>GST_TIME_AS_USECONDS<sp/>(startTime)<sp/>/<sp/>GST_MSECOND;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>(double)<sp/>GST_TIME_AS_USECONDS<sp/>(endTime)<sp/>/<sp/>GST_MSECOND;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;adding<sp/>range<sp/>[%f,<sp/>%f]<sp/>for<sp/>[%li<sp/>%li]<sp/>size<sp/>%li&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,<sp/>end,<sp/>startOffset,<sp/>endOffset,<sp/>resourceLength));</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>aBuffered-&gt;Add(start,<sp/>end);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GStreamerReader::ReadAndPushData(guint<sp/>aLength)</highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>MediaResource*<sp/>resource<sp/>=<sp/>mDecoder-&gt;GetResource();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>NS_ASSERTION(resource,<sp/></highlight><highlight class="stringliteral">&quot;Decoder<sp/>has<sp/>no<sp/>media<sp/>resource&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>NS_OK;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>GstBuffer<sp/>*buffer<sp/>=<sp/>gst_buffer_new_and_alloc(aLength);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>guint8<sp/>*data<sp/>=<sp/>GST_BUFFER_DATA(buffer);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>uint32_t<sp/>size<sp/>=<sp/>0,<sp/>bytesRead<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(bytesRead<sp/>&lt;<sp/>aLength)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>resource-&gt;Read(reinterpret_cast&lt;char*&gt;(data<sp/>+<sp/>bytesRead),</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aLength<sp/>-<sp/>bytesRead,<sp/>&amp;size);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv)<sp/>||<sp/>size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>bytesRead<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>GST_BUFFER_SIZE(buffer)<sp/>=<sp/>bytesRead;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>mByteOffset<sp/>+=<sp/>bytesRead;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>GstFlowReturn<sp/>ret<sp/>=<sp/>gst_app_src_push_buffer(mSource,<sp/>gst_buffer_ref(buffer));</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>GST_FLOW_OK)</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_ERROR,<sp/>(</highlight><highlight class="stringliteral">&quot;ReadAndPushData<sp/>push<sp/>ret<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>gst_flow_get_name(ret)));</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GST_BUFFER_SIZE<sp/>(buffer)<sp/>&lt;<sp/>aLength)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>read<sp/>less<sp/>than<sp/>what<sp/>we<sp/>wanted,<sp/>we<sp/>reached<sp/>the<sp/>end<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>gst_app_src_end_of_stream(mSource);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>gst_buffer_unref(buffer);</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal">int64_t<sp/>GStreamerReader::QueryDuration()</highlight></codeline>
<codeline lineno="609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>gint64<sp/>duration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>GstFormat<sp/>format<sp/>=<sp/>GST_FORMAT_TIME;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gst_element_query_duration(GST_ELEMENT(mPlayBin),</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;format,<sp/>&amp;duration))<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format<sp/>==<sp/>GST_FORMAT_TIME)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;pipeline<sp/>duration<sp/>%&quot;</highlight><highlight class="normal"><sp/>GST_TIME_FORMAT,</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GST_TIME_ARGS<sp/>(duration)));</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>GST_TIME_AS_USECONDS<sp/>(duration);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*if<sp/>(mDecoder-&gt;mDuration<sp/>!=<sp/>-1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>mDecoder-&gt;mDuration<sp/>&gt;<sp/>duration)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>We<sp/>decoded<sp/>more<sp/>than<sp/>the<sp/>reported<sp/>duration<sp/>(which<sp/>could<sp/>be<sp/>estimated)</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(&quot;mDuration<sp/>&gt;<sp/>duration&quot;));</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>mDecoder-&gt;mDuration;</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>duration;</highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GStreamerReader::NeedDataCb(GstAppSrc<sp/>*aSrc,</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guint<sp/>aLength,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpointer<sp/>aUserData)</highlight></codeline>
<codeline lineno="635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>GStreamerReader<sp/>*reader<sp/>=<sp/>(GStreamerReader<sp/>*)<sp/>aUserData;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>reader-&gt;NeedData(aSrc,<sp/>aLength);</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GStreamerReader::NeedData(GstAppSrc<sp/>*aSrc,<sp/>guint<sp/>aLength)</highlight></codeline>
<codeline lineno="641"><highlight class="normal">{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aLength<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>aLength<sp/>=<sp/>DEFAULT_SOURCE_READ_SIZE;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>ReadAndPushData(aLength);</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GStreamerReader::EnoughDataCb(GstAppSrc<sp/>*aSrc,<sp/>gpointer<sp/>aUserData)</highlight></codeline>
<codeline lineno="648"><highlight class="normal">{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>GStreamerReader<sp/>*reader<sp/>=<sp/>(GStreamerReader<sp/>*)<sp/>aUserData;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>reader-&gt;EnoughData(aSrc);</highlight></codeline>
<codeline lineno="651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GStreamerReader::EnoughData(GstAppSrc<sp/>*aSrc)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">gboolean<sp/>GStreamerReader::SeekDataCb(GstAppSrc<sp/>*aSrc,</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guint64<sp/>aOffset,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpointer<sp/>aUserData)</highlight></codeline>
<codeline lineno="660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>GStreamerReader<sp/>*reader<sp/>=<sp/>(GStreamerReader<sp/>*)<sp/>aUserData;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reader-&gt;SeekData(aSrc,<sp/>aOffset);</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal">gboolean<sp/>GStreamerReader::SeekData(GstAppSrc<sp/>*aSrc,<sp/>guint64<sp/>aOffset)</highlight></codeline>
<codeline lineno="666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mGstThreadsMonitor);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>MediaResource*<sp/>resource<sp/>=<sp/>mDecoder-&gt;GetResource();</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gst_app_src_get_size(mSource)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It&apos;s<sp/>possible<sp/>that<sp/>we<sp/>didn&apos;t<sp/>know<sp/>the<sp/>length<sp/>when<sp/>we<sp/>initialized<sp/>mSource</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>but<sp/>maybe<sp/>we<sp/>do<sp/>now</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>gst_app_src_set_size(mSource,<sp/>resource-&gt;GetLength());</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aOffset<sp/>&lt;<sp/>resource-&gt;GetLength())</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>resource-&gt;Seek(SEEK_SET,<sp/>aOffset);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_SUCCEEDED(rv))</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>mByteOffset<sp/>=<sp/>mLastReportedByteOffset<sp/>=<sp/>aOffset;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_ERROR,<sp/>(</highlight><highlight class="stringliteral">&quot;seek<sp/>at<sp/>%lu<sp/>failed&quot;</highlight><highlight class="normal">,<sp/>aOffset));</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_SUCCEEDED(rv);</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal">gboolean<sp/>GStreamerReader::EventProbeCb(GstPad<sp/>*aPad,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GstEvent<sp/>*aEvent,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpointer<sp/>aUserData)</highlight></codeline>
<codeline lineno="691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>GStreamerReader<sp/>*reader<sp/>=<sp/>(GStreamerReader<sp/>*)<sp/>aUserData;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reader-&gt;EventProbe(aPad,<sp/>aEvent);</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal">gboolean<sp/>GStreamerReader::EventProbe(GstPad<sp/>*aPad,<sp/>GstEvent<sp/>*aEvent)</highlight></codeline>
<codeline lineno="697"><highlight class="normal">{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>GstElement<sp/>*parent<sp/>=<sp/>GST_ELEMENT(gst_pad_get_parent(aPad));</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(GST_EVENT_TYPE(aEvent))<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GST_EVENT_NEWSEGMENT:</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gboolean<sp/>update;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gdouble<sp/>rate;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GstFormat<sp/>format;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gint64<sp/>start,<sp/>stop,<sp/>position;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GstSegment<sp/>*segment;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>segments<sp/>so<sp/>we<sp/>can<sp/>convert<sp/>timestamps<sp/>to<sp/>stream<sp/>time,<sp/>which</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>is<sp/>what<sp/>the<sp/>upper<sp/>layers<sp/>sync<sp/>on.</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mGstThreadsMonitor);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gst_event_parse_new_segment(aEvent,<sp/>&amp;update,<sp/>&amp;rate,<sp/>&amp;format,</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;start,<sp/>&amp;stop,<sp/>&amp;position);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent<sp/>==<sp/>GST_ELEMENT(mVideoAppSink))</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment<sp/>=<sp/>&amp;mVideoSegment;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment<sp/>=<sp/>&amp;mAudioSegment;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gst_segment_set_newsegment(segment,<sp/>update,<sp/>rate,<sp/>format,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,<sp/>stop,<sp/>position);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GST_EVENT_FLUSH_STOP:</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>on<sp/>seeks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResetDecode();</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>gst_object_unref(parent);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal">GstFlowReturn<sp/>GStreamerReader::NewPrerollCb(GstAppSink<sp/>*aSink,</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpointer<sp/>aUserData)</highlight></codeline>
<codeline lineno="736"><highlight class="normal">{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>GStreamerReader<sp/>*reader<sp/>=<sp/>(GStreamerReader<sp/>*)<sp/>aUserData;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aSink<sp/>==<sp/>reader-&gt;mVideoAppSink)</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>reader-&gt;VideoPreroll();</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>reader-&gt;AudioPreroll();</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GST_FLOW_OK;</highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GStreamerReader::AudioPreroll()</highlight></codeline>
<codeline lineno="747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>first<sp/>audio<sp/>buffer<sp/>has<sp/>reached<sp/>the<sp/>audio<sp/>sink.<sp/>Get<sp/>rate<sp/>and<sp/>channels<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Audio<sp/>preroll&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>GstPad<sp/>*sinkpad<sp/>=<sp/>gst_element_get_pad(GST_ELEMENT(mAudioAppSink),<sp/></highlight><highlight class="stringliteral">&quot;sink&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>GstCaps<sp/>*caps<sp/>=<sp/>gst_pad_get_negotiated_caps(sinkpad);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>GstStructure<sp/>*s<sp/>=<sp/>gst_caps_get_structure(caps,<sp/>0);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>mInfo.mAudioRate<sp/>=<sp/>mInfo.mAudioChannels<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>gst_structure_get_int(s,<sp/></highlight><highlight class="stringliteral">&quot;rate&quot;</highlight><highlight class="normal">,<sp/>(gint<sp/>*)<sp/>&amp;mInfo.mAudioRate);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>gst_structure_get_int(s,<sp/></highlight><highlight class="stringliteral">&quot;channels&quot;</highlight><highlight class="normal">,<sp/>(gint<sp/>*)<sp/>&amp;mInfo.mAudioChannels);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mInfo.mAudioRate<sp/>!=<sp/>0,<sp/>(</highlight><highlight class="stringliteral">&quot;audio<sp/>rate<sp/>is<sp/>zero&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mInfo.mAudioChannels<sp/>!=<sp/>0,<sp/>(</highlight><highlight class="stringliteral">&quot;audio<sp/>channels<sp/>is<sp/>zero&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mInfo.mAudioChannels<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>mInfo.mAudioChannels<sp/>&lt;=<sp/>MAX_CHANNELS,</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>audio<sp/>channels<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>mInfo.mHasAudio<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>gst_caps_unref(caps);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>gst_object_unref(sinkpad);</highlight></codeline>
<codeline lineno="763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GStreamerReader::VideoPreroll()</highlight></codeline>
<codeline lineno="766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>first<sp/>video<sp/>buffer<sp/>has<sp/>reached<sp/>the<sp/>video<sp/>sink.<sp/>Get<sp/>width<sp/>and<sp/>height<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Video<sp/>preroll&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>GstPad<sp/>*sinkpad<sp/>=<sp/>gst_element_get_pad(GST_ELEMENT(mVideoAppSink),<sp/></highlight><highlight class="stringliteral">&quot;sink&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>GstCaps<sp/>*caps<sp/>=<sp/>gst_pad_get_negotiated_caps(sinkpad);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>gst_video_format_parse_caps(caps,<sp/>&amp;mFormat,<sp/>&amp;mPicture.width,<sp/>&amp;mPicture.height);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>GstStructure<sp/>*structure<sp/>=<sp/>gst_caps_get_structure(caps,<sp/>0);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>gst_structure_get_fraction(structure,<sp/></highlight><highlight class="stringliteral">&quot;framerate&quot;</highlight><highlight class="normal">,<sp/>&amp;fpsNum,<sp/>&amp;fpsDen);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mPicture.width<sp/>&amp;&amp;<sp/>mPicture.height,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>video<sp/>resolution&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>mInfo.mDisplay<sp/>=<sp/>nsIntSize(mPicture.width,<sp/>mPicture.height);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>mInfo.mHasVideo<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>gst_caps_unref(caps);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>gst_object_unref(sinkpad);</highlight></codeline>
<codeline lineno="779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal">GstFlowReturn<sp/>GStreamerReader::NewBufferCb(GstAppSink<sp/>*aSink,</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpointer<sp/>aUserData)</highlight></codeline>
<codeline lineno="783"><highlight class="normal">{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>GStreamerReader<sp/>*reader<sp/>=<sp/>(GStreamerReader<sp/>*)<sp/>aUserData;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aSink<sp/>==<sp/>reader-&gt;mVideoAppSink)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>reader-&gt;NewVideoBuffer();</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>reader-&gt;NewAudioBuffer();</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GST_FLOW_OK;</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GStreamerReader::NewVideoBuffer()</highlight></codeline>
<codeline lineno="795"><highlight class="normal">{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mGstThreadsMonitor);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>have<sp/>a<sp/>new<sp/>video<sp/>buffer<sp/>queued<sp/>in<sp/>the<sp/>video<sp/>sink.<sp/>Increment<sp/>the<sp/>counter</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/><sp/><sp/>*<sp/>and<sp/>notify<sp/>the<sp/>decode<sp/>thread<sp/>potentially<sp/>blocked<sp/>in<sp/>DecodeVideoFrame</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>mDecoder-&gt;GetFrameStatistics().NotifyDecodedFrames(1,<sp/>0);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>mVideoSinkBufferCount++;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>mon.NotifyAll();</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GStreamerReader::NewAudioBuffer()</highlight></codeline>
<codeline lineno="806"><highlight class="normal">{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mGstThreadsMonitor);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>have<sp/>a<sp/>new<sp/>audio<sp/>buffer<sp/>queued<sp/>in<sp/>the<sp/>audio<sp/>sink.<sp/>Increment<sp/>the<sp/>counter</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/><sp/><sp/>*<sp/>and<sp/>notify<sp/>the<sp/>decode<sp/>thread<sp/>potentially<sp/>blocked<sp/>in<sp/>DecodeAudioData</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>mAudioSinkBufferCount++;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>mon.NotifyAll();</highlight></codeline>
<codeline lineno="813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GStreamerReader::EosCb(GstAppSink<sp/>*aSink,<sp/>gpointer<sp/>aUserData)</highlight></codeline>
<codeline lineno="816"><highlight class="normal">{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>GStreamerReader<sp/>*reader<sp/>=<sp/>(GStreamerReader<sp/>*)<sp/>aUserData;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>reader-&gt;Eos(aSink);</highlight></codeline>
<codeline lineno="819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GStreamerReader::Eos(GstAppSink<sp/>*aSink)</highlight></codeline>
<codeline lineno="822"><highlight class="normal">{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>reached<sp/>the<sp/>end<sp/>of<sp/>the<sp/>stream<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mGstThreadsMonitor);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Potentially<sp/>unblock<sp/>DecodeVideoFrame<sp/>and<sp/>DecodeAudioData<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>mReachedEos<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>mon.NotifyAll();</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mDecoder-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Potentially<sp/>unblock<sp/>the<sp/>decode<sp/>thread<sp/>in<sp/>::DecodeLoop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>mVideoQueue.Finish();</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioQueue.Finish();</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>mon.NotifyAll();</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mozilla</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/tools/mozilla-release/content/media/gstreamer/GStreamerReader.cpp"/>
  </compounddef>
</doxygen>
