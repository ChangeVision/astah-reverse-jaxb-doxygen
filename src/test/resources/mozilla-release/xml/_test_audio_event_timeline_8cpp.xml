<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="_test_audio_event_timeline_8cpp" kind="file">
    <compoundname>TestAudioEventTimeline.cpp</compoundname>
    <includes local="yes">AudioEventTimeline.h</includes>
    <includes local="yes">TestHarness.h</includes>
    <includes local="no">sstream</includes>
    <includes local="no">limits</includes>
    <incdepgraph>
      <node id="564">
        <label>limits</label>
      </node>
      <node id="560">
        <label>C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp</label>
        <link refid="TestAudioEventTimeline.cpp"/>
        <childnode refid="561" relation="include">
        </childnode>
        <childnode refid="562" relation="include">
        </childnode>
        <childnode refid="563" relation="include">
        </childnode>
        <childnode refid="564" relation="include">
        </childnode>
      </node>
      <node id="561">
        <label>AudioEventTimeline.h</label>
      </node>
      <node id="562">
        <label>TestHarness.h</label>
      </node>
      <node id="563">
        <label>sstream</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_float_array_mock" prot="public">FloatArrayMock</innerclass>
    <innerclass refid="class_error_result_mock" prot="public">ErrorResultMock</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_test_audio_event_timeline_8cpp_1aa14d8161cf8c5a770a160de15abd162e" prot="public" static="no">
        <type>AudioEventTimeline&lt; <ref refid="class_float_array_mock" kindref="compound">FloatArrayMock</ref>, <ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref> &gt;</type>
        <definition>typedef AudioEventTimeline&lt;FloatArrayMock, ErrorResultMock&gt; Timeline</definition>
        <argsstring></argsstring>
        <name>Timeline</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="95" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1a3684683c0f6e8cc5fa768f1bb905904e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ok</definition>
        <argsstring>(bool val, const char *msg)</argsstring>
        <name>ok</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="17" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="16" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1ae83c45f6a373f18f9d3d30f933acf680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void is</definition>
        <argsstring>(const T &amp;a, const U &amp;b, const char *msg)</argsstring>
        <name>is</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="39" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="38" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1a8769576ffa50f3ffbf2906782e5844a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void is</definition>
        <argsstring>(const float &amp;a, const float &amp;b, const char *msg)</argsstring>
        <name>is</name>
        <param>
          <type>const float &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="47" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="46" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1a4ab730c489d84fe2bea3532bdbbba052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestSpecExample</definition>
        <argsstring>()</argsstring>
        <name>TestSpecExample</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="98" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="97" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1adafcac4d95e109f46b5564505824cc61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestInvalidEvents</definition>
        <argsstring>()</argsstring>
        <name>TestInvalidEvents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="151" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="150" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1ad1c96b9b813ebad214caf3426a7bbef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestEventReplacement</definition>
        <argsstring>()</argsstring>
        <name>TestEventReplacement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="193" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="192" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1a987628f4ef0c1ea9479d41c839f4d5ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestEventRemoval</definition>
        <argsstring>()</argsstring>
        <name>TestEventRemoval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="212" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="211" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1a9320f83d04f89957d5d9ecbfa61f223f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestBeforeFirstEvent</definition>
        <argsstring>()</argsstring>
        <name>TestBeforeFirstEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="231" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="230" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1a090c6d2186b3b9e868e232128246d2b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestAfterLastValueEvent</definition>
        <argsstring>()</argsstring>
        <name>TestAfterLastValueEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="241" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="240" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1a4a20f89aca7c1f4570c5ed8deaf68fbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestAfterLastTargetValueEvent</definition>
        <argsstring>()</argsstring>
        <name>TestAfterLastTargetValueEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="251" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="250" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1a1ff0c50009eb083b5f478b12eb1de05e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestAfterLastTargetValueEventWithValueSet</definition>
        <argsstring>()</argsstring>
        <name>TestAfterLastTargetValueEventWithValueSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="261" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="260" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1a2a3697b0a85c07b4280ab9efce856285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestValue</definition>
        <argsstring>()</argsstring>
        <name>TestValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="272" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="271" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1ae04aaf8b2ad18ed055a356f339fae984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestLinearRampAtZero</definition>
        <argsstring>()</argsstring>
        <name>TestLinearRampAtZero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="288" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="287" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1ab834d291e6281323adce5e3ae30f3bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestExponentialRampAtZero</definition>
        <argsstring>()</argsstring>
        <name>TestExponentialRampAtZero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="298" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="297" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1a214cdd663a0ed03f124cea9c6205c58f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestLinearRampAtSameTime</definition>
        <argsstring>()</argsstring>
        <name>TestLinearRampAtSameTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="308" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="307" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1a4914f62c68999409cbb01276ad314a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestExponentialRampAtSameTime</definition>
        <argsstring>()</argsstring>
        <name>TestExponentialRampAtSameTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="319" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="318" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1a60cb9c828b3016d8ac1461e92dd705a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestSetTargetZeroTimeConstant</definition>
        <argsstring>()</argsstring>
        <name>TestSetTargetZeroTimeConstant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="330" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="329" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="_test_audio_event_timeline_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" line="340" bodyfile="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp" bodystart="339" bodyend="362"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>Mode:<sp/>C++;<sp/>tab-width:<sp/>2;<sp/>indent-tabs-mode:<sp/>nil;<sp/>c-basic-offset:<sp/>2<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>ts=2<sp/>sw=2<sp/>sts=2<sp/>et<sp/>cindent:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>Source<sp/>Code<sp/>Form<sp/>is<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Mozilla<sp/>Public</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>License,<sp/>v.<sp/>2.0.<sp/>If<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>MPL<sp/>was<sp/>not<sp/>distributed<sp/>with<sp/>this</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>file,<sp/>You<sp/>can<sp/>obtain<sp/>one<sp/>at<sp/>http://mozilla.org/MPL/2.0/.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AudioEventTimeline.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TestHarness.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">mozilla::dom;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::numeric_limits;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>simple<sp/>testing<sp/>primitives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ok(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>msg)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>passed(msg);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>fail(msg);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">basic_ostream&lt;T,<sp/>char_traits&lt;T&gt;<sp/>&gt;&amp;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">operator&lt;&lt;(basic_ostream&lt;T,<sp/>char_traits&lt;T&gt;<sp/>&gt;&amp;<sp/>os,<sp/>nsresult<sp/>rv)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>static_cast&lt;uint32_t&gt;(rv);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>is(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;<sp/>b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>msg)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Got:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>ok(a<sp/>==<sp/>b,<sp/>ss.str().c_str());</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>is(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>msg)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stupidly<sp/>high,<sp/>since<sp/>we<sp/>mostly<sp/>care<sp/>about<sp/>the<sp/>correctness<sp/>of<sp/>the<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kEpsilon<sp/>=<sp/>0.00001f;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Got:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>ok(fabsf(a<sp/>-<sp/>b)<sp/>&lt;<sp/>kEpsilon,<sp/>ss.str().c_str());</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="class_float_array_mock" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_float_array_mock" kindref="compound">FloatArrayMock</ref></highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>implementation<sp/>is<sp/>not<sp/>used<sp/>for<sp/>now,<sp/>so<sp/>let&apos;s<sp/>just<sp/>return<sp/>dummy<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>Data()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="61"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Length()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="65"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inited()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="69"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal">};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="class_error_result_mock" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref></highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref>()</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>mRv(NS_OK)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Throw(nsresult<sp/>aRv)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>mRv<sp/>=<sp/>aRv;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>nsresult()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="87"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mRv;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>nsresult<sp/>mRv;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>AudioEventTimeline&lt;FloatArrayMock,<sp/>ErrorResultMock&gt;<sp/>Timeline;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSpecExample()</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>run<sp/>the<sp/>basic<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>Timeline<sp/>timeline(10.0f,<sp/>.1f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>is(timeline.DefaultValue(),<sp/>10.0f,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>default<sp/>value<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>is(timeline.MinValue(),<sp/>.1f,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>min<sp/>value<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>is(timeline.MaxValue(),<sp/>20.0f,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>max<sp/>value<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref><sp/>rv;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>is<sp/>copied<sp/>from<sp/>the<sp/>example<sp/>in<sp/>the<sp/>Web<sp/>Audio<sp/>spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t0<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>0.1f,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>0.2f,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t3<sp/>=<sp/>0.3f,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t4<sp/>=<sp/>0.4f,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t5<sp/>=<sp/>0.6f,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t6<sp/>=<sp/>0.7f</highlight><highlight class="comment">/*,</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t7<sp/>=<sp/>1.0f*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(0.2f,<sp/>t0,<sp/>rv);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_OK,<sp/></highlight><highlight class="stringliteral">&quot;SetValueAtTime<sp/>succeeded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(0.3f,<sp/>t1,<sp/>rv);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_OK,<sp/></highlight><highlight class="stringliteral">&quot;SetValueAtTime<sp/>succeeded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(0.4f,<sp/>t2,<sp/>rv);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_OK,<sp/></highlight><highlight class="stringliteral">&quot;SetValueAtTime<sp/>succeeded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>timeline.LinearRampToValueAtTime(1.0f,<sp/>t3,<sp/>rv);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_OK,<sp/></highlight><highlight class="stringliteral">&quot;LinearRampToValueAtTime<sp/>succeeded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>timeline.LinearRampToValueAtTime(0.15f,<sp/>t4,<sp/>rv);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_OK,<sp/></highlight><highlight class="stringliteral">&quot;LinearRampToValueAtTime<sp/>succeeded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>timeline.ExponentialRampToValueAtTime(0.75f,<sp/>t5,<sp/>rv);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_OK,<sp/></highlight><highlight class="stringliteral">&quot;ExponentialRampToValueAtTime<sp/>succeeded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>timeline.ExponentialRampToValueAtTime(0.05f,<sp/>t6,<sp/>rv);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_OK,<sp/></highlight><highlight class="stringliteral">&quot;ExponentialRampToValueAtTime<sp/>succeeded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Add<sp/>the<sp/>SetValueCurveAtTime<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.0f),<sp/>0.2f,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.05f),<sp/>0.2f,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.1f),<sp/>0.3f,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.15f),<sp/>0.3f,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.2f),<sp/>0.4f,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.25f),<sp/>(0.4f<sp/>+<sp/>1.0f)<sp/>/<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.3f),<sp/>1.0f,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.35f),<sp/>(1.0f<sp/>+<sp/>0.15f)<sp/>/<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.4f),<sp/>0.15f,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.45f),<sp/>(0.15f<sp/>*<sp/>powf(0.75f<sp/>/<sp/>0.15f,<sp/>0.05f<sp/>/<sp/>0.2f)),<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.5f),<sp/>(0.15f<sp/>*<sp/>powf(0.75f<sp/>/<sp/>0.15f,<sp/>0.5f)),<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.55f),<sp/>(0.15f<sp/>*<sp/>powf(0.75f<sp/>/<sp/>0.15f,<sp/>0.15f<sp/>/<sp/>0.2f)),<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.6f),<sp/>0.75f,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.65f),<sp/>(0.75f<sp/>*<sp/>powf(0.05<sp/>/<sp/>0.75f,<sp/>0.5f)),<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.7f),<sp/>0.05f,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(1.0f),<sp/>0.05f,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestInvalidEvents()</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>MOZ_STATIC_ASSERT(numeric_limits&lt;float&gt;::has_quiet_NaN,<sp/></highlight><highlight class="stringliteral">&quot;Platform<sp/>must<sp/>have<sp/>a<sp/>quiet<sp/>NaN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>NaN<sp/>=<sp/>numeric_limits&lt;float&gt;::quiet_NaN();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Infinity<sp/>=<sp/>numeric_limits&lt;float&gt;::infinity();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>Timeline<sp/>timeline(10.0f,<sp/>.1f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref><sp/>rv;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(NaN,<sp/>0.1f,<sp/>rv);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_ERROR_DOM_SYNTAX_ERR,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>error<sp/>code<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(Infinity,<sp/>0.1f,<sp/>rv);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_ERROR_DOM_SYNTAX_ERR,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>error<sp/>code<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(-Infinity,<sp/>0.1f,<sp/>rv);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_ERROR_DOM_SYNTAX_ERR,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>error<sp/>code<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>timeline.LinearRampToValueAtTime(NaN,<sp/>0.2f,<sp/>rv);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_ERROR_DOM_SYNTAX_ERR,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>error<sp/>code<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>timeline.LinearRampToValueAtTime(Infinity,<sp/>0.2f,<sp/>rv);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_ERROR_DOM_SYNTAX_ERR,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>error<sp/>code<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>timeline.LinearRampToValueAtTime(-Infinity,<sp/>0.2f,<sp/>rv);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_ERROR_DOM_SYNTAX_ERR,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>error<sp/>code<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>timeline.ExponentialRampToValueAtTime(NaN,<sp/>0.3f,<sp/>rv);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_ERROR_DOM_SYNTAX_ERR,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>error<sp/>code<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>timeline.ExponentialRampToValueAtTime(Infinity,<sp/>0.3f,<sp/>rv);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_ERROR_DOM_SYNTAX_ERR,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>error<sp/>code<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>timeline.ExponentialRampToValueAtTime(-Infinity,<sp/>0.4f,<sp/>rv);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_ERROR_DOM_SYNTAX_ERR,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>error<sp/>code<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>timeline.SetTargetAtTime(NaN,<sp/>0.4f,<sp/>1.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_ERROR_DOM_SYNTAX_ERR,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>error<sp/>code<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>timeline.SetTargetAtTime(Infinity,<sp/>0.4f,<sp/>1.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_ERROR_DOM_SYNTAX_ERR,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>error<sp/>code<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>timeline.SetTargetAtTime(-Infinity,<sp/>0.4f,<sp/>1.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_ERROR_DOM_SYNTAX_ERR,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>error<sp/>code<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>timeline.SetTargetAtTime(0.4f,<sp/>NaN,<sp/>1.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_ERROR_DOM_SYNTAX_ERR,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>error<sp/>code<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>timeline.SetTargetAtTime(0.4f,<sp/>Infinity,<sp/>1.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_ERROR_DOM_SYNTAX_ERR,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>error<sp/>code<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>timeline.SetTargetAtTime(0.4f,<sp/>-Infinity,<sp/>1.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_ERROR_DOM_SYNTAX_ERR,<sp/></highlight><highlight class="stringliteral">&quot;Correct<sp/>error<sp/>code<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Test<sp/>SetValueCurveAtTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestEventReplacement()</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>Timeline<sp/>timeline(10.0f,<sp/>.1f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref><sp/>rv;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>is(timeline.GetEventCount(),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>events<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(10.0f,<sp/>0.1f,<sp/>rv);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>is(timeline.GetEventCount(),<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;One<sp/>event<sp/>scheduled<sp/>now&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(20.0f,<sp/>0.1f,<sp/>rv);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_OK,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>scheduling<sp/>should<sp/>be<sp/>successful&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>is(timeline.GetEventCount(),<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>should<sp/>be<sp/>replaced&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.1f),<sp/>20.0f,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>first<sp/>event<sp/>should<sp/>be<sp/>overwritten&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>timeline.LinearRampToValueAtTime(30.0f,<sp/>0.1f,<sp/>rv);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>is(rv,<sp/>NS_OK,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>scheduling<sp/>should<sp/>be<sp/>successful&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>is(timeline.GetEventCount(),<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Different<sp/>event<sp/>type<sp/>should<sp/>be<sp/>appended&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.1f),<sp/>30.0f,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>first<sp/>event<sp/>should<sp/>be<sp/>overwritten&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestEventRemoval()</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>Timeline<sp/>timeline(10.0f,<sp/>.1f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref><sp/>rv;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(10.0f,<sp/>0.1f,<sp/>rv);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(15.0f,<sp/>0.15f,<sp/>rv);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(20.0f,<sp/>0.2f,<sp/>rv);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>timeline.LinearRampToValueAtTime(30.0f,<sp/>0.3f,<sp/>rv);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>is(timeline.GetEventCount(),<sp/>4,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>have<sp/>three<sp/>events<sp/>initially&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>timeline.CancelScheduledValues(0.4f);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>is(timeline.GetEventCount(),<sp/>4,<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>delete<sp/>past<sp/>the<sp/>end<sp/>of<sp/>the<sp/>array<sp/>should<sp/>have<sp/>no<sp/>effect&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>timeline.CancelScheduledValues(0.3f);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>is(timeline.GetEventCount(),<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>successfully<sp/>delete<sp/>one<sp/>event&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>timeline.CancelScheduledValues(0.12f);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>is(timeline.GetEventCount(),<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>successfully<sp/>delete<sp/>two<sp/>events&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestBeforeFirstEvent()</highlight></codeline>
<codeline lineno="231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>Timeline<sp/>timeline(10.0f,<sp/>.1f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref><sp/>rv;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(20.0f,<sp/>1.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.5f),<sp/>10.0f,<sp/></highlight><highlight class="stringliteral">&quot;Retrun<sp/>the<sp/>default<sp/>value<sp/>before<sp/>the<sp/>first<sp/>event&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestAfterLastValueEvent()</highlight></codeline>
<codeline lineno="241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>Timeline<sp/>timeline(10.0f,<sp/>.1f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref><sp/>rv;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(20.0f,<sp/>1.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(1.5f),<sp/>20.0f,<sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>the<sp/>last<sp/>value<sp/>after<sp/>the<sp/>last<sp/>SetValue<sp/>event&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestAfterLastTargetValueEvent()</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>Timeline<sp/>timeline(10.0f,<sp/>.1f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref><sp/>rv;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>timeline.SetTargetAtTime(20.0f,<sp/>1.0f,<sp/>5.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(10.f),<sp/>(20.f<sp/>+<sp/>(10.f<sp/>-<sp/>20.f)<sp/>*<sp/>expf(-9.0f<sp/>/<sp/>5.0f)),<sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>the<sp/>value<sp/>after<sp/>the<sp/>last<sp/>SetTarget<sp/>event<sp/>based<sp/>on<sp/>the<sp/>curve&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestAfterLastTargetValueEventWithValueSet()</highlight></codeline>
<codeline lineno="261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>Timeline<sp/>timeline(10.0f,<sp/>.1f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref><sp/>rv;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>timeline.SetValue(50.f);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>timeline.SetTargetAtTime(20.0f,<sp/>1.0f,<sp/>5.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(10.f),<sp/>(20.f<sp/>+<sp/>(50.f<sp/>-<sp/>20.f)<sp/>*<sp/>expf(-9.0f<sp/>/<sp/>5.0f)),<sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>the<sp/>value<sp/>after<sp/>SetValue<sp/>and<sp/>the<sp/>last<sp/>SetTarget<sp/>event<sp/>based<sp/>on<sp/>the<sp/>curve&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestValue()</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>Timeline<sp/>timeline(10.0f,<sp/>.1f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref><sp/>rv;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>is(timeline.Value(),<sp/>10.0f,<sp/></highlight><highlight class="stringliteral">&quot;value<sp/>should<sp/>initially<sp/>match<sp/>the<sp/>default<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>timeline.SetValue(20.0f);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>is(timeline.Value(),<sp/>20.0f,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>able<sp/>to<sp/>set<sp/>the<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(20.0f,<sp/>1.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>The<sp/>following<sp/>check<sp/>needs<sp/>to<sp/>change<sp/>when<sp/>we<sp/>compute<sp/>the<sp/>value<sp/>based<sp/>on<sp/>the<sp/>current<sp/>time<sp/>of<sp/>the<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>is(timeline.Value(),<sp/>20.0f,<sp/></highlight><highlight class="stringliteral">&quot;TODO...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>timeline.SetValue(30.0f);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>is(timeline.Value(),<sp/>20.0f,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>not<sp/>be<sp/>able<sp/>to<sp/>set<sp/>the<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLinearRampAtZero()</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>Timeline<sp/>timeline(10.0f,<sp/>.1f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref><sp/>rv;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>timeline.LinearRampToValueAtTime(20.0f,<sp/>0.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.0f),<sp/>20.0f,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>get<sp/>the<sp/>correct<sp/>value<sp/>when<sp/>t0<sp/>==<sp/>t1<sp/>==<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestExponentialRampAtZero()</highlight></codeline>
<codeline lineno="298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>Timeline<sp/>timeline(10.0f,<sp/>.1f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref><sp/>rv;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>timeline.ExponentialRampToValueAtTime(20.0f,<sp/>0.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(0.0f),<sp/>20.0f,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>get<sp/>the<sp/>correct<sp/>value<sp/>when<sp/>t0<sp/>==<sp/>t1<sp/>==<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLinearRampAtSameTime()</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>Timeline<sp/>timeline(10.0f,<sp/>.1f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref><sp/>rv;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(5.0f,<sp/>1.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>timeline.LinearRampToValueAtTime(20.0f,<sp/>1.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(1.0f),<sp/>20.0f,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>get<sp/>the<sp/>correct<sp/>value<sp/>when<sp/>t0<sp/>==<sp/>t1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestExponentialRampAtSameTime()</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>Timeline<sp/>timeline(10.0f,<sp/>.1f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref><sp/>rv;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>timeline.SetValueAtTime(5.0f,<sp/>1.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>timeline.ExponentialRampToValueAtTime(20.0f,<sp/>1.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(1.0f),<sp/>20.0f,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>get<sp/>the<sp/>correct<sp/>value<sp/>when<sp/>t0<sp/>==<sp/>t1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSetTargetZeroTimeConstant()</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>Timeline<sp/>timeline(10.0f,<sp/>.1f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><ref refid="class_error_result_mock" kindref="compound">ErrorResultMock</ref><sp/>rv;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>timeline.SetTargetAtTime(20.0f,<sp/>1.0f,<sp/>0.0f,<sp/>rv);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>is(timeline.GetValueAtTime(10.f),<sp/>20.f,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>get<sp/>the<sp/>correct<sp/>value<sp/>with<sp/>timeConstant<sp/>==<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>ScopedXPCOM<sp/>xpcom(</highlight><highlight class="stringliteral">&quot;TestAudioEventTimeline&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xpcom.failed())<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>TestSpecExample();</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>TestInvalidEvents();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>TestEventReplacement();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>TestEventRemoval();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>TestBeforeFirstEvent();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>TestAfterLastValueEvent();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>TestAfterLastTargetValueEvent();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>TestAfterLastTargetValueEventWithValueSet();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>TestValue();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>TestLinearRampAtZero();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>TestExponentialRampAtZero();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>TestLinearRampAtSameTime();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>TestExponentialRampAtSameTime();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>TestSetTargetZeroTimeConstant();</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFailCount<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/tools/mozilla-release/content/media/webaudio/compiledtest/TestAudioEventTimeline.cpp"/>
  </compounddef>
</doxygen>
