<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="_ogg_codec_state_8cpp" kind="file">
    <compoundname>OggCodecState.cpp</compoundname>
    <includes local="yes">nsDebug.h</includes>
    <includes local="yes">OggCodecState.h</includes>
    <includes local="no">ogg/ogg.h</includes>
    <includes local="no">theora/theoradec.h</includes>
    <includes local="no">vorbis/codec.h</includes>
    <includes local="no">nsAutoRef.h</includes>
    <includes local="no">nsDeque.h</includes>
    <includes local="no">nsTArray.h</includes>
    <includes local="no">nsClassHashtable.h</includes>
    <includes local="yes">C:/tools/mozilla-release/content/media/VideoUtils.h</includes>
    <includes local="yes">mozilla/StandardInteger.h</includes>
    <includes local="no">map</includes>
    <includes local="yes">OggDecoder.h</includes>
    <includes local="yes">C:/tools/mozilla-release/content/media/MediaDecoder.h</includes>
    <includes local="no">string.h</includes>
    <includes local="yes">nsTraceRefcnt.h</includes>
    <includes local="yes">VideoUtils.h</includes>
    <includes local="yes">MediaDecoderReader.h</includes>
    <includes local="yes">mozilla/Util.h</includes>
    <incdepgraph>
      <node id="300">
        <label>C:/tools/mozilla-release/content/media/MediaDecoder.h</label>
      </node>
      <node id="305">
        <label>mozilla/Util.h</label>
      </node>
      <node id="304">
        <label>MediaDecoderReader.h</label>
      </node>
      <node id="298">
        <label>map</label>
      </node>
      <node id="295">
        <label>nsClassHashtable.h</label>
      </node>
      <node id="296">
        <label>C:/tools/mozilla-release/content/media/VideoUtils.h</label>
      </node>
      <node id="292">
        <label>nsAutoRef.h</label>
      </node>
      <node id="291">
        <label>vorbis/codec.h</label>
      </node>
      <node id="302">
        <label>nsTraceRefcnt.h</label>
      </node>
      <node id="303">
        <label>VideoUtils.h</label>
      </node>
      <node id="293">
        <label>nsDeque.h</label>
      </node>
      <node id="286">
        <label>C:/tools/mozilla-release/content/media/ogg/OggCodecState.cpp</label>
        <link refid="OggCodecState.cpp"/>
        <childnode refid="287" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
        <childnode refid="289" relation="include">
        </childnode>
        <childnode refid="290" relation="include">
        </childnode>
        <childnode refid="291" relation="include">
        </childnode>
        <childnode refid="292" relation="include">
        </childnode>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="296" relation="include">
        </childnode>
        <childnode refid="297" relation="include">
        </childnode>
        <childnode refid="298" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
      </node>
      <node id="299">
        <label>OggDecoder.h</label>
      </node>
      <node id="301">
        <label>string.h</label>
      </node>
      <node id="287">
        <label>nsDebug.h</label>
      </node>
      <node id="297">
        <label>mozilla/StandardInteger.h</label>
      </node>
      <node id="288">
        <label>OggCodecState.h</label>
      </node>
      <node id="294">
        <label>nsTArray.h</label>
      </node>
      <node id="289">
        <label>ogg/ogg.h</label>
      </node>
      <node id="290">
        <label>theora/theoradec.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacemozilla">mozilla</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_ogg_codec_state_8cpp_1ae6e4cd49afe9deda788f4f9ee6ce4536" prot="public" static="no">
        <name>LOG</name>
        <param><defname>type</defname></param>
        <param><defname>msg</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/ogg/OggCodecState.cpp" line="23" bodyfile="C:/tools/mozilla-release/content/media/ogg/OggCodecState.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_ogg_codec_state_8cpp_1a4ddc7304a393e232ebc693e29eedec2c" prot="public" static="no">
        <name>TH_VERSION_CHECK</name>
        <param><defname>_info</defname></param>
        <param><defname>_maj</defname></param>
        <param><defname>_min</defname></param>
        <param><defname>_sub</defname></param>
        <initializer>(((_info)-&gt;version_major&gt;(_maj)||(_info)-&gt;version_major==(_maj))&amp;&amp; \
 (((_info)-&gt;version_minor&gt;(_min)||(_info)-&gt;version_minor==(_min))&amp;&amp; \
 (_info)-&gt;version_subminor&gt;=(_sub)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/ogg/OggCodecState.cpp" line="357" bodyfile="C:/tools/mozilla-release/content/media/ogg/OggCodecState.cpp" bodystart="354" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>Mode:<sp/>C++;<sp/>tab-width:<sp/>2;<sp/>indent-tabs-mode:<sp/>nil;<sp/>c-basic-offset:<sp/>2<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>ts=2<sp/>sw=2<sp/>sts=2<sp/>et<sp/>cindent:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>Source<sp/>Code<sp/>Form<sp/>is<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Mozilla<sp/>Public</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>License,<sp/>v.<sp/>2.0.<sp/>If<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>MPL<sp/>was<sp/>not<sp/>distributed<sp/>with<sp/>this</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>file,<sp/>You<sp/>can<sp/>obtain<sp/>one<sp/>at<sp/>http://mozilla.org/MPL/2.0/.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsDebug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;OggCodecState.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;OggDecoder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsTraceRefcnt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;VideoUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MediaDecoderReader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/StandardInteger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/Util.h&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>DebugOnly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mozilla<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PR_LOGGING</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>PRLogModuleInfo*<sp/>gMediaDecoderLog;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG(type,<sp/>msg)<sp/>PR_LOG(gMediaDecoderLog,<sp/>type,<sp/>msg)</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LOG(type,<sp/>msg)</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>a<sp/>little-endian<sp/>encoded<sp/>unsigned<sp/>32bit<sp/>integer<sp/>at<sp/>p.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>LEUint32(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p[0]<sp/>+</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p[1]<sp/>&lt;&lt;<sp/>8)<sp/>+</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p[2]<sp/>&lt;&lt;<sp/>16)<sp/>+</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p[3]<sp/>&lt;&lt;<sp/>24);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>a<sp/>little-endian<sp/>encoded<sp/>64bit<sp/>integer<sp/>at<sp/>p.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int64_t<sp/>LEInt64(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>uint32_t<sp/>lo<sp/>=<sp/>LEUint32(p);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>uint32_t<sp/>hi<sp/>=<sp/>LEUint32(p<sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lo)<sp/>|<sp/>(static_cast&lt;int64_t&gt;(hi)<sp/>&lt;&lt;<sp/>32);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>a<sp/>little-endian<sp/>encoded<sp/>unsigned<sp/>16bit<sp/>integer<sp/>at<sp/>p.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/>LEUint16(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p[0]<sp/>+<sp/>(p[1]<sp/>&lt;&lt;<sp/>8);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>a<sp/>little-endian<sp/>encoded<sp/>signed<sp/>16bit<sp/>integer<sp/>at<sp/>p.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int16_t<sp/>LEInt16(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(LEUint16(p));</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">OggCodecState*</highlight></codeline>
<codeline lineno="57"><highlight class="normal">OggCodecState::Create(ogg_page*<sp/>aPage)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>NS_ASSERTION(ogg_page_bos(aPage),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>BOS<sp/>page!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>nsAutoPtr&lt;OggCodecState&gt;<sp/>codecState;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aPage-&gt;body_len<sp/>&gt;<sp/>6<sp/>&amp;&amp;<sp/>memcmp(aPage-&gt;body+1,<sp/></highlight><highlight class="stringliteral">&quot;theora&quot;</highlight><highlight class="normal">,<sp/>6)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>codecState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TheoraState(aPage);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aPage-&gt;body_len<sp/>&gt;<sp/>6<sp/>&amp;&amp;<sp/>memcmp(aPage-&gt;body+1,<sp/></highlight><highlight class="stringliteral">&quot;vorbis&quot;</highlight><highlight class="normal">,<sp/>6)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>codecState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>VorbisState(aPage);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MOZ_OPUS</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aPage-&gt;body_len<sp/>&gt;<sp/>8<sp/>&amp;&amp;<sp/>memcmp(aPage-&gt;body,<sp/></highlight><highlight class="stringliteral">&quot;OpusHead&quot;</highlight><highlight class="normal">,<sp/>8)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>codecState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>OpusState(aPage);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aPage-&gt;body_len<sp/>&gt;<sp/>8<sp/>&amp;&amp;<sp/>memcmp(aPage-&gt;body,<sp/></highlight><highlight class="stringliteral">&quot;fishead\0&quot;</highlight><highlight class="normal">,<sp/>8)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>codecState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SkeletonState(aPage);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>codecState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>OggCodecState(aPage,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>codecState-&gt;OggCodecState::Init()<sp/>?<sp/>codecState.forget()<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">OggCodecState::OggCodecState(ogg_page*<sp/>aBosPage,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aActive)<sp/>:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>mPacketCount(0),</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>mSerial(ogg_page_serialno(aBosPage)),</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>mActive(aActive),</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>mDoneReadingHeaders(!aActive)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>MOZ_COUNT_CTOR(OggCodecState);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>memset(&amp;mState,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ogg_stream_state));</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">OggCodecState::~OggCodecState()<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>MOZ_COUNT_DTOR(OggCodecState);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>Reset();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>ogg_stream_clear(&amp;mState);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>NS_ASSERTION(ret<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;ogg_stream_clear<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">nsresult<sp/>OggCodecState::Reset()<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ogg_stream_reset(&amp;mState)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>mPackets.Erase();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>ClearUnstamped();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OggCodecState::ClearUnstamped()</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mUnstamped.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>OggCodecState::ReleasePacket(mUnstamped[i]);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>mUnstamped.Clear();</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OggCodecState::Init()<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>ogg_stream_init(&amp;mState,<sp/>mSerial);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OggCodecState::IsValidVorbisTagName(nsCString&amp;<sp/>aName)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tag<sp/>names<sp/>must<sp/>consist<sp/>of<sp/>ASCII<sp/>0x20<sp/>through<sp/>0x7D,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>excluding<sp/>0x3D<sp/>&apos;=&apos;<sp/>which<sp/>is<sp/>the<sp/>separator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>uint32_t<sp/>length<sp/>=<sp/>aName.Length();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>aName.Data();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data[i]<sp/>&lt;<sp/>0x20<sp/>||<sp/>data[i]<sp/>&gt;<sp/>0x7D<sp/>||<sp/>data[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OggCodecState::AddVorbisComment(MetadataTags*<sp/>aTags,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aComment,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>aLength)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>div<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)memchr(aComment,<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">,<sp/>aLength);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!div)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Skipping<sp/>comment:<sp/>no<sp/>separator&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>nsCString<sp/>key<sp/>=<sp/>nsCString(aComment,<sp/>div-aComment);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsValidVorbisTagName(key))<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Skipping<sp/>comment:<sp/>invalid<sp/>tag<sp/>name&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>uint32_t<sp/>valueLength<sp/>=<sp/>aLength<sp/>-<sp/>(div-aComment);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>nsCString<sp/>value<sp/>=<sp/>nsCString(div<sp/>+<sp/>1,<sp/>valueLength);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsUTF8(value))<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Skipping<sp/>comment:<sp/>invalid<sp/>UTF-8<sp/>in<sp/>value&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>aTags-&gt;Put(key,<sp/>value);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VorbisState::RecordVorbisPacketSamples(ogg_packet*<sp/>aPacket,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>aSamples)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VALIDATE_VORBIS_SAMPLE_CALCULATION</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>mVorbisPacketSamples[aPacket]<sp/>=<sp/>aSamples;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VorbisState::ValidateVorbisPacketSamples(ogg_packet*<sp/>aPacket,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>aSamples)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VALIDATE_VORBIS_SAMPLE_CALCULATION</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>NS_ASSERTION(mVorbisPacketSamples[aPacket]<sp/>==<sp/>aSamples,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Decoded<sp/>samples<sp/>for<sp/>Vorbis<sp/>packet<sp/>don&apos;t<sp/>match<sp/>expected!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>mVorbisPacketSamples.erase(aPacket);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VorbisState::AssertHasRecordedPacketSamples(ogg_packet*<sp/>aPacket)</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VALIDATE_VORBIS_SAMPLE_CALCULATION</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>NS_ASSERTION(mVorbisPacketSamples.count(aPacket)<sp/>==<sp/>1,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>have<sp/>recorded<sp/>packet<sp/>samples&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ogg_packet*<sp/>Clone(ogg_packet*<sp/>aPacket)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>ogg_packet*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ogg_packet();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>memcpy(p,<sp/>aPacket,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ogg_packet));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>p-&gt;packet<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[p-&gt;bytes];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>memcpy(p-&gt;packet,<sp/>aPacket-&gt;packet,<sp/>p-&gt;bytes);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OggCodecState::ReleasePacket(ogg_packet*<sp/>aPacket)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aPacket)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>aPacket-&gt;packet;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>aPacket;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PacketQueue::Append(ogg_packet*<sp/>aPacket)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>nsDeque::Push(aPacket);</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">ogg_packet*<sp/>OggCodecState::PacketOut()<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mPackets.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mPackets.PopFront();</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">nsresult<sp/>OggCodecState::PageIn(ogg_page*<sp/>aPage)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mActive)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>NS_ASSERTION(static_cast&lt;uint32_t&gt;(ogg_page_serialno(aPage))<sp/>==<sp/>mSerial,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Page<sp/>must<sp/>be<sp/>for<sp/>this<sp/>stream!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ogg_stream_pagein(&amp;mState,<sp/>aPage)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>ogg_packet<sp/>packet;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>ogg_stream_packetout(&amp;mState,<sp/>&amp;packet);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mPackets.Append(Clone(&amp;packet));</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ogg_stream_check(&amp;mState))<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_WARNING(</highlight><highlight class="stringliteral">&quot;Unrecoverable<sp/>error<sp/>in<sp/>ogg_stream_packetout&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">nsresult<sp/>OggCodecState::PacketOutUntilGranulepos(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>aFoundGranulepos)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>aFoundGranulepos<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>packets<sp/>from<sp/>the<sp/>sync<sp/>state<sp/>until<sp/>either<sp/>no<sp/>more<sp/>packets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>come<sp/>out,<sp/>or<sp/>we<sp/>get<sp/>a<sp/>data<sp/>packet<sp/>with<sp/>non<sp/>-1<sp/>granulepos.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>ogg_packet<sp/>packet;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>ogg_stream_packetout(&amp;mState,<sp/>&amp;packet);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ogg_packet*<sp/>clone<sp/>=<sp/>Clone(&amp;packet);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsHeader(&amp;packet))<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Header<sp/>packets<sp/>go<sp/>straight<sp/>into<sp/>the<sp/>packet<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mPackets.Append(clone);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>buffer<sp/>data<sp/>packets<sp/>until<sp/>we<sp/>encounter<sp/>a<sp/>granulepos.<sp/>We&apos;ll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>use<sp/>the<sp/>granulepos<sp/>to<sp/>figure<sp/>out<sp/>the<sp/>granulepos<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preceeding<sp/>packets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mUnstamped.AppendElement(clone);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aFoundGranulepos<sp/>=<sp/>packet.granulepos<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>!aFoundGranulepos);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ogg_stream_check(&amp;mState))<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_WARNING(</highlight><highlight class="stringliteral">&quot;Unrecoverable<sp/>error<sp/>in<sp/>ogg_stream_packetout&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">TheoraState::TheoraState(ogg_page*<sp/>aBosPage)<sp/>:</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>OggCodecState(aBosPage,<sp/>true),</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>mSetup(0),</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>mCtx(0),</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>mPixelAspectRatio(0)</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>MOZ_COUNT_CTOR(TheoraState);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>th_info_init(&amp;mInfo);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>th_comment_init(&amp;mComment);</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">TheoraState::~TheoraState()<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>MOZ_COUNT_DTOR(TheoraState);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>th_setup_free(mSetup);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>th_decode_free(mCtx);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>th_comment_clear(&amp;mComment);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>th_info_clear(&amp;mInfo);</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TheoraState::Init()<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mActive)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>int64_t<sp/>n<sp/>=<sp/>mInfo.aspect_numerator;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>int64_t<sp/>d<sp/>=<sp/>mInfo.aspect_denominator;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>mPixelAspectRatio<sp/>=<sp/>(n<sp/>==<sp/>0<sp/>||<sp/>d<sp/>==<sp/>0)<sp/>?</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>1.0f<sp/>:<sp/>static_cast&lt;float&gt;(n)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>the<sp/>frame<sp/>and<sp/>picture<sp/>regions<sp/>aren&apos;t<sp/>larger<sp/>than<sp/>our<sp/>prescribed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>maximum,<sp/>or<sp/>zero<sp/>sized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>nsIntSize<sp/>frame(mInfo.frame_width,<sp/>mInfo.frame_height);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>nsIntRect<sp/>picture(mInfo.pic_x,<sp/>mInfo.pic_y,<sp/>mInfo.pic_width,<sp/>mInfo.pic_height);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nsVideoInfo::ValidateVideoRegion(frame,<sp/>picture,<sp/>frame))<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mActive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>mCtx<sp/>=<sp/>th_decode_alloc(&amp;mInfo,<sp/>mSetup);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mCtx<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mActive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">TheoraState::DecodeHeader(ogg_packet*<sp/>aPacket)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>nsAutoRef&lt;ogg_packet&gt;<sp/>autoRelease(aPacket);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>mPacketCount++;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>th_decode_headerin(&amp;mInfo,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;mComment,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;mSetup,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aPacket);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>must<sp/>determine<sp/>when<sp/>we&apos;ve<sp/>read<sp/>the<sp/>last<sp/>header<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>th_decode_headerin()<sp/>does<sp/>not<sp/>tell<sp/>us<sp/>when<sp/>it&apos;s<sp/>read<sp/>the<sp/>last<sp/>header,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>must<sp/>keep<sp/>track<sp/>of<sp/>the<sp/>headers<sp/>externally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>3<sp/>header<sp/>packets,<sp/>the<sp/>Identification,<sp/>Comment,<sp/>and<sp/>Setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>headers,<sp/>which<sp/>must<sp/>be<sp/>in<sp/>that<sp/>order.<sp/>If<sp/>they&apos;re<sp/>out<sp/>of<sp/>order,<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>invalid.<sp/>If<sp/>we&apos;ve<sp/>successfully<sp/>read<sp/>a<sp/>header,<sp/>and<sp/>it&apos;s<sp/>the<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>header,<sp/>then<sp/>we&apos;re<sp/>done<sp/>reading<sp/>headers.<sp/>The<sp/>first<sp/>byte<sp/>of<sp/>each<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>determines<sp/>it&apos;s<sp/>type<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>0x80<sp/>-&gt;<sp/>Identification<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>0x81<sp/>-&gt;<sp/>Comment<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>0x82<sp/>-&gt;<sp/>Setup<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>http://www.theora.org/doc/Theora.pdf<sp/>Chapter<sp/>6,<sp/>&quot;Bitstream<sp/>Headers&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>more<sp/>details<sp/>of<sp/>the<sp/>Ogg/Theora<sp/>containment<sp/>scheme.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSetupHeader<sp/>=<sp/>aPacket-&gt;bytes<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>aPacket-&gt;packet[0]<sp/>==<sp/>0x82;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0<sp/>||<sp/>mPacketCount<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ve<sp/>received<sp/>an<sp/>error,<sp/>or<sp/>the<sp/>first<sp/>three<sp/>packets<sp/>weren&apos;t<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>header<sp/>packets.<sp/>Assume<sp/>bad<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>caller<sp/>will<sp/>deactivate<sp/>the<sp/>bitstream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>isSetupHeader<sp/>&amp;&amp;<sp/>mPacketCount<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Successfully<sp/>read<sp/>the<sp/>three<sp/>header<sp/>packets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>mDoneReadingHeaders<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="342"><highlight class="normal">TheoraState::Time(int64_t<sp/>granulepos)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mActive)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TheoraState::Time(&amp;mInfo,<sp/>granulepos);</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal">TheoraState::IsHeader(ogg_packet*<sp/>aPacket)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>th_packet_isheader(aPacket);</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>TH_VERSION_CHECK(_info,_maj,_min,_sub)<sp/>\</highlight></codeline>
<codeline lineno="355"><highlight class="preprocessor"><sp/>(((_info)-&gt;version_major&gt;(_maj)||(_info)-&gt;version_major==(_maj))&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="356"><highlight class="preprocessor"><sp/>(((_info)-&gt;version_minor&gt;(_min)||(_info)-&gt;version_minor==(_min))&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor"><sp/>(_info)-&gt;version_subminor&gt;=(_sub)))</highlight></codeline>
<codeline lineno="358"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">int64_t<sp/>TheoraState::Time(th_info*<sp/>aInfo,<sp/>int64_t<sp/>aGranulepos)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aGranulepos<sp/>&lt;<sp/>0<sp/>||<sp/>aInfo-&gt;fps_numerator<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementation<sp/>of<sp/>th_granule_frame<sp/>inlined<sp/>here<sp/>to<sp/>operate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>th_info<sp/>structure<sp/>instead<sp/>of<sp/>the<sp/>theora_state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>aInfo-&gt;keyframe_granule_shift;<sp/></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>ogg_int64_t<sp/>iframe<sp/>=<sp/>aGranulepos<sp/>&gt;&gt;<sp/>shift;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>ogg_int64_t<sp/>pframe<sp/>=<sp/>aGranulepos<sp/>-<sp/>(iframe<sp/>&lt;&lt;<sp/>shift);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>int64_t<sp/>frameno<sp/>=<sp/>iframe<sp/>+<sp/>pframe<sp/>-<sp/>TH_VERSION_CHECK(aInfo,<sp/>3,<sp/>2,<sp/>1);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>CheckedInt64<sp/>t<sp/>=<sp/>((CheckedInt64(frameno)<sp/>+<sp/>1)<sp/>*<sp/>USECS_PER_S)<sp/>*<sp/>aInfo-&gt;fps_denominator;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!t.isValid())</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>t<sp/>/=<sp/>aInfo-&gt;fps_numerator;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t.isValid()<sp/>?<sp/>t.value()<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">int64_t<sp/>TheoraState::StartTime(int64_t<sp/>granulepos)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(granulepos<sp/>&lt;<sp/>0<sp/>||<sp/>!mActive<sp/>||<sp/>mInfo.fps_numerator<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>CheckedInt64<sp/>t<sp/>=<sp/>(CheckedInt64(th_granule_frame(mCtx,<sp/>granulepos))<sp/>*<sp/>USECS_PER_S)<sp/>*<sp/>mInfo.fps_denominator;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>if<sp/>(!t.isValid())</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t.value()<sp/>/<sp/>mInfo.fps_numerator;</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="388"><highlight class="normal">TheoraState::MaxKeyframeOffset()</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>maximum<sp/>time<sp/>in<sp/>microseconds<sp/>by<sp/>which<sp/>a<sp/>key<sp/>frame<sp/>could</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>offset<sp/>for<sp/>the<sp/>theora<sp/>bitstream.<sp/>Theora<sp/>granulepos<sp/>encode<sp/>time<sp/>as:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>((key_frame_number<sp/>&lt;&lt;<sp/>granule_shift)<sp/>+<sp/>frame_offset).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Therefore<sp/>the<sp/>maximum<sp/>possible<sp/>time<sp/>by<sp/>which<sp/>any<sp/>frame<sp/>could<sp/>be<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>a<sp/>keyframe<sp/>is<sp/>the<sp/>duration<sp/>of<sp/>(1<sp/>&lt;&lt;<sp/>granule_shift)<sp/>-<sp/>1)<sp/>frames.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>int64_t<sp/>frameDuration;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Max<sp/>number<sp/>of<sp/>frames<sp/>keyframe<sp/>could<sp/>possibly<sp/>be<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>int64_t<sp/>keyframeDiff<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>mInfo.keyframe_granule_shift)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Length<sp/>of<sp/>frame<sp/>in<sp/>usecs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>frameDuration<sp/>=<sp/>(mInfo.fps_denominator<sp/>*<sp/>USECS_PER_S)<sp/>/<sp/>mInfo.fps_numerator;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Total<sp/>time<sp/>in<sp/>usecs<sp/>keyframe<sp/>can<sp/>be<sp/>offset<sp/>from<sp/>any<sp/>given<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frameDuration<sp/>*<sp/>keyframeDiff;</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="408"><highlight class="normal">TheoraState::PageIn(ogg_page*<sp/>aPage)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mActive)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>NS_ASSERTION(static_cast&lt;uint32_t&gt;(ogg_page_serialno(aPage))<sp/>==<sp/>mSerial,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Page<sp/>must<sp/>be<sp/>for<sp/>this<sp/>stream!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ogg_stream_pagein(&amp;mState,<sp/>aPage)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>foundGp;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>nsresult<sp/>res<sp/>=<sp/>PacketOutUntilGranulepos(foundGp);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(res))</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(foundGp<sp/>&amp;&amp;<sp/>mDoneReadingHeaders)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ve<sp/>found<sp/>a<sp/>packet<sp/>with<sp/>a<sp/>granulepos,<sp/>and<sp/>we&apos;ve<sp/>loaded<sp/>our<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>initialized<sp/>our<sp/>decoder.<sp/>Determine<sp/>granulepos<sp/>of<sp/>buffered<sp/>packets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>ReconstructTheoraGranulepos();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mUnstamped.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ogg_packet*<sp/>packet<sp/>=<sp/>mUnstamped[i];</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="427"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(!IsHeader(packet),<sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>try<sp/>to<sp/>recover<sp/>header<sp/>packet<sp/>gp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(packet-&gt;granulepos<sp/>!=<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Packet<sp/>must<sp/>have<sp/>gp<sp/>by<sp/>now&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="430"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mPackets.Append(packet);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>mUnstamped.Clear();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>1<sp/>if<sp/>the<sp/>Theora<sp/>info<sp/>struct<sp/>is<sp/>decoding<sp/>a<sp/>media<sp/>of<sp/>Theora</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>version<sp/>(maj,min,sub)<sp/>or<sp/>later,<sp/>otherwise<sp/>returns<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal">TheoraVersion(th_info*<sp/>info,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>maj,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>min,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sub)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>ogg_uint32_t<sp/>ver<sp/>=<sp/>(maj<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>(min<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>sub;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>ogg_uint32_t<sp/>th_ver<sp/>=<sp/>(info-&gt;version_major<sp/>&lt;&lt;<sp/>16)<sp/>+</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(info-&gt;version_minor<sp/>&lt;&lt;<sp/>8)<sp/>+</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;version_subminor;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(th_ver<sp/>&gt;=<sp/>ver)<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TheoraState::ReconstructTheoraGranulepos()</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mUnstamped.Length()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>ogg_int64_t<sp/>lastGranulepos<sp/>=<sp/>mUnstamped[mUnstamped.Length()<sp/>-<sp/>1]-&gt;granulepos;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>NS_ASSERTION(lastGranulepos<sp/>!=<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>know<sp/>last<sp/>granulepos&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reconstruct<sp/>the<sp/>granulepos<sp/>(and<sp/>thus<sp/>timestamps)<sp/>of<sp/>the<sp/>decoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>frames.<sp/>Granulepos<sp/>are<sp/>stored<sp/>as<sp/>((keyframe&lt;&lt;shift)+offset).<sp/>We</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>know<sp/>the<sp/>granulepos<sp/>of<sp/>the<sp/>last<sp/>frame<sp/>in<sp/>the<sp/>list,<sp/>so<sp/>we<sp/>can<sp/>infer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>granulepos<sp/>of<sp/>the<sp/>intermediate<sp/>frames<sp/>using<sp/>their<sp/>frame<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>ogg_int64_t<sp/>shift<sp/>=<sp/>mInfo.keyframe_granule_shift;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>ogg_int64_t<sp/>version_3_2_1<sp/>=<sp/>TheoraVersion(&amp;mInfo,3,2,1);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>ogg_int64_t<sp/>lastFrame<sp/>=<sp/>th_granule_frame(mCtx,</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastGranulepos)<sp/>+<sp/>version_3_2_1;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>ogg_int64_t<sp/>firstFrame<sp/>=<sp/>lastFrame<sp/>-<sp/>mUnstamped.Length()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Until<sp/>we<sp/>encounter<sp/>a<sp/>keyframe,<sp/>we&apos;ll<sp/>assume<sp/>that<sp/>the<sp/>&quot;keyframe&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>segment<sp/>of<sp/>the<sp/>granulepos<sp/>is<sp/>the<sp/>first<sp/>frame,<sp/>or<sp/>if<sp/>that<sp/>causes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>&quot;offset&quot;<sp/>segment<sp/>to<sp/>overflow,<sp/>we<sp/>assume<sp/>the<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>keyframe<sp/>is<sp/>maximumally<sp/>offset.<sp/>Until<sp/>we<sp/>encounter<sp/>a<sp/>keyframe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>granulepos<sp/>will<sp/>probably<sp/>be<sp/>wrong,<sp/>but<sp/>we<sp/>can&apos;t<sp/>decode<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>frame<sp/>anyway<sp/>(since<sp/>we<sp/>don&apos;t<sp/>have<sp/>its<sp/>keyframe)<sp/>so<sp/>it<sp/>doesn&apos;t<sp/>really</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>ogg_int64_t<sp/>keyframe<sp/>=<sp/>lastGranulepos<sp/>&gt;&gt;<sp/>shift;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>lastFrame,<sp/>firstFrame,<sp/>keyframe<sp/>variables,<sp/>as<sp/>well<sp/>as<sp/>the<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>variable<sp/>in<sp/>the<sp/>loop<sp/>below,<sp/>store<sp/>the<sp/>frame<sp/>number<sp/>for<sp/>Theora</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>version<sp/>&gt;=<sp/>3.2.1<sp/>streams,<sp/>and<sp/>store<sp/>the<sp/>frame<sp/>index<sp/>for<sp/>Theora</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>version<sp/>&lt;<sp/>3.2.1<sp/>streams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mUnstamped.Length()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>ogg_int64_t<sp/>frame<sp/>=<sp/>firstFrame<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>ogg_int64_t<sp/>granulepos;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>ogg_packet*<sp/>packet<sp/>=<sp/>mUnstamped[i];</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isKeyframe<sp/>=<sp/>th_packet_iskeyframe(packet)<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isKeyframe)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>granulepos<sp/>=<sp/>frame<sp/>&lt;&lt;<sp/>shift;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>keyframe<sp/>=<sp/>frame;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame<sp/>&gt;=<sp/>keyframe<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame<sp/>-<sp/>keyframe<sp/>&lt;<sp/>((ogg_int64_t)1<sp/>&lt;&lt;<sp/>shift))</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(frame<sp/>-<sp/>keyframe)<sp/>won&apos;t<sp/>overflow<sp/>the<sp/>&quot;offset&quot;<sp/>segment<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>granulepos,<sp/>so<sp/>it&apos;s<sp/>safe<sp/>to<sp/>calculate<sp/>the<sp/>granulepos.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>granulepos<sp/>=<sp/>(keyframe<sp/>&lt;&lt;<sp/>shift)<sp/>+<sp/>(frame<sp/>-<sp/>keyframe);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(frame<sp/>-<sp/>keyframeno)<sp/>will<sp/>overflow<sp/>the<sp/>&quot;offset&quot;<sp/>segment<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>granulepos,<sp/>so<sp/>we<sp/>take<sp/>&quot;keyframe&quot;<sp/>to<sp/>be<sp/>the<sp/>max<sp/>possible<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>frame<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ogg_int64_t<sp/>k<sp/>=<sp/>NS_MAX(frame<sp/>-<sp/>(((ogg_int64_t)1<sp/>&lt;&lt;<sp/>shift)<sp/>-<sp/>1),<sp/>version_3_2_1);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>granulepos<sp/>=<sp/>(k<sp/>&lt;&lt;<sp/>shift)<sp/>+<sp/>(frame<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Theora<sp/>3.2.1+<sp/>granulepos<sp/>store<sp/>frame<sp/>number<sp/>[1..N],<sp/>so<sp/>granulepos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>&gt;<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Theora<sp/>3.2.0<sp/>granulepos<sp/>store<sp/>the<sp/>frame<sp/>index<sp/>[0..(N-1)],<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>granulepos<sp/>should<sp/>be<sp/>&gt;=<sp/>0.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(granulepos<sp/>&gt;=<sp/>version_3_2_1,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>granulepos<sp/>for<sp/>Theora<sp/>version&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>frame&apos;s<sp/>granule<sp/>number<sp/>is<sp/>one<sp/>more<sp/>than<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>previous<sp/>frame&apos;s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(i<sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>th_granule_frame(mCtx,<sp/>granulepos)<sp/>==</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>th_granule_frame(mCtx,<sp/>mUnstamped[i-1]-&gt;granulepos)<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Granulepos<sp/>calculation<sp/>is<sp/>incorrect!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>packet-&gt;granulepos<sp/>=<sp/>granulepos;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>second<sp/>to<sp/>last<sp/>frame&apos;s<sp/>granule<sp/>number<sp/>is<sp/>one<sp/>less<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>frame&apos;s<sp/>(the<sp/>known<sp/>granule<sp/>number).<sp/>If<sp/>not<sp/>our<sp/>granulepos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>recovery<sp/>missed<sp/>a<sp/>beat.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mUnstamped.Length()<sp/>&lt;<sp/>2<sp/>||</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>th_granule_frame(mCtx,<sp/>mUnstamped[mUnstamped.Length()-2]-&gt;granulepos)<sp/>+<sp/>1<sp/>==</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>th_granule_frame(mCtx,<sp/>lastGranulepos),</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Granulepos<sp/>recovery<sp/>should<sp/>catch<sp/>up<sp/>with<sp/>packet-&gt;granulepos!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal">nsresult<sp/>VorbisState::Reset()</highlight></codeline>
<codeline lineno="532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>nsresult<sp/>res<sp/>=<sp/>NS_OK;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mActive<sp/>&amp;&amp;<sp/>vorbis_synthesis_restart(&amp;mDsp)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(OggCodecState::Reset()))<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>mGranulepos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>mPrevVorbisBlockSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">VorbisState::VorbisState(ogg_page*<sp/>aBosPage)<sp/>:</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>OggCodecState(aBosPage,<sp/>true),</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>mPrevVorbisBlockSize(0),</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>mGranulepos(0)</highlight></codeline>
<codeline lineno="551"><highlight class="normal">{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>MOZ_COUNT_CTOR(VorbisState);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>vorbis_info_init(&amp;mInfo);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>vorbis_comment_init(&amp;mComment);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>memset(&amp;mDsp,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vorbis_dsp_state));</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>memset(&amp;mBlock,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vorbis_block));</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">VorbisState::~VorbisState()<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>MOZ_COUNT_DTOR(VorbisState);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>Reset();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>vorbis_block_clear(&amp;mBlock);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>vorbis_dsp_clear(&amp;mDsp);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>vorbis_info_clear(&amp;mInfo);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>vorbis_comment_clear(&amp;mComment);</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VorbisState::DecodeHeader(ogg_packet*<sp/>aPacket)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>nsAutoRef&lt;ogg_packet&gt;<sp/>autoRelease(aPacket);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>mPacketCount++;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>vorbis_synthesis_headerin(&amp;mInfo,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;mComment,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aPacket);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>must<sp/>determine<sp/>when<sp/>we&apos;ve<sp/>read<sp/>the<sp/>last<sp/>header<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>vorbis_synthesis_headerin()<sp/>does<sp/>not<sp/>tell<sp/>us<sp/>when<sp/>it&apos;s<sp/>read<sp/>the<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>header,<sp/>so<sp/>we<sp/>must<sp/>keep<sp/>track<sp/>of<sp/>the<sp/>headers<sp/>externally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>3<sp/>header<sp/>packets,<sp/>the<sp/>Identification,<sp/>Comment,<sp/>and<sp/>Setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>headers,<sp/>which<sp/>must<sp/>be<sp/>in<sp/>that<sp/>order.<sp/>If<sp/>they&apos;re<sp/>out<sp/>of<sp/>order,<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>invalid.<sp/>If<sp/>we&apos;ve<sp/>successfully<sp/>read<sp/>a<sp/>header,<sp/>and<sp/>it&apos;s<sp/>the<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>header,<sp/>then<sp/>we&apos;re<sp/>done<sp/>reading<sp/>headers.<sp/>The<sp/>first<sp/>byte<sp/>of<sp/>each<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>determines<sp/>it&apos;s<sp/>type<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>0x1<sp/>-&gt;<sp/>Identification<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>0x3<sp/>-&gt;<sp/>Comment<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>0x5<sp/>-&gt;<sp/>Setup<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>more<sp/>details<sp/>of<sp/>the<sp/>Vorbis/Ogg<sp/>containment<sp/>scheme,<sp/>see<sp/>the<sp/>Vorbis<sp/>I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Specification,<sp/>Chapter<sp/>4,<sp/>Codec<sp/>Setup<sp/>and<sp/>Packet<sp/>Decode:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>http://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-580004</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSetupHeader<sp/>=<sp/>aPacket-&gt;bytes<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>aPacket-&gt;packet[0]<sp/>==<sp/>0x5;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0<sp/>||<sp/>mPacketCount<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ve<sp/>received<sp/>an<sp/>error,<sp/>or<sp/>the<sp/>first<sp/>three<sp/>packets<sp/>weren&apos;t<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>header<sp/>packets.<sp/>Assume<sp/>bad<sp/>input.<sp/>Our<sp/>caller<sp/>will<sp/>deactivate<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bitstream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>isSetupHeader<sp/>&amp;&amp;<sp/>mPacketCount<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Successfully<sp/>read<sp/>the<sp/>three<sp/>header<sp/>packets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bitstream<sp/>remains<sp/>active.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>mDoneReadingHeaders<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VorbisState::Init()</highlight></codeline>
<codeline lineno="606"><highlight class="normal">{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mActive)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>vorbis_synthesis_init(&amp;mDsp,<sp/>&amp;mInfo);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_WARNING(</highlight><highlight class="stringliteral">&quot;vorbis_synthesis_init()<sp/>failed<sp/>initializing<sp/>vorbis<sp/>bitstream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mActive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>vorbis_block_init(&amp;mDsp,<sp/>&amp;mBlock);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_WARNING(</highlight><highlight class="stringliteral">&quot;vorbis_block_init()<sp/>failed<sp/>initializing<sp/>vorbis<sp/>bitstream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mActive)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vorbis_dsp_clear(&amp;mDsp);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mActive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal">int64_t<sp/>VorbisState::Time(int64_t<sp/>granulepos)</highlight></codeline>
<codeline lineno="627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mActive)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VorbisState::Time(&amp;mInfo,<sp/>granulepos);</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal">int64_t<sp/>VorbisState::Time(vorbis_info*<sp/>aInfo,<sp/>int64_t<sp/>aGranulepos)</highlight></codeline>
<codeline lineno="636"><highlight class="normal">{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aGranulepos<sp/>==<sp/>-1<sp/>||<sp/>aInfo-&gt;rate<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>CheckedInt64<sp/>t<sp/>=<sp/>CheckedInt64(aGranulepos)<sp/>*<sp/>USECS_PER_S;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!t.isValid())</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t.value()<sp/>/<sp/>aInfo-&gt;rate;</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal">VorbisState::IsHeader(ogg_packet*<sp/>aPacket)</highlight></codeline>
<codeline lineno="648"><highlight class="normal">{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>byte<sp/>in<sp/>each<sp/>Vorbis<sp/>header<sp/>packet<sp/>is<sp/>either<sp/>0x01,<sp/>0x03,<sp/>or<sp/>0x05,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>i.e.<sp/>the<sp/>first<sp/>bit<sp/>is<sp/>odd.<sp/>Audio<sp/>data<sp/>packets<sp/>have<sp/>their<sp/>first<sp/>bit<sp/>as<sp/>0x0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>packet<sp/>with<sp/>its<sp/>first<sp/>bit<sp/>set<sp/>cannot<sp/>be<sp/>a<sp/>data<sp/>packet,<sp/>it&apos;s<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(possibly<sp/>invalid)<sp/>header<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See:<sp/>http://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-610004.2.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aPacket-&gt;bytes<sp/>&gt;<sp/>0<sp/>?<sp/>(aPacket-&gt;packet[0]<sp/>&amp;<sp/>0x1)<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">MetadataTags*</highlight></codeline>
<codeline lineno="658"><highlight class="normal">VorbisState::GetTags()</highlight></codeline>
<codeline lineno="659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>MetadataTags*<sp/>tags;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mComment.user_comments,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>vorbis<sp/>comment<sp/>strings!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mComment.comment_lengths,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>vorbis<sp/>comment<sp/>lengths!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>tags<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MetadataTags;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>tags-&gt;Init();</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mComment.comments;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>AddVorbisComment(tags,<sp/>mComment.user_comments[i],</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mComment.comment_lengths[i]);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tags;</highlight></codeline>
<codeline lineno="670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="673"><highlight class="normal">VorbisState::PageIn(ogg_page*<sp/>aPage)</highlight></codeline>
<codeline lineno="674"><highlight class="normal">{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mActive)</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>NS_ASSERTION(static_cast&lt;uint32_t&gt;(ogg_page_serialno(aPage))<sp/>==<sp/>mSerial,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Page<sp/>must<sp/>be<sp/>for<sp/>this<sp/>stream!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ogg_stream_pagein(&amp;mState,<sp/>aPage)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>foundGp;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>nsresult<sp/>res<sp/>=<sp/>PacketOutUntilGranulepos(foundGp);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(res))</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(foundGp<sp/>&amp;&amp;<sp/>mDoneReadingHeaders)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ve<sp/>found<sp/>a<sp/>packet<sp/>with<sp/>a<sp/>granulepos,<sp/>and<sp/>we&apos;ve<sp/>loaded<sp/>our<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>initialized<sp/>our<sp/>decoder.<sp/>Determine<sp/>granulepos<sp/>of<sp/>buffered<sp/>packets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>ReconstructVorbisGranulepos();</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mUnstamped.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ogg_packet*<sp/>packet<sp/>=<sp/>mUnstamped[i];</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AssertHasRecordedPacketSamples(packet);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(!IsHeader(packet),<sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>try<sp/>to<sp/>recover<sp/>header<sp/>packet<sp/>gp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(packet-&gt;granulepos<sp/>!=<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Packet<sp/>must<sp/>have<sp/>gp<sp/>by<sp/>now&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mPackets.Append(packet);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>mUnstamped.Clear();</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal">nsresult<sp/>VorbisState::ReconstructVorbisGranulepos()</highlight></codeline>
<codeline lineno="702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>samples<sp/>in<sp/>a<sp/>Vorbis<sp/>packet<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>window_blocksize(previous_packet)/4+window_blocksize(current_packet)/4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See:<sp/>http://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-230001.3.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>we<sp/>maintain<sp/>mPrevVorbisBlockSize,<sp/>the<sp/>block<sp/>size<sp/>of<sp/>the<sp/>last<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>encountered.<sp/>We<sp/>also<sp/>maintain<sp/>mGranulepos,<sp/>which<sp/>is<sp/>the<sp/>granulepos<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>encountered<sp/>packet.<sp/>This<sp/>enables<sp/>us<sp/>to<sp/>give<sp/>granulepos<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>packets<sp/>when<sp/>the<sp/>last<sp/>packet<sp/>in<sp/>mUnstamped<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>granulepos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(for<sp/>example<sp/>if<sp/>the<sp/>stream<sp/>was<sp/>truncated).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>validate<sp/>our<sp/>prediction<sp/>of<sp/>the<sp/>number<sp/>of<sp/>samples<sp/>decoded<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>VALIDATE_VORBIS_SAMPLE_CALCULATION<sp/>is<sp/>defined<sp/>by<sp/>recording<sp/>the<sp/>predicted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>samples,<sp/>and<sp/>verifing<sp/>we<sp/>extract<sp/>that<sp/>many<sp/>when<sp/>decoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mUnstamped.Length()<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Length<sp/>must<sp/>be<sp/>&gt;<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>ogg_packet*<sp/>last<sp/>=<sp/>mUnstamped[mUnstamped.Length()-1];</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>NS_ASSERTION(last-&gt;e_o_s<sp/>||<sp/>last-&gt;granulepos<sp/>&gt;=<sp/>0,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>know<sp/>last<sp/>granulepos!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mUnstamped.Length()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>ogg_packet*<sp/>packet<sp/>=<sp/>mUnstamped[0];</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>blockSize<sp/>=<sp/>vorbis_packet_blocksize(&amp;mInfo,<sp/>packet);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockSize<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>failure<sp/>vorbis_packet_blocksize<sp/>returns<sp/>&lt;<sp/>0.<sp/>If<sp/>we&apos;ve<sp/>got</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>bad<sp/>packet,<sp/>we<sp/>just<sp/>assume<sp/>that<sp/>decode<sp/>will<sp/>have<sp/>to<sp/>skip<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>packet,<sp/>i.e.<sp/>assume<sp/>0<sp/>samples<sp/>are<sp/>decodable<sp/>from<sp/>this<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blockSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mPrevVorbisBlockSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>samples<sp/>=<sp/>mPrevVorbisBlockSize<sp/>/<sp/>4<sp/>+<sp/>blockSize<sp/>/<sp/>4;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>mPrevVorbisBlockSize<sp/>=<sp/>blockSize;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(packet-&gt;granulepos<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packet-&gt;granulepos<sp/>=<sp/>mGranulepos<sp/>+<sp/>samples;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Account<sp/>for<sp/>a<sp/>partial<sp/>last<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(packet-&gt;e_o_s<sp/>&amp;&amp;<sp/>packet-&gt;granulepos<sp/>&gt;=<sp/>mGranulepos)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples<sp/>=<sp/>packet-&gt;granulepos<sp/>-<sp/>mGranulepos;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>mGranulepos<sp/>=<sp/>packet-&gt;granulepos;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>RecordVorbisPacketSamples(packet,<sp/>samples);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>unknownGranulepos<sp/>=<sp/>last-&gt;granulepos<sp/>==<sp/>-1;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalSamples<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>i<sp/>=<sp/>mUnstamped.Length()<sp/>-<sp/>1;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>ogg_packet*<sp/>packet<sp/>=<sp/>mUnstamped[i];</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>ogg_packet*<sp/>prev<sp/>=<sp/>mUnstamped[i-1];</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>ogg_int64_t<sp/>granulepos<sp/>=<sp/>packet-&gt;granulepos;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(granulepos<sp/>!=<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>know<sp/>granulepos!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>prevBlockSize<sp/>=<sp/>vorbis_packet_blocksize(&amp;mInfo,<sp/>prev);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>blockSize<sp/>=<sp/>vorbis_packet_blocksize(&amp;mInfo,<sp/>packet);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockSize<sp/>&lt;<sp/>0<sp/>||<sp/>prevBlockSize<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>failure<sp/>vorbis_packet_blocksize<sp/>returns<sp/>&lt;<sp/>0.<sp/>If<sp/>we&apos;ve<sp/>got</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>bad<sp/>packet,<sp/>we<sp/>just<sp/>assume<sp/>that<sp/>decode<sp/>will<sp/>have<sp/>to<sp/>skip<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>packet,<sp/>i.e.<sp/>assume<sp/>0<sp/>samples<sp/>are<sp/>decodable<sp/>from<sp/>this<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blockSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prevBlockSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>samples<sp/>=<sp/>prevBlockSize<sp/>/<sp/>4<sp/>+<sp/>blockSize<sp/>/<sp/>4;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>totalSamples<sp/>+=<sp/>samples;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>prev-&gt;granulepos<sp/>=<sp/>granulepos<sp/>-<sp/>samples;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>RecordVorbisPacketSamples(packet,<sp/>samples);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unknownGranulepos)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mUnstamped.Length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ogg_packet*<sp/>packet<sp/>=<sp/>mUnstamped[i];</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packet-&gt;granulepos<sp/>+=<sp/>mGranulepos<sp/>+<sp/>totalSamples<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>ogg_packet*<sp/>first<sp/>=<sp/>mUnstamped[0];</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>blockSize<sp/>=<sp/>vorbis_packet_blocksize(&amp;mInfo,<sp/>first);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockSize<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>mPrevVorbisBlockSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>blockSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>samples<sp/>=<sp/>(mPrevVorbisBlockSize<sp/>==<sp/>0)<sp/>?<sp/>0<sp/>:</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mPrevVorbisBlockSize<sp/>/<sp/>4<sp/>+<sp/>blockSize<sp/>/<sp/>4;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>int64_t<sp/>start<sp/>=<sp/>first-&gt;granulepos<sp/>-<sp/>samples;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>RecordVorbisPacketSamples(first,<sp/>samples);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last-&gt;e_o_s<sp/>&amp;&amp;<sp/>start<sp/>&lt;<sp/>mGranulepos)<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ve<sp/>calculated<sp/>that<sp/>there<sp/>are<sp/>more<sp/>samples<sp/>in<sp/>this<sp/>page<sp/>than<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>granulepos<sp/>claims,<sp/>and<sp/>it&apos;s<sp/>the<sp/>last<sp/>page<sp/>in<sp/>the<sp/>stream.<sp/>This<sp/>is<sp/>legal,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>we<sp/>will<sp/>need<sp/>to<sp/>prune<sp/>the<sp/>trailing<sp/>samples<sp/>when<sp/>we<sp/>come<sp/>to<sp/>decode<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>must<sp/>correct<sp/>the<sp/>timestamps<sp/>so<sp/>that<sp/>they<sp/>follow<sp/>the<sp/>last<sp/>Vorbis<sp/>page&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>pruned<sp/>=<sp/>mGranulepos<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mUnstamped.Length()<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mUnstamped[i]-&gt;granulepos<sp/>+=<sp/>pruned;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VALIDATE_VORBIS_SAMPLE_CALCULATION</highlight></codeline>
<codeline lineno="801"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>mVorbisPacketSamples[last]<sp/>-=<sp/>pruned;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="803"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>mPrevVorbisBlockSize<sp/>=<sp/>vorbis_packet_blocksize(&amp;mInfo,<sp/>last);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>mPrevVorbisBlockSize<sp/>=<sp/>NS_MAX(static_cast&lt;long&gt;(0),<sp/>mPrevVorbisBlockSize);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>mGranulepos<sp/>=<sp/>last-&gt;granulepos;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MOZ_OPUS</highlight></codeline>
<codeline lineno="813"><highlight class="preprocessor"></highlight><highlight class="normal">OpusState::OpusState(ogg_page*<sp/>aBosPage)<sp/>:</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>OggCodecState(aBosPage,<sp/>true),</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>mRate(0),</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>mNominalRate(0),</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>mChannels(0),</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>mPreSkip(0),</highlight></codeline>
<codeline lineno="819"><highlight class="normal">#ifdef<sp/>MOZ_SAMPLE_TYPE_FLOAT32</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>mGain(1.0f),</highlight></codeline>
<codeline lineno="821"><highlight class="normal">#else</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>mGain_Q16(65536),</highlight></codeline>
<codeline lineno="823"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>mChannelMapping(0),</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>mStreams(0),</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>mCoupledStreams(0),</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>mDecoder(NULL),</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>mSkip(0),</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>mPrevPacketGranulepos(0),</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>mPrevPageGranulepos(0)</highlight></codeline>
<codeline lineno="831"><highlight class="normal">{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>MOZ_COUNT_CTOR(OpusState);</highlight></codeline>
<codeline lineno="833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal">OpusState::~OpusState()<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>MOZ_COUNT_DTOR(OpusState);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>Reset();</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mDecoder)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>opus_multistream_decoder_destroy(mDecoder);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>mDecoder<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal">nsresult<sp/>OpusState::Reset()</highlight></codeline>
<codeline lineno="846"><highlight class="normal">{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Reset(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal">nsresult<sp/>OpusState::Reset(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aStart)</highlight></codeline>
<codeline lineno="851"><highlight class="normal">{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>nsresult<sp/>res<sp/>=<sp/>NS_OK;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mActive<sp/>&amp;&amp;<sp/>mDecoder)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>decoder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>opus_multistream_decoder_ctl(mDecoder,<sp/>OPUS_RESET_STATE);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let<sp/>the<sp/>seek<sp/>logic<sp/>handle<sp/>pre-roll<sp/>if<sp/>we&apos;re<sp/>not<sp/>seeking<sp/>to<sp/>the<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>mSkip<sp/>=<sp/>aStart<sp/>?<sp/>mPreSkip<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>lets<sp/>us<sp/>distinguish<sp/>the<sp/>first<sp/>page<sp/>being<sp/>the<sp/>last<sp/>page<sp/>vs.<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>having<sp/>processed<sp/>the<sp/>previous<sp/>page<sp/>when<sp/>we<sp/>encounter<sp/>the<sp/>last<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>mPrevPageGranulepos<sp/>=<sp/>aStart<sp/>?<sp/>0<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>mPrevPacketGranulepos<sp/>=<sp/>aStart<sp/>?<sp/>0<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>queued<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(OggCodecState::Reset()))<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Opus<sp/>decoder<sp/>reset,<sp/>to<sp/>skip<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>mSkip));</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OpusState::Init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="876"><highlight class="normal">{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mActive)</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mDecoder<sp/>==<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;leaking<sp/>OpusDecoder&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>mDecoder<sp/>=<sp/>opus_multistream_decoder_create(mRate,</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mChannels,</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStreams,</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCoupledStreams,</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mMappingTable,</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;error);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>mSkip<sp/>=<sp/>mPreSkip;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Opus<sp/>decoder<sp/>init,<sp/>to<sp/>skip<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>mSkip));</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error<sp/>==<sp/>OPUS_OK;</highlight></codeline>
<codeline lineno="896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OpusState::DecodeHeader(ogg_packet*<sp/>aPacket)</highlight></codeline>
<codeline lineno="899"><highlight class="normal">{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>nsAutoRef&lt;ogg_packet&gt;<sp/>autoRelease(aPacket);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(mPacketCount++)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>the<sp/>id<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aPacket-&gt;bytes<sp/>&lt;<sp/>19<sp/>||<sp/>memcmp(aPacket-&gt;packet,<sp/></highlight><highlight class="stringliteral">&quot;OpusHead&quot;</highlight><highlight class="normal">,<sp/>8))<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>Opus<sp/>file:<sp/>unrecognized<sp/>header&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mRate<sp/>=<sp/>48000;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>Opus<sp/>decoder<sp/>runs<sp/>at<sp/>48<sp/>kHz<sp/>regardless.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>version<sp/>=<sp/>aPacket-&gt;packet[8];</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Accept<sp/>file<sp/>format<sp/>versions<sp/>0.x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((version<sp/>&amp;<sp/>0xf0)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Rejecting<sp/>unknown<sp/>Opus<sp/>file<sp/>version<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>version));</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mChannels<sp/>=<sp/>aPacket-&gt;packet[9];</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mChannels&lt;1)<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>Opus<sp/>file:<sp/>Number<sp/>of<sp/>channels<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>mChannels));</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MOZ_SAMPLE_TYPE_FLOAT32</highlight></codeline>
<codeline lineno="924"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Downmixing<sp/>more<sp/>than<sp/>2<sp/>channels<sp/>it<sp/>is<sp/>not<sp/>supported<sp/>for<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>samples.<sp/>It<sp/>is<sp/>only<sp/>supported<sp/>for<sp/>float<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mChannels&gt;2)</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="929"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mPreSkip<sp/>=<sp/>LEUint16(aPacket-&gt;packet<sp/>+<sp/>10);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mNominalRate<sp/>=<sp/>LEUint32(aPacket-&gt;packet<sp/>+<sp/>12);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gain_dB<sp/>=<sp/>LEInt16(aPacket-&gt;packet<sp/>+<sp/>16)<sp/>/<sp/>256.0;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MOZ_SAMPLE_TYPE_FLOAT32</highlight></codeline>
<codeline lineno="933"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mGain<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pow(10,0.05*gain_dB));</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="935"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mGain_Q16<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(NS_MIN(65536*pow(10,0.05*gain_dB)+0.5,</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;double&gt;(INT32_MAX)));</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="938"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mChannelMapping<sp/>=<sp/>aPacket-&gt;packet[18];</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mChannelMapping<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>family<sp/>0<sp/>only<sp/>allows<sp/>two<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mChannels&gt;2)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>Opus<sp/>file:<sp/>too<sp/>many<sp/>channels<sp/>(%d)<sp/>for&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>mapping<sp/>family<sp/>0.&quot;</highlight><highlight class="normal">,<sp/>mChannels));</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStreams<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCoupledStreams<sp/>=<sp/>mChannels<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mMappingTable[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mMappingTable[1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mChannelMapping<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Currently<sp/>only<sp/>up<sp/>to<sp/>8<sp/>channels<sp/>are<sp/>defined<sp/>for<sp/>mapping<sp/>family<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mChannels&gt;8)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>Opus<sp/>file:<sp/>too<sp/>many<sp/>channels<sp/>(%d)<sp/>for&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>mapping<sp/>family<sp/>1.&quot;</highlight><highlight class="normal">,<sp/>mChannels));</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aPacket-&gt;bytes&gt;20+mChannels)<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStreams<sp/>=<sp/>aPacket-&gt;packet[19];</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCoupledStreams<sp/>=<sp/>aPacket-&gt;packet[20];</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;mChannels;<sp/>i++)</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mMappingTable[i]<sp/>=<sp/>aPacket-&gt;packet[21+i];</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>Opus<sp/>file:<sp/>channel<sp/>mapping<sp/>%d,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>but<sp/>no<sp/>channel<sp/>mapping<sp/>table&quot;</highlight><highlight class="normal">,<sp/>mChannelMapping));</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>Opus<sp/>file:<sp/>unsupported<sp/>channel<sp/>mapping<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;family<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>mChannelMapping));</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mStreams<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>Opus<sp/>file:<sp/>no<sp/>streams&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mCoupledStreams<sp/>&gt;<sp/>mStreams)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>Opus<sp/>file:<sp/>more<sp/>coupled<sp/>streams<sp/>(%d)<sp/>than<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;total<sp/>streams<sp/>(%d)&quot;</highlight><highlight class="normal">,<sp/>mCoupledStreams,<sp/>mStreams));</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="985"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Opus<sp/>stream<sp/>header:&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>channels:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>mChannels));</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>preskip:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>mPreSkip));</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>original:<sp/>%d<sp/>Hz&quot;</highlight><highlight class="normal">,<sp/>mNominalRate));</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>gain:<sp/>%.2f<sp/>dB&quot;</highlight><highlight class="normal">,<sp/>gain_dB));</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Channel<sp/>Mapping:&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>family:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>mChannelMapping));</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>streams:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>mStreams));</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="994"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>the<sp/>metadata<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aPacket-&gt;bytes<sp/>&lt;<sp/>16<sp/>||<sp/>memcmp(aPacket-&gt;packet,<sp/></highlight><highlight class="stringliteral">&quot;OpusTags&quot;</highlight><highlight class="normal">,<sp/>8))</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>out<sp/>the<sp/>raw<sp/>comment<sp/>lines,<sp/>but<sp/>only<sp/>do<sp/>basic<sp/>validation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>checks<sp/>against<sp/>the<sp/>string<sp/>packing:<sp/>too<sp/>little<sp/>data,<sp/>too<sp/>many</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>comments,<sp/>or<sp/>comments<sp/>that<sp/>are<sp/>too<sp/>long.<sp/>Rejecting<sp/>these<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>helps<sp/>reduce<sp/>the<sp/>propagation<sp/>of<sp/>broken<sp/>files.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>not<sp/>ensure<sp/>they<sp/>are<sp/>valid<sp/>UTF-8<sp/>here,<sp/>nor<sp/>do<sp/>we<sp/>validate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>required<sp/>ASCII_TAG=value<sp/>format<sp/>of<sp/>the<sp/>user<sp/>comments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buf<sp/>=<sp/>aPacket-&gt;packet<sp/>+<sp/>8;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bytes<sp/>=<sp/>aPacket-&gt;bytes<sp/>-<sp/>8;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>len;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>vendor<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>LEUint32(buf);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>bytes)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mVendorString<sp/>=<sp/>nsCString(reinterpret_cast&lt;const<sp/>char*&gt;(buf),<sp/>len);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>user<sp/>comments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>&lt;<sp/>4)</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>ncomments<sp/>=<sp/>LEUint32(buf);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>so<sp/>many<sp/>comments<sp/>even<sp/>their<sp/>length<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>won&apos;t<sp/>fit<sp/>in<sp/>the<sp/>packet,<sp/>stop<sp/>reading<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ncomments<sp/>&gt;<sp/>(bytes&gt;&gt;2))</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ncomments;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>&lt;<sp/>4)</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>LEUint32(buf);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>bytes)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTags.AppendElement(nsCString(reinterpret_cast&lt;const<sp/>char*&gt;(buf),<sp/>len));</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="1045"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Opus<sp/>metadata<sp/>header:&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>vendor:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>mVendorString.get()));</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mTags.Length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>mTags[i].</highlight><highlight class="keyword">get</highlight><highlight class="normal">()));</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1051"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>made<sp/>it<sp/>to<sp/>the<sp/>first<sp/>data<sp/>packet<sp/>(which<sp/>includes<sp/>reconstructing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>timestamps<sp/>for<sp/>it<sp/>in<sp/>PageIn).<sp/>Success!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDoneReadingHeaders<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>it<sp/>back<sp/>on<sp/>the<sp/>queue<sp/>so<sp/>we<sp/>can<sp/>decode<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mPackets.PushFront(autoRelease.disown());</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Construct<sp/>and<sp/>return<sp/>a<sp/>tags<sp/>hashmap<sp/>from<sp/>our<sp/>internal<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal">MetadataTags*<sp/>OpusState::GetTags()</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>MetadataTags*<sp/>tags;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>tags<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MetadataTags;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>tags-&gt;Init();</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mTags.Length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>AddVorbisComment(tags,<sp/>mTags[i].Data(),<sp/>mTags[i].Length());</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tags;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>timestamp<sp/>(in<sp/>microseconds)<sp/>equivalent<sp/>to<sp/>a<sp/>granulepos.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal">int64_t<sp/>OpusState::Time(int64_t<sp/>aGranulepos)</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mActive)</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Time(mPreSkip,<sp/>aGranulepos);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal">int64_t<sp/>OpusState::Time(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aPreSkip,<sp/>int64_t<sp/>aGranulepos)</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aGranulepos<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ogg<sp/>Opus<sp/>always<sp/>runs<sp/>at<sp/>a<sp/>granule<sp/>rate<sp/>of<sp/>48<sp/>kHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>CheckedInt64<sp/>t<sp/>=<sp/>CheckedInt64(aGranulepos<sp/>-<sp/>aPreSkip)<sp/>*<sp/>USECS_PER_S;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t.isValid()<sp/>?<sp/>t.value()<sp/>/<sp/>48000<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OpusState::IsHeader(ogg_packet*<sp/>aPacket)</highlight></codeline>
<codeline lineno="1100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aPacket-&gt;bytes<sp/>&gt;=<sp/>16<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!memcmp(aPacket-&gt;packet,<sp/></highlight><highlight class="stringliteral">&quot;OpusHead&quot;</highlight><highlight class="normal">,<sp/>8)<sp/>||</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!memcmp(aPacket-&gt;packet,<sp/></highlight><highlight class="stringliteral">&quot;OpusTags&quot;</highlight><highlight class="normal">,<sp/>8));</highlight></codeline>
<codeline lineno="1104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal">nsresult<sp/>OpusState::PageIn(ogg_page*<sp/>aPage)</highlight></codeline>
<codeline lineno="1107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mActive)</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>NS_ASSERTION(static_cast&lt;uint32_t&gt;(ogg_page_serialno(aPage))<sp/>==<sp/>mSerial,</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Page<sp/>must<sp/>be<sp/>for<sp/>this<sp/>stream!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ogg_stream_pagein(&amp;mState,<sp/>aPage)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>haveGranulepos;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>PacketOutUntilGranulepos(haveGranulepos);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv)<sp/>||<sp/>!haveGranulepos<sp/>||<sp/>mPacketCount<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ReconstructOpusGranulepos())</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mUnstamped.Length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>ogg_packet*<sp/>packet<sp/>=<sp/>mUnstamped[i];</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(!IsHeader(packet),<sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>try<sp/>to<sp/>play<sp/>a<sp/>header<sp/>packet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(packet-&gt;granulepos<sp/>!=<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Packet<sp/>should<sp/>have<sp/>a<sp/>granulepos&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>mPackets.Append(packet);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>mUnstamped.Clear();</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>method<sp/>to<sp/>return<sp/>the<sp/>change<sp/>in<sp/>granule<sp/>position<sp/>due<sp/>to<sp/>an<sp/>Opus<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(as<sp/>distinct<sp/>from<sp/>the<sp/>number<sp/>of<sp/>samples<sp/>in<sp/>the<sp/>packet,<sp/>which<sp/>depends<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>decoder<sp/>rate).<sp/>It<sp/>should<sp/>work<sp/>with<sp/>a<sp/>multistream<sp/>Opus<sp/>file,<sp/>and<sp/>continue<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>work<sp/>should<sp/>we<sp/>ever<sp/>allow<sp/>the<sp/>decoder<sp/>to<sp/>decode<sp/>at<sp/>a<sp/>rate<sp/>other<sp/>than<sp/>48<sp/>kHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>even<sp/>works<sp/>before<sp/>we&apos;ve<sp/>created<sp/>the<sp/>actual<sp/>Opus<sp/>decoder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetOpusDeltaGP(ogg_packet*<sp/>packet)</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nframes;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>nframes<sp/>=<sp/>opus_packet_get_nb_frames(packet-&gt;packet,<sp/>packet-&gt;bytes);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nframes<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nframes*opus_packet_get_samples_per_frame(packet-&gt;packet,<sp/>48000);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>NS_WARNING(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>Opus<sp/>packet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nframes;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OpusState::ReconstructOpusGranulepos(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mUnstamped.Length()<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>have<sp/>unstamped<sp/>packets&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/>ogg_packet*<sp/>last<sp/>=<sp/>mUnstamped[mUnstamped.Length()-1];</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>NS_ASSERTION(last-&gt;e_o_s<sp/>||<sp/>last-&gt;granulepos<sp/>&gt;<sp/>0,</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>know<sp/>last<sp/>granulepos!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>int64_t<sp/>gp;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>is<sp/>the<sp/>last<sp/>page,<sp/>and<sp/>we&apos;ve<sp/>seen<sp/>at<sp/>least<sp/>one<sp/>previous<sp/>page<sp/>(or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>the<sp/>first<sp/>page)...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last-&gt;e_o_s)<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mPrevPageGranulepos<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>file<sp/>only<sp/>has<sp/>one<sp/>page<sp/>and<sp/>the<sp/>final<sp/>granule<sp/>position<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>smaller<sp/>than<sp/>the<sp/>pre-skip<sp/>amount,<sp/>we<sp/>MUST<sp/>reject<sp/>the<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mDoneReadingHeaders<sp/>&amp;&amp;<sp/>last-&gt;granulepos<sp/>&lt;<sp/>mPreSkip)</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>last_gp<sp/>=<sp/>last-&gt;granulepos;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gp<sp/>=<sp/>mPrevPageGranulepos;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>through<sp/>the<sp/>packets<sp/>forwards,<sp/>adding<sp/>the<sp/>current<sp/>packet&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>duration<sp/>to<sp/>the<sp/>previous<sp/>granulepos<sp/>to<sp/>get<sp/>the<sp/>value<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mUnstamped.Length()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ogg_packet*<sp/>packet<sp/>=<sp/>mUnstamped[i];</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>GetOpusDeltaGP(packet);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>error<sp/>(negative<sp/>offset)<sp/>and<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>gp<sp/>&lt;=<sp/>INT64_MAX<sp/>-<sp/>offset)<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gp<sp/>+=<sp/>offset;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gp<sp/>&gt;=<sp/>last_gp)<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_WARNING(</highlight><highlight class="stringliteral">&quot;Opus<sp/>end<sp/>trimming<sp/>removed<sp/>more<sp/>than<sp/>a<sp/>full<sp/>packet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>were<sp/>asked<sp/>to<sp/>remove<sp/>a<sp/>full<sp/>packet&apos;s<sp/>worth<sp/>of<sp/>data<sp/>or<sp/>more.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Encoders<sp/>SHOULD<sp/>NOT<sp/>produce<sp/>streams<sp/>like<sp/>this,<sp/>but<sp/>we&apos;ll<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>for<sp/>them<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gp<sp/>=<sp/>last_gp;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>i+1;<sp/>j<sp/>&lt;<sp/>mUnstamped.Length();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OggCodecState::ReleasePacket(mUnstamped[j]);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mUnstamped.RemoveElementsAt(i+1,<sp/>mUnstamped.Length()<sp/>-<sp/>(i+1));</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>packet;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last-&gt;e_o_s<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>packet-&gt;granulepos<sp/>=<sp/>gp;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mPrevPageGranulepos<sp/>=<sp/>last_gp;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_WARNING(</highlight><highlight class="stringliteral">&quot;No<sp/>previous<sp/>granule<sp/>position<sp/>to<sp/>use<sp/>for<sp/>Opus<sp/>end<sp/>trimming.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>don&apos;t<sp/>have<sp/>a<sp/>previous<sp/>granule<sp/>position,<sp/>fall<sp/>through.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>simply<sp/>won&apos;t<sp/>trim<sp/>any<sp/>samples<sp/>from<sp/>the<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Are<sp/>we<sp/>guaranteed<sp/>to<sp/>have<sp/>seen<sp/>a<sp/>previous<sp/>page<sp/>if<sp/>there<sp/>is<sp/>one?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>gp<sp/>=<sp/>last-&gt;granulepos;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>through<sp/>the<sp/>packets<sp/>backwards,<sp/>subtracting<sp/>the<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>packet&apos;s<sp/>duration<sp/>from<sp/>its<sp/>granulepos<sp/>to<sp/>get<sp/>the<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>current<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>mUnstamped.Length()<sp/>-<sp/>1;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>GetOpusDeltaGP(mUnstamped[i]);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>error<sp/>(negative<sp/>offset)<sp/>and<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>&lt;=<sp/>gp)<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gp<sp/>-=<sp/>offset;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>granule<sp/>position<sp/>of<sp/>the<sp/>first<sp/>data<sp/>page<sp/>is<sp/>smaller<sp/>than<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>decodable<sp/>audio<sp/>samples<sp/>on<sp/>that<sp/>page,<sp/>then<sp/>we<sp/>MUST<sp/>reject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mDoneReadingHeaders)</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>too<sp/>late<sp/>to<sp/>reject<sp/>the<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>get<sp/>here,<sp/>this<sp/>almost<sp/>certainly<sp/>means<sp/>the<sp/>file<sp/>has<sp/>screwed-up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>timestamps<sp/>somewhere<sp/>after<sp/>the<sp/>first<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_WARNING(</highlight><highlight class="stringliteral">&quot;Clamping<sp/>negative<sp/>Opus<sp/>granulepos<sp/>to<sp/>zero.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>mUnstamped[i<sp/>-<sp/>1]-&gt;granulepos<sp/>=<sp/>gp;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>to<sp/>make<sp/>sure<sp/>the<sp/>first<sp/>granule<sp/>position<sp/>is<sp/>at<sp/>least<sp/>as<sp/>large<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>total<sp/>number<sp/>of<sp/>samples<sp/>decodable<sp/>from<sp/>the<sp/>first<sp/>page<sp/>with<sp/>completed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>packets.<sp/>This<sp/>requires<sp/>looking<sp/>at<sp/>the<sp/>duration<sp/>of<sp/>the<sp/>first<sp/>packet,<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>MUST<sp/>reject<sp/>such<sp/>streams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mDoneReadingHeaders<sp/>&amp;&amp;<sp/>GetOpusDeltaGP(mUnstamped[0])<sp/>&gt;<sp/>gp)</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>mPrevPageGranulepos<sp/>=<sp/>last-&gt;granulepos;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MOZ_OPUS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1235"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal">SkeletonState::SkeletonState(ogg_page*<sp/>aBosPage)<sp/>:</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/>OggCodecState(aBosPage,<sp/>true),</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>mVersion(0),</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>mPresentationTime(0),</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/>mLength(0)</highlight></codeline>
<codeline lineno="1241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>MOZ_COUNT_CTOR(SkeletonState);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1245"><highlight class="normal">SkeletonState::~SkeletonState()</highlight></codeline>
<codeline lineno="1246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>MOZ_COUNT_DTOR(SkeletonState);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Support<sp/>for<sp/>Ogg<sp/>Skeleton<sp/>4.0,<sp/>as<sp/>per<sp/>specification<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://wiki.xiph.org/Ogg_Skeleton_4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Minimum<sp/>length<sp/>in<sp/>bytes<sp/>of<sp/>a<sp/>Skeleton<sp/>header<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>SKELETON_MIN_HEADER_LEN<sp/>=<sp/>28;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>SKELETON_4_0_MIN_HEADER_LEN<sp/>=<sp/>80;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Minimum<sp/>length<sp/>in<sp/>bytes<sp/>of<sp/>a<sp/>Skeleton<sp/>4.0<sp/>index<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>SKELETON_4_0_MIN_INDEX_LEN<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Minimum<sp/>possible<sp/>size<sp/>of<sp/>a<sp/>compressed<sp/>index<sp/>keypoint.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>MIN_KEY_POINT_SIZE<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Byte<sp/>offset<sp/>of<sp/>the<sp/>major<sp/>and<sp/>minor<sp/>version<sp/>numbers<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ogg<sp/>Skeleton<sp/>4.0<sp/>header<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SKELETON_VERSION_MAJOR_OFFSET<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SKELETON_VERSION_MINOR_OFFSET<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Byte-offsets<sp/>of<sp/>the<sp/>presentation<sp/>time<sp/>numerator<sp/>and<sp/>denominator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SKELETON_PRESENTATION_TIME_NUMERATOR_OFFSET<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SKELETON_PRESENTATION_TIME_DENOMINATOR_OFFSET<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Byte-offsets<sp/>of<sp/>the<sp/>length<sp/>of<sp/>file<sp/>field<sp/>in<sp/>the<sp/>Skeleton<sp/>4.0<sp/>header<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SKELETON_FILE_LENGTH_OFFSET<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Byte-offsets<sp/>of<sp/>the<sp/>fields<sp/>in<sp/>the<sp/>Skeleton<sp/>index<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>INDEX_SERIALNO_OFFSET<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>INDEX_NUM_KEYPOINTS_OFFSET<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>INDEX_TIME_DENOM_OFFSET<sp/>=<sp/>18;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>INDEX_FIRST_NUMER_OFFSET<sp/>=<sp/>26;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>INDEX_LAST_NUMER_OFFSET<sp/>=<sp/>34;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>INDEX_KEYPOINT_OFFSET<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSkeletonBOS(ogg_packet*<sp/>aPacket)</highlight></codeline>
<codeline lineno="1284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aPacket-&gt;bytes<sp/>&gt;=<sp/>SKELETON_MIN_HEADER_LEN<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcmp(reinterpret_cast&lt;char*&gt;(aPacket-&gt;packet),<sp/></highlight><highlight class="stringliteral">&quot;fishead&quot;</highlight><highlight class="normal">,<sp/>8)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSkeletonIndex(ogg_packet*<sp/>aPacket)</highlight></codeline>
<codeline lineno="1290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aPacket-&gt;bytes<sp/>&gt;=<sp/>SKELETON_4_0_MIN_INDEX_LEN<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcmp(reinterpret_cast&lt;char*&gt;(aPacket-&gt;packet),<sp/></highlight><highlight class="stringliteral">&quot;index&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>a<sp/>variable<sp/>length<sp/>encoded<sp/>integer<sp/>at<sp/>p.<sp/>Will<sp/>not<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>past<sp/>aLimit.<sp/>Returns<sp/>pointer<sp/>to<sp/>character<sp/>after<sp/>end<sp/>of<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ReadVariableLengthInt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p,</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLimit,</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t&amp;<sp/>n)</highlight></codeline>
<codeline lineno="1300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>int64_t<sp/>byte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>&lt;<sp/>aLimit<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(byte<sp/>&amp;<sp/>0x80)<sp/>!=<sp/>0x80<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift<sp/>&lt;<sp/>57)</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*p);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>|=<sp/>((byte<sp/>&amp;<sp/>0x7f)<sp/>&lt;&lt;<sp/>shift);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>shift<sp/>+=<sp/>7;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SkeletonState::DecodeIndex(ogg_packet*<sp/>aPacket)</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/>NS_ASSERTION(aPacket-&gt;bytes<sp/>&gt;=<sp/>SKELETON_4_0_MIN_INDEX_LEN,</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>must<sp/>be<sp/>at<sp/>least<sp/>minimum<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mActive)<sp/>{</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/>uint32_t<sp/>serialno<sp/>=<sp/>LEUint32(aPacket-&gt;packet<sp/>+<sp/>INDEX_SERIALNO_OFFSET);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/>int64_t<sp/>numKeyPoints<sp/>=<sp/>LEInt64(aPacket-&gt;packet<sp/>+<sp/>INDEX_NUM_KEYPOINTS_OFFSET);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>int64_t<sp/>endTime<sp/>=<sp/>0,<sp/>startTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>aPacket-&gt;packet;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>int64_t<sp/>timeDenom<sp/>=<sp/>LEInt64(aPacket-&gt;packet<sp/>+<sp/>INDEX_TIME_DENOM_OFFSET);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeDenom<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Ogg<sp/>Skeleton<sp/>Index<sp/>packet<sp/>for<sp/>stream<sp/>%u<sp/>has<sp/>0<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;timestamp<sp/>denominator.&quot;</highlight><highlight class="normal">,<sp/>serialno));</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(mActive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>start<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>CheckedInt64<sp/>t<sp/>=<sp/>CheckedInt64(LEInt64(p<sp/>+<sp/>INDEX_FIRST_NUMER_OFFSET))<sp/>*<sp/>USECS_PER_S;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!t.isValid())<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(mActive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>startTime<sp/>=<sp/>t.value()<sp/>/<sp/>timeDenom;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>end<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>LEInt64(p<sp/>+<sp/>INDEX_LAST_NUMER_OFFSET)<sp/>*<sp/>USECS_PER_S;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!t.isValid())<sp/>{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(mActive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>endTime<sp/>=<sp/>t.value()<sp/>/<sp/>timeDenom;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>numKeyPoints<sp/>value<sp/>read,<sp/>ensure<sp/>we&apos;re<sp/>not<sp/>going<sp/>to<sp/>run<sp/>out<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>memory<sp/>while<sp/>trying<sp/>to<sp/>decode<sp/>the<sp/>index<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>CheckedInt64<sp/>minPacketSize<sp/>=<sp/>(CheckedInt64(numKeyPoints)<sp/>*<sp/>MIN_KEY_POINT_SIZE)<sp/>+<sp/>INDEX_KEYPOINT_OFFSET;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!minPacketSize.isValid())</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(mActive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>int64_t<sp/>sizeofIndex<sp/>=<sp/>aPacket-&gt;bytes<sp/>-<sp/>INDEX_KEYPOINT_OFFSET;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>int64_t<sp/>maxNumKeyPoints<sp/>=<sp/>sizeofIndex<sp/>/<sp/>MIN_KEY_POINT_SIZE;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aPacket-&gt;bytes<sp/>&lt;<sp/>minPacketSize.value()<sp/>||</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numKeyPoints<sp/>&gt;<sp/>maxNumKeyPoints<sp/>||<sp/></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numKeyPoints<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Packet<sp/>size<sp/>is<sp/>less<sp/>than<sp/>the<sp/>theoretical<sp/>minimum<sp/>size,<sp/>or<sp/>the<sp/>packet<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>claiming<sp/>to<sp/>store<sp/>more<sp/>keypoints<sp/>than<sp/>it&apos;s<sp/>capable<sp/>of<sp/>storing.<sp/>This<sp/>means</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>numKeyPoints<sp/>field<sp/>is<sp/>too<sp/>large<sp/>or<sp/>small<sp/>for<sp/>the<sp/>packet<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>possibly<sp/>contain<sp/>as<sp/>many<sp/>packets<sp/>as<sp/>it<sp/>claims<sp/>to,<sp/>so<sp/>the<sp/>numKeyPoints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>field<sp/>is<sp/>possibly<sp/>malicious.<sp/>Don&apos;t<sp/>try<sp/>decoding<sp/>this<sp/>index,<sp/>we<sp/>may<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out<sp/>of<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Possibly<sp/>malicious<sp/>number<sp/>of<sp/>key<sp/>points<sp/>reported<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(%lld)<sp/>in<sp/>index<sp/>packet<sp/>for<sp/>stream<sp/>%u.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numKeyPoints,</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serialno));</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(mActive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>nsAutoPtr&lt;nsKeyFrameIndex&gt;<sp/>keyPoints(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>nsKeyFrameIndex(startTime,<sp/>endTime));</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>aPacket-&gt;packet<sp/>+<sp/>INDEX_KEYPOINT_OFFSET;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>limit<sp/>=<sp/>aPacket-&gt;packet<sp/>+<sp/>aPacket-&gt;bytes;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>int64_t<sp/>numKeyPointsRead<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>CheckedInt64<sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/>CheckedInt64<sp/>time<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>&lt;<sp/>limit<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numKeyPointsRead<sp/>&lt;<sp/>numKeyPoints)</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>delta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>ReadVariableLengthInt(p,<sp/>limit,<sp/>delta);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>limit<sp/>||</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!offset.isValid()<sp/>||</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset.value()<sp/>&gt;<sp/>mLength<sp/>||</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset.value()<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(mActive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>ReadVariableLengthInt(p,<sp/>limit,<sp/>delta);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>time<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!time.isValid()<sp/>||</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time.value()<sp/>&gt;<sp/>endTime<sp/>||</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time.value()<sp/>&lt;<sp/>startTime)</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(mActive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckedInt64<sp/>timeUsecs<sp/>=<sp/>time<sp/>*<sp/>USECS_PER_S;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!timeUsecs.isValid())</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mActive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>timeUsecs<sp/>/=<sp/>timeDenom;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>keyPoints-&gt;Add(offset.value(),<sp/>timeUsecs.value());</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>numKeyPointsRead++;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>int32_t<sp/>keyPointsRead<sp/>=<sp/>keyPoints-&gt;Length();</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyPointsRead<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>mIndex.Put(serialno,<sp/>keyPoints.forget());</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Loaded<sp/>%d<sp/>keypoints<sp/>for<sp/>Skeleton<sp/>on<sp/>stream<sp/>%u&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyPointsRead,<sp/>serialno));</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal">nsresult<sp/>SkeletonState::IndexedSeekTargetForTrack(uint32_t<sp/>aSerialno,</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>aTarget,</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsKeyPoint&amp;<sp/>aResult)</highlight></codeline>
<codeline lineno="1429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/>nsKeyFrameIndex*<sp/>index<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>mIndex.Get(aSerialno,<sp/>&amp;index);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!index<sp/>||</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index-&gt;Length()<sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aTarget<sp/>&lt;<sp/>index-&gt;mStartTime<sp/>||</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aTarget<sp/>&gt;<sp/>index-&gt;mEndTime)</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Binary<sp/>search<sp/>to<sp/>find<sp/>the<sp/>last<sp/>key<sp/>point<sp/>with<sp/>time<sp/>less<sp/>than<sp/>target.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>index-&gt;Length()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>&gt;<sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mid<sp/>=<sp/>start<sp/>+<sp/>((end<sp/>-<sp/>start<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index-&gt;Get(mid).mTime<sp/>==<sp/>aTarget)<sp/>{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index-&gt;Get(mid).mTime<sp/>&lt;<sp/>aTarget)<sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/>aResult<sp/>=<sp/>index-&gt;Get(start);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>NS_ASSERTION(aResult.mTime<sp/>&lt;=<sp/>aTarget,<sp/></highlight><highlight class="stringliteral">&quot;Result<sp/>should<sp/>have<sp/>time<sp/>&lt;=<sp/>target&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal">nsresult<sp/>SkeletonState::IndexedSeekTarget(int64_t<sp/>aTarget,</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsTArray&lt;uint32_t&gt;&amp;<sp/>aTracks,</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsSeekTarget&amp;<sp/>aResult)</highlight></codeline>
<codeline lineno="1464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mActive<sp/>||<sp/>mVersion<sp/>&lt;<sp/>SKELETON_VERSION(4,0))<sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>all<sp/>requested<sp/>tracks&apos;<sp/>indexes,<sp/>and<sp/>get<sp/>the<sp/>keypoint<sp/>for<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>seek<sp/>target.<sp/>Record<sp/>the<sp/>keypoint<sp/>with<sp/>the<sp/>lowest<sp/>offset,<sp/>this<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>our<sp/>seek<sp/>result.<sp/>User<sp/>must<sp/>seek<sp/>to<sp/>the<sp/>one<sp/>with<sp/>lowest<sp/>offset<sp/>to<sp/>ensure<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pass<sp/>&quot;keyframes&quot;<sp/>on<sp/>all<sp/>tracks<sp/>when<sp/>we<sp/>decode<sp/>forwards<sp/>to<sp/>the<sp/>seek<sp/>target.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>nsSeekTarget<sp/>r;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i=0;<sp/>i&lt;aTracks.Length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>nsKeyPoint<sp/>k;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_SUCCEEDED(IndexedSeekTargetForTrack(aTracks[i],<sp/>aTarget,<sp/>k))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.mOffset<sp/>&lt;<sp/>r.mKeyPoint.mOffset)</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r.mKeyPoint<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r.mSerial<sp/>=<sp/>aTracks[i];</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r.IsNull())<sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Indexed<sp/>seek<sp/>target<sp/>for<sp/>time<sp/>%lld<sp/>is<sp/>offset<sp/>%lld&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aTarget,<sp/>r.mKeyPoint.mOffset));</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>aResult<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal">nsresult<sp/>SkeletonState::GetDuration(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nsTArray&lt;uint32_t&gt;&amp;<sp/>aTracks,</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t&amp;<sp/>aDuration)</highlight></codeline>
<codeline lineno="1493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mActive<sp/>||</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mVersion<sp/>&lt;<sp/>SKELETON_VERSION(4,0)<sp/>||</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!HasIndex()<sp/>||</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aTracks.Length()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>int64_t<sp/>endTime<sp/>=<sp/>INT64_MIN;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/>int64_t<sp/>startTime<sp/>=<sp/>INT64_MAX;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i=0;<sp/>i&lt;aTracks.Length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>nsKeyFrameIndex*<sp/>index<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>mIndex.Get(aTracks[i],<sp/>&amp;index);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!index)<sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can&apos;t<sp/>get<sp/>the<sp/>timestamps<sp/>for<sp/>one<sp/>of<sp/>the<sp/>required<sp/>tracks,<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index-&gt;mEndTime<sp/>&gt;<sp/>endTime)<sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endTime<sp/>=<sp/>index-&gt;mEndTime;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index-&gt;mStartTime<sp/>&lt;<sp/>startTime)<sp/>{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startTime<sp/>=<sp/>index-&gt;mStartTime;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/>NS_ASSERTION(endTime<sp/>&gt;<sp/>startTime,<sp/></highlight><highlight class="stringliteral">&quot;Duration<sp/>must<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/>CheckedInt64<sp/>duration<sp/>=<sp/>CheckedInt64(endTime)<sp/>-<sp/>startTime;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/>aDuration<sp/>=<sp/>duration.isValid()<sp/>?<sp/>duration.value()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>duration.isValid()<sp/>?<sp/>NS_OK<sp/>:<sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SkeletonState::DecodeHeader(ogg_packet*<sp/>aPacket)</highlight></codeline>
<codeline lineno="1524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/>nsAutoRef&lt;ogg_packet&gt;<sp/>autoRelease(aPacket);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsSkeletonBOS(aPacket))<sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>verMajor<sp/>=<sp/>LEUint16(aPacket-&gt;packet<sp/>+<sp/>SKELETON_VERSION_MAJOR_OFFSET);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>verMinor<sp/>=<sp/>LEUint16(aPacket-&gt;packet<sp/>+<sp/>SKELETON_VERSION_MINOR_OFFSET);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>presentation<sp/>time.<sp/>We<sp/>read<sp/>this<sp/>before<sp/>the<sp/>version<sp/>check<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>presentation<sp/>time<sp/>exists<sp/>in<sp/>all<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>n<sp/>=<sp/>LEInt64(aPacket-&gt;packet<sp/>+<sp/>SKELETON_PRESENTATION_TIME_NUMERATOR_OFFSET);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>d<sp/>=<sp/>LEInt64(aPacket-&gt;packet<sp/>+<sp/>SKELETON_PRESENTATION_TIME_DENOMINATOR_OFFSET);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>mPresentationTime<sp/>=<sp/>d<sp/>==<sp/>0<sp/>?<sp/>0<sp/>:<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n)<sp/>/<sp/>static_cast&lt;float&gt;(d))<sp/>*<sp/>USECS_PER_S;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>mVersion<sp/>=<sp/>SKELETON_VERSION(verMajor,<sp/>verMinor);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>only<sp/>care<sp/>to<sp/>parse<sp/>Skeleton<sp/>version<sp/>4.0+.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mVersion<sp/>&lt;<sp/>SKELETON_VERSION(4,0)<sp/>||</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mVersion<sp/>&gt;=<sp/>SKELETON_VERSION(5,0)<sp/>||</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aPacket-&gt;bytes<sp/>&lt;<sp/>SKELETON_4_0_MIN_HEADER_LEN)</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>segment<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/>mLength<sp/>=<sp/>LEInt64(aPacket-&gt;packet<sp/>+<sp/>SKELETON_FILE_LENGTH_OFFSET);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Skeleton<sp/>segment<sp/>length:<sp/>%lld&quot;</highlight><highlight class="normal">,<sp/>mLength));</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>serialno-to-index<sp/>map.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>mIndex.Init();</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsSkeletonIndex(aPacket)<sp/>&amp;&amp;<sp/>mVersion<sp/>&gt;=<sp/>SKELETON_VERSION(4,0))<sp/>{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DecodeIndex(aPacket);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aPacket-&gt;e_o_s)<sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>mDoneReadingHeaders<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mozilla</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/tools/mozilla-release/content/media/ogg/OggCodecState.cpp"/>
  </compounddef>
</doxygen>
