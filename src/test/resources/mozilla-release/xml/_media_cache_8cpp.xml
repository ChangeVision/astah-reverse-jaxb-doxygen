<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="_media_cache_8cpp" kind="file">
    <compoundname>MediaCache.cpp</compoundname>
    <includes local="yes">mozilla/ReentrantMonitor.h</includes>
    <includes local="yes">mozilla/XPCOM.h</includes>
    <includes local="yes">MediaCache.h</includes>
    <includes local="yes">nsNetUtil.h</includes>
    <includes local="yes">prio.h</includes>
    <includes local="yes">nsContentUtils.h</includes>
    <includes local="yes">nsThreadUtils.h</includes>
    <includes local="yes">MediaResource.h</includes>
    <includes local="yes">nsMathUtils.h</includes>
    <includes local="yes">prlog.h</includes>
    <includes local="yes">mozilla/Preferences.h</includes>
    <includes local="yes">FileBlockCache.h</includes>
    <includes local="yes">mozilla/Attributes.h</includes>
    <includes local="yes">nsAnonymousTemporaryFile.h</includes>
    <incdepgraph>
      <node id="182">
        <label>mozilla/Attributes.h</label>
      </node>
      <node id="176">
        <label>nsThreadUtils.h</label>
      </node>
      <node id="172">
        <label>MediaCache.h</label>
      </node>
      <node id="173">
        <label>nsNetUtil.h</label>
      </node>
      <node id="183">
        <label>nsAnonymousTemporaryFile.h</label>
      </node>
      <node id="177">
        <label>MediaResource.h</label>
      </node>
      <node id="180">
        <label>mozilla/Preferences.h</label>
      </node>
      <node id="174">
        <label>prio.h</label>
      </node>
      <node id="179">
        <label>prlog.h</label>
      </node>
      <node id="175">
        <label>nsContentUtils.h</label>
      </node>
      <node id="181">
        <label>FileBlockCache.h</label>
      </node>
      <node id="170">
        <label>mozilla/ReentrantMonitor.h</label>
      </node>
      <node id="169">
        <label>C:/tools/mozilla-release/content/media/MediaCache.cpp</label>
        <link refid="MediaCache.cpp"/>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
      </node>
      <node id="178">
        <label>nsMathUtils.h</label>
      </node>
      <node id="171">
        <label>mozilla/XPCOM.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classmozilla_1_1_m_o_z___f_i_n_a_l" prot="public">mozilla::MOZ_FINAL</innerclass>
    <innerclass refid="classmozilla_1_1_media_cache" prot="public">mozilla::MediaCache</innerclass>
    <innerclass refid="classmozilla_1_1_media_cache_1_1_resource_stream_iterator" prot="public">mozilla::MediaCache::ResourceStreamIterator</innerclass>
    <innerclass refid="structmozilla_1_1_media_cache_1_1_block_owner" prot="protected">mozilla::MediaCache::BlockOwner</innerclass>
    <innerclass refid="structmozilla_1_1_media_cache_1_1_block" prot="protected">mozilla::MediaCache::Block</innerclass>
    <innerclass refid="classmozilla_1_1_update_event" prot="public">mozilla::UpdateEvent</innerclass>
    <innernamespace refid="namespacemozilla">mozilla</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_media_cache_8cpp_1ae6e4cd49afe9deda788f4f9ee6ce4536" prot="public" static="no">
        <name>LOG</name>
        <param><defname>type</defname></param>
        <param><defname>msg</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/MediaCache.cpp" line="29" bodyfile="C:/tools/mozilla-release/content/media/MediaCache.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>Mode:<sp/>C++;<sp/>tab-width:<sp/>2;<sp/>indent-tabs-mode:<sp/>nil;<sp/>c-basic-offset:<sp/>2<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>ts=2<sp/>sw=2<sp/>sts=2<sp/>et<sp/>cindent:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>Source<sp/>Code<sp/>Form<sp/>is<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Mozilla<sp/>Public</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>License,<sp/>v.<sp/>2.0.<sp/>If<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>MPL<sp/>was<sp/>not<sp/>distributed<sp/>with<sp/>this</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>file,<sp/>You<sp/>can<sp/>obtain<sp/>one<sp/>at<sp/>http://mozilla.org/MPL/2.0/.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/ReentrantMonitor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/XPCOM.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MediaCache.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsNetUtil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;prio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsContentUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsThreadUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MediaResource.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsMathUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;prlog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/Preferences.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;FileBlockCache.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/Attributes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsAnonymousTemporaryFile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mozilla<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PR_LOGGING</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="normal">PRLogModuleInfo*<sp/>gMediaCacheLog;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG(type,<sp/>msg)<sp/>PR_LOG(gMediaCacheLog,<sp/>type,<sp/>msg)</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LOG(type,<sp/>msg)</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Readahead<sp/>blocks<sp/>for<sp/>non-seekable<sp/>streams<sp/>will<sp/>be<sp/>limited<sp/>to<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fraction<sp/>of<sp/>the<sp/>cache<sp/>space.<sp/>We<sp/>don&apos;t<sp/>normally<sp/>evict<sp/>such<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>because<sp/>replacing<sp/>them<sp/>requires<sp/>a<sp/>seek,<sp/>but<sp/>we<sp/>need<sp/>to<sp/>make<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>they<sp/>don&apos;t<sp/>monopolize<sp/>the<sp/>cache.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>NONSEEKABLE_READAHEAD_MAX<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assume<sp/>that<sp/>any<sp/>replaying<sp/>or<sp/>backward<sp/>seeking<sp/>will<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>far<sp/>in<sp/>the<sp/>future<sp/>(in<sp/>seconds).<sp/>This<sp/>is<sp/>a<sp/>random<sp/>guess/estimate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>penalty<sp/>to<sp/>account<sp/>for<sp/>the<sp/>possibility<sp/>that<sp/>we<sp/>might<sp/>not<sp/>replay<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>all.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>REPLAY_DELAY<sp/>=<sp/>30;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>looking<sp/>for<sp/>a<sp/>reusable<sp/>block,<sp/>scan<sp/>forward<sp/>this<sp/>many<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>desired<sp/>&quot;best&quot;<sp/>block<sp/>location<sp/>to<sp/>look<sp/>for<sp/>free<sp/>blocks,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>before<sp/>we<sp/>resort<sp/>to<sp/>scanning<sp/>the<sp/>whole<sp/>cache.<sp/>The<sp/>idea<sp/>is<sp/>to<sp/>try<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>store<sp/>runs<sp/>of<sp/>stream<sp/>blocks<sp/>close-to-consecutively<sp/>in<sp/>the<sp/>cache<sp/>if<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>FREE_BLOCK_SCAN_LIMIT<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>Turn<sp/>this<sp/>on<sp/>to<sp/>do<sp/>very<sp/>expensive<sp/>cache<sp/>state<sp/>validation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>DEBUG_VERIFY_CACHE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>at<sp/>most<sp/>one<sp/>media<sp/>cache<sp/>(although<sp/>that<sp/>could<sp/>quite<sp/>easily<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>relaxed<sp/>if<sp/>we<sp/>wanted<sp/>to<sp/>manage<sp/>multiple<sp/>caches<sp/>with<sp/>independent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>size<sp/>limits).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MediaCache*<sp/>gMediaCache;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="classmozilla_1_1_m_o_z___f_i_n_a_l" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MediaCacheFlusher<sp/><ref refid="classmozilla_1_1_m_o_z___f_i_n_a_l" kindref="compound">MOZ_FINAL</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsIObserver,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsSupportsWeakReference<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>MediaCacheFlusher()<sp/>{}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>~MediaCacheFlusher();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>NS_DECL_ISUPPORTS</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>NS_DECL_NSIOBSERVER</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Init();</highlight></codeline>
<codeline lineno="70"><highlight class="normal">};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MediaCacheFlusher*<sp/>gMediaCacheFlusher;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">NS_IMPL_ISUPPORTS2(MediaCacheFlusher,<sp/>nsIObserver,<sp/>nsISupportsWeakReference)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">MediaCacheFlusher::~MediaCacheFlusher()</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>gMediaCacheFlusher<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaCacheFlusher::Init()</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gMediaCacheFlusher)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>gMediaCacheFlusher<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MediaCacheFlusher();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>NS_ADDREF(gMediaCacheFlusher);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIObserverService&gt;<sp/>observerService<sp/>=</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>mozilla::services::GetObserverService();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(observerService)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>observerService-&gt;AddObserver(gMediaCacheFlusher,<sp/></highlight><highlight class="stringliteral">&quot;last-pb-context-exited&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="classmozilla_1_1_media_cache" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmozilla_1_1_media_cache" kindref="compound">MediaCache</ref><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MediaCacheStream::BlockList;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MediaCacheStream::BlockList<sp/>BlockList;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>BLOCK_SIZE<sp/>=<sp/>MediaCacheStream::BLOCK_SIZE</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><ref refid="classmozilla_1_1_media_cache" kindref="compound">MediaCache</ref>()<sp/>:<sp/>mNextResourceID(1),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>mReentrantMonitor(</highlight><highlight class="stringliteral">&quot;MediaCache.mReentrantMonitor&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>mUpdateQueued(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>mInUpdate(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>MOZ_COUNT_CTOR(<ref refid="classmozilla_1_1_media_cache" kindref="compound">MediaCache</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>~<ref refid="classmozilla_1_1_media_cache" kindref="compound">MediaCache</ref>()<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(mStreams.IsEmpty(),<sp/></highlight><highlight class="stringliteral">&quot;Stream(s)<sp/>still<sp/>open!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>Truncate();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(mIndex.Length()<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Blocks<sp/>leaked?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mFileCache)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mFileCache-&gt;Close();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mFileCache<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>MOZ_COUNT_DTOR(<ref refid="classmozilla_1_1_media_cache" kindref="compound">MediaCache</ref>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Main<sp/>thread<sp/>only.<sp/>Creates<sp/>the<sp/>backing<sp/>cache<sp/>file.<sp/>If<sp/>this<sp/>fails,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>cache<sp/>is<sp/>still<sp/>in<sp/>a<sp/>semi-valid<sp/>state;<sp/>mFD<sp/>will<sp/>be<sp/>null,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>all<sp/>I/O<sp/>on<sp/>the<sp/>cache<sp/>file<sp/>will<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>nsresult<sp/>Init();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shut<sp/>down<sp/>the<sp/>global<sp/>cache<sp/>if<sp/>it&apos;s<sp/>no<sp/>longer<sp/>needed.<sp/>We<sp/>shut<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>cache<sp/>as<sp/>soon<sp/>as<sp/>there<sp/>are<sp/>no<sp/>streams.<sp/>This<sp/>means<sp/>that<sp/>during</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>normal<sp/>operation<sp/>we<sp/>are<sp/>likely<sp/>to<sp/>start<sp/>up<sp/>the<sp/>cache<sp/>and<sp/>shut<sp/>it<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>many<sp/>times,<sp/>but<sp/>that&apos;s<sp/>OK<sp/>since<sp/>starting<sp/>it<sp/>up<sp/>is<sp/>cheap<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>shutting<sp/>it<sp/>down<sp/>cleans<sp/>things<sp/>up<sp/>and<sp/>releases<sp/>disk<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MaybeShutdown();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Brutally<sp/>flush<sp/>the<sp/>cache<sp/>contents.<sp/>Main<sp/>thread<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Flush();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlushInternal();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cache-file<sp/>access<sp/>methods.<sp/>These<sp/>are<sp/>the<sp/>lowest-level<sp/>cache<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mReentrantMonitor<sp/>must<sp/>be<sp/>held;<sp/>these<sp/>can<sp/>be<sp/>called<sp/>on<sp/>any<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>return<sp/>partial<sp/>reads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>nsresult<sp/>ReadCacheFile(int64_t<sp/>aOffset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aData,<sp/>int32_t<sp/>aLength,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t*<sp/>aBytes);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>fail<sp/>if<sp/>all<sp/>aLength<sp/>bytes<sp/>are<sp/>not<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>nsresult<sp/>ReadCacheFileAllBytes(int64_t<sp/>aOffset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aData,<sp/>int32_t<sp/>aLength);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>int64_t<sp/>AllocateResourceID()</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mNextResourceID++;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mReentrantMonitor<sp/>must<sp/>be<sp/>held,<sp/>called<sp/>on<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>methods<sp/>are<sp/>used<sp/>by<sp/>the<sp/>stream<sp/>to<sp/>set<sp/>up<sp/>and<sp/>tear<sp/>down<sp/>streams,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>to<sp/>handle<sp/>reads<sp/>and<sp/>writes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>aStream<sp/>to<sp/>the<sp/>list<sp/>of<sp/>streams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OpenStream(MediaCacheStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>aStream<sp/>from<sp/>the<sp/>list<sp/>of<sp/>streams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReleaseStream(MediaCacheStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>all<sp/>blocks<sp/>belonging<sp/>to<sp/>aStream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReleaseStreamBlocks(MediaCacheStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>a<sp/>cache<sp/>entry<sp/>for<sp/>this<sp/>data,<sp/>and<sp/>write<sp/>the<sp/>data<sp/>into<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateAndWriteBlock(MediaCacheStream*<sp/>aStream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aData,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaCacheStream::ReadMode<sp/>aMode);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mReentrantMonitor<sp/>must<sp/>be<sp/>held;<sp/>can<sp/>be<sp/>called<sp/>on<sp/>any<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>the<sp/>cache<sp/>that<sp/>a<sp/>seek<sp/>has<sp/>been<sp/>requested.<sp/>Some<sp/>blocks<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>change<sp/>their<sp/>class<sp/>between<sp/>PLAYED_BLOCK<sp/>and<sp/>READAHEAD_BLOCK.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>does<sp/>not<sp/>trigger<sp/>channel<sp/>seeks<sp/>directly,<sp/>the<sp/>next<sp/>Update()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>do<sp/>that<sp/>if<sp/>necessary.<sp/>The<sp/>caller<sp/>will<sp/>call<sp/>QueueUpdate().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NoteSeek(MediaCacheStream*<sp/>aStream,<sp/>int64_t<sp/>aOldOffset);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>the<sp/>cache<sp/>that<sp/>a<sp/>block<sp/>has<sp/>been<sp/>read<sp/>from.<sp/>This<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>update<sp/>last-use<sp/>times.<sp/>The<sp/>block<sp/>may<sp/>not<sp/>actually<sp/>have<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cache<sp/>entry<sp/>yet<sp/>since<sp/>Read<sp/>can<sp/>read<sp/>data<sp/>from<sp/>a<sp/>stream&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in-memory<sp/>mPartialBlockBuffer<sp/>while<sp/>the<sp/>block<sp/>is<sp/>only<sp/>partly<sp/>full,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>thus<sp/>hasn&apos;t<sp/>yet<sp/>been<sp/>committed<sp/>to<sp/>the<sp/>cache.<sp/>The<sp/>caller<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>QueueUpdate().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NoteBlockUsage(MediaCacheStream*<sp/>aStream,<sp/>int32_t<sp/>aBlockIndex,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaCacheStream::ReadMode<sp/>aMode,<sp/>TimeStamp<sp/>aNow);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>aStream<sp/>as<sp/>having<sp/>the<sp/>block,<sp/>adding<sp/>it<sp/>as<sp/>an<sp/>owner.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddBlockOwnerAsReadahead(int32_t<sp/>aBlockIndex,<sp/>MediaCacheStream*<sp/>aStream,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>aStreamBlockIndex);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>queues<sp/>a<sp/>call<sp/>to<sp/>Update()<sp/>on<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QueueUpdate();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Updates<sp/>the<sp/>cache<sp/>state<sp/>asynchronously<sp/>on<sp/>the<sp/>main<sp/>thread:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>try<sp/>to<sp/>trim<sp/>the<sp/>cache<sp/>back<sp/>to<sp/>its<sp/>desired<sp/>size,<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>suspend<sp/>channels<sp/>that<sp/>are<sp/>going<sp/>to<sp/>read<sp/>data<sp/>that&apos;s<sp/>lower<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>anything<sp/>currently<sp/>cached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>resume<sp/>channels<sp/>that<sp/>are<sp/>going<sp/>to<sp/>read<sp/>data<sp/>that&apos;s<sp/>higher<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>something<sp/>currently<sp/>cached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>seek<sp/>channels<sp/>that<sp/>need<sp/>to<sp/>seek<sp/>to<sp/>a<sp/>new<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Update();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG_VERIFY_CACHE</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>invariants,<sp/>especially<sp/>block<sp/>list<sp/>invariants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Verify();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Verify()<sp/>{}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>ReentrantMonitor&amp;<sp/>GetReentrantMonitor()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mReentrantMonitor;<sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="classmozilla_1_1_media_cache_1_1_resource_stream_iterator" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmozilla_1_1_media_cache_1_1_resource_stream_iterator" kindref="compound">ResourceStreamIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmozilla_1_1_media_cache_1_1_resource_stream_iterator" kindref="compound">ResourceStreamIterator</ref>(int64_t<sp/>aResourceID)<sp/>:</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mResourceID(aResourceID),<sp/>mNext(0)<sp/>{}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>Next()</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mNext<sp/>&lt;<sp/>gMediaCache-&gt;mStreams.Length())<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>stream<sp/>=<sp/>gMediaCache-&gt;mStreams[mNext];</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++mNext;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;GetResourceID()<sp/>==<sp/>mResourceID<sp/>&amp;&amp;<sp/>!stream-&gt;IsClosed())</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/><sp/>mResourceID;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>mNext;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>a<sp/>free<sp/>or<sp/>reusable<sp/>block<sp/>and<sp/>return<sp/>its<sp/>index.<sp/>If<sp/>there<sp/>are<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>blocks<sp/>and<sp/>no<sp/>reusable<sp/>blocks,<sp/>add<sp/>a<sp/>new<sp/>block<sp/>to<sp/>the<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>return<sp/>it.<sp/>Can<sp/>return<sp/>-1<sp/>on<sp/>OOM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>int32_t<sp/>FindBlockForIncomingData(TimeStamp<sp/>aNow,<sp/>MediaCacheStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>a<sp/>reusable<sp/>block<sp/>---<sp/>a<sp/>free<sp/>block,<sp/>if<sp/>there<sp/>is<sp/>one,<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>reusable<sp/>block<sp/>with<sp/>the<sp/>latest<sp/>predicted-next-use,<sp/>or<sp/>-1<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>aren&apos;t<sp/>any<sp/>freeable<sp/>blocks.<sp/>Only<sp/>block<sp/>indices<sp/>less<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>aMaxSearchBlockIndex<sp/>are<sp/>considered.<sp/>If<sp/>aForStream<sp/>is<sp/>non-null,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>aForStream<sp/>and<sp/>aForStreamBlock<sp/>indicate<sp/>what<sp/>media<sp/>data<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>placed;<sp/>FindReusableBlock<sp/>will<sp/>favour<sp/>returning<sp/>free<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>near<sp/>other<sp/>blocks<sp/>for<sp/>that<sp/>point<sp/>in<sp/>the<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>int32_t<sp/>FindReusableBlock(TimeStamp<sp/>aNow,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>aForStream,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>aForStreamBlock,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>aMaxSearchBlockIndex);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BlockIsReusable(int32_t<sp/>aBlockIndex);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Given<sp/>a<sp/>list<sp/>of<sp/>blocks<sp/>sorted<sp/>with<sp/>the<sp/>most<sp/>reusable<sp/>blocks<sp/>at<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>end,<sp/>find<sp/>the<sp/>last<sp/>block<sp/>whose<sp/>stream<sp/>is<sp/>not<sp/>pinned<sp/>(if<sp/>any)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>whose<sp/>cache<sp/>entry<sp/>index<sp/>is<sp/>less<sp/>than<sp/>aBlockIndexLimit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>append<sp/>it<sp/>to<sp/>aResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppendMostReusableBlock(BlockList*<sp/>aBlockList,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsTArray&lt;uint32_t&gt;*<sp/>aResult,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>aBlockIndexLimit);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>BlockClass<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>belongs<sp/>to<sp/>mMetadataBlockList<sp/>because<sp/>data<sp/>has<sp/>been<sp/>consumed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>it<sp/>in<sp/>&quot;metadata<sp/>mode&quot;<sp/>---<sp/>in<sp/>particular<sp/>blocks<sp/>read<sp/>during</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ogg<sp/>seeks<sp/>go<sp/>into<sp/>this<sp/>class.<sp/>These<sp/>blocks<sp/>may<sp/>have<sp/>played<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>them<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>METADATA_BLOCK,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>belongs<sp/>to<sp/>mPlayedBlockList<sp/>because<sp/>its<sp/>offset<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>less<sp/>than<sp/>the<sp/>stream&apos;s<sp/>current<sp/>reader<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>PLAYED_BLOCK,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>belongs<sp/>to<sp/>the<sp/>stream&apos;s<sp/>mReadaheadBlockList<sp/>because<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>offset<sp/>is<sp/>greater<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>the<sp/>stream&apos;s<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reader<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>READAHEAD_BLOCK</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="structmozilla_1_1_media_cache_1_1_block_owner" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmozilla_1_1_media_cache_1_1_block_owner" kindref="compound">BlockOwner</ref><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmozilla_1_1_media_cache_1_1_block_owner" kindref="compound">BlockOwner</ref>()<sp/>:<sp/>mStream(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/>mClass(READAHEAD_BLOCK)<sp/>{}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>stream<sp/>that<sp/>owns<sp/>this<sp/>block,<sp/>or<sp/>null<sp/>if<sp/>the<sp/>block<sp/>is<sp/>free.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>mStream;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>block<sp/>index<sp/>in<sp/>the<sp/>stream.<sp/>Valid<sp/>only<sp/>if<sp/>mStream<sp/>is<sp/>non-null.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStreamBlock;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>at<sp/>which<sp/>this<sp/>block<sp/>was<sp/>last<sp/>used.<sp/>Valid<sp/>only<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mClass<sp/>is<sp/>METADATA_BLOCK<sp/>or<sp/>PLAYED_BLOCK.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeStamp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mLastUseTime;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>BlockClass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mClass;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="structmozilla_1_1_media_cache_1_1_block" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmozilla_1_1_media_cache_1_1_block" kindref="compound">Block</ref><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>blocks<sp/>have<sp/>an<sp/>empty<sp/>mOwners<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>nsTArray&lt;BlockOwner&gt;<sp/>mOwners;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>BlockList<sp/>that<sp/>the<sp/>block<sp/>should<sp/>belong<sp/>to<sp/>given<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>owner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>BlockList*<sp/>GetListForBlock(<ref refid="structmozilla_1_1_media_cache_1_1_block_owner" kindref="compound">BlockOwner</ref>*<sp/>aBlock);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>BlockOwner<sp/>for<sp/>the<sp/>given<sp/>block<sp/>index<sp/>and<sp/>owning<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(returns<sp/>null<sp/>if<sp/>the<sp/>stream<sp/>does<sp/>not<sp/>own<sp/>the<sp/>block)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><ref refid="structmozilla_1_1_media_cache_1_1_block_owner" kindref="compound">BlockOwner</ref>*<sp/>GetBlockOwner(int32_t<sp/>aBlockIndex,<sp/>MediaCacheStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>block<sp/>is<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsBlockFree(int32_t<sp/>aBlockIndex)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mIndex[aBlockIndex].mOwners.IsEmpty();<sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>block<sp/>to<sp/>the<sp/>free<sp/>list<sp/>and<sp/>mark<sp/>its<sp/>streams<sp/>as<sp/>not<sp/>having</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>block<sp/>in<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FreeBlock(int32_t<sp/>aBlock);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>aStream<sp/>as<sp/>not<sp/>having<sp/>the<sp/>block,<sp/>removing<sp/>it<sp/>as<sp/>an<sp/>owner.<sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>block<sp/>has<sp/>no<sp/>more<sp/>owners<sp/>it&apos;s<sp/>added<sp/>to<sp/>the<sp/>free<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RemoveBlockOwner(int32_t<sp/>aBlockIndex,<sp/>MediaCacheStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Swap<sp/>all<sp/>metadata<sp/>associated<sp/>with<sp/>the<sp/>two<sp/>blocks.<sp/>The<sp/>caller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>responsible<sp/>for<sp/>swapping<sp/>up<sp/>any<sp/>cache<sp/>file<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SwapBlocks(int32_t<sp/>aBlockIndex1,<sp/>int32_t<sp/>aBlockIndex2);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>the<sp/>block<sp/>into<sp/>the<sp/>readahead<sp/>block<sp/>list<sp/>for<sp/>the<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>the<sp/>right<sp/>point<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InsertReadaheadBlock(BlockOwner*<sp/>aBlockOwner,<sp/>int32_t<sp/>aBlockIndex);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Guess<sp/>the<sp/>duration<sp/>until<sp/>block<sp/>aBlock<sp/>will<sp/>be<sp/>next<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>TimeDuration<sp/>PredictNextUse(TimeStamp<sp/>aNow,<sp/>int32_t<sp/>aBlock);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Guess<sp/>the<sp/>duration<sp/>until<sp/>the<sp/>next<sp/>incoming<sp/>data<sp/>on<sp/>aStream<sp/>will<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>TimeDuration<sp/>PredictNextUseForIncomingData(MediaCacheStream*<sp/>aStream);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Truncate<sp/>the<sp/>file<sp/>and<sp/>index<sp/>array<sp/>if<sp/>there<sp/>are<sp/>free<sp/>blocks<sp/>at<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Truncate();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>member<sp/>is<sp/>main-thread<sp/>only.<sp/>It&apos;s<sp/>used<sp/>to<sp/>allocate<sp/>unique</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>resource<sp/>IDs<sp/>to<sp/>streams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>int64_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mNextResourceID;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>monitor<sp/>protects<sp/>all<sp/>the<sp/>data<sp/>members<sp/>here.<sp/>Also,<sp/>off-main-thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>readers<sp/>that<sp/>need<sp/>to<sp/>block<sp/>will<sp/>Wait()<sp/>on<sp/>this<sp/>monitor.<sp/>When<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>becomes<sp/>available<sp/>in<sp/>the<sp/>cache,<sp/>we<sp/>NotifyAll()<sp/>on<sp/>this<sp/>monitor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>ReentrantMonitor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mReentrantMonitor;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>only<sp/>written<sp/>while<sp/>on<sp/>the<sp/>main<sp/>thread<sp/>and<sp/>the<sp/>monitor<sp/>is<sp/>held.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Thus,<sp/>it<sp/>can<sp/>be<sp/>safely<sp/>read<sp/>from<sp/>the<sp/>main<sp/>thread<sp/>or<sp/>while<sp/>holding<sp/>the<sp/>monitor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>nsTArray&lt;MediaCacheStream*&gt;<sp/>mStreams;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>Blocks<sp/>describing<sp/>the<sp/>cache<sp/>entries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>nsTArray&lt;Block&gt;<sp/>mIndex;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Writer<sp/>which<sp/>performs<sp/>IO,<sp/>asynchronously<sp/>writing<sp/>cache<sp/>blocks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;FileBlockCache&gt;<sp/>mFileCache;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>list<sp/>of<sp/>free<sp/>blocks;<sp/>they<sp/>are<sp/>not<sp/>ordered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>BlockList<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mFreeBlocks;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>if<sp/>an<sp/>event<sp/>to<sp/>run<sp/>Update()<sp/>has<sp/>been<sp/>queued<sp/>but<sp/>not<sp/>processed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mUpdateQueued;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="339"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mInUpdate;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="341"><highlight class="preprocessor"></highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal">NS_IMETHODIMP</highlight></codeline>
<codeline lineno="344"><highlight class="normal">MediaCacheFlusher::Observe(nsISupports<sp/>*aSubject,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*aTopic,<sp/>PRUnichar<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*aData)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(aTopic,<sp/></highlight><highlight class="stringliteral">&quot;last-pb-context-exited&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaCache::Flush();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaCacheStream::BlockList::AddFirstBlock(int32_t<sp/>aBlock)</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!mEntries.GetEntry(aBlock),<sp/></highlight><highlight class="stringliteral">&quot;Block<sp/>already<sp/>in<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>Entry*<sp/>entry<sp/>=<sp/>mEntries.PutEntry(aBlock);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mFirstBlock<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>entry-&gt;mNextBlock<sp/>=<sp/>entry-&gt;mPrevBlock<sp/>=<sp/>aBlock;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>entry-&gt;mNextBlock<sp/>=<sp/>mFirstBlock;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>entry-&gt;mPrevBlock<sp/>=<sp/>mEntries.GetEntry(mFirstBlock)-&gt;mPrevBlock;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>mEntries.GetEntry(entry-&gt;mNextBlock)-&gt;mPrevBlock<sp/>=<sp/>aBlock;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>mEntries.GetEntry(entry-&gt;mPrevBlock)-&gt;mNextBlock<sp/>=<sp/>aBlock;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>mFirstBlock<sp/>=<sp/>aBlock;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>++mCount;</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaCacheStream::BlockList::AddAfter(int32_t<sp/>aBlock,<sp/>int32_t<sp/>aBefore)</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!mEntries.GetEntry(aBlock),<sp/></highlight><highlight class="stringliteral">&quot;Block<sp/>already<sp/>in<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>Entry*<sp/>entry<sp/>=<sp/>mEntries.PutEntry(aBlock);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>Entry*<sp/>addAfter<sp/>=<sp/>mEntries.GetEntry(aBefore);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>NS_ASSERTION(addAfter,<sp/></highlight><highlight class="stringliteral">&quot;aBefore<sp/>not<sp/>in<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>entry-&gt;mNextBlock<sp/>=<sp/>addAfter-&gt;mNextBlock;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>entry-&gt;mPrevBlock<sp/>=<sp/>aBefore;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>mEntries.GetEntry(entry-&gt;mNextBlock)-&gt;mPrevBlock<sp/>=<sp/>aBlock;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>mEntries.GetEntry(entry-&gt;mPrevBlock)-&gt;mNextBlock<sp/>=<sp/>aBlock;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>++mCount;</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaCacheStream::BlockList::RemoveBlock(int32_t<sp/>aBlock)</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>Entry*<sp/>entry<sp/>=<sp/>mEntries.GetEntry(aBlock);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>NS_ASSERTION(entry,<sp/></highlight><highlight class="stringliteral">&quot;Block<sp/>not<sp/>in<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry-&gt;mNextBlock<sp/>==<sp/>aBlock)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(entry-&gt;mPrevBlock<sp/>==<sp/>aBlock,<sp/></highlight><highlight class="stringliteral">&quot;Linked<sp/>list<sp/>inconsistency&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(mFirstBlock<sp/>==<sp/>aBlock,<sp/></highlight><highlight class="stringliteral">&quot;Linked<sp/>list<sp/>inconsistency&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>mFirstBlock<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mFirstBlock<sp/>==<sp/>aBlock)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mFirstBlock<sp/>=<sp/>entry-&gt;mNextBlock;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>mEntries.GetEntry(entry-&gt;mNextBlock)-&gt;mPrevBlock<sp/>=<sp/>entry-&gt;mPrevBlock;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>mEntries.GetEntry(entry-&gt;mPrevBlock)-&gt;mNextBlock<sp/>=<sp/>entry-&gt;mNextBlock;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>mEntries.RemoveEntry(aBlock);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>--mCount;</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal">int32_t<sp/>MediaCacheStream::BlockList::GetLastBlock()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="405"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mFirstBlock<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mEntries.GetEntry(mFirstBlock)-&gt;mPrevBlock;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">int32_t<sp/>MediaCacheStream::BlockList::GetNextBlock(int32_t<sp/>aBlock)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="412"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>int32_t<sp/>block<sp/>=<sp/>mEntries.GetEntry(aBlock)-&gt;mNextBlock;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block<sp/>==<sp/>mFirstBlock)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>block;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">int32_t<sp/>MediaCacheStream::BlockList::GetPrevBlock(int32_t<sp/>aBlock)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="420"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aBlock<sp/>==<sp/>mFirstBlock)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mEntries.GetEntry(aBlock)-&gt;mPrevBlock;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="427"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MediaCacheStream::BlockList::Verify()</highlight></codeline>
<codeline lineno="428"><highlight class="normal">{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>int32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mFirstBlock<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>block<sp/>=<sp/>mFirstBlock;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Entry*<sp/>entry<sp/>=<sp/>mEntries.GetEntry(block);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(mEntries.GetEntry(entry-&gt;mNextBlock)-&gt;mPrevBlock<sp/>==<sp/>block,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>prev<sp/>link&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(mEntries.GetEntry(entry-&gt;mPrevBlock)-&gt;mNextBlock<sp/>==<sp/>block,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>next<sp/>link&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/>entry-&gt;mNextBlock;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(block<sp/>!=<sp/>mFirstBlock);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>NS_ASSERTION(count<sp/>==<sp/>mCount,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>count&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="445"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UpdateSwappedBlockIndex(int32_t*<sp/>aBlockIndex,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>aBlock1Index,<sp/>int32_t<sp/>aBlock2Index)</highlight></codeline>
<codeline lineno="448"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>int32_t<sp/>index<sp/>=<sp/>*aBlockIndex;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>==<sp/>aBlock1Index)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>*aBlockIndex<sp/>=<sp/>aBlock2Index;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>==<sp/>aBlock2Index)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>*aBlockIndex<sp/>=<sp/>aBlock1Index;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal">MediaCacheStream::BlockList::NotifyBlockSwapped(int32_t<sp/>aBlockIndex1,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>aBlockIndex2)</highlight></codeline>
<codeline lineno="460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>Entry*<sp/>e1<sp/>=<sp/>mEntries.GetEntry(aBlockIndex1);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>Entry*<sp/>e2<sp/>=<sp/>mEntries.GetEntry(aBlockIndex2);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>int32_t<sp/>e1Prev<sp/>=<sp/>-1,<sp/>e1Next<sp/>=<sp/>-1,<sp/>e2Prev<sp/>=<sp/>-1,<sp/>e2Next<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fix<sp/>mFirstBlock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>UpdateSwappedBlockIndex(&amp;mFirstBlock,<sp/>aBlockIndex1,<sp/>aBlockIndex2);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fix<sp/>mNextBlock/mPrevBlock<sp/>links.<sp/>First<sp/>capture<sp/>previous/next<sp/>links</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>don&apos;t<sp/>get<sp/>confused<sp/>due<sp/>to<sp/>aliasing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e1)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>e1Prev<sp/>=<sp/>e1-&gt;mPrevBlock;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>e1Next<sp/>=<sp/>e1-&gt;mNextBlock;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e2)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>e2Prev<sp/>=<sp/>e2-&gt;mPrevBlock;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>e2Next<sp/>=<sp/>e2-&gt;mNextBlock;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>entries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e1)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>mEntries.GetEntry(e1Prev)-&gt;mNextBlock<sp/>=<sp/>aBlockIndex2;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>mEntries.GetEntry(e1Next)-&gt;mPrevBlock<sp/>=<sp/>aBlockIndex2;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e2)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>mEntries.GetEntry(e2Prev)-&gt;mNextBlock<sp/>=<sp/>aBlockIndex1;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>mEntries.GetEntry(e2Next)-&gt;mPrevBlock<sp/>=<sp/>aBlockIndex1;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fix<sp/>hashtable<sp/>keys.<sp/>First<sp/>remove<sp/>stale<sp/>entries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e1)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>e1Prev<sp/>=<sp/>e1-&gt;mPrevBlock;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>e1Next<sp/>=<sp/>e1-&gt;mNextBlock;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>mEntries.RemoveEntry(aBlockIndex1);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Refresh<sp/>pointer<sp/>after<sp/>hashtable<sp/>mutation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>e2<sp/>=<sp/>mEntries.GetEntry(aBlockIndex2);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e2)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>e2Prev<sp/>=<sp/>e2-&gt;mPrevBlock;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>e2Next<sp/>=<sp/>e2-&gt;mNextBlock;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>mEntries.RemoveEntry(aBlockIndex2);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>new<sp/>entries<sp/>back.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e1)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>mEntries.PutEntry(aBlockIndex2);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>e1-&gt;mNextBlock<sp/>=<sp/>e1Next;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>e1-&gt;mPrevBlock<sp/>=<sp/>e1Prev;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e2)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>e2<sp/>=<sp/>mEntries.PutEntry(aBlockIndex1);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>e2-&gt;mNextBlock<sp/>=<sp/>e2Next;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>e2-&gt;mPrevBlock<sp/>=<sp/>e2Prev;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="515"><highlight class="normal">MediaCache::Init()</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!mFileCache,<sp/></highlight><highlight class="stringliteral">&quot;Cache<sp/>file<sp/>already<sp/>open?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>PRFileDesc*<sp/>fileDesc<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>NS_OpenAnonymousTemporaryFile(&amp;fileDesc);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>NS_ENSURE_SUCCESS(rv,rv);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>mFileCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FileBlockCache();</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>rv<sp/>=<sp/>mFileCache-&gt;Open(fileDesc);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>NS_ENSURE_SUCCESS(rv,rv);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PR_LOGGING</highlight></codeline>
<codeline lineno="529"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gMediaCacheLog)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>gMediaCacheLog<sp/>=<sp/>PR_NewLogModule(</highlight><highlight class="stringliteral">&quot;MediaCache&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>MediaCacheFlusher::Init();</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">MediaCache::Flush()</highlight></codeline>
<codeline lineno="541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gMediaCache)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;FlushInternal();</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal">MediaCache::FlushInternal()</highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mReentrantMonitor);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>blockIndex<sp/>=<sp/>0;<sp/>blockIndex<sp/>&lt;<sp/>mIndex.Length();<sp/>++blockIndex)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>FreeBlock(blockIndex);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Truncate<sp/>file,<sp/>close<sp/>it,<sp/>and<sp/>reopen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>Truncate();</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mIndex.Length()<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Blocks<sp/>leaked?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mFileCache)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>mFileCache-&gt;Close();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>mFileCache<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>Init();</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal">MediaCache::MaybeShutdown()</highlight></codeline>
<codeline lineno="571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MediaCache::MaybeShutdown<sp/>called<sp/>on<sp/>non-main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gMediaCache-&gt;mStreams.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>shut<sp/>down<sp/>yet,<sp/>streams<sp/>are<sp/>still<sp/>alive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we&apos;re<sp/>on<sp/>the<sp/>main<sp/>thread,<sp/>no-one<sp/>is<sp/>going<sp/>to<sp/>add<sp/>a<sp/>new<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>while<sp/>we<sp/>shut<sp/>down.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>static<sp/>so<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>delete<sp/>&apos;this&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gMediaCache;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>gMediaCache<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>NS_IF_RELEASE(gMediaCacheFlusher);</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal">InitMediaCache()</highlight></codeline>
<codeline lineno="589"><highlight class="normal">{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gMediaCache)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>gMediaCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MediaCache();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gMediaCache)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>gMediaCache-&gt;Init();</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gMediaCache;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>gMediaCache<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="605"><highlight class="normal">MediaCache::ReadCacheFile(int64_t<sp/>aOffset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aData,<sp/>int32_t<sp/>aLength,</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t*<sp/>aBytes)</highlight></codeline>
<codeline lineno="607"><highlight class="normal">{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mFileCache)</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mFileCache-&gt;Read(aOffset,<sp/>reinterpret_cast&lt;uint8_t*&gt;(aData),<sp/>aLength,<sp/>aBytes);</highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="617"><highlight class="normal">MediaCache::ReadCacheFileAllBytes(int64_t<sp/>aOffset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aData,<sp/>int32_t<sp/>aLength)</highlight></codeline>
<codeline lineno="618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>int64_t<sp/>offset<sp/>=<sp/>aOffset;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>int32_t<sp/>count<sp/>=<sp/>aLength;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cast<sp/>to<sp/>char*<sp/>so<sp/>we<sp/>can<sp/>do<sp/>byte-wise<sp/>pointer<sp/>arithmetic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(aData);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>bytes;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>ReadCacheFile(offset,<sp/>data,<sp/>count,<sp/>&amp;bytes);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>-=<sp/>bytes;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32_t<sp/>GetMaxBlocks()</highlight></codeline>
<codeline lineno="640"><highlight class="normal">{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>look<sp/>up<sp/>the<sp/>cache<sp/>size<sp/>every<sp/>time.<sp/>This<sp/>means<sp/>dynamic<sp/>changes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>pref<sp/>are<sp/>applied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cache<sp/>size<sp/>is<sp/>in<sp/>KB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>int32_t<sp/>cacheSize<sp/>=<sp/>Preferences::GetInt(</highlight><highlight class="stringliteral">&quot;media.cache_size&quot;</highlight><highlight class="normal">,<sp/>500*1024);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>int64_t<sp/>maxBlocks<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cacheSize)*1024/MediaCache::BLOCK_SIZE;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>maxBlocks<sp/>=<sp/>NS_MAX&lt;int64_t&gt;(maxBlocks,<sp/>1);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int32_t(NS_MIN&lt;int64_t&gt;(maxBlocks,<sp/>INT32_MAX));</highlight></codeline>
<codeline lineno="648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal">int32_t</highlight></codeline>
<codeline lineno="651"><highlight class="normal">MediaCache::FindBlockForIncomingData(TimeStamp<sp/>aNow,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="653"><highlight class="normal">{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>int32_t<sp/>blockIndex<sp/>=<sp/>FindReusableBlock(aNow,<sp/>aStream,</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aStream-&gt;mChannelOffset/BLOCK_SIZE,<sp/>INT32_MAX);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockIndex<sp/>&lt;<sp/>0<sp/>||<sp/>!IsBlockFree(blockIndex))<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>block<sp/>returned<sp/>is<sp/>already<sp/>allocated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>reuse<sp/>it<sp/>if<sp/>a)<sp/>there&apos;s<sp/>room<sp/>to<sp/>expand<sp/>the<sp/>cache<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>b)<sp/>the<sp/>data<sp/>we&apos;re<sp/>going<sp/>to<sp/>store<sp/>in<sp/>the<sp/>free<sp/>block<sp/>is<sp/>not<sp/>higher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>priority<sp/>than<sp/>the<sp/>data<sp/>already<sp/>stored<sp/>in<sp/>the<sp/>free<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>latter<sp/>can<sp/>lead<sp/>us<sp/>to<sp/>go<sp/>over<sp/>the<sp/>cache<sp/>limit<sp/>a<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mIndex.Length()<sp/>&lt;<sp/>uint32_t(GetMaxBlocks())<sp/>||<sp/>blockIndex<sp/>&lt;<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PredictNextUseForIncomingData(aStream)<sp/>&gt;=<sp/>PredictNextUse(aNow,<sp/>blockIndex)))<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blockIndex<sp/>=<sp/>mIndex.Length();</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mIndex.AppendElement())</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mFreeBlocks.AddFirstBlock(blockIndex);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blockIndex;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blockIndex;</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal">MediaCache::BlockIsReusable(int32_t<sp/>aBlockIndex)</highlight></codeline>
<codeline lineno="680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>Block*<sp/>block<sp/>=<sp/>&amp;mIndex[aBlockIndex];</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>block-&gt;mOwners.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>stream<sp/>=<sp/>block-&gt;mOwners[i].mStream;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;mPinCount<sp/>&gt;<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mStreamOffset/BLOCK_SIZE<sp/>==<sp/>block-&gt;mOwners[i].mStreamBlock)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal">MediaCache::AppendMostReusableBlock(BlockList*<sp/>aBlockList,</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsTArray&lt;uint32_t&gt;*<sp/>aResult,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>aBlockIndexLimit)</highlight></codeline>
<codeline lineno="696"><highlight class="normal">{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>int32_t<sp/>blockIndex<sp/>=<sp/>aBlockList-&gt;GetLastBlock();</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockIndex<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>consider<sp/>blocks<sp/>for<sp/>pinned<sp/>streams,<sp/>or<sp/>blocks<sp/>that<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>beyond<sp/>the<sp/>specified<sp/>limit,<sp/>or<sp/>a<sp/>block<sp/>that<sp/>contains<sp/>a<sp/>stream&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>read<sp/>position<sp/>(such<sp/>a<sp/>block<sp/>contains<sp/>both<sp/>played<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>readahead<sp/>data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockIndex<sp/>&lt;<sp/>aBlockIndexLimit<sp/>&amp;&amp;<sp/>BlockIsReusable(blockIndex))<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aResult-&gt;AppendElement(blockIndex);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>blockIndex<sp/>=<sp/>aBlockList-&gt;GetPrevBlock(blockIndex);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(blockIndex<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal">int32_t</highlight></codeline>
<codeline lineno="716"><highlight class="normal">MediaCache::FindReusableBlock(TimeStamp<sp/>aNow,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>aForStream,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>aForStreamBlock,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>aMaxSearchBlockIndex)</highlight></codeline>
<codeline lineno="720"><highlight class="normal">{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>uint32_t<sp/>length<sp/>=<sp/>NS_MIN(uint32_t(aMaxSearchBlockIndex),<sp/>mIndex.Length());</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aForStream<sp/>&amp;&amp;<sp/>aForStreamBlock<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t(aForStreamBlock)<sp/>&lt;=<sp/>aForStream-&gt;mBlocks.Length())<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>prevCacheBlock<sp/>=<sp/>aForStream-&gt;mBlocks[aForStreamBlock<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevCacheBlock<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>freeBlockScanEnd<sp/>=</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_MIN(length,<sp/>prevCacheBlock<sp/>+<sp/>FREE_BLOCK_SCAN_LIMIT);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>prevCacheBlock;<sp/>i<sp/>&lt;<sp/>freeBlockScanEnd;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsBlockFree(i))</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mFreeBlocks.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>blockIndex<sp/>=<sp/>mFreeBlocks.GetFirstBlock();</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockIndex<sp/>&lt;<sp/>aMaxSearchBlockIndex)</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blockIndex;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blockIndex<sp/>=<sp/>mFreeBlocks.GetNextBlock(blockIndex);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(blockIndex<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>a<sp/>list<sp/>of<sp/>the<sp/>blocks<sp/>we<sp/>should<sp/>consider<sp/>for<sp/>the<sp/>&quot;latest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>predicted<sp/>time<sp/>of<sp/>next<sp/>use&quot;.<sp/>We<sp/>can<sp/>exploit<sp/>the<sp/>fact<sp/>that<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>linked<sp/>lists<sp/>are<sp/>ordered<sp/>by<sp/>increasing<sp/>time<sp/>of<sp/>next<sp/>use.<sp/>This<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>actually<sp/>the<sp/>whole<sp/>point<sp/>of<sp/>having<sp/>the<sp/>linked<sp/>lists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>nsAutoTArray&lt;uint32_t,8&gt;<sp/>candidates;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>stream<sp/>=<sp/>mStreams[i];</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;mPinCount<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>point<sp/>in<sp/>even<sp/>looking<sp/>at<sp/>this<sp/>stream&apos;s<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>AppendMostReusableBlock(&amp;stream-&gt;mMetadataBlocks,<sp/>&amp;candidates,<sp/>length);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>AppendMostReusableBlock(&amp;stream-&gt;mPlayedBlocks,<sp/>&amp;candidates,<sp/>length);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>consider<sp/>readahead<sp/>blocks<sp/>in<sp/>non-seekable<sp/>streams.<sp/>If<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>block<sp/>we<sp/>won&apos;t<sp/>be<sp/>able<sp/>to<sp/>seek<sp/>back<sp/>to<sp/>read<sp/>it<sp/>later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;mIsSeekable)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AppendMostReusableBlock(&amp;stream-&gt;mReadaheadBlocks,<sp/>&amp;candidates,<sp/>length);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>TimeDuration<sp/>latestUse;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>int32_t<sp/>latestUseBlock<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>candidates.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeDuration<sp/>nextUse<sp/>=<sp/>PredictNextUse(aNow,<sp/>candidates[i]);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextUse<sp/>&gt;<sp/>latestUse)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>latestUse<sp/>=<sp/>nextUse;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>latestUseBlock<sp/>=<sp/>candidates[i];</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>latestUseBlock;</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal">MediaCache::BlockList*</highlight></codeline>
<codeline lineno="783"><highlight class="normal">MediaCache::GetListForBlock(BlockOwner*<sp/>aBlock)</highlight></codeline>
<codeline lineno="784"><highlight class="normal">{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(aBlock-&gt;mClass)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>METADATA_BLOCK:</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(aBlock-&gt;mStream,<sp/></highlight><highlight class="stringliteral">&quot;Metadata<sp/>block<sp/>has<sp/>no<sp/>stream?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;aBlock-&gt;mStream-&gt;mMetadataBlocks;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PLAYED_BLOCK:</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(aBlock-&gt;mStream,<sp/></highlight><highlight class="stringliteral">&quot;Metadata<sp/>block<sp/>has<sp/>no<sp/>stream?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;aBlock-&gt;mStream-&gt;mPlayedBlocks;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>READAHEAD_BLOCK:</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(aBlock-&gt;mStream,<sp/></highlight><highlight class="stringliteral">&quot;Readahead<sp/>block<sp/>has<sp/>no<sp/>stream?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;aBlock-&gt;mStream-&gt;mReadaheadBlocks;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ERROR(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>block<sp/>class&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal">MediaCache::BlockOwner*</highlight></codeline>
<codeline lineno="802"><highlight class="normal">MediaCache::GetBlockOwner(int32_t<sp/>aBlockIndex,<sp/>MediaCacheStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>Block*<sp/>block<sp/>=<sp/>&amp;mIndex[aBlockIndex];</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>block-&gt;mOwners.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block-&gt;mOwners[i].mStream<sp/>==<sp/>aStream)</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;block-&gt;mOwners[i];</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal">MediaCache::SwapBlocks(int32_t<sp/>aBlockIndex1,<sp/>int32_t<sp/>aBlockIndex2)</highlight></codeline>
<codeline lineno="814"><highlight class="normal">{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>Block*<sp/>block1<sp/>=<sp/>&amp;mIndex[aBlockIndex1];</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>Block*<sp/>block2<sp/>=<sp/>&amp;mIndex[aBlockIndex2];</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>block1-&gt;mOwners.SwapElements(block2-&gt;mOwners);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>all<sp/>references<sp/>to<sp/>block1<sp/>have<sp/>to<sp/>be<sp/>replaced<sp/>with<sp/>block2<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>vice<sp/>versa.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>update<sp/>stream<sp/>references<sp/>to<sp/>blocks<sp/>via<sp/>mBlocks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Block*<sp/>blocks[]<sp/>=<sp/>{<sp/>block1,<sp/>block2<sp/>};</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>int32_t<sp/>blockIndices[]<sp/>=<sp/>{<sp/>aBlockIndex1,<sp/>aBlockIndex2<sp/>};</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>blocks[i]-&gt;mOwners.Length();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BlockOwner*<sp/>b<sp/>=<sp/>&amp;blocks[i]-&gt;mOwners[j];</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;mStream-&gt;mBlocks[b-&gt;mStreamBlock]<sp/>=<sp/>blockIndices[i];</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>update<sp/>references<sp/>to<sp/>blocks<sp/>in<sp/>block<sp/>lists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>mFreeBlocks.NotifyBlockSwapped(aBlockIndex1,<sp/>aBlockIndex2);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>nsTHashtable&lt;nsPtrHashKey&lt;MediaCacheStream&gt;<sp/>&gt;<sp/>visitedStreams;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>visitedStreams.Init();</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>blocks[i]-&gt;mOwners.Length();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>stream<sp/>=<sp/>blocks[i]-&gt;mOwners[j].mStream;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>we<sp/>don&apos;t<sp/>update<sp/>the<sp/>same<sp/>stream<sp/>twice<sp/>---<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>would<sp/>result<sp/>in<sp/>swapping<sp/>the<sp/>block<sp/>references<sp/>back<sp/>again!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visitedStreams.GetEntry(stream))</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>visitedStreams.PutEntry(stream);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mReadaheadBlocks.NotifyBlockSwapped(aBlockIndex1,<sp/>aBlockIndex2);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mPlayedBlocks.NotifyBlockSwapped(aBlockIndex1,<sp/>aBlockIndex2);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mMetadataBlocks.NotifyBlockSwapped(aBlockIndex1,<sp/>aBlockIndex2);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>Verify();</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal">MediaCache::RemoveBlockOwner(int32_t<sp/>aBlockIndex,<sp/>MediaCacheStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="859"><highlight class="normal">{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>Block*<sp/>block<sp/>=<sp/>&amp;mIndex[aBlockIndex];</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>block-&gt;mOwners.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>BlockOwner*<sp/>bo<sp/>=<sp/>&amp;block-&gt;mOwners[i];</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bo-&gt;mStream<sp/>==<sp/>aStream)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetListForBlock(bo)-&gt;RemoveBlock(aBlockIndex);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bo-&gt;mStream-&gt;mBlocks[bo-&gt;mStreamBlock]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;mOwners.RemoveElementAt(i);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block-&gt;mOwners.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mFreeBlocks.AddFirstBlock(aBlockIndex);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal">MediaCache::AddBlockOwnerAsReadahead(int32_t<sp/>aBlockIndex,</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>aStream,</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>aStreamBlockIndex)</highlight></codeline>
<codeline lineno="879"><highlight class="normal">{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>Block*<sp/>block<sp/>=<sp/>&amp;mIndex[aBlockIndex];</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block-&gt;mOwners.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>mFreeBlocks.RemoveBlock(aBlockIndex);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>BlockOwner*<sp/>bo<sp/>=<sp/>block-&gt;mOwners.AppendElement();</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>bo-&gt;mStream<sp/>=<sp/>aStream;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>bo-&gt;mStreamBlock<sp/>=<sp/>aStreamBlockIndex;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>aStream-&gt;mBlocks[aStreamBlockIndex]<sp/>=<sp/>aBlockIndex;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>bo-&gt;mClass<sp/>=<sp/>READAHEAD_BLOCK;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>InsertReadaheadBlock(bo,<sp/>aBlockIndex);</highlight></codeline>
<codeline lineno="890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal">MediaCache::FreeBlock(int32_t<sp/>aBlock)</highlight></codeline>
<codeline lineno="894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>Block*<sp/>block<sp/>=<sp/>&amp;mIndex[aBlock];</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block-&gt;mOwners.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Released<sp/>block<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>aBlock));</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>block-&gt;mOwners.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>BlockOwner*<sp/>bo<sp/>=<sp/>&amp;block-&gt;mOwners[i];</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>GetListForBlock(bo)-&gt;RemoveBlock(aBlock);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>bo-&gt;mStream-&gt;mBlocks[bo-&gt;mStreamBlock]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>block-&gt;mOwners.Clear();</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>mFreeBlocks.AddFirstBlock(aBlock);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>Verify();</highlight></codeline>
<codeline lineno="913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal">TimeDuration</highlight></codeline>
<codeline lineno="916"><highlight class="normal">MediaCache::PredictNextUse(TimeStamp<sp/>aNow,<sp/>int32_t<sp/>aBlock)</highlight></codeline>
<codeline lineno="917"><highlight class="normal">{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!IsBlockFree(aBlock),<sp/></highlight><highlight class="stringliteral">&quot;aBlock<sp/>is<sp/>free&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>Block*<sp/>block<sp/>=<sp/>&amp;mIndex[aBlock];</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Blocks<sp/>can<sp/>be<sp/>belong<sp/>to<sp/>multiple<sp/>streams.<sp/>The<sp/>predicted<sp/>next<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>is<sp/>the<sp/>earliest<sp/>time<sp/>predicted<sp/>by<sp/>any<sp/>of<sp/>the<sp/>streams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>TimeDuration<sp/>result;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>block-&gt;mOwners.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>BlockOwner*<sp/>bo<sp/>=<sp/>&amp;block-&gt;mOwners[i];</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeDuration<sp/>prediction;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(bo-&gt;mClass)<sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>METADATA_BLOCK:</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>block<sp/>should<sp/>be<sp/>managed<sp/>in<sp/>LRU<sp/>mode.<sp/>For<sp/>metadata<sp/>we<sp/>predict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>time<sp/>until<sp/>the<sp/>next<sp/>use<sp/>is<sp/>the<sp/>time<sp/>since<sp/>the<sp/>last<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prediction<sp/>=<sp/>aNow<sp/>-<sp/>bo-&gt;mLastUseTime;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PLAYED_BLOCK:</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>block<sp/>should<sp/>be<sp/>managed<sp/>in<sp/>LRU<sp/>mode,<sp/>and<sp/>we<sp/>should<sp/>impose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>&quot;replay<sp/>delay&quot;<sp/>to<sp/>reflect<sp/>the<sp/>likelihood<sp/>of<sp/>replay<sp/>happening</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(static_cast&lt;int64_t&gt;(bo-&gt;mStreamBlock)*BLOCK_SIZE<sp/>&lt;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo-&gt;mStream-&gt;mStreamOffset,</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Played<sp/>block<sp/>after<sp/>the<sp/>current<sp/>stream<sp/>position?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prediction<sp/>=<sp/>aNow<sp/>-<sp/>bo-&gt;mLastUseTime<sp/>+</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeDuration::FromSeconds(REPLAY_DELAY);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>READAHEAD_BLOCK:<sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>bytesAhead<sp/>=</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bo-&gt;mStreamBlock)*BLOCK_SIZE<sp/>-<sp/>bo-&gt;mStream-&gt;mStreamOffset;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(bytesAhead<sp/>&gt;=<sp/>0,</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Readahead<sp/>block<sp/>before<sp/>the<sp/>current<sp/>stream<sp/>position?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>millisecondsAhead<sp/>=</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytesAhead*1000/bo-&gt;mStream-&gt;mPlaybackBytesPerSecond;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prediction<sp/>=<sp/>TimeDuration::FromMilliseconds(</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_MIN&lt;int64_t&gt;(millisecondsAhead,<sp/>INT32_MAX));</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ERROR(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>class<sp/>for<sp/>predicting<sp/>next<sp/>use&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TimeDuration(0);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0<sp/>||<sp/>prediction<sp/>&lt;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>prediction;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal">TimeDuration</highlight></codeline>
<codeline lineno="966"><highlight class="normal">MediaCache::PredictNextUseForIncomingData(MediaCacheStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="967"><highlight class="normal">{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>int64_t<sp/>bytesAhead<sp/>=<sp/>aStream-&gt;mChannelOffset<sp/>-<sp/>aStream-&gt;mStreamOffset;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytesAhead<sp/>&lt;=<sp/>-BLOCK_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hmm,<sp/>no<sp/>idea<sp/>when<sp/>data<sp/>behind<sp/>us<sp/>will<sp/>be<sp/>used.<sp/>Guess<sp/>24<sp/>hours.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TimeDuration::FromSeconds(24*60*60);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytesAhead<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TimeDuration(0);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>int64_t<sp/>millisecondsAhead<sp/>=<sp/>bytesAhead*1000/aStream-&gt;mPlaybackBytesPerSecond;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TimeDuration::FromMilliseconds(</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_MIN&lt;int64_t&gt;(millisecondsAhead,<sp/>INT32_MAX));</highlight></codeline>
<codeline lineno="980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>StreamAction<sp/>{<sp/>NONE,<sp/>SEEK,<sp/>SEEK_AND_RESUME,<sp/>RESUME,<sp/>SUSPEND<sp/>};</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal">MediaCache::Update()</highlight></codeline>
<codeline lineno="986"><highlight class="normal">{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>action<sp/>to<sp/>use<sp/>for<sp/>each<sp/>stream.<sp/>We<sp/>store<sp/>these<sp/>so<sp/>we<sp/>can<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>decisions<sp/>while<sp/>holding<sp/>the<sp/>cache<sp/>lock<sp/>but<sp/>implement<sp/>those<sp/>decisions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>holding<sp/>the<sp/>cache<sp/>lock,<sp/>since<sp/>we<sp/>need<sp/>to<sp/>call<sp/>out<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stream,<sp/>decoder<sp/>and<sp/>element<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>nsAutoTArray&lt;StreamAction,10&gt;<sp/>actions;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mReentrantMonitor);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>mUpdateQueued<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="999"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>mInUpdate<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1001"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>maxBlocks<sp/>=<sp/>GetMaxBlocks();</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeStamp<sp/>now<sp/>=<sp/>TimeStamp::Now();</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>freeBlockCount<sp/>=<sp/>mFreeBlocks.GetCount();</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>trim<sp/>back<sp/>the<sp/>cache<sp/>to<sp/>its<sp/>desired<sp/>maximum<sp/>size.<sp/>The<sp/>cache<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>overflowed<sp/>simply<sp/>due<sp/>to<sp/>data<sp/>being<sp/>received<sp/>when<sp/>we<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>blocks<sp/>in<sp/>the<sp/>main<sp/>part<sp/>of<sp/>the<sp/>cache<sp/>that<sp/>are<sp/>free<sp/>or<sp/>lower</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>priority<sp/>than<sp/>the<sp/>new<sp/>data.<sp/>The<sp/>cache<sp/>can<sp/>also<sp/>be<sp/>overflowing<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>media.cache_size<sp/>preference<sp/>was<sp/>reduced.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>figure<sp/>out<sp/>what<sp/>the<sp/>least<sp/>valuable<sp/>block<sp/>in<sp/>the<sp/>cache<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is.<sp/>We<sp/>don&apos;t<sp/>want<sp/>to<sp/>replace<sp/>any<sp/>blocks<sp/>in<sp/>the<sp/>main<sp/>part<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cache<sp/>whose<sp/>expected<sp/>time<sp/>of<sp/>next<sp/>use<sp/>is<sp/>earlier<sp/>or<sp/>equal<sp/>to<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>allow<sp/>that,<sp/>we<sp/>can<sp/>effectively<sp/>end<sp/>up<sp/>discarding<sp/>overflowing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>blocks<sp/>(by<sp/>moving<sp/>an<sp/>overflowing<sp/>block<sp/>to<sp/>the<sp/>main<sp/>part<sp/>of<sp/>the<sp/>cache,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>overwriting<sp/>it<sp/>with<sp/>another<sp/>overflowing<sp/>block),<sp/>and<sp/>we<sp/>try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>avoid<sp/>that<sp/>since<sp/>it<sp/>requires<sp/>HTTP<sp/>seeks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>also<sp/>use<sp/>this<sp/>loop<sp/>to<sp/>eliminate<sp/>overflowing<sp/>blocks<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>freeBlockCount.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeDuration<sp/>latestPredictedUseForOverflow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>blockIndex<sp/>=<sp/>mIndex.Length()<sp/>-<sp/>1;<sp/>blockIndex<sp/>&gt;=<sp/>maxBlocks;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--blockIndex)<sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsBlockFree(blockIndex))<sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>count<sp/>overflowing<sp/>free<sp/>blocks<sp/>in<sp/>our<sp/>free<sp/>block<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--freeBlockCount;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TimeDuration<sp/>predictedUse<sp/>=<sp/>PredictNextUse(now,<sp/>blockIndex);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>latestPredictedUseForOverflow<sp/>=<sp/>NS_MAX(latestPredictedUseForOverflow,<sp/>predictedUse);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>try<sp/>to<sp/>move<sp/>overflowing<sp/>blocks<sp/>to<sp/>the<sp/>main<sp/>part<sp/>of<sp/>the<sp/>cache.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>blockIndex<sp/>=<sp/>mIndex.Length()<sp/>-<sp/>1;<sp/>blockIndex<sp/>&gt;=<sp/>maxBlocks;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--blockIndex)<sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsBlockFree(blockIndex))</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Block*<sp/>block<sp/>=<sp/>&amp;mIndex[blockIndex];</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>relocate<sp/>the<sp/>block<sp/>close<sp/>to<sp/>other<sp/>blocks<sp/>for<sp/>the<sp/>first<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>no<sp/>point<sp/>in<sp/>trying<sp/>to<sp/>make<sp/>it<sp/>close<sp/>to<sp/>other<sp/>blocks<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*all*<sp/>the<sp/>streams<sp/>it<sp/>might<sp/>belong<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>destinationBlockIndex<sp/>=</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FindReusableBlock(now,<sp/>block-&gt;mOwners[0].mStream,</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;mOwners[0].mStreamBlock,<sp/>maxBlocks);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(destinationBlockIndex<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nowhere<sp/>to<sp/>place<sp/>this<sp/>overflow<sp/>block.<sp/>We<sp/>won&apos;t<sp/>be<sp/>able<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>place<sp/>any<sp/>more<sp/>overflow<sp/>blocks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsBlockFree(destinationBlockIndex)<sp/>||</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PredictNextUse(now,<sp/>destinationBlockIndex)<sp/>&gt;<sp/>latestPredictedUseForOverflow)<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reuse<sp/>blocks<sp/>in<sp/>the<sp/>main<sp/>part<sp/>of<sp/>the<sp/>cache<sp/>that<sp/>are<sp/>less<sp/>useful<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>least<sp/>useful<sp/>overflow<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>mFileCache-&gt;MoveBlock(blockIndex,<sp/>destinationBlockIndex);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_SUCCEEDED(rv))<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>successfully<sp/>copied<sp/>the<sp/>file<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Swapping<sp/>blocks<sp/>%d<sp/>and<sp/>%d<sp/>(trimming<sp/>cache)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockIndex,<sp/>destinationBlockIndex));</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Swapping<sp/>the<sp/>block<sp/>metadata<sp/>here<sp/>lets<sp/>us<sp/>maintain<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>correct<sp/>positions<sp/>in<sp/>the<sp/>linked<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwapBlocks(blockIndex,<sp/>destinationBlockIndex);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Free<sp/>the<sp/>overflowing<sp/>block<sp/>even<sp/>if<sp/>the<sp/>copy<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Released<sp/>block<sp/>%d<sp/>(trimming<sp/>cache)&quot;</highlight><highlight class="normal">,<sp/>blockIndex));</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeBlock(blockIndex);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>trim<sp/>cache<sp/>block<sp/>%d<sp/>(destination<sp/>%d,<sp/>predicted<sp/>next<sp/>use<sp/>%f,<sp/>latest<sp/>predicted<sp/>use<sp/>for<sp/>overflow<sp/>%f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockIndex,<sp/>destinationBlockIndex,</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PredictNextUse(now,<sp/>destinationBlockIndex).ToSeconds(),</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>latestPredictedUseForOverflow.ToSeconds()));</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>chopping<sp/>back<sp/>the<sp/>array<sp/>of<sp/>cache<sp/>entries<sp/>and<sp/>the<sp/>cache<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>Truncate();</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>the<sp/>blocks<sp/>allocated<sp/>for<sp/>readahead<sp/>of<sp/>non-seekable<sp/>streams</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(these<sp/>blocks<sp/>can&apos;t<sp/>be<sp/>freed<sp/>but<sp/>we<sp/>don&apos;t<sp/>want<sp/>them<sp/>to<sp/>monopolize<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cache)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>nonSeekableReadaheadBlockCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>stream<sp/>=<sp/>mStreams[i];</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stream-&gt;mIsSeekable)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonSeekableReadaheadBlockCount<sp/>+=<sp/>stream-&gt;mReadaheadBlocks.GetCount();</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>freeBlockCount<sp/>is<sp/>zero,<sp/>then<sp/>compute<sp/>the<sp/>latest<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>predicted<sp/>next-uses<sp/>for<sp/>all<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeDuration<sp/>latestNextUse;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(freeBlockCount<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>reusableBlock<sp/>=<sp/>FindReusableBlock(now,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0,<sp/>maxBlocks);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reusableBlock<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>latestNextUse<sp/>=<sp/>PredictNextUse(now,<sp/>reusableBlock);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actions.AppendElement(NONE);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>stream<sp/>=<sp/>mStreams[i];</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;mClosed)</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Figure<sp/>out<sp/>where<sp/>we<sp/>should<sp/>be<sp/>reading<sp/>from.<sp/>It&apos;s<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>uncached<sp/>byte<sp/>after<sp/>the<sp/>current<sp/>mStreamOffset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>dataOffset<sp/>=<sp/>stream-&gt;GetCachedDataEndInternal(stream-&gt;mStreamOffset);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>where<sp/>we&apos;d<sp/>actually<sp/>seek<sp/>to<sp/>to<sp/>read<sp/>at<sp/>readOffset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>desiredOffset<sp/>=<sp/>dataOffset;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;mIsSeekable)<sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(desiredOffset<sp/>&gt;<sp/>stream-&gt;mChannelOffset<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desiredOffset<sp/>&lt;=<sp/>stream-&gt;mChannelOffset<sp/>+<sp/>SEEK_VS_READ_THRESHOLD)<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>it&apos;s<sp/>more<sp/>efficient<sp/>to<sp/>just<sp/>keep<sp/>reading<sp/>up<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>desired<sp/>position<sp/>instead<sp/>of<sp/>trying<sp/>to<sp/>seek</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desiredOffset<sp/>=<sp/>stream-&gt;mChannelOffset;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can&apos;t<sp/>seek<sp/>directly<sp/>to<sp/>the<sp/>desired<sp/>offset...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;mChannelOffset<sp/>&gt;<sp/>desiredOffset)<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reading<sp/>forward<sp/>won&apos;t<sp/>get<sp/>us<sp/>anywhere,<sp/>we<sp/>need<sp/>to<sp/>go<sp/>backwards.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Seek<sp/>back<sp/>to<sp/>0<sp/>(the<sp/>client<sp/>will<sp/>reopen<sp/>the<sp/>stream)<sp/>and<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>forward.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_WARNING(</highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>seek<sp/>backwards,<sp/>so<sp/>seeking<sp/>to<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desiredOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>cached<sp/>blocks<sp/>out,<sp/>since<sp/>if<sp/>this<sp/>is<sp/>a<sp/>live<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>cached<sp/>data<sp/>may<sp/>be<sp/>completely<sp/>different<sp/>next<sp/>time<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>it.<sp/>We<sp/>have<sp/>to<sp/>assume<sp/>that<sp/>live<sp/>streams<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>advertise<sp/>themselves<sp/>as<sp/>being<sp/>seekable...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReleaseStreamBlocks(stream);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>reading<sp/>forward<sp/>is<sp/>looking<sp/>good,<sp/>so<sp/>just<sp/>stay<sp/>where<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>and<sp/>don&apos;t<sp/>trigger<sp/>a<sp/>channel<sp/>seek!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desiredOffset<sp/>=<sp/>stream-&gt;mChannelOffset;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Figure<sp/>out<sp/>if<sp/>we<sp/>should<sp/>be<sp/>reading<sp/>data<sp/>now<sp/>or<sp/>not.<sp/>It&apos;s<sp/>amazing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>complex<sp/>this<sp/>is,<sp/>but<sp/>each<sp/>decision<sp/>is<sp/>simple<sp/>enough.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enableReading;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;mStreamLength<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>dataOffset<sp/>&gt;=<sp/>stream-&gt;mStreamLength)<sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>data<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>stream,<sp/>where<sp/>there&apos;s<sp/>nothing<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read.<sp/>We<sp/>don&apos;t<sp/>want<sp/>to<sp/>try<sp/>to<sp/>read<sp/>if<sp/>we&apos;re<sp/>suspended,<sp/>because<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>might<sp/>create<sp/>a<sp/>new<sp/>channel<sp/>and<sp/>seek<sp/>unnecessarily<sp/>(and<sp/>incorrectly,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>HTTP<sp/>doesn&apos;t<sp/>allow<sp/>seeking<sp/>to<sp/>the<sp/>actual<sp/>EOF),<sp/>and<sp/>we<sp/>don&apos;t<sp/>want</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>suspend<sp/>if<sp/>we&apos;re<sp/>not<sp/>suspended<sp/>and<sp/>already<sp/>reading<sp/>at<sp/>the<sp/>end<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>stream,<sp/>since<sp/>there<sp/>just<sp/>might<sp/>be<sp/>more<sp/>data<sp/>than<sp/>the<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>advertised<sp/>with<sp/>Content-Length,<sp/>and<sp/>we<sp/>may<sp/>as<sp/>well<sp/>keep<sp/>reading.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>seek<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>stream<sp/>if<sp/>we&apos;re<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>at<sp/>end<sp/>of<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>stream));</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enableReading<sp/>=<sp/>!stream-&gt;mCacheSuspended<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mStreamLength<sp/>==<sp/>stream-&gt;mChannelOffset;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(desiredOffset<sp/>&lt;<sp/>stream-&gt;mStreamOffset)<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>reading<sp/>to<sp/>try<sp/>to<sp/>catch<sp/>up<sp/>to<sp/>where<sp/>the<sp/>current<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reader<sp/>wants<sp/>to<sp/>be.<sp/>Better<sp/>not<sp/>stop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>catching<sp/>up&quot;</highlight><highlight class="normal">,<sp/>stream));</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enableReading<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(desiredOffset<sp/>&lt;<sp/>stream-&gt;mStreamOffset<sp/>+<sp/>BLOCK_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>stream<sp/>reader<sp/>is<sp/>waiting<sp/>for<sp/>us,<sp/>or<sp/>nearly<sp/>so.<sp/>Better<sp/>feed<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>feeding<sp/>reader&quot;</highlight><highlight class="normal">,<sp/>stream));</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enableReading<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stream-&gt;mIsSeekable<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonSeekableReadaheadBlockCount<sp/>&gt;=<sp/>maxBlocks*NONSEEKABLE_READAHEAD_MAX)<sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>stream<sp/>is<sp/>not<sp/>seekable<sp/>and<sp/>there<sp/>are<sp/>already<sp/>too<sp/>many<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>being<sp/>cached<sp/>for<sp/>readahead<sp/>for<sp/>nonseekable<sp/>streams<sp/>(which<sp/>we<sp/>can&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free).<sp/>So<sp/>stop<sp/>reading<sp/>ahead<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>throttling<sp/>non-seekable<sp/>readahead&quot;</highlight><highlight class="normal">,<sp/>stream));</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enableReading<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mIndex.Length()<sp/>&gt;<sp/>uint32_t(maxBlocks))<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>in<sp/>the<sp/>process<sp/>of<sp/>bringing<sp/>the<sp/>cache<sp/>size<sp/>back<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>desired<sp/>limit,<sp/>so<sp/>don&apos;t<sp/>bring<sp/>in<sp/>more<sp/>data<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>throttling<sp/>to<sp/>reduce<sp/>cache<sp/>size&quot;</highlight><highlight class="normal">,<sp/>stream));</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enableReading<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(freeBlockCount<sp/>&gt;<sp/>0<sp/>||<sp/>mIndex.Length()<sp/>&lt;<sp/>uint32_t(maxBlocks))<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>blocks<sp/>in<sp/>the<sp/>cache,<sp/>so<sp/>keep<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>reading<sp/>since<sp/>there<sp/>are<sp/>free<sp/>blocks&quot;</highlight><highlight class="normal">,<sp/>stream));</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enableReading<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(latestNextUse<sp/>&lt;=<sp/>TimeDuration(0))<sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>reusable<sp/>blocks,<sp/>so<sp/>can&apos;t<sp/>read<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>throttling<sp/>due<sp/>to<sp/>no<sp/>reusable<sp/>blocks&quot;</highlight><highlight class="normal">,<sp/>stream));</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enableReading<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>ahead<sp/>if<sp/>the<sp/>data<sp/>we<sp/>expect<sp/>to<sp/>read<sp/>is<sp/>more<sp/>valuable<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>least<sp/>valuable<sp/>block<sp/>in<sp/>the<sp/>main<sp/>part<sp/>of<sp/>the<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeDuration<sp/>predictedNewDataUse<sp/>=<sp/>PredictNextUseForIncomingData(stream);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>predict<sp/>next<sp/>data<sp/>in<sp/>%f,<sp/>current<sp/>worst<sp/>block<sp/>is<sp/>%f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream,<sp/>predictedNewDataUse.ToSeconds(),<sp/>latestNextUse.ToSeconds()));</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enableReading<sp/>=<sp/>predictedNewDataUse<sp/>&lt;<sp/>latestNextUse;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enableReading)<sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>other<sp/>=<sp/>mStreams[j];</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other-&gt;mResourceID<sp/>==<sp/>stream-&gt;mResourceID<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!other-&gt;mClient-&gt;IsSuspended()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other-&gt;mChannelOffset/BLOCK_SIZE<sp/>==<sp/>desiredOffset/BLOCK_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>block<sp/>is<sp/>already<sp/>going<sp/>to<sp/>be<sp/>read<sp/>by<sp/>the<sp/>other<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>don&apos;t<sp/>try<sp/>to<sp/>read<sp/>it<sp/>from<sp/>this<sp/>stream<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enableReading<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>waiting<sp/>on<sp/>same<sp/>block<sp/>(%lld)<sp/>from<sp/>stream<sp/>%p&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream,<sp/>desiredOffset/BLOCK_SIZE,<sp/>other));</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;mChannelOffset<sp/>!=<sp/>desiredOffset<sp/>&amp;&amp;<sp/>enableReading)<sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>seek<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(stream-&gt;mIsSeekable<sp/>||<sp/>desiredOffset<sp/>==<sp/>0,</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>seek<sp/>in<sp/>a<sp/>non-seekable<sp/>stream!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Round<sp/>seek<sp/>offset<sp/>down<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>block.<sp/>This<sp/>is<sp/>essential</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>think<sp/>we<sp/>have<sp/>part<sp/>of<sp/>a<sp/>block<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>mPartialBlockBuffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mChannelOffset<sp/>=<sp/>(desiredOffset/BLOCK_SIZE)*BLOCK_SIZE;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actions[i]<sp/>=<sp/>stream-&gt;mCacheSuspended<sp/>?<sp/>SEEK_AND_RESUME<sp/>:<sp/>SEEK;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enableReading<sp/>&amp;&amp;<sp/>stream-&gt;mCacheSuspended)<sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actions[i]<sp/>=<sp/>RESUME;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!enableReading<sp/>&amp;&amp;<sp/>!stream-&gt;mCacheSuspended)<sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actions[i]<sp/>=<sp/>SUSPEND;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="1226"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>mInUpdate<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1228"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>channel<sp/>state<sp/>without<sp/>holding<sp/>our<sp/>cache<sp/>lock.<sp/>While<sp/>we&apos;re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>doing<sp/>this,<sp/>decoder<sp/>threads<sp/>may<sp/>be<sp/>running<sp/>and<sp/>seeking,<sp/>reading<sp/>or<sp/>changing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>cache<sp/>state.<sp/>That&apos;s<sp/>OK,<sp/>they&apos;ll<sp/>trigger<sp/>new<sp/>Update<sp/>events<sp/>and<sp/>we&apos;ll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>back<sp/>here<sp/>and<sp/>revise<sp/>our<sp/>decisions.<sp/>The<sp/>important<sp/>thing<sp/>here<sp/>is<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>performing<sp/>these<sp/>actions<sp/>only<sp/>depends<sp/>on<sp/>mChannelOffset<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>action,<sp/>which<sp/>can<sp/>only<sp/>be<sp/>written<sp/>by<sp/>the<sp/>main<sp/>thread<sp/>(i.e.,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>thread),<sp/>so<sp/>we<sp/>don&apos;t<sp/>have<sp/>races<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>update<sp/>the<sp/>mCacheSuspended/mCacheEnded<sp/>flags<sp/>so<sp/>that<sp/>they&apos;re<sp/>all<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>we<sp/>fire<sp/>our<sp/>CacheClient<sp/>commands<sp/>below.<sp/>Those<sp/>commands<sp/>can<sp/>rely<sp/>on<sp/>these<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>being<sp/>set<sp/>correctly<sp/>for<sp/>all<sp/>streams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>stream<sp/>=<sp/>mStreams[i];</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(actions[i])<sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SEEK:</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SEEK_AND_RESUME:</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mCacheSuspended<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mChannelEnded<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RESUME:</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mCacheSuspended<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SUSPEND:</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mCacheSuspended<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mHasHadUpdate<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>stream<sp/>=<sp/>mStreams[i];</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>nsresult<sp/>rv;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(actions[i])<sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SEEK:</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SEEK_AND_RESUME:</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>CacheSeek<sp/>to<sp/>%lld<sp/>(resume=%d)&quot;</highlight><highlight class="normal">,<sp/>stream,</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)stream-&gt;mChannelOffset,<sp/>actions[i]<sp/>==<sp/>SEEK_AND_RESUME));</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>stream-&gt;mClient-&gt;CacheClientSeek(stream-&gt;mChannelOffset,</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actions[i]<sp/>==<sp/>SEEK_AND_RESUME);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RESUME:</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>Resumed&quot;</highlight><highlight class="normal">,<sp/>stream));</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>stream-&gt;mClient-&gt;CacheClientResume();</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SUSPEND:</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>Suspended&quot;</highlight><highlight class="normal">,<sp/>stream));</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>stream-&gt;mClient-&gt;CacheClientSuspend();</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>NS_OK;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))<sp/>{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>the<sp/>streams<sp/>that<sp/>failed<sp/>due<sp/>to<sp/>error.<sp/>This<sp/>will<sp/>cause<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>client<sp/>Read<sp/>and<sp/>Seek<sp/>operations<sp/>on<sp/>those<sp/>streams<sp/>to<sp/>fail.<sp/>Blocked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reads<sp/>will<sp/>also<sp/>be<sp/>woken<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mReentrantMonitor);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;CloseInternal(mon);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295" refid="classmozilla_1_1_update_event" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmozilla_1_1_update_event" kindref="compound">UpdateEvent</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsRunnable</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>NS_IMETHOD<sp/>Run()</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gMediaCache)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gMediaCache-&gt;Update();</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal">MediaCache::QueueUpdate()</highlight></codeline>
<codeline lineno="1309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Queuing<sp/>an<sp/>update<sp/>while<sp/>we&apos;re<sp/>in<sp/>an<sp/>update<sp/>raises<sp/>a<sp/>high<sp/>risk<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>triggering<sp/>endless<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!mInUpdate,</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Queuing<sp/>an<sp/>update<sp/>while<sp/>we&apos;re<sp/>in<sp/>an<sp/>update&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mUpdateQueued)</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/>mUpdateQueued<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classmozilla_1_1_update_event" kindref="compound">UpdateEvent</ref>();</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>NS_DispatchToMainThread(event);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG_VERIFY_CACHE</highlight></codeline>
<codeline lineno="1324"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal">MediaCache::Verify()</highlight></codeline>
<codeline lineno="1326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>mFreeBlocks.Verify();</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mStreams.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>stream<sp/>=<sp/>mStreams[i];</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mReadaheadBlocks.Verify();</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mPlayedBlocks.Verify();</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mMetadataBlocks.Verify();</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>the<sp/>readahead<sp/>blocks<sp/>are<sp/>listed<sp/>in<sp/>stream<sp/>block<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>block<sp/>=<sp/>stream-&gt;mReadaheadBlocks.GetFirstBlock();</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>lastStreamBlock<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(block<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mIndex[block].mOwners[j].mStream<sp/>!=<sp/>stream)<sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>nextStreamBlock<sp/>=</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t(mIndex[block].mOwners[j].mStreamBlock);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(lastStreamBlock<sp/>&lt;<sp/>nextStreamBlock,</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Blocks<sp/>not<sp/>increasing<sp/>in<sp/>readahead<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastStreamBlock<sp/>=<sp/>nextStreamBlock;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/>stream-&gt;mReadaheadBlocks.GetNextBlock(block);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1354"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal">MediaCache::InsertReadaheadBlock(BlockOwner*<sp/>aBlockOwner,</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>aBlockIndex)</highlight></codeline>
<codeline lineno="1358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>last<sp/>block<sp/>whose<sp/>stream<sp/>block<sp/>is<sp/>before<sp/>aBlockIndex&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stream<sp/>block,<sp/>and<sp/>insert<sp/>after<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>MediaCacheStream*<sp/>stream<sp/>=<sp/>aBlockOwner-&gt;mStream;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/>int32_t<sp/>readaheadIndex<sp/>=<sp/>stream-&gt;mReadaheadBlocks.GetLastBlock();</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(readaheadIndex<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>BlockOwner*<sp/>bo<sp/>=<sp/>GetBlockOwner(readaheadIndex,<sp/>stream);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(bo,<sp/></highlight><highlight class="stringliteral">&quot;stream<sp/>must<sp/>own<sp/>its<sp/>blocks&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bo-&gt;mStreamBlock<sp/>&lt;<sp/>aBlockOwner-&gt;mStreamBlock)<sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mReadaheadBlocks.AddAfter(aBlockIndex,<sp/>readaheadIndex);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(bo-&gt;mStreamBlock<sp/>&gt;<sp/>aBlockOwner-&gt;mStreamBlock,</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Duplicated<sp/>blocks??&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>readaheadIndex<sp/>=<sp/>stream-&gt;mReadaheadBlocks.GetPrevBlock(readaheadIndex);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>stream-&gt;mReadaheadBlocks.AddFirstBlock(aBlockIndex);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/>Verify();</highlight></codeline>
<codeline lineno="1379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal">MediaCache::AllocateAndWriteBlock(MediaCacheStream*<sp/>aStream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aData,</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaCacheStream::ReadMode<sp/>aMode)</highlight></codeline>
<codeline lineno="1384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>int32_t<sp/>streamBlockIndex<sp/>=<sp/>aStream-&gt;mChannelOffset/BLOCK_SIZE;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>all<sp/>cached<sp/>copies<sp/>of<sp/>this<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>ResourceStreamIterator<sp/>iter(aStream-&gt;mResourceID);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(MediaCacheStream*<sp/>stream<sp/>=<sp/>iter.Next())<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(streamBlockIndex<sp/>&gt;=<sp/>int32_t(stream-&gt;mBlocks.Length()))<sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mBlocks.AppendElement(-1);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;mBlocks[streamBlockIndex]<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>no<sp/>longer<sp/>want<sp/>to<sp/>own<sp/>this<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>globalBlockIndex<sp/>=<sp/>stream-&gt;mBlocks[streamBlockIndex];</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Released<sp/>block<sp/>%d<sp/>from<sp/>stream<sp/>%p<sp/>block<sp/>%d(%lld)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>globalBlockIndex,<sp/>stream,<sp/>streamBlockIndex,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)streamBlockIndex*BLOCK_SIZE));</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RemoveBlockOwner(globalBlockIndex,<sp/>stream);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extend<sp/>the<sp/>mBlocks<sp/>array<sp/>as<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>TimeStamp<sp/>now<sp/>=<sp/>TimeStamp::Now();</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>int32_t<sp/>blockIndex<sp/>=<sp/>FindBlockForIncomingData(now,<sp/>aStream);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockIndex<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>FreeBlock(blockIndex);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>Block*<sp/>block<sp/>=<sp/>&amp;mIndex[blockIndex];</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Allocated<sp/>block<sp/>%d<sp/>to<sp/>stream<sp/>%p<sp/>block<sp/>%d(%lld)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockIndex,<sp/>aStream,<sp/>streamBlockIndex,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)streamBlockIndex*BLOCK_SIZE));</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>mFreeBlocks.RemoveBlock(blockIndex);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>each<sp/>stream<sp/>using<sp/>this<sp/>resource<sp/>about<sp/>the<sp/>new<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>ResourceStreamIterator<sp/>iter(aStream-&gt;mResourceID);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(MediaCacheStream*<sp/>stream<sp/>=<sp/>iter.Next())<sp/>{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BlockOwner*<sp/>bo<sp/>=<sp/>block-&gt;mOwners.AppendElement();</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bo)</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bo-&gt;mStream<sp/>=<sp/>stream;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bo-&gt;mStreamBlock<sp/>=<sp/>streamBlockIndex;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bo-&gt;mLastUseTime<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mBlocks[streamBlockIndex]<sp/>=<sp/>blockIndex;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(streamBlockIndex*BLOCK_SIZE<sp/>&lt;<sp/>stream-&gt;mStreamOffset)<sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo-&gt;mClass<sp/>=<sp/>aMode<sp/>==<sp/>MediaCacheStream::MODE_PLAYBACK</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>PLAYED_BLOCK<sp/>:<sp/>METADATA_BLOCK;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>must<sp/>be<sp/>the<sp/>most-recently-used<sp/>block,<sp/>since<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>marked<sp/>it<sp/>as<sp/>used<sp/>now<sp/>(which<sp/>may<sp/>be<sp/>slightly<sp/>bogus,<sp/>but<sp/>we&apos;ll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>treat<sp/>it<sp/>as<sp/>used<sp/>for<sp/>simplicity).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetListForBlock(bo)-&gt;AddFirstBlock(blockIndex);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Verify();</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>may<sp/>not<sp/>be<sp/>the<sp/>latest<sp/>readahead<sp/>block,<sp/>although<sp/>it<sp/>usually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>be.<sp/>We<sp/>may<sp/>have<sp/>to<sp/>scan<sp/>for<sp/>the<sp/>right<sp/>place<sp/>to<sp/>insert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>block<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo-&gt;mClass<sp/>=<sp/>READAHEAD_BLOCK;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InsertReadaheadBlock(bo,<sp/>blockIndex);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>mFileCache-&gt;WriteBlock(blockIndex,<sp/>reinterpret_cast&lt;const<sp/>uint8_t*&gt;(aData));</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))<sp/>{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Released<sp/>block<sp/>%d<sp/>from<sp/>stream<sp/>%p<sp/>block<sp/>%d(%lld)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockIndex,<sp/>aStream,<sp/>streamBlockIndex,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)streamBlockIndex*BLOCK_SIZE));</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FreeBlock(blockIndex);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Queue<sp/>an<sp/>Update<sp/>since<sp/>the<sp/>cache<sp/>state<sp/>has<sp/>changed<sp/>(for<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>might<sp/>want<sp/>to<sp/>stop<sp/>loading<sp/>because<sp/>the<sp/>cache<sp/>is<sp/>full)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/>QueueUpdate();</highlight></codeline>
<codeline lineno="1456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal">MediaCache::OpenStream(MediaCacheStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="1460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mReentrantMonitor);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>opened&quot;</highlight><highlight class="normal">,<sp/>aStream));</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>mStreams.AppendElement(aStream);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/>aStream-&gt;mResourceID<sp/>=<sp/>AllocateResourceID();</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Queue<sp/>an<sp/>update<sp/>since<sp/>a<sp/>new<sp/>stream<sp/>has<sp/>been<sp/>opened.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;QueueUpdate();</highlight></codeline>
<codeline lineno="1470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal">MediaCache::ReleaseStream(MediaCacheStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(mReentrantMonitor);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>closed&quot;</highlight><highlight class="normal">,<sp/>aStream));</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>mStreams.RemoveElement(aStream);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal">MediaCache::ReleaseStreamBlocks(MediaCacheStream*<sp/>aStream)</highlight></codeline>
<codeline lineno="1484"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>scanning<sp/>the<sp/>entire<sp/>stream<sp/>doesn&apos;t<sp/>seem<sp/>great,<sp/>if<sp/>not<sp/>much<sp/>of<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>cached,<sp/>but<sp/>the<sp/>only<sp/>easy<sp/>alternative<sp/>is<sp/>to<sp/>scan<sp/>the<sp/>entire<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>isn&apos;t<sp/>better</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>uint32_t<sp/>length<sp/>=<sp/>aStream-&gt;mBlocks.Length();</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>blockIndex<sp/>=<sp/>aStream-&gt;mBlocks[i];</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockIndex<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Released<sp/>block<sp/>%d<sp/>from<sp/>stream<sp/>%p<sp/>block<sp/>%d(%lld)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockIndex,<sp/>aStream,<sp/>i,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)i*BLOCK_SIZE));</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RemoveBlockOwner(blockIndex,<sp/>aStream);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal">MediaCache::Truncate()</highlight></codeline>
<codeline lineno="1503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/>uint32_t<sp/>end;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(end<sp/>=<sp/>mIndex.Length();<sp/>end<sp/>&gt;<sp/>0;<sp/>--end)<sp/>{</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsBlockFree(end<sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>mFreeBlocks.RemoveBlock(end<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&lt;<sp/>mIndex.Length())<sp/>{</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>mIndex.TruncateLength(end);</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>We<sp/>could<sp/>truncate<sp/>the<sp/>cache<sp/>file<sp/>here,<sp/>but<sp/>we<sp/>don&apos;t<sp/>seem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>have<sp/>a<sp/>cross-platform<sp/>API<sp/>for<sp/>doing<sp/>that.<sp/>At<sp/>least<sp/>when<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>streams<sp/>are<sp/>closed<sp/>we<sp/>shut<sp/>down<sp/>the<sp/>cache,<sp/>which<sp/>erases<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>at<sp/>that<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal">MediaCache::NoteBlockUsage(MediaCacheStream*<sp/>aStream,<sp/>int32_t<sp/>aBlockIndex,</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MediaCacheStream::ReadMode<sp/>aMode,</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeStamp<sp/>aNow)</highlight></codeline>
<codeline lineno="1524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aBlockIndex<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>block<sp/>is<sp/>not<sp/>in<sp/>the<sp/>cache<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>BlockOwner*<sp/>bo<sp/>=<sp/>GetBlockOwner(aBlockIndex,<sp/>aStream);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bo)<sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>block<sp/>is<sp/>not<sp/>in<sp/>the<sp/>cache<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>check<sp/>has<sp/>to<sp/>be<sp/>&lt;=<sp/>because<sp/>the<sp/>stream<sp/>offset<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>yet<sp/>been<sp/>updated<sp/>for<sp/>the<sp/>data<sp/>read<sp/>from<sp/>this<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>NS_ASSERTION(bo-&gt;mStreamBlock*BLOCK_SIZE<sp/>&lt;=<sp/>bo-&gt;mStream-&gt;mStreamOffset,</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>a<sp/>block<sp/>that&apos;s<sp/>behind<sp/>the<sp/>read<sp/>position?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>GetListForBlock(bo)-&gt;RemoveBlock(aBlockIndex);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>bo-&gt;mClass<sp/>=</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>(aMode<sp/>==<sp/>MediaCacheStream::MODE_METADATA<sp/>||<sp/>bo-&gt;mClass<sp/>==<sp/>METADATA_BLOCK)</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>?<sp/>METADATA_BLOCK<sp/>:<sp/>PLAYED_BLOCK;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>this<sp/>is<sp/>just<sp/>being<sp/>used<sp/>now,<sp/>it<sp/>can<sp/>definitely<sp/>be<sp/>at<sp/>the<sp/>front</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>mMetadataBlocks<sp/>or<sp/>mPlayedBlocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>GetListForBlock(bo)-&gt;AddFirstBlock(aBlockIndex);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/>bo-&gt;mLastUseTime<sp/>=<sp/>aNow;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/>Verify();</highlight></codeline>
<codeline lineno="1552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal">MediaCache::NoteSeek(MediaCacheStream*<sp/>aStream,<sp/>int64_t<sp/>aOldOffset)</highlight></codeline>
<codeline lineno="1556"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/>mReentrantMonitor.AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aOldOffset<sp/>&lt;<sp/>aStream-&gt;mStreamOffset)<sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>seeked<sp/>forward.<sp/>Convert<sp/>blocks<sp/>from<sp/>readahead<sp/>to<sp/>played.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>readahead<sp/>block<sp/>that<sp/>intersects<sp/>the<sp/>seeked-over<sp/>range<sp/>must</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>converted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>blockIndex<sp/>=<sp/>aOldOffset/BLOCK_SIZE;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>endIndex<sp/>=</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_MIN&lt;int64_t&gt;((aStream-&gt;mStreamOffset<sp/>+<sp/>BLOCK_SIZE<sp/>-<sp/>1)/BLOCK_SIZE,</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aStream-&gt;mBlocks.Length());</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeStamp<sp/>now<sp/>=<sp/>TimeStamp::Now();</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(blockIndex<sp/>&lt;<sp/>endIndex)<sp/>{</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>cacheBlockIndex<sp/>=<sp/>aStream-&gt;mBlocks[blockIndex];</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheBlockIndex<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Marking<sp/>the<sp/>block<sp/>used<sp/>may<sp/>not<sp/>be<sp/>exactly<sp/>what<sp/>we<sp/>want<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>simple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoteBlockUsage(aStream,<sp/>cacheBlockIndex,<sp/>MediaCacheStream::MODE_PLAYBACK,</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>now);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++blockIndex;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>seeked<sp/>backward.<sp/>Convert<sp/>from<sp/>played<sp/>to<sp/>readahead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>played<sp/>block<sp/>that<sp/>is<sp/>entirely<sp/>after<sp/>the<sp/>start<sp/>of<sp/>the<sp/>seeked-over</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>range<sp/>must<sp/>be<sp/>converted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>blockIndex<sp/>=</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(aStream-&gt;mStreamOffset<sp/>+<sp/>BLOCK_SIZE<sp/>-<sp/>1)/BLOCK_SIZE;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>endIndex<sp/>=</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_MIN&lt;int64_t&gt;((aOldOffset<sp/>+<sp/>BLOCK_SIZE<sp/>-<sp/>1)/BLOCK_SIZE,</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aStream-&gt;mBlocks.Length());</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(blockIndex<sp/>&lt;<sp/>endIndex)<sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>cacheBlockIndex<sp/>=<sp/>aStream-&gt;mBlocks[endIndex<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheBlockIndex<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BlockOwner*<sp/>bo<sp/>=<sp/>GetBlockOwner(cacheBlockIndex,<sp/>aStream);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(bo,<sp/></highlight><highlight class="stringliteral">&quot;Stream<sp/>doesn&apos;t<sp/>own<sp/>its<sp/>blocks?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bo-&gt;mClass<sp/>==<sp/>PLAYED_BLOCK)<sp/>{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aStream-&gt;mPlayedBlocks.RemoveBlock(cacheBlockIndex);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo-&gt;mClass<sp/>=<sp/>READAHEAD_BLOCK;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adding<sp/>this<sp/>as<sp/>the<sp/>first<sp/>block<sp/>is<sp/>sure<sp/>to<sp/>be<sp/>OK<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>must<sp/>currently<sp/>be<sp/>the<sp/>earliest<sp/>readahead<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(that&apos;s<sp/>why<sp/>we&apos;re<sp/>proceeding<sp/>backwards<sp/>from<sp/>the<sp/>end<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>seeked<sp/>range<sp/>to<sp/>the<sp/>start)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aStream-&gt;mReadaheadBlocks.AddFirstBlock(cacheBlockIndex);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Verify();</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--endIndex;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal">MediaCacheStream::NotifyDataLength(int64_t<sp/>aLength)</highlight></codeline>
<codeline lineno="1610"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/>mStreamLength<sp/>=<sp/>aLength;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal">MediaCacheStream::NotifyDataStarted(int64_t<sp/>aOffset)</highlight></codeline>
<codeline lineno="1619"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/>NS_WARN_IF_FALSE(aOffset<sp/>==<sp/>mChannelOffset,</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Server<sp/>is<sp/>giving<sp/>us<sp/>unexpected<sp/>offset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>mChannelOffset<sp/>=<sp/>aOffset;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mStreamLength<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>started<sp/>reading<sp/>at<sp/>a<sp/>certain<sp/>offset,<sp/>then<sp/>for<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>stream<sp/>is<sp/>at<sp/>least<sp/>that<sp/>long.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/>mStreamLength<sp/>=<sp/>NS_MAX(mStreamLength,<sp/>mChannelOffset);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal">MediaCacheStream::UpdatePrincipal(nsIPrincipal*<sp/>aPrincipal)</highlight></codeline>
<codeline lineno="1635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nsContentUtils::CombineResourcePrincipals(&amp;mPrincipal,<sp/>aPrincipal);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal">MediaCacheStream::NotifyDataReceived(int64_t<sp/>aSize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aData,</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>nsIPrincipal*<sp/>aPrincipal)</highlight></codeline>
<codeline lineno="1642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>principals<sp/>before<sp/>putting<sp/>the<sp/>data<sp/>in<sp/>the<sp/>cache.<sp/>This<sp/>is<sp/>important,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>want<sp/>to<sp/>make<sp/>sure<sp/>all<sp/>principals<sp/>are<sp/>updated<sp/>before<sp/>any<sp/>consumer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>see<sp/>the<sp/>new<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>this<sp/>without<sp/>holding<sp/>the<sp/>cache<sp/>monitor,<sp/>in<sp/>case<sp/>the<sp/>client<sp/>wants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>do<sp/>something<sp/>that<sp/>takes<sp/>a<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaCache::ResourceStreamIterator<sp/>iter(mResourceID);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(MediaCacheStream*<sp/>stream<sp/>=<sp/>iter.Next())<sp/>{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;UpdatePrincipal(aPrincipal))<sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mClient-&gt;CacheClientNotifyPrincipalChanged();</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/>int64_t<sp/>size<sp/>=<sp/>aSize;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>aData;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>DataReceived<sp/>at<sp/>%lld<sp/>count=%lld&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)mChannelOffset,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)aSize));</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>process<sp/>the<sp/>data<sp/>one<sp/>block<sp/>(or<sp/>part<sp/>of<sp/>a<sp/>block)<sp/>at<sp/>a<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>blockIndex<sp/>=<sp/>mChannelOffset/BLOCK_SIZE;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>blockOffset<sp/>=<sp/>int32_t(mChannelOffset<sp/>-<sp/>blockIndex*BLOCK_SIZE);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>chunkSize<sp/>=<sp/>NS_MIN&lt;int64_t&gt;(BLOCK_SIZE<sp/>-<sp/>blockOffset,<sp/>size);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>gets<sp/>set<sp/>to<sp/>something<sp/>non-null<sp/>if<sp/>we<sp/>have<sp/>a<sp/>whole<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>data<sp/>to<sp/>write<sp/>to<sp/>the<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>blockDataToStore<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/>ReadMode<sp/>mode<sp/>=<sp/>MODE_PLAYBACK;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockOffset<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>chunkSize<sp/>==<sp/>BLOCK_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>received<sp/>a<sp/>whole<sp/>block,<sp/>so<sp/>avoid<sp/>a<sp/>useless<sp/>copy<sp/>through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mPartialBlockBuffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blockDataToStore<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockOffset<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ve<sp/>just<sp/>started<sp/>filling<sp/>this<sp/>buffer<sp/>so<sp/>now<sp/>is<sp/>a<sp/>good<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>clear<sp/>this<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mMetadataInPartialBlockBuffer<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(reinterpret_cast&lt;char*&gt;(mPartialBlockBuffer)<sp/>+<sp/>blockOffset,</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data,<sp/>chunkSize);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockOffset<sp/>+<sp/>chunkSize<sp/>==<sp/>BLOCK_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>completed<sp/>a<sp/>block,<sp/>so<sp/>lets<sp/>write<sp/>it<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockDataToStore<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mPartialBlockBuffer);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mMetadataInPartialBlockBuffer)<sp/>{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>MODE_METADATA;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockDataToStore)<sp/>{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gMediaCache-&gt;AllocateAndWriteBlock(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>blockDataToStore,<sp/>mode);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>mChannelOffset<sp/>+=<sp/>chunkSize;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>-=<sp/>chunkSize;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>+=<sp/>chunkSize;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/>MediaCache::ResourceStreamIterator<sp/>iter(mResourceID);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(MediaCacheStream*<sp/>stream<sp/>=<sp/>iter.Next())<sp/>{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;mStreamLength<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>stream<sp/>is<sp/>at<sp/>least<sp/>as<sp/>long<sp/>as<sp/>what<sp/>we&apos;ve<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mStreamLength<sp/>=<sp/>NS_MAX(stream-&gt;mStreamLength,<sp/>mChannelOffset);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;mClient-&gt;CacheClientNotifyDataReceived();</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>in<sp/>case<sp/>there&apos;s<sp/>a<sp/>waiting<sp/>reader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>it<sp/>would<sp/>be<sp/>fairly<sp/>easy<sp/>to<sp/>optimize<sp/>things<sp/>a<sp/>lot<sp/>more<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>waking<sp/>up<sp/>reader<sp/>threads<sp/>unnecessarily</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/>mon.NotifyAll();</highlight></codeline>
<codeline lineno="1720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal">MediaCacheStream::NotifyDataEnded(nsresult<sp/>aStatus)</highlight></codeline>
<codeline lineno="1724"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(aStatus))<sp/>{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disconnect<sp/>from<sp/>other<sp/>streams<sp/>sharing<sp/>our<sp/>resource,<sp/>since<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>continue<sp/>trying<sp/>to<sp/>load.<sp/>Our<sp/>load<sp/>might<sp/>have<sp/>been<sp/>deliberately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>canceled<sp/>and<sp/>that<sp/>shouldn&apos;t<sp/>affect<sp/>other<sp/>streams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>mResourceID<sp/>=<sp/>gMediaCache-&gt;AllocateResourceID();</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/>int32_t<sp/>blockOffset<sp/>=<sp/>int32_t(mChannelOffset%BLOCK_SIZE);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockOffset<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>back<sp/>the<sp/>partial<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(reinterpret_cast&lt;char*&gt;(mPartialBlockBuffer)<sp/>+<sp/>blockOffset,<sp/>0,</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLOCK_SIZE<sp/>-<sp/>blockOffset);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>gMediaCache-&gt;AllocateAndWriteBlock(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>mPartialBlockBuffer,</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mMetadataInPartialBlockBuffer<sp/>?<sp/>MODE_METADATA<sp/>:<sp/>MODE_PLAYBACK);</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wake<sp/>up<sp/>readers<sp/>who<sp/>may<sp/>be<sp/>waiting<sp/>for<sp/>this<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>mon.NotifyAll();</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mDidNotifyDataEnded)<sp/>{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaCache::ResourceStreamIterator<sp/>iter(mResourceID);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(MediaCacheStream*<sp/>stream<sp/>=<sp/>iter.Next())<sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_SUCCEEDED(aStatus))<sp/>{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>read<sp/>the<sp/>whole<sp/>stream,<sp/>so<sp/>remember<sp/>the<sp/>true<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mStreamLength<sp/>=<sp/>mChannelOffset;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ASSERTION(!stream-&gt;mDidNotifyDataEnded,<sp/></highlight><highlight class="stringliteral">&quot;Stream<sp/>already<sp/>ended!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mDidNotifyDataEnded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mNotifyDataEndedStatus<sp/>=<sp/>aStatus;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;mClient-&gt;CacheClientNotifyDataEnded(aStatus);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/>mChannelEnded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;QueueUpdate();</highlight></codeline>
<codeline lineno="1763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal">MediaCacheStream::~MediaCacheStream()</highlight></codeline>
<codeline lineno="1766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!mPinCount,<sp/></highlight><highlight class="stringliteral">&quot;Unbalanced<sp/>Pin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gMediaCache)<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(mClosed,<sp/></highlight><highlight class="stringliteral">&quot;Stream<sp/>was<sp/>not<sp/>closed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/>gMediaCache-&gt;ReleaseStream(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>MediaCache::MaybeShutdown();</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal">MediaCacheStream::SetSeekable(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aIsSeekable)</highlight></codeline>
<codeline lineno="1779"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mIsSeekable<sp/>||<sp/>aIsSeekable<sp/>||</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mChannelOffset<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;channel<sp/>offset<sp/>must<sp/>be<sp/>zero<sp/>when<sp/>we<sp/>become<sp/>non-seekable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/>mIsSeekable<sp/>=<sp/>aIsSeekable;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Queue<sp/>an<sp/>Update<sp/>since<sp/>we<sp/>may<sp/>change<sp/>our<sp/>strategy<sp/>for<sp/>dealing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>this<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;QueueUpdate();</highlight></codeline>
<codeline lineno="1787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal">MediaCacheStream::IsSeekable()</highlight></codeline>
<codeline lineno="1791"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mIsSeekable;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal">MediaCacheStream::AreAllStreamsForResourceSuspended(MediaResource**<sp/>aActiveStream)</highlight></codeline>
<codeline lineno="1798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/>MediaCache::ResourceStreamIterator<sp/>iter(mResourceID);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(MediaCacheStream*<sp/>stream<sp/>=<sp/>iter.Next())<sp/>{</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stream-&gt;mCacheSuspended<sp/>&amp;&amp;<sp/>!stream-&gt;mChannelEnded<sp/>&amp;&amp;<sp/>!stream-&gt;mClosed)<sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aActiveStream)<sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*aActiveStream<sp/>=<sp/>stream-&gt;mClient;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aActiveStream)<sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>*aActiveStream<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal">MediaCacheStream::Close()</highlight></codeline>
<codeline lineno="1817"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/>CloseInternal(mon);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Queue<sp/>an<sp/>Update<sp/>since<sp/>we<sp/>may<sp/>have<sp/>created<sp/>more<sp/>free<sp/>space.<sp/>Don&apos;t<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>from<sp/>CloseInternal<sp/>since<sp/>that<sp/>gets<sp/>called<sp/>by<sp/>Update()<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sometimes,<sp/>and<sp/>we<sp/>try<sp/>to<sp/>not<sp/>to<sp/>queue<sp/>updates<sp/>from<sp/>Update().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;QueueUpdate();</highlight></codeline>
<codeline lineno="1826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal">MediaCacheStream::EnsureCacheUpdate()</highlight></codeline>
<codeline lineno="1830"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mHasHadUpdate)</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;Update();</highlight></codeline>
<codeline lineno="1834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal">MediaCacheStream::CloseInternal(ReentrantMonitorAutoEnter&amp;<sp/>aReentrantMonitor)</highlight></codeline>
<codeline lineno="1838"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mClosed)</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/>mClosed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;ReleaseStreamBlocks(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wake<sp/>up<sp/>any<sp/>blocked<sp/>readers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/>aReentrantMonitor.NotifyAll();</highlight></codeline>
<codeline lineno="1847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal">MediaCacheStream::Pin()</highlight></codeline>
<codeline lineno="1851"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/>++mPinCount;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Queue<sp/>an<sp/>Update<sp/>since<sp/>we<sp/>may<sp/>no<sp/>longer<sp/>want<sp/>to<sp/>read<sp/>more<sp/>into<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cache,<sp/>if<sp/>this<sp/>stream&apos;s<sp/>block<sp/>have<sp/>become<sp/>non-evictable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;QueueUpdate();</highlight></codeline>
<codeline lineno="1857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal">MediaCacheStream::Unpin()</highlight></codeline>
<codeline lineno="1861"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mPinCount<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Unbalanced<sp/>Unpin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/>--mPinCount;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Queue<sp/>an<sp/>Update<sp/>since<sp/>we<sp/>may<sp/>be<sp/>able<sp/>to<sp/>read<sp/>more<sp/>into<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cache,<sp/>if<sp/>this<sp/>stream&apos;s<sp/>block<sp/>have<sp/>become<sp/>evictable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;QueueUpdate();</highlight></codeline>
<codeline lineno="1868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="1871"><highlight class="normal">MediaCacheStream::GetLength()</highlight></codeline>
<codeline lineno="1872"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mStreamLength;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="1878"><highlight class="normal">MediaCacheStream::GetNextCachedData(int64_t<sp/>aOffset)</highlight></codeline>
<codeline lineno="1879"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetNextCachedDataInternal(aOffset);</highlight></codeline>
<codeline lineno="1882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="1885"><highlight class="normal">MediaCacheStream::GetCachedDataEnd(int64_t<sp/>aOffset)</highlight></codeline>
<codeline lineno="1886"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetCachedDataEndInternal(aOffset);</highlight></codeline>
<codeline lineno="1889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal">MediaCacheStream::IsDataCachedToEndOfStream(int64_t<sp/>aOffset)</highlight></codeline>
<codeline lineno="1893"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mStreamLength<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetCachedDataEndInternal(aOffset)<sp/>&gt;=<sp/>mStreamLength;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="1901"><highlight class="normal">MediaCacheStream::GetCachedDataEndInternal(int64_t<sp/>aOffset)</highlight></codeline>
<codeline lineno="1902"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/>uint32_t<sp/>startBlockIndex<sp/>=<sp/>aOffset/BLOCK_SIZE;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/>uint32_t<sp/>blockIndex<sp/>=<sp/>startBlockIndex;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(blockIndex<sp/>&lt;<sp/>mBlocks.Length()<sp/>&amp;&amp;<sp/>mBlocks[blockIndex]<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/>++blockIndex;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/>int64_t<sp/>result<sp/>=<sp/>blockIndex*BLOCK_SIZE;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockIndex<sp/>==<sp/>mChannelOffset/BLOCK_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>block<sp/>containing<sp/>mChannelOffset<sp/>may<sp/>be<sp/>partially<sp/>read<sp/>but<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>yet<sp/>committed<sp/>to<sp/>the<sp/>main<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>mChannelOffset;</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mStreamLength<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>last<sp/>block<sp/>in<sp/>the<sp/>cache<sp/>may<sp/>only<sp/>be<sp/>partially<sp/>valid,<sp/>so<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>cached<sp/>range<sp/>to<sp/>the<sp/>stream<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>NS_MIN(result,<sp/>mStreamLength);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_MAX(result,<sp/>aOffset);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="1924"><highlight class="normal">MediaCacheStream::GetNextCachedDataInternal(int64_t<sp/>aOffset)</highlight></codeline>
<codeline lineno="1925"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;GetReentrantMonitor().AssertCurrentThreadIn();</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aOffset<sp/>==<sp/>mStreamLength)</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/>uint32_t<sp/>startBlockIndex<sp/>=<sp/>aOffset/BLOCK_SIZE;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/>uint32_t<sp/>channelBlockIndex<sp/>=<sp/>mChannelOffset/BLOCK_SIZE;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startBlockIndex<sp/>==<sp/>channelBlockIndex<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aOffset<sp/>&lt;<sp/>mChannelOffset)<sp/>{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>block<sp/>containing<sp/>mChannelOffset<sp/>is<sp/>partially<sp/>read,<sp/>but<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>yet<sp/>committed<sp/>to<sp/>the<sp/>main<sp/>cache.<sp/>aOffset<sp/>lies<sp/>in<sp/>the<sp/>partially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>portion,<sp/>thus<sp/>it<sp/>is<sp/>effectively<sp/>cached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aOffset;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startBlockIndex<sp/>&gt;=<sp/>mBlocks.Length())</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>the<sp/>current<sp/>block<sp/>cached?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mBlocks[startBlockIndex]<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aOffset;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>the<sp/>number<sp/>of<sp/>uncached<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasPartialBlock<sp/>=<sp/>(mChannelOffset<sp/>%<sp/>BLOCK_SIZE)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/>uint32_t<sp/>blockIndex<sp/>=<sp/>startBlockIndex<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((hasPartialBlock<sp/>&amp;&amp;<sp/>blockIndex<sp/>==<sp/>channelBlockIndex)<sp/>||</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(blockIndex<sp/>&lt;<sp/>mBlocks.Length()<sp/>&amp;&amp;<sp/>mBlocks[blockIndex]<sp/>!=<sp/>-1))<sp/>{</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>at<sp/>the<sp/>incoming<sp/>channel<sp/>block,<sp/>which<sp/>has<sp/>has<sp/>data<sp/>in<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>are<sp/>we<sp/>at<sp/>a<sp/>cached<sp/>block.<sp/>Return<sp/>index<sp/>of<sp/>block<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blockIndex<sp/>*<sp/>BLOCK_SIZE;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>more<sp/>cached<sp/>blocks?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockIndex<sp/>&gt;=<sp/>mBlocks.Length())</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/>++blockIndex;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/>NS_NOTREACHED(</highlight><highlight class="stringliteral">&quot;Should<sp/>return<sp/>in<sp/>loop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal">MediaCacheStream::SetReadMode(ReadMode<sp/>aMode)</highlight></codeline>
<codeline lineno="1972"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aMode<sp/>==<sp/>mCurrentMode)</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/>mCurrentMode<sp/>=<sp/>aMode;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;QueueUpdate();</highlight></codeline>
<codeline lineno="1978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal">MediaCacheStream::SetPlaybackRate(uint32_t<sp/>aBytesPerSecond)</highlight></codeline>
<codeline lineno="1982"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/>NS_ASSERTION(aBytesPerSecond<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Zero<sp/>playback<sp/>rate<sp/>not<sp/>allowed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aBytesPerSecond<sp/>==<sp/>mPlaybackBytesPerSecond)</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/>mPlaybackBytesPerSecond<sp/>=<sp/>aBytesPerSecond;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;QueueUpdate();</highlight></codeline>
<codeline lineno="1989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="1992"><highlight class="normal">MediaCacheStream::Seek(int32_t<sp/>aWhence,<sp/>int64_t<sp/>aOffset)</highlight></codeline>
<codeline lineno="1993"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mClosed)</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/>int64_t<sp/>oldOffset<sp/>=<sp/>mStreamOffset;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(aWhence)<sp/>{</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PR_SEEK_END:</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mStreamLength<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/>mStreamOffset<sp/>=<sp/>mStreamLength<sp/>+<sp/>aOffset;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PR_SEEK_CUR:</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/>mStreamOffset<sp/>+=<sp/>aOffset;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PR_SEEK_SET:</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/>mStreamOffset<sp/>=<sp/>aOffset;</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ERROR(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>whence&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,<sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>Seek<sp/>to<sp/>%lld&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)mStreamOffset));</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;NoteSeek(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>oldOffset);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;QueueUpdate();</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="2026"><highlight class="normal">MediaCacheStream::Tell()</highlight></codeline>
<codeline lineno="2027"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mStreamOffset;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="2035"><highlight class="normal">MediaCacheStream::Read(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aBuffer,<sp/>uint32_t<sp/>aCount,<sp/>uint32_t*<sp/>aBytes)</highlight></codeline>
<codeline lineno="2036"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mClosed)</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>one<sp/>block<sp/>(or<sp/>part<sp/>of<sp/>a<sp/>block)<sp/>at<sp/>a<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(count<sp/>&lt;<sp/>aCount)<sp/>{</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>streamBlock<sp/>=<sp/>uint32_t(mStreamOffset/BLOCK_SIZE);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>offsetInStreamBlock<sp/>=</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t(mStreamOffset<sp/>-<sp/>streamBlock*BLOCK_SIZE);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>size<sp/>=<sp/>NS_MIN(aCount<sp/>-<sp/>count,<sp/>BLOCK_SIZE<sp/>-<sp/>offsetInStreamBlock);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mStreamLength<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>try<sp/>to<sp/>read<sp/>beyond<sp/>the<sp/>end<sp/>of<sp/>the<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>bytesRemaining<sp/>=<sp/>mStreamLength<sp/>-<sp/>mStreamOffset;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytesRemaining<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>out<sp/>of<sp/>here<sp/>and<sp/>return<sp/>NS_OK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>NS_MIN(size,<sp/>bytesRemaining);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clamp<sp/>size<sp/>until<sp/>64-bit<sp/>file<sp/>size<sp/>issues<sp/>(bug<sp/>500784)<sp/>are<sp/>fixed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>NS_MIN(size,<sp/>int64_t(INT32_MAX));</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>bytes;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>cacheBlock<sp/>=<sp/>streamBlock<sp/>&lt;<sp/>mBlocks.Length()<sp/>?<sp/>mBlocks[streamBlock]<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheBlock<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>have<sp/>a<sp/>complete<sp/>cached<sp/>block<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>data<sp/>has<sp/>been<sp/>read,<sp/>so<sp/>return<sp/>what<sp/>we&apos;ve<sp/>got<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>blocking<sp/>or<sp/>trying<sp/>to<sp/>find<sp/>a<sp/>stream<sp/>with<sp/>a<sp/>partial<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>if<sp/>the<sp/>data<sp/>is<sp/>available<sp/>in<sp/>the<sp/>partial<sp/>cache<sp/>block<sp/>of<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stream<sp/>reading<sp/>this<sp/>resource.<sp/>We<sp/>need<sp/>to<sp/>do<sp/>this<sp/>in<sp/>case<sp/>there<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>another<sp/>stream<sp/>with<sp/>this<sp/>resource<sp/>that<sp/>has<sp/>all<sp/>the<sp/>data<sp/>to<sp/>the<sp/>end<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>stream<sp/>but<sp/>the<sp/>data<sp/>doesn&apos;t<sp/>end<sp/>on<sp/>a<sp/>block<sp/>boundary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MediaCacheStream*<sp/>streamWithPartialBlock<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MediaCache::ResourceStreamIterator<sp/>iter(mResourceID);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(MediaCacheStream*<sp/>stream<sp/>=<sp/>iter.Next())<sp/>{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uint32_t(stream-&gt;mChannelOffset/BLOCK_SIZE)<sp/>==<sp/>streamBlock<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStreamOffset<sp/>&lt;<sp/>stream-&gt;mChannelOffset)<sp/>{</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>streamWithPartialBlock<sp/>=<sp/>stream;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(streamWithPartialBlock)<sp/>{</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>just<sp/>use<sp/>the<sp/>data<sp/>in<sp/>mPartialBlockBuffer.<sp/>In<sp/>fact<sp/>we<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>it<sp/>rather<sp/>than<sp/>waiting<sp/>for<sp/>the<sp/>block<sp/>to<sp/>fill<sp/>and<sp/>land<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>cache.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>=<sp/>NS_MIN&lt;int64_t&gt;(size,<sp/>streamWithPartialBlock-&gt;mChannelOffset<sp/>-<sp/>mStreamOffset);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(aBuffer,</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reinterpret_cast&lt;char*&gt;(streamWithPartialBlock-&gt;mPartialBlockBuffer)<sp/>+<sp/>offsetInStreamBlock,<sp/>bytes);</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mCurrentMode<sp/>==<sp/>MODE_METADATA)<sp/>{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>streamWithPartialBlock-&gt;mMetadataInPartialBlockBuffer<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStreamOffset<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>bytes;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>data<sp/>has<sp/>been<sp/>read<sp/>yet,<sp/>so<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mon.Wait();</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mClosed)<sp/>{</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>may<sp/>have<sp/>successfully<sp/>read<sp/>some<sp/>data,<sp/>but<sp/>let&apos;s<sp/>just<sp/>throw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/>gMediaCache-&gt;NoteBlockUsage(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>cacheBlock,<sp/>mCurrentMode,<sp/>TimeStamp::Now());</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>offset<sp/>=<sp/>cacheBlock*BLOCK_SIZE<sp/>+<sp/>offsetInStreamBlock;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ABORT_IF_FALSE(size<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>size<sp/>&lt;=<sp/>INT32_MAX,<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>gMediaCache-&gt;ReadCacheFile(offset,<sp/>aBuffer<sp/>+<sp/>count,<sp/>int32_t(size),<sp/>&amp;bytes);</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))<sp/>{</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>did<sp/>successfully<sp/>read<sp/>some<sp/>data,<sp/>may<sp/>as<sp/>well<sp/>return<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>mStreamOffset<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>data<sp/>was<sp/>read,<sp/>so<sp/>queue<sp/>an<sp/>update<sp/>since<sp/>block<sp/>priorities<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/>gMediaCache-&gt;QueueUpdate();</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/>LOG(PR_LOG_DEBUG,</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Stream<sp/>%p<sp/>Read<sp/>at<sp/>%lld<sp/>count=%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(mStreamOffset-count),<sp/>count));</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/>*aBytes<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="2139"><highlight class="normal">MediaCacheStream::ReadFromCache(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aBuffer,</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>aOffset,</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>aCount)</highlight></codeline>
<codeline lineno="2142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mClosed)</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>one<sp/>block<sp/>(or<sp/>part<sp/>of<sp/>a<sp/>block)<sp/>at<sp/>a<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/>int64_t<sp/>streamOffset<sp/>=<sp/>aOffset;</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(count<sp/>&lt;<sp/>aCount)<sp/>{</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>streamBlock<sp/>=<sp/>uint32_t(streamOffset/BLOCK_SIZE);</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>offsetInStreamBlock<sp/>=</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t(streamOffset<sp/>-<sp/>streamBlock*BLOCK_SIZE);</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>size<sp/>=<sp/>NS_MIN&lt;int64_t&gt;(aCount<sp/>-<sp/>count,<sp/>BLOCK_SIZE<sp/>-<sp/>offsetInStreamBlock);</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mStreamLength<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>try<sp/>to<sp/>read<sp/>beyond<sp/>the<sp/>end<sp/>of<sp/>the<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>bytesRemaining<sp/>=<sp/>mStreamLength<sp/>-<sp/>streamOffset;</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytesRemaining<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>NS_MIN(size,<sp/>bytesRemaining);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clamp<sp/>size<sp/>until<sp/>64-bit<sp/>file<sp/>size<sp/>issues<sp/>(bug<sp/>500784)<sp/>are<sp/>fixed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>NS_MIN(size,<sp/>int64_t(INT32_MAX));</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>bytes;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>channelBlock<sp/>=<sp/>uint32_t(mChannelOffset/BLOCK_SIZE);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>cacheBlock<sp/>=<sp/>streamBlock<sp/>&lt;<sp/>mBlocks.Length()<sp/>?<sp/>mBlocks[streamBlock]<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channelBlock<sp/>==<sp/>streamBlock<sp/>&amp;&amp;<sp/>streamOffset<sp/>&lt;<sp/>mChannelOffset)<sp/>{</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>just<sp/>use<sp/>the<sp/>data<sp/>in<sp/>mPartialBlockBuffer.<sp/>In<sp/>fact<sp/>we<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>it<sp/>rather<sp/>than<sp/>waiting<sp/>for<sp/>the<sp/>block<sp/>to<sp/>fill<sp/>and<sp/>land<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>cache.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>=<sp/>NS_MIN&lt;int64_t&gt;(size,<sp/>mChannelOffset<sp/>-<sp/>streamOffset);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(aBuffer<sp/>+<sp/>count,</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reinterpret_cast&lt;char*&gt;(mPartialBlockBuffer)<sp/>+<sp/>offsetInStreamBlock,<sp/>bytes);</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheBlock<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>expect<sp/>all<sp/>blocks<sp/>to<sp/>be<sp/>cached!<sp/>Fail!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>offset<sp/>=<sp/>cacheBlock*BLOCK_SIZE<sp/>+<sp/>offsetInStreamBlock;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ABORT_IF_FALSE(size<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>size<sp/>&lt;=<sp/>INT32_MAX,<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>gMediaCache-&gt;ReadCacheFile(offset,<sp/>aBuffer<sp/>+<sp/>count,<sp/>int32_t(size),<sp/>&amp;bytes);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))<sp/>{</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/>streamOffset<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="2197"><highlight class="normal">MediaCacheStream::Init()</highlight></codeline>
<codeline lineno="2198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/>NS_ASSERTION(NS_IsMainThread(),<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>call<sp/>on<sp/>main<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mInitialized)</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/>InitMediaCache();</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gMediaCache)</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/>gMediaCache-&gt;OpenStream(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/>mInitialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="2213"><highlight class="normal">MediaCacheStream::InitAsClone(MediaCacheStream*<sp/>aOriginal)</highlight></codeline>
<codeline lineno="2214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!aOriginal-&gt;IsAvailableForSharing())</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mInitialized)</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/>nsresult<sp/>rv<sp/>=<sp/>Init();</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NS_FAILED(rv))</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/>mResourceID<sp/>=<sp/>aOriginal-&gt;mResourceID;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Grab<sp/>cache<sp/>blocks<sp/>from<sp/>aOriginal<sp/>as<sp/>readahead<sp/>blocks<sp/>for<sp/>our<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/>mPrincipal<sp/>=<sp/>aOriginal-&gt;mPrincipal;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/>mStreamLength<sp/>=<sp/>aOriginal-&gt;mStreamLength;</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/>mIsSeekable<sp/>=<sp/>aOriginal-&gt;mIsSeekable;</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cloned<sp/>streams<sp/>are<sp/>initially<sp/>suspended,<sp/>since<sp/>there<sp/>is<sp/>no<sp/>channel<sp/>open</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initially<sp/>for<sp/>a<sp/>clone.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/>mCacheSuspended<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/>mChannelEnded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aOriginal-&gt;mDidNotifyDataEnded)<sp/>{</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/>mNotifyDataEndedStatus<sp/>=<sp/>aOriginal-&gt;mNotifyDataEndedStatus;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>mDidNotifyDataEnded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>mClient-&gt;CacheClientNotifyDataEnded(mNotifyDataEndedStatus);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aOriginal-&gt;mBlocks.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>cacheBlockIndex<sp/>=<sp/>aOriginal-&gt;mBlocks[i];</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheBlockIndex<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>mBlocks.Length())<sp/>{</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mBlocks.AppendElement(-1);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Every<sp/>block<sp/>is<sp/>a<sp/>readahead<sp/>block<sp/>for<sp/>the<sp/>clone<sp/>because<sp/>the<sp/>clone&apos;s<sp/>initial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stream<sp/>offset<sp/>is<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/>gMediaCache-&gt;AddBlockOwnerAsReadahead(cacheBlockIndex,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal">nsresult<sp/>MediaCacheStream::GetCachedRanges(nsTArray&lt;MediaByteRange&gt;&amp;<sp/>aRanges)</highlight></codeline>
<codeline lineno="2261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>the<sp/>monitor,<sp/>so<sp/>that<sp/>the<sp/>cached<sp/>data<sp/>ranges<sp/>can&apos;t<sp/>grow<sp/>while<sp/>we&apos;re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>trying<sp/>to<sp/>loop<sp/>over<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/>ReentrantMonitorAutoEnter<sp/>mon(gMediaCache-&gt;GetReentrantMonitor());</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>must<sp/>be<sp/>pinned<sp/>while<sp/>running<sp/>this,<sp/>otherwise<sp/>the<sp/>cached<sp/>data<sp/>ranges<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>shrink<sp/>while<sp/>we&apos;re<sp/>trying<sp/>to<sp/>loop<sp/>over<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mPinCount<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>be<sp/>pinned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/>int64_t<sp/>startOffset<sp/>=<sp/>GetNextCachedData(0);</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(startOffset<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>endOffset<sp/>=<sp/>GetCachedDataEnd(startOffset);</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(startOffset<sp/>&lt;<sp/>endOffset,<sp/></highlight><highlight class="stringliteral">&quot;Buffered<sp/>range<sp/>must<sp/>end<sp/>after<sp/>its<sp/>start&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bytes<sp/>[startOffset..endOffset]<sp/>are<sp/>cached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>aRanges.AppendElement(MediaByteRange(startOffset,<sp/>endOffset));</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/>startOffset<sp/>=<sp/>GetNextCachedData(endOffset);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(startOffset<sp/>==<sp/>-1<sp/>||<sp/>startOffset<sp/>&gt;<sp/>endOffset,</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>have<sp/>advanced<sp/>to<sp/>start<sp/>of<sp/>next<sp/>range,<sp/>or<sp/>hit<sp/>end<sp/>of<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="2281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mozilla</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/tools/mozilla-release/content/media/MediaCache.cpp"/>
  </compounddef>
</doxygen>
