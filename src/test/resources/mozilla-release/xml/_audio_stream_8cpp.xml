<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="_audio_stream_8cpp" kind="file">
    <compoundname>AudioStream.cpp</compoundname>
    <includes local="yes">mozilla/dom/ContentChild.h</includes>
    <includes local="yes">mozilla/dom/PAudioChild.h</includes>
    <includes local="yes">mozilla/dom/AudioChild.h</includes>
    <includes local="yes">nsXULAppAPI.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">math.h</includes>
    <includes local="yes">prlog.h</includes>
    <includes local="yes">prmem.h</includes>
    <includes local="yes">prdtoa.h</includes>
    <includes local="yes">nsAutoPtr.h</includes>
    <includes local="yes">AudioStream.h</includes>
    <includes local="yes">nsAlgorithm.h</includes>
    <includes local="yes">VideoUtils.h</includes>
    <includes local="yes">mozilla/Mutex.h</includes>
    <includes local="yes">sydneyaudio/sydney_audio.h</includes>
    <includes local="yes">nsThreadUtils.h</includes>
    <includes local="yes">mozilla/Preferences.h</includes>
    <incdepgraph>
      <node id="75">
        <label>AudioStream.h</label>
      </node>
      <node id="73">
        <label>prdtoa.h</label>
      </node>
      <node id="65">
        <label>mozilla/dom/ContentChild.h</label>
      </node>
      <node id="80">
        <label>nsThreadUtils.h</label>
      </node>
      <node id="67">
        <label>mozilla/dom/AudioChild.h</label>
      </node>
      <node id="68">
        <label>nsXULAppAPI.h</label>
      </node>
      <node id="64">
        <label>C:/tools/mozilla-release/content/media/AudioStream.cpp</label>
        <link refid="AudioStream.cpp"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>mozilla/Mutex.h</label>
      </node>
      <node id="79">
        <label>sydneyaudio/sydney_audio.h</label>
      </node>
      <node id="77">
        <label>VideoUtils.h</label>
      </node>
      <node id="72">
        <label>prmem.h</label>
      </node>
      <node id="81">
        <label>mozilla/Preferences.h</label>
      </node>
      <node id="66">
        <label>mozilla/dom/PAudioChild.h</label>
      </node>
      <node id="70">
        <label>math.h</label>
      </node>
      <node id="76">
        <label>nsAlgorithm.h</label>
      </node>
      <node id="71">
        <label>prlog.h</label>
      </node>
      <node id="69">
        <label>stdio.h</label>
      </node>
      <node id="74">
        <label>nsAutoPtr.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classmozilla_1_1ns_native_audio_stream" prot="public">mozilla::nsNativeAudioStream</innerclass>
    <innerclass refid="classmozilla_1_1_async_shutdown_playback_thread" prot="public">mozilla::AsyncShutdownPlaybackThread</innerclass>
    <innernamespace refid="namespacemozilla">mozilla</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_audio_stream_8cpp_1ad6a08c12c3bc6baeb70ce1a15f013145" prot="public" static="no">
        <name>PREF_VOLUME_SCALE</name>
        <initializer>&quot;media.volume_scale&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/AudioStream.cpp" line="290" bodyfile="C:/tools/mozilla-release/content/media/AudioStream.cpp" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_audio_stream_8cpp_1afac8615d9d362d4b4705a19f4917f53e" prot="public" static="no">
        <name>PREF_USE_CUBEB</name>
        <initializer>&quot;media.use_cubeb&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/AudioStream.cpp" line="291" bodyfile="C:/tools/mozilla-release/content/media/AudioStream.cpp" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_audio_stream_8cpp_1a0f46555349ccdcb67586b3728423e73c" prot="public" static="no">
        <name>PREF_CUBEB_LATENCY</name>
        <initializer>&quot;media.cubeb_latency_ms&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/tools/mozilla-release/content/media/AudioStream.cpp" line="292" bodyfile="C:/tools/mozilla-release/content/media/AudioStream.cpp" bodystart="292" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>Mode:<sp/>C++;<sp/>tab-width:<sp/>2;<sp/>indent-tabs-mode:<sp/>nil;<sp/>c-basic-offset:<sp/>2<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>ts=2<sp/>sw=2<sp/>sts=2<sp/>et<sp/>cindent:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>Source<sp/>Code<sp/>Form<sp/>is<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Mozilla<sp/>Public</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>License,<sp/>v.<sp/>2.0.<sp/>If<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>MPL<sp/>was<sp/>not<sp/>distributed<sp/>with<sp/>this</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>file,<sp/>You<sp/>can<sp/>obtain<sp/>one<sp/>at<sp/>http://mozilla.org/MPL/2.0/.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/dom/ContentChild.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/dom/PAudioChild.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/dom/AudioChild.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsXULAppAPI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">mozilla::dom;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;prlog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;prmem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;prdtoa.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsAutoPtr.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AudioStream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsAlgorithm.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;VideoUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/Mutex.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sydneyaudio/sydney_audio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsThreadUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mozilla/Preferences.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MOZ_CUBEB)</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;nsAutoRef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cubeb/cubeb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">nsAutoRefTraits&lt;cubeb_stream&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsPointerRefTraits&lt;cubeb_stream&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Release(cubeb_stream*<sp/>aStream)<sp/>{<sp/>cubeb_stream_destroy(aStream);<sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mozilla<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(XP_MACOSX)</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SA_PER_STREAM_VOLUME<sp/>1</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Android&apos;s<sp/>audio<sp/>backend<sp/>is<sp/>not<sp/>available<sp/>in<sp/>content<sp/>processes,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>audio<sp/>must<sp/>be<sp/>remoted<sp/>to<sp/>the<sp/>parent<sp/>chrome<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MOZ_WIDGET_ANDROID)</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>REMOTE_AUDIO<sp/>1</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PR_LOGGING</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="normal">PRLogModuleInfo*<sp/>gAudioStreamLog<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>FAKE_BUFFER_SIZE<sp/>=<sp/>176400;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>milliseconds<sp/>per<sp/>second.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>MS_PER_S<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classmozilla_1_1ns_native_audio_stream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmozilla_1_1ns_native_audio_stream" kindref="compound">nsNativeAudioStream</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>AudioStream</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>NS_DECL_ISUPPORTS</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>~<ref refid="classmozilla_1_1ns_native_audio_stream" kindref="compound">nsNativeAudioStream</ref>();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="classmozilla_1_1ns_native_audio_stream" kindref="compound">nsNativeAudioStream</ref>();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>nsresult<sp/>Init(int32_t<sp/>aNumChannels,<sp/>int32_t<sp/>aRate,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AudioChannelType<sp/>aAudioChannelType);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Shutdown();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>nsresult<sp/>Write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AudioDataValue*<sp/>aBuf,<sp/>uint32_t<sp/>aFrames);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Available();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetVolume(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aVolume);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Drain();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Pause();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Resume();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>int64_t<sp/>GetPosition();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>int64_t<sp/>GetPositionInFrames();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsPaused();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>int32_t<sp/>GetMinWriteSize();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mVolume;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mAudioHandle;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>if<sp/>this<sp/>audio<sp/>stream<sp/>is<sp/>paused.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mPaused;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>if<sp/>this<sp/>stream<sp/>has<sp/>encountered<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mInError;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(REMOTE_AUDIO)</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">nsRemotedAudioStream<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>AudioStream</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>NS_DECL_ISUPPORTS</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>nsRemotedAudioStream();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>~nsRemotedAudioStream();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>nsresult<sp/>Init(int32_t<sp/>aNumChannels,<sp/>int32_t<sp/>aRate,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AudioChannelType<sp/>aAudioChannelType);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Shutdown();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>nsresult<sp/>Write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AudioDataValue*<sp/>aBuf,<sp/>uint32_t<sp/>aFrames);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Available();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetVolume(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aVolume);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Drain();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Pause();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Resume();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>int64_t<sp/>GetPosition();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>int64_t<sp/>GetPositionInFrames();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsPaused();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>int32_t<sp/>GetMinWriteSize();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;AudioChild&gt;<sp/>mAudioChild;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>int32_t<sp/>mBytesPerFrame;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>if<sp/>this<sp/>audio<sp/>stream<sp/>is<sp/>paused.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mPaused;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AudioInitEvent;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AudioInitEvent<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsRunnable</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>AudioInitEvent(nsRemotedAudioStream*<sp/>owner)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>mOwner<sp/>=<sp/>owner;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>NS_IMETHOD<sp/>Run()</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>ContentChild<sp/>*<sp/>cpc<sp/>=<sp/>ContentChild::GetSingleton();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ASSERTION(cpc,<sp/></highlight><highlight class="stringliteral">&quot;Content<sp/>Protocol<sp/>is<sp/>NULL!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>mOwner-&gt;mAudioChild<sp/>=<sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">AudioChild*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cpc-&gt;SendPAudioConstructor(mOwner-&gt;mChannels,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mOwner-&gt;mRate));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;nsRemotedAudioStream&gt;<sp/>mOwner;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AudioWriteEvent<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsRunnable</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>AudioWriteEvent(AudioChild*<sp/>aChild,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AudioDataValue*<sp/>aBuf,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>aNumberOfFrames,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>aBytesPerFrame)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioChild<sp/>=<sp/>aChild;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>mBytesPerFrame<sp/>=<sp/>aBytesPerFrame;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>mBuffer.Assign(reinterpret_cast&lt;const<sp/>char*&gt;(aBuf),</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aNumberOfFrames<sp/>*<sp/>aBytesPerFrame);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>NS_IMETHOD<sp/>Run()</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioChild-&gt;IsIPCOpen())</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioChild-&gt;SendWrite(mBuffer,<sp/>mBuffer.Length()<sp/>/<sp/>mBytesPerFrame);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;AudioChild&gt;<sp/>mAudioChild;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>nsCString<sp/>mBuffer;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>uint32_t<sp/>mBytesPerFrame;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AudioSetVolumeEvent<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsRunnable</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>AudioSetVolumeEvent(AudioChild*<sp/>aChild,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aVolume)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioChild<sp/>=<sp/>aChild;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>mVolume<sp/>=<sp/>aVolume;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>NS_IMETHOD<sp/>Run()</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioChild-&gt;IsIPCOpen())</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioChild-&gt;SendSetVolume(mVolume);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;AudioChild&gt;<sp/>mAudioChild;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mVolume;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">};</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AudioMinWriteSizeEvent<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsRunnable</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>AudioMinWriteSizeEvent(AudioChild*<sp/>aChild)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioChild<sp/>=<sp/>aChild;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>NS_IMETHOD<sp/>Run()</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioChild-&gt;IsIPCOpen())</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioChild-&gt;SendMinWriteSize();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;AudioChild&gt;<sp/>mAudioChild;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">};</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AudioDrainEvent<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsRunnable</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>AudioDrainEvent(AudioChild*<sp/>aChild)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioChild<sp/>=<sp/>aChild;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>NS_IMETHOD<sp/>Run()</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioChild-&gt;IsIPCOpen())</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioChild-&gt;SendDrain();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;AudioChild&gt;<sp/>mAudioChild;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AudioPauseEvent<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsRunnable</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>AudioPauseEvent(AudioChild*<sp/>aChild,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pause)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioChild<sp/>=<sp/>aChild;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>mPause<sp/>=<sp/>pause;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>NS_IMETHOD<sp/>Run()</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioChild-&gt;IsIPCOpen())</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mPause)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mAudioChild-&gt;SendPause();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mAudioChild-&gt;SendResume();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;AudioChild&gt;<sp/>mAudioChild;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mPause;</highlight></codeline>
<codeline lineno="268"><highlight class="normal">};</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AudioShutdownEvent<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsRunnable</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>AudioShutdownEvent(AudioChild*<sp/>aChild)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioChild<sp/>=<sp/>aChild;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>NS_IMETHOD<sp/>Run()</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAudioChild-&gt;IsIPCOpen())</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mAudioChild-&gt;SendShutdown();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>nsRefPtr&lt;AudioChild&gt;<sp/>mAudioChild;</highlight></codeline>
<codeline lineno="287"><highlight class="normal">};</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PREF_VOLUME_SCALE<sp/>&quot;media.volume_scale&quot;</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PREF_USE_CUBEB<sp/>&quot;media.use_cubeb&quot;</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PREF_CUBEB_LATENCY<sp/>&quot;media.cubeb_latency_ms&quot;</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Mutex*<sp/>gAudioPrefsLock<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gVolumeScale;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gUseCubeb;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>gCubebLatency;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PrefChanged(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aPref,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aClosure)</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(aPref,<sp/>PREF_VOLUME_SCALE)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>nsAdoptingString<sp/>value<sp/>=<sp/>Preferences::GetString(aPref);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>MutexAutoLock<sp/>lock(*gAudioPrefsLock);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gVolumeScale<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ConvertUTF16toUTF8<sp/>utf8(value);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gVolumeScale<sp/>=<sp/>NS_MAX&lt;double&gt;(0,<sp/>PR_strtod(utf8.get(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(aPref,<sp/>PREF_USE_CUBEB)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MOZ_WIDGET_GONK</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>Preferences::GetBool(aPref,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>Preferences::GetBool(aPref,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>MutexAutoLock<sp/>lock(*gAudioPrefsLock);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>gUseCubeb<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(aPref,<sp/>PREF_CUBEB_LATENCY)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Arbitrary<sp/>default<sp/>stream<sp/>latency<sp/>of<sp/>100ms.<sp/><sp/>The<sp/>higher<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>value,<sp/>the<sp/>longer<sp/>stream<sp/>volume<sp/>changes<sp/>will<sp/>take<sp/>to<sp/>become</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>audible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value<sp/>=<sp/>Preferences::GetUint(aPref,<sp/>100);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>MutexAutoLock<sp/>lock(*gAudioPrefsLock);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>gCubebLatency<sp/>=<sp/>NS_MIN&lt;uint32_t&gt;(NS_MAX&lt;uint32_t&gt;(value,<sp/>20),<sp/>1000);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GetVolumeScale()</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>MutexAutoLock<sp/>lock(*gAudioPrefsLock);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gVolumeScale;</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MOZ_CUBEB)</highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GetUseCubeb()</highlight></codeline>
<codeline lineno="337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>MutexAutoLock<sp/>lock(*gAudioPrefsLock);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gUseCubeb;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>cubeb*<sp/>gCubebContext;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>cubeb*<sp/>GetCubebContext()</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>MutexAutoLock<sp/>lock(*gAudioPrefsLock);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gCubebContext<sp/>||</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cubeb_init(&amp;gCubebContext,<sp/></highlight><highlight class="stringliteral">&quot;AudioStream&quot;</highlight><highlight class="normal">)<sp/>==<sp/>CUBEB_OK)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gCubebContext;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>NS_WARNING(</highlight><highlight class="stringliteral">&quot;cubeb_init<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>GetCubebLatency()</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>MutexAutoLock<sp/>lock(*gAudioPrefsLock);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gCubebLatency;</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>sa_stream_type_t<sp/>ConvertChannelToSAType(AudioChannelType<sp/>aType)</highlight></codeline>
<codeline lineno="363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(aType)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AUDIO_CHANNEL_NORMAL:</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SA_STREAM_TYPE_SYSTEM;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AUDIO_CHANNEL_CONTENT:</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SA_STREAM_TYPE_MUSIC;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AUDIO_CHANNEL_NOTIFICATION:</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SA_STREAM_TYPE_NOTIFICATION;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AUDIO_CHANNEL_ALARM:</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SA_STREAM_TYPE_ALARM;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AUDIO_CHANNEL_TELEPHONY:</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SA_STREAM_TYPE_VOICE_CALL;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AUDIO_CHANNEL_RINGER:</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SA_STREAM_TYPE_RING;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AUDIO_CHANNEL_PUBLICNOTIFICATION:</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SA_STREAM_TYPE_ENFORCED_AUDIBLE;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NS_ERROR(</highlight><highlight class="stringliteral">&quot;The<sp/>value<sp/>of<sp/>AudioChannelType<sp/>is<sp/>invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SA_STREAM_TYPE_MAX;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AudioStream::InitLibrary()</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PR_LOGGING</highlight></codeline>
<codeline lineno="388"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>gAudioStreamLog<sp/>=<sp/>PR_NewLogModule(</highlight><highlight class="stringliteral">&quot;AudioStream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="390"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>gAudioPrefsLock<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Mutex(</highlight><highlight class="stringliteral">&quot;AudioStream::gAudioPrefsLock&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>PrefChanged(PREF_VOLUME_SCALE,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>Preferences::RegisterCallback(PrefChanged,<sp/>PREF_VOLUME_SCALE);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MOZ_CUBEB)</highlight></codeline>
<codeline lineno="394"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>PrefChanged(PREF_USE_CUBEB,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>Preferences::RegisterCallback(PrefChanged,<sp/>PREF_USE_CUBEB);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>PrefChanged(PREF_CUBEB_LATENCY,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>Preferences::RegisterCallback(PrefChanged,<sp/>PREF_CUBEB_LATENCY);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="399"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AudioStream::ShutdownLibrary()</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>Preferences::UnregisterCallback(PrefChanged,<sp/>PREF_VOLUME_SCALE);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MOZ_CUBEB)</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>Preferences::UnregisterCallback(PrefChanged,<sp/>PREF_USE_CUBEB);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gAudioPrefsLock;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>gAudioPrefsLock<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MOZ_CUBEB)</highlight></codeline>
<codeline lineno="411"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gCubebContext)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>cubeb_destroy(gCubebContext);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>gCubebContext<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="416"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal">nsIThread<sp/>*</highlight></codeline>
<codeline lineno="419"><highlight class="normal">AudioStream::GetThread()</highlight></codeline>
<codeline lineno="420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioPlaybackThread)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_NewNamedThread(</highlight><highlight class="stringliteral">&quot;Audio<sp/>Stream&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getter_AddRefs(mAudioPlaybackThread),</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_THREAD_STACK_SIZE);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mAudioPlaybackThread;</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="classmozilla_1_1_async_shutdown_playback_thread" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmozilla_1_1_async_shutdown_playback_thread" kindref="compound">AsyncShutdownPlaybackThread</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>nsRunnable</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><ref refid="classmozilla_1_1_async_shutdown_playback_thread" kindref="compound">AsyncShutdownPlaybackThread</ref>(nsIThread*<sp/>aThread)<sp/>:<sp/>mThread(aThread)<sp/>{}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>NS_IMETHODIMP<sp/>Run()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mThread-&gt;Shutdown();<sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIThread&gt;<sp/>mThread;</highlight></codeline>
<codeline lineno="437"><highlight class="normal">};</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">AudioStream::~AudioStream()</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAudioPlaybackThread)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classmozilla_1_1_async_shutdown_playback_thread" kindref="compound">AsyncShutdownPlaybackThread</ref>(mAudioPlaybackThread);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_DispatchToMainThread(event);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">nsNativeAudioStream::nsNativeAudioStream()<sp/>:</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>mVolume(1.0),</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>mAudioHandle(0),</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>mPaused(false),</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>mInError(false)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">nsNativeAudioStream::~nsNativeAudioStream()</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>Shutdown();</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">NS_IMPL_THREADSAFE_ISUPPORTS0(nsNativeAudioStream)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">nsresult<sp/>nsNativeAudioStream::Init(int32_t<sp/>aNumChannels,<sp/>int32_t<sp/>aRate,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>AudioChannelType<sp/>aAudioChannelType)</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>mRate<sp/>=<sp/>aRate;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>mChannels<sp/>=<sp/>aNumChannels;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa_stream_create_pcm(reinterpret_cast&lt;sa_stream_t**&gt;(&amp;mAudioHandle),</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SA_MODE_WRONLY,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SA_PCM_FORMAT_S16_NE,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aRate,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aNumChannels)<sp/>!=<sp/>SA_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioHandle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>mInError<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>PR_LOG(gAudioStreamLog,<sp/>PR_LOG_ERROR,<sp/>(</highlight><highlight class="stringliteral">&quot;nsNativeAudioStream:<sp/>sa_stream_create_pcm<sp/>error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>saError<sp/>=<sp/>sa_stream_set_stream_type(static_cast&lt;sa_stream_t*&gt;(mAudioHandle),</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConvertChannelToSAType(aAudioChannelType));</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(saError<sp/>!=<sp/>SA_SUCCESS<sp/>&amp;&amp;<sp/>saError<sp/>!=<sp/>SA_ERROR_NOT_SUPPORTED)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioHandle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>mInError<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>PR_LOG(gAudioStreamLog,<sp/>PR_LOG_ERROR,<sp/>(</highlight><highlight class="stringliteral">&quot;nsNativeAudioStream:<sp/>sa_stream_set_stream_type<sp/>error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa_stream_open(static_cast&lt;sa_stream_t*&gt;(mAudioHandle))<sp/>!=<sp/>SA_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>sa_stream_destroy(static_cast&lt;sa_stream_t*&gt;(mAudioHandle));</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>mAudioHandle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>mInError<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>PR_LOG(gAudioStreamLog,<sp/>PR_LOG_ERROR,<sp/>(</highlight><highlight class="stringliteral">&quot;nsNativeAudioStream:<sp/>sa_stream_open<sp/>error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>mInError<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nsNativeAudioStream::Shutdown()</highlight></codeline>
<codeline lineno="502"><highlight class="normal">{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioHandle)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>sa_stream_destroy(static_cast&lt;sa_stream_t*&gt;(mAudioHandle));</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>mAudioHandle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>mInError<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal">nsresult<sp/>nsNativeAudioStream::Write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AudioDataValue*<sp/>aBuf,<sp/>uint32_t<sp/>aFrames)</highlight></codeline>
<codeline lineno="512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!mPaused,<sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>write<sp/>audio<sp/>when<sp/>paused,<sp/>you&apos;ll<sp/>block&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mInError)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>uint32_t<sp/>samples<sp/>=<sp/>aFrames<sp/>*<sp/>mChannels;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>nsAutoArrayPtr&lt;short&gt;<sp/>s_data(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">[samples]);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scaled_volume<sp/>=<sp/>float(GetVolumeScale()<sp/>*<sp/>mVolume);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>ConvertAudioSamplesWithScale(aBuf,<sp/>s_data.get(),<sp/>samples,<sp/>scaled_volume);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa_stream_write(static_cast&lt;sa_stream_t*&gt;(mAudioHandle),</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_data.get(),</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(short))<sp/>!=<sp/>SA_SUCCESS)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>PR_LOG(gAudioStreamLog,<sp/>PR_LOG_ERROR,<sp/>(</highlight><highlight class="stringliteral">&quot;nsNativeAudioStream:<sp/>sa_stream_write<sp/>error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>mInError<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal">uint32_t<sp/>nsNativeAudioStream::Available()</highlight></codeline>
<codeline lineno="536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>audio<sp/>backend<sp/>failed<sp/>to<sp/>open,<sp/>lie<sp/>and<sp/>say<sp/>we&apos;ll<sp/>accept<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mInError)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAKE_BUFFER_SIZE;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa_stream_get_write_size(static_cast&lt;sa_stream_t*&gt;(mAudioHandle),<sp/>&amp;s)<sp/>!=<sp/>SA_SUCCESS)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>/<sp/>mChannels<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(short);</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nsNativeAudioStream::SetVolume(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aVolume)</highlight></codeline>
<codeline lineno="550"><highlight class="normal">{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>NS_ASSERTION(aVolume<sp/>&gt;=<sp/>0.0<sp/>&amp;&amp;<sp/>aVolume<sp/>&lt;=<sp/>1.0,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>volume&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SA_PER_STREAM_VOLUME)</highlight></codeline>
<codeline lineno="553"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa_stream_set_volume_abs(static_cast&lt;sa_stream_t*&gt;(mAudioHandle),<sp/>aVolume)<sp/>!=<sp/>SA_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>PR_LOG(gAudioStreamLog,<sp/>PR_LOG_ERROR,<sp/>(</highlight><highlight class="stringliteral">&quot;nsNativeAudioStream:<sp/>sa_stream_set_volume_abs<sp/>error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>mInError<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="558"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>mVolume<sp/>=<sp/>aVolume;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="560"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nsNativeAudioStream::Drain()</highlight></codeline>
<codeline lineno="563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>NS_ASSERTION(!mPaused,<sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>drain<sp/>audio<sp/>when<sp/>paused,<sp/>it<sp/>won&apos;t<sp/>finish!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mInError)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>sa_stream_drain(static_cast&lt;sa_stream_t*&gt;(mAudioHandle));</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>SA_SUCCESS<sp/>&amp;&amp;<sp/>r<sp/>!=<sp/>SA_ERROR_INVALID)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>PR_LOG(gAudioStreamLog,<sp/>PR_LOG_ERROR,<sp/>(</highlight><highlight class="stringliteral">&quot;nsNativeAudioStream:<sp/>sa_stream_drain<sp/>error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>mInError<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nsNativeAudioStream::Pause()</highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mInError)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>mPaused<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>sa_stream_pause(static_cast&lt;sa_stream_t*&gt;(mAudioHandle));</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nsNativeAudioStream::Resume()</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mInError)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>mPaused<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>sa_stream_resume(static_cast&lt;sa_stream_t*&gt;(mAudioHandle));</highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">int64_t<sp/>nsNativeAudioStream::GetPosition()</highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>int64_t<sp/>position<sp/>=<sp/>GetPositionInFrames();</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(position<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((USECS_PER_S<sp/>*<sp/>position)<sp/>/<sp/>mRate);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">int64_t<sp/>nsNativeAudioStream::GetPositionInFrames()</highlight></codeline>
<codeline lineno="602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mInError)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>sa_position_t<sp/>positionType<sp/>=<sp/>SA_POSITION_WRITE_SOFTWARE;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(XP_WIN)</highlight></codeline>
<codeline lineno="609"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>positionType<sp/>=<sp/>SA_POSITION_WRITE_HARDWARE;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="611"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>int64_t<sp/>position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa_stream_get_position(static_cast&lt;sa_stream_t*&gt;(mAudioHandle),</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positionType,<sp/>&amp;position)<sp/>==<sp/>SA_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>position<sp/>/<sp/>mChannels<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(short);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nsNativeAudioStream::IsPaused()</highlight></codeline>
<codeline lineno="621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mPaused;</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal">int32_t<sp/>nsNativeAudioStream::GetMinWriteSize()</highlight></codeline>
<codeline lineno="626"><highlight class="normal">{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>sa_stream_get_min_write(static_cast&lt;sa_stream_t*&gt;(mAudioHandle),</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;size);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>SA_ERROR_NOT_SUPPORTED)</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>SA_SUCCESS<sp/>||<sp/>size<sp/>&gt;<sp/>INT32_MAX)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(size<sp/>/<sp/>mChannels<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(short));</highlight></codeline>
<codeline lineno="636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(REMOTE_AUDIO)</highlight></codeline>
<codeline lineno="639"><highlight class="preprocessor"></highlight><highlight class="normal">nsRemotedAudioStream::nsRemotedAudioStream()</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/>:<sp/>mAudioChild(nullptr),</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/>mBytesPerFrame(0),</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/>mPaused(false)</highlight></codeline>
<codeline lineno="643"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal">nsRemotedAudioStream::~nsRemotedAudioStream()</highlight></codeline>
<codeline lineno="646"><highlight class="normal">{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>Shutdown();</highlight></codeline>
<codeline lineno="648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal">NS_IMPL_THREADSAFE_ISUPPORTS0(nsRemotedAudioStream)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="653"><highlight class="normal">nsRemotedAudioStream::Init(int32_t<sp/>aNumChannels,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>aRate,<sp/>AudioChannelType<sp/>aAudioChannelType)</highlight></codeline>
<codeline lineno="655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>mRate<sp/>=<sp/>aRate;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>mChannels<sp/>=<sp/>aNumChannels;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>mBytesPerFrame<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(AudioDataValue)<sp/>*<sp/>mChannels;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AudioInitEvent(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>NS_DispatchToMainThread(event,<sp/>NS_DISPATCH_SYNC);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal">nsRemotedAudioStream::Shutdown()</highlight></codeline>
<codeline lineno="667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioChild)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AudioShutdownEvent(mAudioChild);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>NS_DispatchToMainThread(event);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>mAudioChild<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="676"><highlight class="normal">nsRemotedAudioStream::Write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AudioDataValue*<sp/>aBuf,<sp/>uint32_t<sp/>aFrames)</highlight></codeline>
<codeline lineno="677"><highlight class="normal">{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioChild)</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AudioWriteEvent(mAudioChild,</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aBuf,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aFrames,</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mBytesPerFrame);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>NS_DispatchToMainThread(event);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>mAudioChild-&gt;WaitForWrite();</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal">uint32_t</highlight></codeline>
<codeline lineno="690"><highlight class="normal">nsRemotedAudioStream::Available()</highlight></codeline>
<codeline lineno="691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAKE_BUFFER_SIZE;</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal">int32_t<sp/>nsRemotedAudioStream::GetMinWriteSize()</highlight></codeline>
<codeline lineno="696"><highlight class="normal">{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioChild)</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AudioMinWriteSizeEvent(mAudioChild);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>NS_DispatchToMainThread(event);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mAudioChild-&gt;WaitForMinWriteSize();</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal">nsRemotedAudioStream::SetVolume(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aVolume)</highlight></codeline>
<codeline lineno="706"><highlight class="normal">{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioChild)</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AudioSetVolumeEvent(mAudioChild,<sp/>aVolume);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>NS_DispatchToMainThread(event);</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal">nsRemotedAudioStream::Drain()</highlight></codeline>
<codeline lineno="715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioChild)</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AudioDrainEvent(mAudioChild);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>NS_DispatchToMainThread(event);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>mAudioChild-&gt;WaitForDrain();</highlight></codeline>
<codeline lineno="721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal">nsRemotedAudioStream::Pause()</highlight></codeline>
<codeline lineno="725"><highlight class="normal">{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>mPaused<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioChild)</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AudioPauseEvent(mAudioChild,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>NS_DispatchToMainThread(event);</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal">nsRemotedAudioStream::Resume()</highlight></codeline>
<codeline lineno="735"><highlight class="normal">{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>mPaused<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAudioChild)</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>nsCOMPtr&lt;nsIRunnable&gt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AudioPauseEvent(mAudioChild,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>NS_DispatchToMainThread(event);</highlight></codeline>
<codeline lineno="741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal">int64_t<sp/>nsRemotedAudioStream::GetPosition()</highlight></codeline>
<codeline lineno="744"><highlight class="normal">{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>int64_t<sp/>position<sp/>=<sp/>GetPositionInFrames();</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(position<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((USECS_PER_S<sp/>*<sp/>position)<sp/>/<sp/>mRate);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="753"><highlight class="normal">nsRemotedAudioStream::GetPositionInFrames()</highlight></codeline>
<codeline lineno="754"><highlight class="normal">{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!mAudioChild)</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>int64_t<sp/>position<sp/>=<sp/>mAudioChild-&gt;GetLastKnownPosition();</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(position<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>int64_t<sp/>time<sp/>=<sp/>mAudioChild-&gt;GetLastKnownPositionTimestamp();</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>int64_t<sp/>dt<sp/>=<sp/>PR_IntervalToMilliseconds(PR_IntervalNow()<sp/>-<sp/>time);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>position<sp/>+<sp/>(mRate<sp/>*<sp/>dt<sp/>/<sp/>MS_PER_S);</highlight></codeline>
<codeline lineno="766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal">nsRemotedAudioStream::IsPaused()</highlight></codeline>
<codeline lineno="770"><highlight class="normal">{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mPaused;</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="774"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MOZ_CUBEB)</highlight></codeline>
<codeline lineno="776"><highlight class="preprocessor"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">nsCircularByteBuffer</highlight></codeline>
<codeline lineno="777"><highlight class="normal">{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>nsCircularByteBuffer()</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>mBuffer(nullptr),<sp/>mCapacity(0),<sp/>mStart(0),<sp/>mCount(0)</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>capacity<sp/>of<sp/>the<sp/>buffer<sp/>in<sp/>bytes.<sp/><sp/>Must<sp/>be<sp/>called<sp/>before<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>to<sp/>append<sp/>or<sp/>pop<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetCapacity(uint32_t<sp/>aCapacity)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ABORT_IF_FALSE(!mBuffer,<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>allocated.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>mCapacity<sp/>=<sp/>aCapacity;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>mBuffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint8_t[mCapacity];</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Length()<sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mCount;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Capacity()<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mCapacity;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Available()<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Capacity()<sp/>-<sp/>Length();</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Append<sp/>aLength<sp/>bytes<sp/>from<sp/>aSrc<sp/>to<sp/>the<sp/>buffer.<sp/><sp/>Caller<sp/>must<sp/>check<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sufficient<sp/>space<sp/>is<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppendElements(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>aSrc,<sp/>uint32_t<sp/>aLength)<sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ABORT_IF_FALSE(mBuffer<sp/>&amp;&amp;<sp/>mCapacity,<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>not<sp/>initialized.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ABORT_IF_FALSE(aLength<sp/>&lt;=<sp/>Available(),<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>full.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>end<sp/>=<sp/>(mStart<sp/>+<sp/>mCount)<sp/>%<sp/>mCapacity;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>toCopy<sp/>=<sp/>NS_MIN(mCapacity<sp/>-<sp/>end,<sp/>aLength);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;mBuffer[end],<sp/>aSrc,<sp/>toCopy);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;mBuffer[0],<sp/>aSrc<sp/>+<sp/>toCopy,<sp/>aLength<sp/>-<sp/>toCopy);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>mCount<sp/>+=<sp/>aLength;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>aSize<sp/>bytes<sp/>from<sp/>the<sp/>buffer.<sp/><sp/>Caller<sp/>must<sp/>check<sp/>returned<sp/>size<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>aSize{1,2}<sp/>before<sp/>using<sp/>the<sp/>pointer<sp/>returned<sp/>in<sp/>aData{1,2}.<sp/><sp/>Caller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>not<sp/>specify<sp/>an<sp/>aSize<sp/>larger<sp/>than<sp/>Length().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PopElements(uint32_t<sp/>aSize,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>aData1,<sp/>uint32_t*<sp/>aSize1,</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>aData2,<sp/>uint32_t*<sp/>aSize2)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ABORT_IF_FALSE(mBuffer<sp/>&amp;&amp;<sp/>mCapacity,<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>not<sp/>initialized.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ABORT_IF_FALSE(aSize<sp/>&lt;=<sp/>Length(),<sp/></highlight><highlight class="stringliteral">&quot;Request<sp/>too<sp/>large.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>*aData1<sp/>=<sp/>&amp;mBuffer[mStart];</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>*aSize1<sp/>=<sp/>NS_MIN(mCapacity<sp/>-<sp/>mStart,<sp/>aSize);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>*aData2<sp/>=<sp/>&amp;mBuffer[0];</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>*aSize2<sp/>=<sp/>aSize<sp/>-<sp/>*aSize1;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>mCount<sp/>-=<sp/>*aSize1<sp/>+<sp/>*aSize2;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>mStart<sp/>+=<sp/>*aSize1<sp/>+<sp/>*aSize2;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>mStart<sp/>%=<sp/>mCapacity;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>nsAutoArrayPtr&lt;uint8_t&gt;<sp/>mBuffer;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>uint32_t<sp/>mCapacity;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>uint32_t<sp/>mStart;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>uint32_t<sp/>mCount;</highlight></codeline>
<codeline lineno="839"><highlight class="normal">};</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">nsBufferedAudioStream<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>AudioStream</highlight></codeline>
<codeline lineno="842"><highlight class="normal">{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>NS_DECL_ISUPPORTS</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>nsBufferedAudioStream();</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>~nsBufferedAudioStream();</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>nsresult<sp/>Init(int32_t<sp/>aNumChannels,<sp/>int32_t<sp/>aRate,</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AudioChannelType<sp/>aAudioChannelType);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Shutdown();</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>nsresult<sp/>Write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AudioDataValue*<sp/>aBuf,<sp/>uint32_t<sp/>aFrames);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Available();</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetVolume(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aVolume);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Drain();</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Pause();</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Resume();</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>int64_t<sp/>GetPosition();</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>int64_t<sp/>GetPositionInFrames();</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsPaused();</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>int32_t<sp/>GetMinWriteSize();</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>DataCallback_S(cubeb_stream*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aThis,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aBuffer,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>aFrames)</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">nsBufferedAudioStream*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(aThis)-&gt;DataCallback(aBuffer,<sp/>aFrames);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StateCallback_S(cubeb_stream*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aThis,<sp/>cubeb_state<sp/>aState)</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">nsBufferedAudioStream*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(aThis)-&gt;StateCallback(aState);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>DataCallback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aBuffer,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>aFrames);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StateCallback(cubeb_state<sp/>aState);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shared<sp/>implementation<sp/>of<sp/>underflow<sp/>adjusted<sp/>position<sp/>calculation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Caller<sp/>must<sp/>own<sp/>the<sp/>monitor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>int64_t<sp/>GetPositionInFramesUnlocked();</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>monitor<sp/>is<sp/>held<sp/>to<sp/>protect<sp/>all<sp/>access<sp/>to<sp/>member<sp/>variables.<sp/><sp/>Write()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>waits<sp/>while<sp/>mBuffer<sp/>is<sp/>full;<sp/>DataCallback()<sp/>notifies<sp/>as<sp/>it<sp/>consumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>from<sp/>mBuffer.<sp/><sp/>Drain()<sp/>waits<sp/>while<sp/>mState<sp/>is<sp/>DRAINING;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>StateCallback()<sp/>notifies<sp/>when<sp/>mState<sp/>is<sp/>DRAINED.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>Monitor<sp/>mMonitor;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>silent<sp/>frames<sp/>written<sp/>when<sp/>DataCallback<sp/>requests<sp/>more<sp/>frames</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>are<sp/>available<sp/>in<sp/>mBuffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>uint64_t<sp/>mLostFrames;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Temporary<sp/>audio<sp/>buffer.<sp/><sp/>Filled<sp/>by<sp/>Write()<sp/>and<sp/>consumed<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DataCallback().<sp/><sp/>Once<sp/>mBuffer<sp/>is<sp/>full,<sp/>Write()<sp/>blocks<sp/>until<sp/>sufficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>space<sp/>becomes<sp/>available<sp/>in<sp/>mBuffer.<sp/><sp/>mBuffer<sp/>is<sp/>sized<sp/>in<sp/>bytes,<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>frames.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>nsCircularByteBuffer<sp/>mBuffer;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Software<sp/>volume<sp/>level.<sp/><sp/>Applied<sp/>during<sp/>the<sp/>servicing<sp/>of<sp/>DataCallback().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mVolume;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Owning<sp/>reference<sp/>to<sp/>a<sp/>cubeb_stream.<sp/><sp/>cubeb_stream_destroy<sp/>is<sp/>called<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nsAutoRef&apos;s<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>nsAutoRef&lt;cubeb_stream&gt;<sp/>mCubebStream;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>uint32_t<sp/>mBytesPerFrame;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>StreamState<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>INITIALIZED,<sp/></highlight><highlight class="comment">//<sp/>Initialized,<sp/>playback<sp/>has<sp/>not<sp/>begun.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>STARTED,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Started<sp/>by<sp/>a<sp/>call<sp/>to<sp/>Write()<sp/>(iff<sp/>INITIALIZED)<sp/>or<sp/>Resume().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>STOPPED,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stopped<sp/>by<sp/>a<sp/>call<sp/>to<sp/>Pause().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>DRAINING,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Drain<sp/>requested.<sp/><sp/>DataCallback<sp/>will<sp/>indicate<sp/>end<sp/>of<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>once<sp/>the<sp/>remaining<sp/>contents<sp/>of<sp/>mBuffer<sp/>are<sp/>requested<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cubeb,<sp/>after<sp/>which<sp/>StateCallback<sp/>will<sp/>indicate<sp/>drain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>completion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>DRAINED,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StateCallback<sp/>has<sp/>indicated<sp/>that<sp/>the<sp/>drain<sp/>is<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>ERRORED<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stream<sp/>disabled<sp/>due<sp/>to<sp/>an<sp/>internal<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>StreamState<sp/>mState;</highlight></codeline>
<codeline lineno="919"><highlight class="normal">};</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="921"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal">AudioStream*<sp/>AudioStream::AllocateStream()</highlight></codeline>
<codeline lineno="923"><highlight class="normal">{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(REMOTE_AUDIO)</highlight></codeline>
<codeline lineno="925"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XRE_GetProcessType()<sp/>==<sp/>GeckoProcessType_Content)<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>nsRemotedAudioStream();</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="929"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(MOZ_CUBEB)</highlight></codeline>
<codeline lineno="930"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetUseCubeb())<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>nsBufferedAudioStream();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="934"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>nsNativeAudioStream();</highlight></codeline>
<codeline lineno="935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MOZ_CUBEB)</highlight></codeline>
<codeline lineno="938"><highlight class="preprocessor"></highlight><highlight class="normal">nsBufferedAudioStream::nsBufferedAudioStream()</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>:<sp/>mMonitor(</highlight><highlight class="stringliteral">&quot;nsBufferedAudioStream&quot;</highlight><highlight class="normal">),<sp/>mLostFrames(0),<sp/>mVolume(1.0),</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>mBytesPerFrame(0),<sp/>mState(INITIALIZED)</highlight></codeline>
<codeline lineno="941"><highlight class="normal">{</highlight></codeline>
<codeline lineno="942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal">nsBufferedAudioStream::~nsBufferedAudioStream()</highlight></codeline>
<codeline lineno="945"><highlight class="normal">{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>Shutdown();</highlight></codeline>
<codeline lineno="947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal">NS_IMPL_THREADSAFE_ISUPPORTS0(nsBufferedAudioStream)</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="952"><highlight class="normal">nsBufferedAudioStream::Init(int32_t<sp/>aNumChannels,<sp/>int32_t<sp/>aRate,</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>AudioChannelType<sp/>aAudioChannelType)</highlight></codeline>
<codeline lineno="954"><highlight class="normal">{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>cubeb*<sp/>cubebContext<sp/>=<sp/>GetCubebContext();</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cubebContext<sp/>||<sp/>aNumChannels<sp/>&lt;<sp/>0<sp/>||<sp/>aRate<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>mRate<sp/>=<sp/>aRate;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>mChannels<sp/>=<sp/>aNumChannels;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>cubeb_stream_params<sp/>params;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>params.rate<sp/>=<sp/>aRate;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>params.channels<sp/>=<sp/>aNumChannels;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AUDIO_OUTPUT_FORMAT<sp/>==<sp/>AUDIO_FORMAT_S16)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>params.format<sp/>=<sp/>CUBEB_SAMPLE_S16NE;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>params.format<sp/>=<sp/>CUBEB_SAMPLE_FLOAT32NE;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>mBytesPerFrame<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(AudioDataValue)<sp/>*<sp/>aNumChannels;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>cubeb_stream*<sp/>stream;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cubeb_stream_init(cubebContext,<sp/>&amp;stream,<sp/></highlight><highlight class="stringliteral">&quot;nsBufferedAudioStream&quot;</highlight><highlight class="normal">,<sp/>params,</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCubebLatency(),<sp/>DataCallback_S,<sp/>StateCallback_S,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>==<sp/>CUBEB_OK)<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mCubebStream.own(stream);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mCubebStream)<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Size<sp/>mBuffer<sp/>for<sp/>one<sp/>second<sp/>of<sp/>audio.<sp/><sp/>This<sp/>value<sp/>is<sp/>arbitrary,<sp/>and<sp/>was</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>selected<sp/>based<sp/>on<sp/>the<sp/>observed<sp/>behaviour<sp/>of<sp/>the<sp/>existing<sp/>AudioStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implementations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>uint32_t<sp/>bufferLimit<sp/>=<sp/>aRate<sp/>*<sp/>mBytesPerFrame;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>NS_ABORT_IF_FALSE(bufferLimit<sp/>%<sp/>mBytesPerFrame<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>buffer<sp/>complete<sp/>frames&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>mBuffer.SetCapacity(bufferLimit);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal">nsBufferedAudioStream::Shutdown()</highlight></codeline>
<codeline lineno="998"><highlight class="normal">{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>==<sp/>STARTED)<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>Pause();</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mCubebStream)<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>mCubebStream.reset();</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal">nsresult</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">nsBufferedAudioStream::Write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AudioDataValue*<sp/>aBuf,<sp/>uint32_t<sp/>aFrames)</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>MonitorAutoLock<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mCubebStream<sp/>||<sp/>mState<sp/>==<sp/>ERRORED)<sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>NS_ASSERTION(mState<sp/>==<sp/>INITIALIZED<sp/>||<sp/>mState<sp/>==<sp/>STARTED,<sp/></highlight><highlight class="stringliteral">&quot;Stream<sp/>write<sp/>in<sp/>unexpected<sp/>state.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>src<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(aBuf);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>uint32_t<sp/>bytesToCopy<sp/>=<sp/>aFrames<sp/>*<sp/>mBytesPerFrame;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bytesToCopy<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>available<sp/>=<sp/>NS_MIN(bytesToCopy,<sp/>mBuffer.Available());</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ABORT_IF_FALSE(available<sp/>%<sp/>mBytesPerFrame<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>copy<sp/>complete<sp/>frames.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>mBuffer.AppendElements(src,<sp/>available);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>src<sp/>+=<sp/>available;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>bytesToCopy<sp/>-=<sp/>available;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>!=<sp/>STARTED)<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MonitorAutoUnlock<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>cubeb_stream_start(mCubebStream);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mState<sp/>=<sp/>r<sp/>==<sp/>CUBEB_OK<sp/>?<sp/>STARTED<sp/>:<sp/>ERRORED;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>!=<sp/>STARTED)<sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_ERROR_FAILURE;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytesToCopy<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mon.Wait();</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_OK;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal">uint32_t</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">nsBufferedAudioStream::Available()</highlight></codeline>
<codeline lineno="1050"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>MonitorAutoLock<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>NS_ABORT_IF_FALSE(mBuffer.Length()<sp/>%<sp/>mBytesPerFrame<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>invariant<sp/>violated.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mBuffer.Available()<sp/>/<sp/>mBytesPerFrame;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal">int32_t</highlight></codeline>
<codeline lineno="1057"><highlight class="normal">nsBufferedAudioStream::GetMinWriteSize()</highlight></codeline>
<codeline lineno="1058"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal">nsBufferedAudioStream::SetVolume(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aVolume)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>MonitorAutoLock<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>NS_ABORT_IF_FALSE(aVolume<sp/>&gt;=<sp/>0.0<sp/>&amp;&amp;<sp/>aVolume<sp/>&lt;=<sp/>1.0,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>volume&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>mVolume<sp/>=<sp/>aVolume;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal">nsBufferedAudioStream::Drain()</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>MonitorAutoLock<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>!=<sp/>STARTED)<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>mState<sp/>=<sp/>DRAINING;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mState<sp/>==<sp/>DRAINING)<sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>mon.Wait();</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal">nsBufferedAudioStream::Pause()</highlight></codeline>
<codeline lineno="1085"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>MonitorAutoLock<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mCubebStream<sp/>||<sp/>mState<sp/>!=<sp/>STARTED)<sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>MonitorAutoUnlock<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>cubeb_stream_stop(mCubebStream);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>!=<sp/>ERRORED<sp/>&amp;&amp;<sp/>r<sp/>==<sp/>CUBEB_OK)<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>mState<sp/>=<sp/>STOPPED;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal">nsBufferedAudioStream::Resume()</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>MonitorAutoLock<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mCubebStream<sp/>||<sp/>mState<sp/>!=<sp/>STOPPED)<sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>MonitorAutoUnlock<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>cubeb_stream_start(mCubebStream);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>!=<sp/>ERRORED<sp/>&amp;&amp;<sp/>r<sp/>==<sp/>CUBEB_OK)<sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>mState<sp/>=<sp/>STARTED;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="1120"><highlight class="normal">nsBufferedAudioStream::GetPosition()</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>MonitorAutoLock<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>int64_t<sp/>frames<sp/>=<sp/>GetPositionInFramesUnlocked();</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frames<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>USECS_PER_S<sp/>*<sp/>frames<sp/>/<sp/>mRate;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>miscompiled<sp/>by<sp/>PGO<sp/>with<sp/>MSVC<sp/>2010.<sp/><sp/>See<sp/>bug<sp/>768333.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight></codeline>
<codeline lineno="1132"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>optimize(&quot;&quot;,<sp/>off)</highlight></codeline>
<codeline lineno="1133"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1134"><highlight class="preprocessor"></highlight><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">nsBufferedAudioStream::GetPositionInFrames()</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>MonitorAutoLock<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetPositionInFramesUnlocked();</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight></codeline>
<codeline lineno="1141"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>optimize(&quot;&quot;,<sp/>on)</highlight></codeline>
<codeline lineno="1142"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1143"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="1145"><highlight class="normal">nsBufferedAudioStream::GetPositionInFramesUnlocked()</highlight></codeline>
<codeline lineno="1146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>mMonitor.AssertCurrentThreadOwns();</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mCubebStream<sp/>||<sp/>mState<sp/>==<sp/>ERRORED)<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>uint64_t<sp/>position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>MonitorAutoUnlock<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cubeb_stream_get_position(mCubebStream,<sp/>&amp;position)<sp/>!=<sp/>CUBEB_OK)<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>the<sp/>reported<sp/>position<sp/>by<sp/>the<sp/>number<sp/>of<sp/>silent<sp/>frames<sp/>written</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>during<sp/>stream<sp/>underruns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/>uint64_t<sp/>adjustedPosition<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(position<sp/>&gt;=<sp/>mLostFrames)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>adjustedPosition<sp/>=<sp/>position<sp/>-<sp/>mLostFrames;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_MIN&lt;uint64_t&gt;(adjustedPosition,<sp/>INT64_MAX);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal">nsBufferedAudioStream::IsPaused()</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/>MonitorAutoLock<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mState<sp/>==<sp/>STOPPED;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal">nsBufferedAudioStream::DataCallback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aBuffer,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>aFrames)</highlight></codeline>
<codeline lineno="1179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>MonitorAutoLock<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>uint32_t<sp/>bytesWanted<sp/>=<sp/>aFrames<sp/>*<sp/>mBytesPerFrame;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>bytesWanted<sp/>to<sp/>fit<sp/>what<sp/>is<sp/>available<sp/>in<sp/>mBuffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>uint32_t<sp/>available<sp/>=<sp/>NS_MIN(bytesWanted,<sp/>mBuffer.Length());</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/>NS_ABORT_IF_FALSE(available<sp/>%<sp/>mBytesPerFrame<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>copy<sp/>complete<sp/>frames&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(available<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>each<sp/>sample<sp/>from<sp/>mBuffer<sp/>to<sp/>aBuffer,<sp/>adjusting<sp/>the<sp/>volume<sp/>during<sp/>the<sp/>copy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scaled_volume<sp/>=<sp/>float(GetVolumeScale()<sp/>*<sp/>mVolume);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fetch<sp/>input<sp/>pointers<sp/>from<sp/>the<sp/>ring<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>input[2];</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>input_size[2];</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>mBuffer.PopElements(available,<sp/>&amp;input[0],<sp/>&amp;input_size[0],<sp/>&amp;input[1],<sp/>&amp;input_size[1]);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>output<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(aBuffer);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AudioDataValue*<sp/>src<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">AudioDataValue*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(input[i]);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AudioDataValue*<sp/>dst<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">AudioDataValue*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(output);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ConvertAudioSamplesWithScale(src,<sp/>dst,<sp/>input_size[i]/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(AudioDataValue),</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaled_volume);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>+=<sp/>input_size[i];</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>NS_ABORT_IF_FALSE(mBuffer.Length()<sp/>%<sp/>mBytesPerFrame<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>copy<sp/>complete<sp/>frames&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>any<sp/>blocked<sp/>Write()<sp/>call<sp/>that<sp/>more<sp/>space<sp/>is<sp/>available<sp/>in<sp/>mBuffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>mon.NotifyAll();</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>remaining<sp/>bytes<sp/>requested<sp/>by<sp/>caller.<sp/><sp/>If<sp/>the<sp/>stream<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draining<sp/>an<sp/>underrun<sp/>has<sp/>occurred,<sp/>so<sp/>fill<sp/>the<sp/>remaining<sp/>buffer<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>silence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>bytesWanted<sp/>-=<sp/>available;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mState<sp/>!=<sp/>DRAINING)<sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(static_cast&lt;uint8_t*&gt;(aBuffer)<sp/>+<sp/>available,<sp/>0,<sp/>bytesWanted);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>mLostFrames<sp/>+=<sp/>bytesWanted<sp/>/<sp/>mBytesPerFrame;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>bytesWanted<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aFrames<sp/>-<sp/>(bytesWanted<sp/>/<sp/>mBytesPerFrame);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal">nsBufferedAudioStream::StateCallback(cubeb_state<sp/>aState)</highlight></codeline>
<codeline lineno="1228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/>MonitorAutoLock<sp/>mon(mMonitor);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aState<sp/>==<sp/>CUBEB_STATE_DRAINED)<sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>mState<sp/>=<sp/>DRAINED;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aState<sp/>==<sp/>CUBEB_STATE_ERROR)<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>mState<sp/>=<sp/>ERRORED;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/>mon.NotifyAll();</highlight></codeline>
<codeline lineno="1236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1238"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mozilla</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/tools/mozilla-release/content/media/AudioStream.cpp"/>
  </compounddef>
</doxygen>
