<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="_active_test_8cpp" kind="file">
    <compoundname>ActiveTest.cpp</compoundname>
    <includes refid="testrunner_2_std_afx_8h" local="yes">stdafx.h</includes>
    <includes refid="_active_test_8h" local="yes">ActiveTest.h</includes>
    <incdepgraph>
      <node id="737">
        <label>afxcmn.h</label>
      </node>
      <node id="735">
        <label>afxdb.h</label>
      </node>
      <node id="733">
        <label>afxodlgs.h</label>
      </node>
      <node id="732">
        <label>afxole.h</label>
      </node>
      <node id="731">
        <label>afxext.h</label>
      </node>
      <node id="739">
        <label>afxmt.h</label>
      </node>
      <node id="740">
        <label>cppunit/extensions/TestDecorator.h</label>
      </node>
      <node id="728">
        <label>src/msvc6/testrunner/ActiveTest.cpp</label>
        <link refid="ActiveTest.cpp"/>
        <childnode refid="729" relation="include">
        </childnode>
        <childnode refid="738" relation="include">
        </childnode>
      </node>
      <node id="736">
        <label>afxdao.h</label>
      </node>
      <node id="738">
        <label>ActiveTest.h</label>
        <link refid="_active_test_8h"/>
        <childnode refid="739" relation="include">
        </childnode>
        <childnode refid="740" relation="include">
        </childnode>
      </node>
      <node id="734">
        <label>afxdisp.h</label>
      </node>
      <node id="729">
        <label>stdafx.h</label>
        <link refid="testrunner_2_std_afx_8h"/>
        <childnode refid="730" relation="include">
        </childnode>
        <childnode refid="731" relation="include">
        </childnode>
        <childnode refid="732" relation="include">
        </childnode>
        <childnode refid="733" relation="include">
        </childnode>
        <childnode refid="734" relation="include">
        </childnode>
        <childnode refid="735" relation="include">
        </childnode>
        <childnode refid="736" relation="include">
        </childnode>
        <childnode refid="737" relation="include">
        </childnode>
      </node>
      <node id="730">
        <label>afxwin.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="testrunner_2_std_afx_8h" kindref="compound">stdafx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_active_test_8h" kindref="compound">ActiveTest.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight></codeline>
<codeline lineno="5"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>new<sp/>DEBUG_NEW</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>THIS_FILE</highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>THIS_FILE[]<sp/>=<sp/>__FILE__;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>active<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><ref refid="class_active_test_1a6d87588adef839b2d5dffa2a89508cb8" kindref="member">ActiveTest::ActiveTest</ref>(<sp/>CPPUNIT_NS::Test<sp/>*test<sp/>)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>TestDecorator(<sp/>test<sp/>)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_runCompleted()<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>m_currentTestResult<sp/>=<sp/>NULL;<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>m_threadHandle<sp/>=<sp/>INVALID_HANDLE_VALUE;<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pend<sp/>until<sp/>the<sp/>test<sp/>has<sp/>completed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><ref refid="class_active_test_1af0b61776faa2e2f046ae4833bf9dc0f5" kindref="member">ActiveTest::â€¾ActiveTest</ref>()</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>CSingleLock(<sp/>&amp;<ref refid="class_active_test_1ac4236fddc59f1e1df7b6e8abbdb94c1e" kindref="member">m_runCompleted</ref>,<sp/>TRUE<sp/>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>m_test<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>test<sp/>result<sp/>that<sp/>we<sp/>are<sp/>to<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="class_active_test_1aa0139409aae0f6d2a311edb593826efc" kindref="member">ActiveTest::setTestResult</ref>(<sp/>CPPUNIT_NS::TestResult<sp/>*result<sp/>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="class_active_test_1ace5612fb6d51ba766e01fd7dca70fa3d" kindref="member">m_currentTestResult</ref><sp/>=<sp/>result;<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Run<sp/>our<sp/>test<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="class_active_test_1a5d78123d0ca49547996615c275902d45" kindref="member">ActiveTest::run</ref>()</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>TestDecorator::run(<sp/><ref refid="class_active_test_1ace5612fb6d51ba766e01fd7dca70fa3d" kindref="member">m_currentTestResult</ref><sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Spawn<sp/>a<sp/>thread<sp/>to<sp/>a<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="class_active_test_1a5d78123d0ca49547996615c275902d45" kindref="member">ActiveTest::run</ref>(<sp/>CPPUNIT_NS::TestResult<sp/>*result<sp/>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>CWinThread<sp/>*thread;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="class_active_test_1aa0139409aae0f6d2a311edb593826efc" kindref="member">setTestResult</ref>(<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="class_active_test_1ac4236fddc59f1e1df7b6e8abbdb94c1e" kindref="member">m_runCompleted</ref>.ResetEvent();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>thread<sp/>=<sp/>::AfxBeginThread(<sp/><ref refid="class_active_test_1a9451723eb10c134ccff56d2eaea5221d" kindref="member">threadFunction</ref>,<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>THREAD_PRIORITY_NORMAL,<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CREATE_SUSPENDED);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>::DuplicateHandle(<sp/>GetCurrentProcess(),<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;m_hThread,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentProcess(),<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="class_active_test_1a0b651be116dd7531f1606f4708e7b6d2" kindref="member">m_threadHandle</ref>,<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUPLICATE_SAME_ACCESS<sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>thread-&gt;ResumeThread<sp/>();</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Simple<sp/>execution<sp/>thread.<sp/><sp/>Assuming<sp/>that<sp/>an<sp/>ActiveTest<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>creates<sp/>one<sp/>of<sp/>these<sp/>at<sp/>a<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">UINT<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="class_active_test_1a9451723eb10c134ccff56d2eaea5221d" kindref="member">ActiveTest::threadFunction</ref>(<sp/>LPVOID<sp/>thisInstance<sp/>)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="class_active_test" kindref="compound">ActiveTest</ref><sp/>*test<sp/>=<sp/>(<ref refid="class_active_test" kindref="compound">ActiveTest</ref><sp/>*)thisInstance;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>test-&gt;<ref refid="class_active_test_1a2767a1b280cc17070029cf22a9b4f141" kindref="member">run</ref><sp/>();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>::CloseHandle(<sp/>test-&gt;<ref refid="class_active_test_1a0b651be116dd7531f1606f4708e7b6d2" kindref="member">m_threadHandle</ref><sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>test-&gt;<ref refid="class_active_test_1a0b651be116dd7531f1606f4708e7b6d2" kindref="member">m_threadHandle</ref><sp/>=<sp/>INVALID_HANDLE_VALUE;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>test-&gt;<ref refid="class_active_test_1ac4236fddc59f1e1df7b6e8abbdb94c1e" kindref="member">m_runCompleted</ref>.SetEvent();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/msvc6/testrunner/ActiveTest.cpp"/>
  </compounddef>
</doxygen>
