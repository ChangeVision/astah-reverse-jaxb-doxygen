<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="msvc6_2testrunner_2_test_runner_model_8cpp" kind="file">
    <compoundname>TestRunnerModel.cpp</compoundname>
    <includes refid="testrunner_2_std_afx_8h" local="yes">StdAfx.h</includes>
    <includes refid="msvc6_2testrunner_2_test_runner_model_8h" local="yes">TestRunnerModel.h</includes>
    <includes local="no">cppunit/tools/Algorithm.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">cppunit/testsuite.h</includes>
    <incdepgraph>
      <node id="1196">
        <label>src/msvc6/testrunner/TestRunnerModel.cpp</label>
        <link refid="msvc6/testrunner/TestRunnerModel.cpp"/>
        <childnode refid="1197" relation="include">
        </childnode>
        <childnode refid="1206" relation="include">
        </childnode>
        <childnode refid="1209" relation="include">
        </childnode>
        <childnode refid="1210" relation="include">
        </childnode>
        <childnode refid="1211" relation="include">
        </childnode>
        <childnode refid="1212" relation="include">
        </childnode>
      </node>
      <node id="1205">
        <label>afxcmn.h</label>
      </node>
      <node id="1203">
        <label>afxdb.h</label>
      </node>
      <node id="1201">
        <label>afxodlgs.h</label>
      </node>
      <node id="1200">
        <label>afxole.h</label>
      </node>
      <node id="1199">
        <label>afxext.h</label>
      </node>
      <node id="1211">
        <label>stdexcept</label>
      </node>
      <node id="1204">
        <label>afxdao.h</label>
      </node>
      <node id="1207">
        <label>deque</label>
      </node>
      <node id="1202">
        <label>afxdisp.h</label>
      </node>
      <node id="1209">
        <label>cppunit/tools/Algorithm.h</label>
      </node>
      <node id="1212">
        <label>cppunit/testsuite.h</label>
      </node>
      <node id="1197">
        <label>StdAfx.h</label>
        <link refid="testrunner_2_std_afx_8h"/>
        <childnode refid="1198" relation="include">
        </childnode>
        <childnode refid="1199" relation="include">
        </childnode>
        <childnode refid="1200" relation="include">
        </childnode>
        <childnode refid="1201" relation="include">
        </childnode>
        <childnode refid="1202" relation="include">
        </childnode>
        <childnode refid="1203" relation="include">
        </childnode>
        <childnode refid="1204" relation="include">
        </childnode>
        <childnode refid="1205" relation="include">
        </childnode>
      </node>
      <node id="1206">
        <label>TestRunnerModel.h</label>
        <link refid="msvc6_2testrunner_2_test_runner_model_8h"/>
        <childnode refid="1207" relation="include">
        </childnode>
        <childnode refid="1208" relation="include">
        </childnode>
      </node>
      <node id="1198">
        <label>afxwin.h</label>
      </node>
      <node id="1208">
        <label>cppunit/Test.h</label>
      </node>
      <node id="1210">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementation<sp/>file<sp/>TestRunnerModel.cpp<sp/>for<sp/>class<sp/>TestRunnerModel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(c)Copyright<sp/>2000,<sp/>Baptiste<sp/>Lepilleur.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created:<sp/>2001/04/26</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="testrunner_2_std_afx_8h" kindref="compound">StdAfx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="msvc6_2testrunner_2_test_runner_model_8h" kindref="compound">TestRunnerModel.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/tools/Algorithm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/testsuite.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>new<sp/>DEBUG_NEW</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>THIS_FILE</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>THIS_FILE[]<sp/>=<sp/>__FILE__;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CString<sp/><ref refid="class_test_runner_model_1a27206a66322c9fe42a2709776905d2ef" kindref="member">TestRunnerModel::settingKey</ref>(<sp/>_T(</highlight><highlight class="stringliteral">&quot;CppUnit&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CString<sp/><ref refid="class_test_runner_model_1ad372ff9068431cfffea9ef56e54243f3" kindref="member">TestRunnerModel::settingMainDialogKey</ref>(<sp/>_T(<sp/></highlight><highlight class="stringliteral">&quot;MainDialog&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CString<sp/><ref refid="class_test_runner_model_1ac431acb0b47dc908dd1fc26d72de1d27" kindref="member">TestRunnerModel::settingBrowseDialogKey</ref>(<sp/>_T(<sp/></highlight><highlight class="stringliteral">&quot;BrowseDialog&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="class_test_runner_model_1a2f2ae919bdc31b1c2eb68c3320f32454" kindref="member">TestRunnerModel::TestRunnerModel</ref>(<sp/>CPPUNIT_NS::Test<sp/>*rootTest<sp/>)<sp/>:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>m_rootTest(<sp/>rootTest<sp/>)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="class_test_runner_model_1a20e79c03f4f41826125d97579c543ae7" kindref="member">TestRunnerModel::â€¾TestRunnerModel</ref>()</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_test_runner_model_1a81b3e71d164167b94c0ff686d37f8a4c" kindref="member">TestRunnerModel::History</ref><sp/>&amp;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="class_test_runner_model_1a9e651c7d811a705c0d99c3388c8214ef" kindref="member">TestRunnerModel::history</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="39"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_test_runner_model_1a3f5ad117905c1f0765b7848e9a0a807a" kindref="member">m_history</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="class_test_runner_model_1a8fd9e40972ba41df1de9b1cab4879bd3" kindref="member">TestRunnerModel::selectHistoryTest</ref>(<sp/>CPPUNIT_NS::Test<sp/>*test<sp/>)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/>CPPUNIT_NS::removeFromSequence(<sp/><ref refid="class_test_runner_model_1a3f5ad117905c1f0765b7848e9a0a807a" kindref="member">m_history</ref>,<sp/>test<sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>test<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_test_runner_model_1a3f5ad117905c1f0765b7848e9a0a807a" kindref="member">m_history</ref>.push_front(<sp/>test<sp/>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">CPPUNIT_NS::Test<sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="class_test_runner_model_1a16785ac25efd8a40a353c8c8096cc4e0" kindref="member">TestRunnerModel::selectedTest</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="56"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="class_test_runner_model_1a3f5ad117905c1f0765b7848e9a0a807a" kindref="member">m_history</ref>.size()<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_test_runner_model_1a3f5ad117905c1f0765b7848e9a0a807a" kindref="member">m_history</ref>[0];</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="class_test_runner_model_1a605976438e1632dcb49bc85d3f9ca381" kindref="member">TestRunnerModel::loadSettings</ref>(Settings<sp/>&amp;<sp/>s)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>CWinApp<sp/>*app<sp/>=<sp/>AfxGetApp();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>ASSERT(<sp/>app<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>autorun<sp/>=<sp/>app-&gt;GetProfileInt(<sp/>_T(</highlight><highlight class="stringliteral">&quot;CppUnit&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;AutorunAtStartup&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>s.autorunOnLaunch<sp/>=<sp/>(autorun<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>s.col_1<sp/>=<sp/>app-&gt;GetProfileInt(<sp/>_T(</highlight><highlight class="stringliteral">&quot;CppUnit&quot;</highlight><highlight class="normal">),<sp/>_T(</highlight><highlight class="stringliteral">&quot;Col_1&quot;</highlight><highlight class="normal">),<sp/>40<sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>s.col_2<sp/>=<sp/>app-&gt;GetProfileInt(<sp/>_T(</highlight><highlight class="stringliteral">&quot;CppUnit&quot;</highlight><highlight class="normal">),<sp/>_T(</highlight><highlight class="stringliteral">&quot;Col_2&quot;</highlight><highlight class="normal">),<sp/>40<sp/>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>s.col_3<sp/>=<sp/>app-&gt;GetProfileInt(<sp/>_T(</highlight><highlight class="stringliteral">&quot;CppUnit&quot;</highlight><highlight class="normal">),<sp/>_T(</highlight><highlight class="stringliteral">&quot;Col_3&quot;</highlight><highlight class="normal">),<sp/>40<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>s.col_4<sp/>=<sp/>app-&gt;GetProfileInt(<sp/>_T(</highlight><highlight class="stringliteral">&quot;CppUnit&quot;</highlight><highlight class="normal">),<sp/>_T(</highlight><highlight class="stringliteral">&quot;Col_4&quot;</highlight><highlight class="normal">),<sp/>40<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="class_test_runner_model_1a2899c30434225826bcde61fd91e4a39b" kindref="member">loadHistory</ref>();</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><ref refid="class_test_runner_model_1a2899c30434225826bcde61fd91e4a39b" kindref="member">TestRunnerModel::loadHistory</ref>()</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><ref refid="class_test_runner_model_1a3f5ad117905c1f0765b7848e9a0a807a" kindref="member">m_history</ref>.clear();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>CString<sp/>testName<sp/>=<sp/><ref refid="class_test_runner_model_1aad9a4cf41d1cdab248d18e6f66d9026d" kindref="member">loadHistoryEntry</ref>(<sp/>idx++<sp/>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>testName.IsEmpty()<sp/>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_test_runner_model_1a3f5ad117905c1f0765b7848e9a0a807a" kindref="member">m_history</ref>.push_back(<sp/><ref refid="class_test_runner_model_1a70f4f090f67752ace3bf61aeaa86d187" kindref="member">m_rootTest</ref>-&gt;findTest(<sp/><ref refid="class_test_runner_model_1adf22d2e8dc18dbab484ebc67e1f61cce" kindref="member">toAnsiString</ref>(testName<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<sp/>std::invalid_argument<sp/>&amp;)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">CString</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="class_test_runner_model_1aad9a4cf41d1cdab248d18e6f66d9026d" kindref="member">TestRunnerModel::loadHistoryEntry</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>CWinApp<sp/>*app<sp/>=<sp/>AfxGetApp();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>ASSERT(<sp/>app<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>app-&gt;GetProfileString(<sp/>_T(</highlight><highlight class="stringliteral">&quot;CppUnit&quot;</highlight><highlight class="normal">),<sp/><ref refid="class_test_runner_model_1afa625dcb8818460850d4aa6d4e138ee6" kindref="member">getHistoryEntryName</ref>(<sp/>idx<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="class_test_runner_model_1a20b9f9c923c5fcc65339a2373b1c770e" kindref="member">TestRunnerModel::saveSettings</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Settings<sp/>&amp;<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>CWinApp<sp/>*app<sp/>=<sp/>AfxGetApp();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>ASSERT(<sp/>app<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>autorun<sp/>=<sp/>s.autorunOnLaunch<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>app-&gt;WriteProfileInt(<sp/>_T(</highlight><highlight class="stringliteral">&quot;CppUnit&quot;</highlight><highlight class="normal">),<sp/>_T(</highlight><highlight class="stringliteral">&quot;AutorunAtStartup&quot;</highlight><highlight class="normal">),<sp/>autorun<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>app-&gt;WriteProfileInt(<sp/>_T(</highlight><highlight class="stringliteral">&quot;CppUnit&quot;</highlight><highlight class="normal">),<sp/>_T(</highlight><highlight class="stringliteral">&quot;Col_1&quot;</highlight><highlight class="normal">),<sp/><sp/>s.col_1<sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>app-&gt;WriteProfileInt(<sp/>_T(</highlight><highlight class="stringliteral">&quot;CppUnit&quot;</highlight><highlight class="normal">),<sp/>_T(</highlight><highlight class="stringliteral">&quot;Col_2&quot;</highlight><highlight class="normal">),<sp/><sp/>s.col_2<sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>app-&gt;WriteProfileInt(<sp/>_T(</highlight><highlight class="stringliteral">&quot;CppUnit&quot;</highlight><highlight class="normal">),<sp/>_T(</highlight><highlight class="stringliteral">&quot;Col_3&quot;</highlight><highlight class="normal">),<sp/><sp/>s.col_3<sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>app-&gt;WriteProfileInt(<sp/>_T(</highlight><highlight class="stringliteral">&quot;CppUnit&quot;</highlight><highlight class="normal">),<sp/>_T(</highlight><highlight class="stringliteral">&quot;Col_4&quot;</highlight><highlight class="normal">),<sp/><sp/>s.col_4<sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>History::const_iterator<sp/>it<sp/>=<sp/><ref refid="class_test_runner_model_1a3f5ad117905c1f0765b7848e9a0a807a" kindref="member">m_history</ref>.begin();<sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/><ref refid="class_test_runner_model_1a3f5ad117905c1f0765b7848e9a0a807a" kindref="member">m_history</ref>.end();<sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it<sp/>,<sp/>++idx<sp/>)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_NS::Test<sp/>*test<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_test_runner_model_1ac9a783c34f5a687aa08fc4b6dae5def3" kindref="member">saveHistoryEntry</ref>(<sp/>idx,<sp/>test-&gt;getName().c_str()<sp/>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="class_test_runner_model_1ac9a783c34f5a687aa08fc4b6dae5def3" kindref="member">TestRunnerModel::saveHistoryEntry</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CString<sp/>testName<sp/>)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>CWinApp<sp/>*app<sp/>=<sp/>AfxGetApp();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>ASSERT(<sp/>app<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>app-&gt;WriteProfileString(<sp/>_T(</highlight><highlight class="stringliteral">&quot;CppUnit&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_test_runner_model_1afa625dcb8818460850d4aa6d4e138ee6" kindref="member">getHistoryEntryName</ref>(<sp/>idx<sp/>),</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testName<sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">CString</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><ref refid="class_test_runner_model_1afa625dcb8818460850d4aa6d4e138ee6" kindref="member">TestRunnerModel::getHistoryEntryName</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="156"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>CString<sp/>entry;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>entry.Format(<sp/>_T(</highlight><highlight class="stringliteral">&quot;HistoryTest%d&quot;</highlight><highlight class="normal">),<sp/>idx<sp/>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">CPPUNIT_NS::Test<sp/>*</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><ref refid="class_test_runner_model_1a2fedcd7c1b636a966de81f8e974c57cf" kindref="member">TestRunnerModel::rootTest</ref>()</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_test_runner_model_1a70f4f090f67752ace3bf61aeaa86d187" kindref="member">m_rootTest</ref>;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><ref refid="class_test_runner_model_1ac466063ed17be6d222e0d61aeedd212d" kindref="member">TestRunnerModel::setRootTest</ref>(<sp/>CPPUNIT_NS::Test<sp/>*test<sp/>)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="class_test_runner_model_1a70f4f090f67752ace3bf61aeaa86d187" kindref="member">m_rootTest</ref><sp/>=<sp/>test;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">CPPUNIT_NS::Test<sp/>*<sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><ref refid="class_test_runner_model_1aa707bd84af8c6558c1b8630a716e1056" kindref="member">TestRunnerModel::findTestByName</ref>(<sp/>CString<sp/>name<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="179"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_test_runner_model_1a41a3554a5a9e7cd1b4ffabe1dca09150" kindref="member">findTestByNameFor</ref>(<sp/>name,<sp/><ref refid="class_test_runner_model_1a70f4f090f67752ace3bf61aeaa86d187" kindref="member">m_rootTest</ref><sp/>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">CPPUNIT_NS::Test<sp/>*<sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="class_test_runner_model_1a41a3554a5a9e7cd1b4ffabe1dca09150" kindref="member">TestRunnerModel::findTestByNameFor</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CString<sp/>&amp;name,<sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CPPUNIT_NS::Test<sp/>*test<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="187"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>name<sp/>==<sp/>test-&gt;getName().c_str()<sp/>)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>CPPUNIT_NS::TestSuite<sp/>*suite<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">CPPUNIT_NS::TestSuite<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(test);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>suite<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;CPPUNIT_NS::Test<sp/>*&gt;<sp/>&amp;tests<sp/>=<sp/>suite-&gt;getTests();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>std::vector&lt;CPPUNIT_NS::Test<sp/>*&gt;::const_iterator<sp/>it<sp/>=<sp/>tests.begin();<sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>tests.end();<sp/></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it<sp/>)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_NS::Test<sp/>*testFound<sp/>=<sp/><ref refid="class_test_runner_model_1a41a3554a5a9e7cd1b4ffabe1dca09150" kindref="member">findTestByNameFor</ref>(<sp/>name,<sp/>*it<sp/>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>testFound<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testFound;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utility<sp/>method,<sp/>should<sp/>be<sp/>moved<sp/>somewhere<sp/>else...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">std::string<sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><ref refid="class_test_runner_model_1adf22d2e8dc18dbab484ebc67e1f61cce" kindref="member">TestRunnerModel::toAnsiString</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CString<sp/>&amp;text<sp/>)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_UNICODE</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufferLength<sp/>=<sp/>::WideCharToMultiByte(<sp/>CP_THREAD_ACP,<sp/>0,<sp/></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text,<sp/>text.GetLength(),</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>0,<sp/>NULL,<sp/>NULL<sp/>)<sp/>+1;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ansiString<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[bufferLength];</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>::WideCharToMultiByte(<sp/>CP_THREAD_ACP,<sp/>0,<sp/></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text,<sp/>text.GetLength(),</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ansiString,<sp/>bufferLength,<sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>std::string<sp/>str(<sp/>ansiString,<sp/>bufferLength-1<sp/>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ansiString;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(<sp/>(LPCTSTR)text<sp/>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/msvc6/testrunner/TestRunnerModel.cpp"/>
  </compounddef>
</doxygen>
