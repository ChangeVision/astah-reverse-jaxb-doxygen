<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="msvc6_2_dll_plug_in_tester_2_dll_plug_in_tester_8cpp" kind="file">
    <compoundname>DllPlugInTester.cpp</compoundname>
    <includes local="no">cppunit/TestPath.h</includes>
    <includes local="no">cppunit/TestResult.h</includes>
    <includes local="no">cppunit/TestResultCollector.h</includes>
    <includes local="no">cppunit/TestRunner.h</includes>
    <includes local="no">cppunit/TextTestProgressListener.h</includes>
    <includes local="no">cppunit/CompilerOutputter.h</includes>
    <includes local="no">tchar.h</includes>
    <includes local="no">cppunit/plugin/TestPlugIn.h</includes>
    <includes local="no">cppunit/plugin/TestPlugInSuite.h</includes>
    <includes local="no">cppunit/plugin/DynamicLibraryManagerException.h</includes>
    <includes local="no">cppunit/extensions/TestDecorator.h</includes>
    <incdepgraph>
      <node id="328">
        <label>cppunit/TestResultCollector.h</label>
      </node>
      <node id="333">
        <label>cppunit/plugin/TestPlugIn.h</label>
      </node>
      <node id="336">
        <label>cppunit/extensions/TestDecorator.h</label>
      </node>
      <node id="335">
        <label>cppunit/plugin/DynamicLibraryManagerException.h</label>
      </node>
      <node id="329">
        <label>cppunit/TestRunner.h</label>
      </node>
      <node id="330">
        <label>cppunit/TextTestProgressListener.h</label>
      </node>
      <node id="331">
        <label>cppunit/CompilerOutputter.h</label>
      </node>
      <node id="327">
        <label>cppunit/TestResult.h</label>
      </node>
      <node id="332">
        <label>tchar.h</label>
      </node>
      <node id="325">
        <label>src/msvc6/DllPlugInTester/DllPlugInTester.cpp</label>
        <link refid="msvc6/DllPlugInTester/DllPlugInTester.cpp"/>
        <childnode refid="326" relation="include">
        </childnode>
        <childnode refid="327" relation="include">
        </childnode>
        <childnode refid="328" relation="include">
        </childnode>
        <childnode refid="329" relation="include">
        </childnode>
        <childnode refid="330" relation="include">
        </childnode>
        <childnode refid="331" relation="include">
        </childnode>
        <childnode refid="332" relation="include">
        </childnode>
        <childnode refid="333" relation="include">
        </childnode>
        <childnode refid="334" relation="include">
        </childnode>
        <childnode refid="335" relation="include">
        </childnode>
        <childnode refid="336" relation="include">
        </childnode>
      </node>
      <node id="326">
        <label>cppunit/TestPath.h</label>
      </node>
      <node id="334">
        <label>cppunit/plugin/TestPlugInSuite.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_not_owning_test_runner" prot="public">NotOwningTestRunner</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="msvc6_2_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1a736bebd8fc7465e8dfaf4218b2bc4ae6" prot="public" static="no">
        <name>TCERR</name>
        <initializer>CPPUNIT_NS::stdCOut()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/msvc6/DllPlugInTester/DllPlugInTester.cpp" line="15" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/msvc6/DllPlugInTester/DllPlugInTester.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="msvc6_2_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1a15bddb759d02d085e8a6cfbd097eb946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::basic_string&lt; TCHAR &gt;</type>
        <definition>::basic_string&lt;TCHAR&gt; toVariableString</definition>
        <argsstring>(const char *text)</argsstring>
        <name>toVariableString</name>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts a ansi string to a TCHAR string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/msvc6/DllPlugInTester/DllPlugInTester.cpp" line="35" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/msvc6/DllPlugInTester/DllPlugInTester.cpp" bodystart="35" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="msvc6_2_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1ae919700a938010573239e42764ae112b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::string</type>
        <definition>::string toAnsiString</definition>
        <argsstring>(const TCHAR *text)</argsstring>
        <name>toAnsiString</name>
        <param>
          <type>const TCHAR *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts a TCHAR string to an ANSI string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/msvc6/DllPlugInTester/DllPlugInTester.cpp" line="58" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/msvc6/DllPlugInTester/DllPlugInTester.cpp" bodystart="58" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="msvc6_2_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1af91c8815e001f789b4501913b0fa4c6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool runDllTest</definition>
        <argsstring>(CppUnit::Test *root, TCHAR *testPaths[], int numberOfPath)</argsstring>
        <name>runDllTest</name>
        <param>
          <type>CppUnit::Test *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>TCHAR *</type>
          <declname>testPaths</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>numberOfPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Runs the specified tests located in the root suite. ¥param root Root suite that contains all the test of the DLL. ¥param testPaths Array of string that contains the test paths of all the test to run. ¥param numberOfPath Number of test paths in ¥a testPaths. If 0 then ¥a root suite is run. ¥return ¥c true if the run succeed, ¥c false if a test failed or if a test path was not resolved. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/msvc6/DllPlugInTester/DllPlugInTester.cpp" line="90" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/msvc6/DllPlugInTester/DllPlugInTester.cpp" bodystart="90" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="msvc6_2_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1ac2f7a02c2eb809d30f4dce7f477e6f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _tmain</definition>
        <argsstring>(int argc, TCHAR *argv[], TCHAR *envp[])</argsstring>
        <name>_tmain</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>TCHAR *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>TCHAR *</type>
          <declname>envp</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Main</para><para>Usage:</para><para>DllPlugInTester.exe dll-filename [testpath1] [testpath2]...</para><para><emphasis>dll-filename</emphasis> must be the name of the DLL. If the DLL use some other DLL, they should be in the path or in the same directory as the DLL. The DLL must export a function named &quot;GetTestPlugInInterface&quot; with the signature GetTestPlugInInterfaceFunction. Both are defined in: ¥code #include &lt;msvc6/testrunner/TestPlugInInterface.h&gt; ¥endcode.</para><para>See examples/msvc6/TestPlugIn for an example of post-build testing.</para><para>If no test path is specified, they all the test of the suite returned by the DLL are run.</para><para>You can specify as much test path as you which. Only the test specified by the test paths will be run. Test paths are resolved using Test::resolveTestPath() on the suite returned by the DLL.</para><para>If all test succeed and no error happen then the application exit with code 0. If any error occurs (failed to load dll, failed to resolve test paths) or a test fail, the application exit with code 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/msvc6/DllPlugInTester/DllPlugInTester.cpp" line="159" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/msvc6/DllPlugInTester/DllPlugInTester.cpp" bodystart="159" bodyend="192"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;cppunit/TestPath.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/TestResult.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/TestResultCollector.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/TestRunner.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/TextTestProgressListener.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/CompilerOutputter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tchar.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/plugin/TestPlugIn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/plugin/TestPlugInSuite.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/plugin/DynamicLibraryManagerException.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/extensions/TestDecorator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_UNICODE</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TCERR<sp/>CPPUNIT_NS::stdCOut()</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TCERR<sp/>std::wcerr</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="class_not_owning_test_runner" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_not_owning_test_runner" kindref="compound">NotOwningTestRunner</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>CppUnit::TestRunner</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CppUnit::TestRunner<sp/><ref refid="class_not_owning_test_runner_1ac6d17cf922d93baab6d9e06fbf6be5e5" kindref="member">SuperClass</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>work<sp/>around<sp/>VC++<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_not_owning_test_runner_1a07acf8b072e68de0a4b2b0d53595d610" kindref="member">addTest</ref>(<sp/>CppUnit::Test<sp/>*test<sp/>)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>SuperClass::addTest(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CppUnit::TestDecorator(<sp/>test<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal">};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">std::basic_string&lt;TCHAR&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="msvc6_2_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1a15bddb759d02d085e8a6cfbd097eb946" kindref="member">toVariableString</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text<sp/>)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_UNICODE</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>textLength<sp/>=<sp/>::strlen(<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*unicodeString<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">[<sp/>textLength<sp/>+<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>::MultiByteToWideChar(<sp/>CP_THREAD_ACP,<sp/>MB_PRECOMPOSED,<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text,<sp/>textLength,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unicodeString,<sp/>textLength<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wstring<sp/>str(<sp/>unicodeString<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>unicodeString;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>text;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">std::string<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><ref refid="msvc6_2_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1ae919700a938010573239e42764ae112b" kindref="member">toAnsiString</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*text<sp/>)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_UNICODE</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufferLength<sp/>=<sp/>::WideCharToMultiByte(<sp/>CP_THREAD_ACP,<sp/>0,<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text,<sp/>text.GetLength(),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>0,<sp/>NULL,<sp/>NULL<sp/>)<sp/>+1;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ansiString<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[bufferLength];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>::WideCharToMultiByte(<sp/>CP_THREAD_ACP,<sp/>0,<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text,<sp/>text.GetLength(),</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ansiString,<sp/>bufferLength,<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>std::string<sp/>str(<sp/>ansiString,<sp/>bufferLength-1<sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ansiString;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><ref refid="msvc6_2_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1af91c8815e001f789b4501913b0fa4c6d" kindref="member">runDllTest</ref>(<sp/>CppUnit::Test<sp/>*root,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TCHAR<sp/>*testPaths[],</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numberOfPath<sp/>)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>CppUnit::TestResult<sp/>controller;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>CppUnit::TestResultCollector<sp/>result;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>controller.addListener(<sp/>&amp;result<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>CppUnit::TextTestProgressListener<sp/>progress;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>controller.addListener(<sp/>&amp;progress<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="class_not_owning_test_runner" kindref="compound">NotOwningTestRunner</ref><sp/>runner;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numberOfPath<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>runner.<ref refid="class_not_owning_test_runner_1a07acf8b072e68de0a4b2b0d53595d610" kindref="member">addTest</ref>(<sp/>root<sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=0;<sp/>index<sp/>&lt;<sp/>numberOfPath;<sp/>++index<sp/>)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*testPath<sp/>=<sp/>testPaths[index];</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runner.<ref refid="class_not_owning_test_runner_1a07acf8b072e68de0a4b2b0d53595d610" kindref="member">addTest</ref>(<sp/>root-&gt;resolveTestPath(<sp/>testPath).getChildTest()<sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<sp/>std::invalid_argument<sp/>&amp;<sp/>)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msvc6_2_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1a736bebd8fc7465e8dfaf4218b2bc4ae6" kindref="member">TCERR</ref><sp/><sp/>&lt;&lt;<sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>resolve<sp/>test<sp/>path:<sp/>&quot;</highlight><highlight class="normal">)<sp/><sp/>&lt;&lt;<sp/><sp/>testPath<sp/><sp/>&lt;&lt;<sp/><sp/></highlight><highlight class="stringliteral">&quot;¥n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>runner.run(<sp/>controller<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>stdCOut()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;¥n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>CppUnit::CompilerOutputter<sp/>outputter(<sp/>&amp;result,<sp/>stdCOut()<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>outputter.write();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.wasSuccessful();</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><ref refid="msvc6_2_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1ac2f7a02c2eb809d30f4dce7f477e6f40" kindref="member">_tmain</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TCHAR*<sp/>argv[],<sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TCHAR*<sp/>envp[]<sp/>)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>successReturnCode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failureReturnCode<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>command<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*applicationName<sp/>=<sp/>argv[0];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>argc<sp/>&lt;<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="msvc6_2_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1a736bebd8fc7465e8dfaf4218b2bc4ae6" kindref="member">TCERR</ref><sp/><sp/>&lt;&lt;<sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;Usage:¥n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><sp/>applicationName<sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>dll-filename<sp/>[test-path]<sp/>[test-path]...¥n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failureReturnCode;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>the<sp/>dll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*dllFileName<sp/>=<sp/>argv[1];</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wasSuccessful<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>CppUnit::TestPlugInSuite<sp/>suite(<sp/>dllFileName<sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>wasSuccessful<sp/>=<sp/><ref refid="msvc6_2_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1af91c8815e001f789b4501913b0fa4c6d" kindref="member">runDllTest</ref>(<sp/>&amp;suite,<sp/>argv+2,<sp/>argc-2<sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<sp/>CppUnit::DynamicLibraryManagerException<sp/>&amp;e<sp/>)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="msvc6_2_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1a736bebd8fc7465e8dfaf4218b2bc4ae6" kindref="member">TCERR</ref><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>test<sp/>plug-in:¥n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="msvc6_2_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1a15bddb759d02d085e8a6cfbd097eb946" kindref="member">toVariableString</ref>(<sp/>e.what()<sp/>)<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;¥n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wasSuccessful<sp/>?<sp/>successReturnCode<sp/>:<sp/>failureReturnCode;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/msvc6/DllPlugInTester/DllPlugInTester.cpp"/>
  </compounddef>
</doxygen>
