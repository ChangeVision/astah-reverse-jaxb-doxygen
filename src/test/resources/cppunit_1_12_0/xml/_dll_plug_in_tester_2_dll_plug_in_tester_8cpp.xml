<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="_dll_plug_in_tester_2_dll_plug_in_tester_8cpp" kind="file">
    <compoundname>DllPlugInTester.cpp</compoundname>
    <includes local="no">cppunit/BriefTestProgressListener.h</includes>
    <includes local="no">cppunit/CompilerOutputter.h</includes>
    <includes local="no">cppunit/TestPath.h</includes>
    <includes local="no">cppunit/TestResult.h</includes>
    <includes local="no">cppunit/TestResultCollector.h</includes>
    <includes local="no">cppunit/TestRunner.h</includes>
    <includes local="no">cppunit/TextOutputter.h</includes>
    <includes local="no">cppunit/TextTestProgressListener.h</includes>
    <includes local="no">cppunit/XmlOutputter.h</includes>
    <includes local="no">cppunit/extensions/TestFactoryRegistry.h</includes>
    <includes local="no">cppunit/plugin/DynamicLibraryManagerException.h</includes>
    <includes local="no">cppunit/plugin/PlugInParameters.h</includes>
    <includes local="no">cppunit/plugin/PlugInManager.h</includes>
    <includes local="no">cppunit/plugin/TestPlugIn.h</includes>
    <includes local="no">cppunit/portability/Stream.h</includes>
    <includes refid="_command_line_parser_8h" local="yes">CommandLineParser.h</includes>
    <incdepgraph>
      <node id="313">
        <label>cppunit/extensions/TestFactoryRegistry.h</label>
      </node>
      <node id="308">
        <label>cppunit/TestResultCollector.h</label>
      </node>
      <node id="317">
        <label>cppunit/plugin/TestPlugIn.h</label>
      </node>
      <node id="323">
        <label>stdexcept</label>
      </node>
      <node id="314">
        <label>cppunit/plugin/DynamicLibraryManagerException.h</label>
      </node>
      <node id="310">
        <label>cppunit/TextOutputter.h</label>
      </node>
      <node id="322">
        <label>string</label>
      </node>
      <node id="309">
        <label>cppunit/TestRunner.h</label>
      </node>
      <node id="312">
        <label>cppunit/XmlOutputter.h</label>
      </node>
      <node id="303">
        <label>src/DllPlugInTester/DllPlugInTester.cpp</label>
        <link refid="DllPlugInTester/DllPlugInTester.cpp"/>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="317" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
        <childnode refid="319" relation="include">
        </childnode>
      </node>
      <node id="318">
        <label>cppunit/portability/Stream.h</label>
      </node>
      <node id="311">
        <label>cppunit/TextTestProgressListener.h</label>
      </node>
      <node id="321">
        <label>cppunit/portability/CppUnitDeque.h</label>
      </node>
      <node id="320">
        <label>cppunit/Portability.h</label>
      </node>
      <node id="319">
        <label>CommandLineParser.h</label>
        <link refid="_command_line_parser_8h"/>
        <childnode refid="320" relation="include">
        </childnode>
        <childnode refid="321" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
        <childnode refid="322" relation="include">
        </childnode>
        <childnode refid="323" relation="include">
        </childnode>
      </node>
      <node id="305">
        <label>cppunit/CompilerOutputter.h</label>
      </node>
      <node id="304">
        <label>cppunit/BriefTestProgressListener.h</label>
      </node>
      <node id="315">
        <label>cppunit/plugin/PlugInParameters.h</label>
      </node>
      <node id="307">
        <label>cppunit/TestResult.h</label>
      </node>
      <node id="316">
        <label>cppunit/plugin/PlugInManager.h</label>
      </node>
      <node id="306">
        <label>cppunit/TestPath.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1a8ce0b186f643b016745c2387caabd51b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool runTests</definition>
        <argsstring>(const CommandLineParser &amp;parser)</argsstring>
        <name>runTests</name>
        <param>
          <type>const <ref refid="class_command_line_parser" kindref="compound">CommandLineParser</ref> &amp;</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Runs the specified tests located in the root suite. 짜param parser Command line parser. 짜return 짜c true if the run succeed, 짜c false if a test failed or if a test path was not resolved. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/DllPlugInTester/DllPlugInTester.cpp" line="32" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/DllPlugInTester/DllPlugInTester.cpp" bodystart="32" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1a3389d8b23691140dfb391a815f7de4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printShortUsage</definition>
        <argsstring>(const ::string &amp;applicationName)</argsstring>
        <name>printShortUsage</name>
        <param>
          <type>const ::string &amp;</type>
          <declname>applicationName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/DllPlugInTester/DllPlugInTester.cpp" line="119" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/DllPlugInTester/DllPlugInTester.cpp" bodystart="119" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1ad7cc8c97718b1ce6b46691cc6d055953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printUsage</definition>
        <argsstring>(const ::string &amp;applicationName)</argsstring>
        <name>printUsage</name>
        <param>
          <type>const ::string &amp;</type>
          <declname>applicationName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/DllPlugInTester/DllPlugInTester.cpp" line="128" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/DllPlugInTester/DllPlugInTester.cpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;cppunit/BriefTestProgressListener.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/CompilerOutputter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/TestPath.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/TestResult.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/TestResultCollector.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/TestRunner.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/TextOutputter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/TextTestProgressListener.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/XmlOutputter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/extensions/TestFactoryRegistry.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/plugin/DynamicLibraryManagerException.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/plugin/PlugInParameters.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/plugin/PlugInManager.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/plugin/TestPlugIn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppunit/portability/Stream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_command_line_parser_8h" kindref="compound">CommandLineParser.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Notes:</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/>Memory<sp/>allocated<sp/>by<sp/>test<sp/>plug-in<sp/>must<sp/>be<sp/>freed<sp/>before<sp/>unloading<sp/>the<sp/>test<sp/>plug-in.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/>That<sp/>is<sp/>the<sp/>reason<sp/>why<sp/>the<sp/>XmlOutputter<sp/>is<sp/>explicitely<sp/>destroyed.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1a8ce0b186f643b016745c2387caabd51b" kindref="member">runTests</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_command_line_parser" kindref="compound">CommandLineParser</ref><sp/>&amp;parser<sp/>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wasSuccessful<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>CPPUNIT_NS::PlugInManager<sp/>plugInManager;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>scope<sp/>is<sp/>used<sp/>to<sp/>explicitely<sp/>free<sp/>all<sp/>memory<sp/>allocated<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unload<sp/>the<sp/>test<sp/>plug-ins<sp/>(uppon<sp/>plugInManager<sp/>destruction).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_NS::TestResult<sp/>controller;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_NS::TestResultCollector<sp/>result;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>controller.addListener(<sp/>&amp;result<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>outputters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_NS::OStream<sp/>*stream<sp/>=<sp/>&amp;CPPUNIT_NS::stdCErr();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>parser.<ref refid="class_command_line_parser_1a87c99b161d6d2f7f113fb7b2b46eded8" kindref="member">useCoutStream</ref>()<sp/>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>=<sp/>&amp;CPPUNIT_NS::stdCOut();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_NS::OStream<sp/>*xmlStream<sp/>=<sp/>stream;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!parser.<ref refid="class_command_line_parser_1aad5d67fad84eedae721dca9e534450c5" kindref="member">getXmlFileName</ref>().empty()<sp/>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xmlStream<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CPPUNIT_NS::OFileStream(<sp/>parser.<ref refid="class_command_line_parser_1aad5d67fad84eedae721dca9e534450c5" kindref="member">getXmlFileName</ref>().c_str()<sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_NS::XmlOutputter<sp/>xmlOutputter(<sp/>&amp;result,<sp/>*xmlStream,<sp/>parser.<ref refid="class_command_line_parser_1a4ceb49b811f14f663120a55e81987ff5" kindref="member">getEncoding</ref>()<sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>xmlOutputter.setStyleSheet(<sp/>parser.<ref refid="class_command_line_parser_1a523bf80f1b5dee1684dab2116a4b8c50" kindref="member">getXmlStyleSheet</ref>()<sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_NS::TextOutputter<sp/>textOutputter(<sp/>&amp;result,<sp/>*stream<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_NS::CompilerOutputter<sp/>compilerOutputter(<sp/>&amp;result,<sp/>*stream<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>test<sp/>listeners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_NS::BriefTestProgressListener<sp/>briefListener;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_NS::TextTestProgressListener<sp/>dotListener;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>parser.<ref refid="class_command_line_parser_1a04aee4c12208e60a940e2953add713a0" kindref="member">useBriefTestProgress</ref>()<sp/>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>controller.addListener(<sp/>&amp;briefListener<sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!parser.<ref refid="class_command_line_parser_1aa673745a7c478581d7f2c8ea4dabbed6" kindref="member">noTestProgress</ref>()<sp/>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>controller.addListener(<sp/>&amp;dotListener<sp/>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>plug-ins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=0;<sp/>index<sp/>&lt;<sp/>parser.<ref refid="class_command_line_parser_1a2f9d527a0243e662e7a01a7e7f145972" kindref="member">getPlugInCount</ref>();<sp/>++index<sp/>)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_command_line_plug_in_info" kindref="compound">CommandLinePlugInInfo</ref><sp/>plugIn<sp/>=<sp/>parser.<ref refid="class_command_line_parser_1aabfdaac5203d2e82623aa349a62a1d1f" kindref="member">getPlugInAt</ref>(<sp/>index<sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>plugInManager.load(<sp/>plugIn.<ref refid="struct_command_line_plug_in_info_1ac05b9082e2a3fae6a64485dfd9bc38fb" kindref="member">m_fileName</ref>,<sp/>plugIn.<ref refid="struct_command_line_plug_in_info_1aee5c0f5f768b95b49f7f49f120acc34c" kindref="member">m_parameters</ref><sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Registers<sp/>plug-in<sp/>specific<sp/>TestListener<sp/>(global<sp/>setUp/tearDown,<sp/>custom<sp/>TestListener...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>plugInManager.addListener(<sp/>&amp;controller<sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>the<sp/>default<sp/>registry<sp/>suite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_NS::TestRunner<sp/>runner;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>runner.addTest(<sp/>CPPUNIT_NS::TestFactoryRegistry::getRegistry().makeTest()<sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>the<sp/>specified<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>runner.run(<sp/>controller,<sp/>parser.<ref refid="class_command_line_parser_1ae21a92ddf5770ef275e8e8e27604cf5a" kindref="member">getTestPath</ref>()<sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wasSuccessful<sp/>=<sp/>result.wasSuccessful();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<sp/>std::invalid_argument<sp/>&amp;<sp/>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CPPUNIT_NS::stdCOut()<sp/><sp/>&lt;&lt;<sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>resolve<sp/>test<sp/>path:<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><sp/>parser.<ref refid="class_command_line_parser_1ae21a92ddf5770ef275e8e8e27604cf5a" kindref="member">getTestPath</ref>()<sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><sp/></highlight><highlight class="stringliteral">&quot;짜n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Removes<sp/>plug-in<sp/>specific<sp/>TestListener<sp/>(not<sp/>really<sp/>needed<sp/>but...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>plugInManager.removeListener(<sp/>&amp;controller<sp/>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>using<sp/>outputters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>parser.<ref refid="class_command_line_parser_1a7d65e758e9c915df46f078d060bec656" kindref="member">useCompilerOutputter</ref>()<sp/>)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compilerOutputter.write();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>parser.<ref refid="class_command_line_parser_1a48495a436701ff716951113e43a4c1f4" kindref="member">useTextOutputter</ref>()<sp/>)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>textOutputter.write();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>parser.<ref refid="class_command_line_parser_1ad0189bb7baad5df4e75a3de9203c7e70" kindref="member">useXmlOutputter</ref>()<sp/>)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>plugInManager.addXmlOutputterHooks(<sp/>&amp;xmlOutputter<sp/>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xmlOutputter.write();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>plugInManager.removeXmlOutputterHooks();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!parser.<ref refid="class_command_line_parser_1aad5d67fad84eedae721dca9e534450c5" kindref="member">getXmlFileName</ref>().empty()<sp/>)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>xmlStream;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wasSuccessful;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1a3389d8b23691140dfb391a815f7de4c5" kindref="member">printShortUsage</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;applicationName<sp/>)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/>CPPUNIT_NS::stdCOut()<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Usage:짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>applicationName<sp/><sp/>&lt;&lt;<sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>[-c<sp/>-b<sp/>-n<sp/>-t<sp/>-o<sp/>-w]<sp/>[-x<sp/>xml-filename]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[-s<sp/>stylesheet]<sp/>[-e<sp/>encoding]<sp/>plug-in[=parameters]<sp/>[plug-in...]<sp/>[:testPath]짜n짜n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><ref refid="_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1ad7cc8c97718b1ce6b46691cc6d055953" kindref="member">printUsage</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;applicationName<sp/>)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><ref refid="_dll_plug_in_tester_2_dll_plug_in_tester_8cpp_1a3389d8b23691140dfb391a815f7de4c5" kindref="member">printShortUsage</ref>(<sp/>applicationName<sp/>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>CPPUNIT_NS::stdCOut()<sp/><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;-c<sp/>--compiler짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Use<sp/>CompilerOutputter짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;-x<sp/>--xml<sp/>[filename]짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Use<sp/>XmlOutputter<sp/>(if<sp/>filename<sp/>is<sp/>omitted,<sp/>then<sp/>output<sp/>to<sp/>cout<sp/>or짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>cerr.짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;-s<sp/>--xsl<sp/>stylesheet짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>XML<sp/>style<sp/>sheet<sp/>for<sp/>XML<sp/>Outputter짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;-e<sp/>--encoding<sp/>encoding짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>XML<sp/>file<sp/>encoding<sp/>(UTF8,<sp/>shift_jis,<sp/>ISO-8859-1...)짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;-b<sp/>--brief-progress짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Use<sp/>BriefTestProgressListener<sp/>(default<sp/>is<sp/>TextTestProgressListener)짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;-n<sp/>--no-progress짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Show<sp/>no<sp/>test<sp/>progress<sp/>(disable<sp/>default<sp/>TextTestProgressListener)짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;-t<sp/>--text짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Use<sp/>TextOutputter짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;-o<sp/>--cout짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Ouputters<sp/>output<sp/>to<sp/>cout<sp/>instead<sp/>of<sp/>the<sp/>default<sp/>cerr.짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;-w<sp/>--wait짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Wait<sp/>for<sp/>the<sp/>user<sp/>to<sp/>press<sp/>a<sp/>return<sp/>before<sp/>exit.짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;filename[=짜&quot;</highlight><highlight class="normal">options짜</highlight><highlight class="stringliteral">&quot;]짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Many<sp/>filenames<sp/>can<sp/>be<sp/>specified.<sp/>They<sp/>are<sp/>the<sp/>name<sp/>of<sp/>the<sp/>짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>test<sp/>plug-ins<sp/>to<sp/>load.<sp/>Optional<sp/>plug-ins<sp/>parameters<sp/>can<sp/>be<sp/>짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>specified<sp/>after<sp/>the<sp/>filename<sp/>by<sp/>adding<sp/>&apos;=&apos;.짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;[:testpath]짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Optional.<sp/>Only<sp/>one<sp/>test<sp/>path<sp/>can<sp/>be<sp/>specified.<sp/>It<sp/>must<sp/>짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>be<sp/>prefixed<sp/>with<sp/>&apos;:&apos;.<sp/>See<sp/>TestPath<sp/>constructor<sp/>for<sp/>syntax.짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&apos;parameters&apos;<sp/>(test<sp/>plug-in<sp/>or<sp/>XML<sp/>filename,<sp/>test<sp/>path...)<sp/>may<sp/>contains<sp/>짜n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;spaces<sp/>if<sp/>double<sp/>quoted.<sp/>Quote<sp/>may<sp/>be<sp/>escaped<sp/>with<sp/>짜&quot;</highlight><highlight class="normal">.짜n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">짜n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">Some<sp/>examples<sp/>of<sp/>command<sp/>lines:짜n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">짜n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">DllPlugInTesterd_dll.exe<sp/>-b<sp/>-x<sp/>tests.xml<sp/>-c<sp/>simple_plugind.dll<sp/>CppUnitTestPlugInd.dll짜n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">짜n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral">&quot;</highlight><highlight class="normal"><sp/>Will<sp/>load<sp/>2<sp/>tests<sp/>plug-ins<sp/>(available<sp/>in<sp/>lib/),<sp/>use<sp/>the<sp/>brief<sp/>test짜n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">progress,<sp/>output<sp/>the<sp/>result<sp/>in<sp/>XML<sp/>in<sp/>file<sp/>tests.xml<sp/>and<sp/>also짜n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">output<sp/>the<sp/>result<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>the<sp/>compiler<sp/>outputter.짜n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">짜n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">DllPlugInTesterd_dll.exe<sp/>ClockerPlugInd.dll=<ref refid="_command_line_parser_test_8cpp_1ae999121b8b6dd0c7a82fe892e75c68a6" kindref="member">짜</ref></highlight><highlight class="stringliteral">&quot;flat짜&quot;</highlight><highlight class="normal"><sp/>-n<sp/>CppUnitTestPlugInd.dll짜n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">짜n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral">&quot;</highlight><highlight class="normal"><sp/>Will<sp/>load<sp/>the<sp/>2<sp/>test<sp/>plug-ins,<sp/>and<sp/>pass<sp/>the<sp/>parameter<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="_command_line_parser_test_8cpp_1ae999121b8b6dd0c7a82fe892e75c68a6" kindref="member">짜</ref></highlight><highlight class="stringliteral">&quot;flat짜&quot;</highlight><highlight class="normal">짜n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">to<sp/>the<sp/>Clocker<sp/>plug-in,<sp/>disable<sp/>test<sp/>progress.짜n짜n</highlight><highlight class="stringliteral">&quot;;</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral">int<sp/></highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral">main(<sp/>int<sp/>argc,<sp/></highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char<sp/>*argv[]<sp/>)</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"><sp/><sp/>const<sp/>int<sp/>successReturnCode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/>const<sp/>int<sp/>failureReturnCode<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/><sp/>const<sp/>int<sp/>badCommadLineReturnCode<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/>//<sp/>check<sp/>command<sp/>line</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"><sp/><sp/>std::string<sp/>applicationName(<sp/>argv[0]<sp/>);</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"><sp/><sp/>if<sp/>(<sp/>argc<sp/>&lt;<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>printUsage(<sp/>applicationName<sp/>);</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>badCommadLineReturnCode;</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/>CommandLineParser<sp/>parser(<sp/>argc,<sp/>argv<sp/>);</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/>try</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>parser.parse();</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"><sp/><sp/>catch<sp/>(<sp/>CommandLineParserException<sp/>&amp;e<sp/>)</highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>CPPUNIT_NS::stdCOut()<sp/><sp/>&lt;&lt;<sp/><sp/>&quot;</highlight><highlight class="normal">Error<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>parsing<sp/>command<sp/>line:<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;&lt;<sp/><sp/>e.what()<sp/><sp/></highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;</highlight><highlight class="normal">짜n짜n</highlight><highlight class="stringliteral">&quot;;</highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>printShortUsage(<sp/>applicationName<sp/>);</highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>badCommadLineReturnCode;</highlight></codeline>
<codeline lineno="233"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="235"><highlight class="stringliteral"><sp/><sp/>bool<sp/>wasSuccessful<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="236"><highlight class="stringliteral"><sp/><sp/>try</highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>wasSuccessful<sp/>=<sp/>runTests(<sp/>parser<sp/>);</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/>catch<sp/>(<sp/>CPPUNIT_NS::DynamicLibraryManagerException<sp/>&amp;e<sp/>)</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>CPPUNIT_NS::stdCOut()<sp/><sp/>&lt;&lt;<sp/>&quot;</highlight><highlight class="normal">Failed<sp/>to<sp/>load<sp/>test<sp/>plug-in:짜n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/>&quot;</highlight><highlight class="normal">짜n</highlight><highlight class="stringliteral">&quot;;</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="246"><highlight class="stringliteral">#if<sp/>!defined(<sp/>CPPUNIT_NO_STREAM<sp/>)</highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"><sp/><sp/>if<sp/>(<sp/>parser.waitBeforeExit()<sp/>)</highlight></codeline>
<codeline lineno="248"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>CPPUNIT_NS::stdCOut()<sp/>&lt;&lt;<sp/>&quot;</highlight><highlight class="normal">Please<sp/>press<sp/>&lt;RETURN&gt;<sp/>to<sp/>exit짜n</highlight><highlight class="stringliteral">&quot;;</highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>CPPUNIT_NS::stdCOut().flush();</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::cin.get();</highlight></codeline>
<codeline lineno="252"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="stringliteral">#endif</highlight></codeline>
<codeline lineno="254"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="255"><highlight class="stringliteral"><sp/><sp/>return<sp/>wasSuccessful<sp/>?<sp/>successReturnCode<sp/>:<sp/>failureReturnCode;</highlight></codeline>
<codeline lineno="256"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="257"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="258"><highlight class="stringliteral"></highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/DllPlugInTester/DllPlugInTester.cpp"/>
  </compounddef>
</doxygen>
