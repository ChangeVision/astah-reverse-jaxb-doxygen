<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="_progress_bar_8cpp" kind="file">
    <compoundname>ProgressBar.cpp</compoundname>
    <includes refid="testrunner_2_std_afx_8h" local="yes">stdafx.h</includes>
    <includes refid="_progress_bar_8h" local="yes">ProgressBar.h</includes>
    <incdepgraph>
      <node id="1078">
        <label>afxcmn.h</label>
      </node>
      <node id="1076">
        <label>afxdb.h</label>
      </node>
      <node id="1074">
        <label>afxodlgs.h</label>
      </node>
      <node id="1073">
        <label>afxole.h</label>
      </node>
      <node id="1072">
        <label>afxext.h</label>
      </node>
      <node id="1079">
        <label>ProgressBar.h</label>
        <link refid="_progress_bar_8h"/>
      </node>
      <node id="1069">
        <label>src/msvc6/testrunner/ProgressBar.cpp</label>
        <link refid="ProgressBar.cpp"/>
        <childnode refid="1070" relation="include">
        </childnode>
        <childnode refid="1079" relation="include">
        </childnode>
      </node>
      <node id="1077">
        <label>afxdao.h</label>
      </node>
      <node id="1075">
        <label>afxdisp.h</label>
      </node>
      <node id="1070">
        <label>stdafx.h</label>
        <link refid="testrunner_2_std_afx_8h"/>
        <childnode refid="1071" relation="include">
        </childnode>
        <childnode refid="1072" relation="include">
        </childnode>
        <childnode refid="1073" relation="include">
        </childnode>
        <childnode refid="1074" relation="include">
        </childnode>
        <childnode refid="1075" relation="include">
        </childnode>
        <childnode refid="1076" relation="include">
        </childnode>
        <childnode refid="1077" relation="include">
        </childnode>
        <childnode refid="1078" relation="include">
        </childnode>
      </node>
      <node id="1071">
        <label>afxwin.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="testrunner_2_std_afx_8h" kindref="compound">stdafx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_progress_bar_8h" kindref="compound">ProgressBar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight></codeline>
<codeline lineno="5"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>new<sp/>DEBUG_NEW</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>THIS_FILE</highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>THIS_FILE[]<sp/>=<sp/>__FILE__;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><ref refid="class_progress_bar_1aabdebc9823af01c7567e7546d9f0016f" kindref="member">ProgressBar::ProgressBar</ref>()</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_error(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_total(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_progress(<sp/>0<sp/>)<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_progressX(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><ref refid="class_progress_bar_1aedd9c6095167b5703862596e720a1db5" kindref="member">ProgressBar::â€¾ProgressBar</ref>()</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">BEGIN_MESSAGE_MAP(<ref refid="class_progress_bar" kindref="compound">ProgressBar</ref>,<sp/>CWnd)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{{AFX_MSG_MAP(ProgressBar)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>ON_WM_PAINT()</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>ON_WM_SIZE()</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>ON_WM_ERASEBKGND()</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}}AFX_MSG_MAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">END_MESSAGE_MAP()</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="class_progress_bar" kindref="compound">ProgressBar</ref>::OnPaint()<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>CPaintDC<sp/>dc(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>device<sp/>context<sp/>for<sp/>painting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>paint(<sp/>dc<sp/>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paint<sp/>the<sp/>progress<sp/>bar<sp/>in<sp/>response<sp/>to<sp/>a<sp/>paint<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="class_progress_bar_1aa6c0060e17c385ee5c4d8d65f56cc7b6" kindref="member">ProgressBar::paint</ref>(<sp/>CDC<sp/>&amp;dc<sp/>)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="class_progress_bar_1afbe19c650136187fbf0b3e583d712afa" kindref="member">paintBackground</ref>(<sp/>dc<sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="class_progress_bar_1a8b41deeb34e7866f738405a83f537d36" kindref="member">paintStatus</ref>(<sp/>dc<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paint<sp/>the<sp/>background<sp/>of<sp/>the<sp/>progress<sp/>bar<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="class_progress_bar_1afbe19c650136187fbf0b3e583d712afa" kindref="member">ProgressBar::paintBackground</ref>(<sp/>CDC<sp/>&amp;dc<sp/>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>CBrush<sp/>brshBackground;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>CPen<sp/>penShade(<sp/>PS_SOLID,<sp/>1,<sp/>GetSysColor(COLOR_3DSHADOW)<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>CPen<sp/>penLight(<sp/>PS_SOLID,<sp/>1,<sp/>GetSysColor(COLOR_3DHILIGHT)<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>brshBackground.CreateSolidBrush(<sp/>::GetSysColor<sp/>(COLOR_BTNFACE)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>dc.FillRect(<sp/>m_bounds,<sp/>&amp;brshBackground<sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>CPen<sp/>*pOldPen<sp/>=<sp/>dc.SelectObject(<sp/>&amp;penShade<sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xRight<sp/>=<sp/>m_bounds.left<sp/>+<sp/>m_bounds.Width()<sp/>-1;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yBottom<sp/>=<sp/>m_bounds.top<sp/>+<sp/>m_bounds.Height()<sp/>-1;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>dc.MoveTo(<sp/>m_bounds.left,<sp/>m_bounds.top<sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>dc.LineTo(<sp/>xRight,<sp/>m_bounds.top<sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>dc.MoveTo(<sp/>m_bounds.left,<sp/>m_bounds.top<sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>dc.LineTo(<sp/>m_bounds.left,<sp/>yBottom<sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>dc.SelectObject(<sp/>&amp;penLight<sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>dc.MoveTo(<sp/>xRight,<sp/>m_bounds.top<sp/>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>dc.LineTo(<sp/>xRight,<sp/>yBottom<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>dc.MoveTo(<sp/>m_bounds.left,<sp/>yBottom<sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>dc.LineTo(<sp/>xRight,<sp/>yBottom<sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>dc.SelectObject(<sp/>pOldPen<sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paint<sp/>the<sp/>actual<sp/>status<sp/>of<sp/>the<sp/>progress<sp/>bar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><ref refid="class_progress_bar_1a8b41deeb34e7866f738405a83f537d36" kindref="member">ProgressBar::paintStatus</ref>(<sp/>CDC<sp/>&amp;dc<sp/>)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_progress<sp/>&lt;=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>CBrush<sp/>brshStatus;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>CRect<sp/>rect(<sp/>m_bounds.left,<sp/>m_bounds.top,<sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bounds.left<sp/>+<sp/>m_progressX,<sp/>m_bounds.bottom<sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>COLORREF<sp/>statusColor<sp/>=<sp/><ref refid="class_progress_bar_1ac2965673a4cd86f37d28a05e85dd8f37" kindref="member">getStatusColor</ref>();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>brshStatus.CreateSolidBrush(<sp/>statusColor<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>rect.DeflateRect(<sp/>1,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>dc.FillRect(<sp/>rect,<sp/>&amp;brshStatus<sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paint<sp/>the<sp/>current<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><ref refid="class_progress_bar_1a0bff2215c3da99d2ea87bcbc6f1f0ccb" kindref="member">ProgressBar::paintStep</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startX,<sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endX<sp/>)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>CRect<sp/>redrawBounds(<sp/>m_bounds.left<sp/>+<sp/>startX-1,<sp/>m_bounds.top,<sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bounds.left<sp/>+<sp/>endX,<sp/>m_bounds.bottom<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>RedrawWindow(<sp/>redrawBounds<sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setup<sp/>the<sp/>progress<sp/>bar<sp/>for<sp/>execution<sp/>over<sp/>a<sp/>total<sp/>number<sp/>of<sp/>steps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="class_progress_bar_1a7757fbe02257a748f2381ea4209f2481" kindref="member">ProgressBar::start</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total<sp/>)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>m_total<sp/>=<sp/>total;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><ref refid="class_progress_bar_1a9ccd597a098a693f9364741fc69a3de2" kindref="member">reset</ref><sp/>();</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Take<sp/>one<sp/>step,<sp/>indicating<sp/>whether<sp/>it<sp/>was<sp/>a<sp/>successful<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><ref refid="class_progress_bar_1aec22aac36271cf31ccfdb5bab2e9be49" kindref="member">ProgressBar::step</ref>(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>successful<sp/>)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>m_progress++;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>m_progressX;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>m_progressX<sp/>=<sp/><ref refid="class_progress_bar_1aa7d13b84d2aeed0ea0ef524158184965" kindref="member">scale</ref><sp/>(m_progress);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m_error<sp/><sp/>&amp;&amp;<sp/><sp/>!successful<sp/>)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>m_error<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><ref refid="class_progress_bar_1a0bff2215c3da99d2ea87bcbc6f1f0ccb" kindref="member">paintStep</ref>(<sp/>x,<sp/>m_progressX<sp/>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Map<sp/>from<sp/>steps<sp/>to<sp/>display<sp/>units</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><ref refid="class_progress_bar_1aa7d13b84d2aeed0ea0ef524158184965" kindref="member">ProgressBar::scale</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_total<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max(<sp/>1,<sp/>value<sp/>*<sp/>(m_bounds.Width()<sp/>-<sp/>1)<sp/>/<sp/>m_total<sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>progress<sp/>bar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><ref refid="class_progress_bar_1a9ccd597a098a693f9364741fc69a3de2" kindref="member">ProgressBar::reset</ref>()</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>m_progressX<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>m_progress<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>m_error<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>RedrawWindow(<sp/>m_bounds<sp/>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>UpdateWindow(<sp/>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><ref refid="class_progress_bar_1a3fdb3fa8a69d45777b1208ffb294a2b1" kindref="member">ProgressBar::OnSize</ref>(UINT<sp/>nType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cy)<sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>CWnd::OnSize(nType,<sp/>cx,<sp/>cy);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>GetClientRect(<sp/>&amp;m_bounds<sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>m_progressX<sp/>=<sp/><ref refid="class_progress_bar_1aa7d13b84d2aeed0ea0ef524158184965" kindref="member">scale</ref><sp/>(m_progress);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>Invalidate();</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">BOOL<sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><ref refid="class_progress_bar_1a6435aaf6efed84992c457bf3e8cab47c" kindref="member">ProgressBar::OnEraseBkgnd</ref>(<sp/>CDC<sp/>*pDC<sp/>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/Cpp_Reverse/cppunit-1.12.0/src/msvc6/testrunner/ProgressBar.cpp"/>
  </compounddef>
</doxygen>
