<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="trees_8c" kind="file">
    <compoundname>trees.c</compoundname>
    <includes refid="deflate_8h" local="yes">deflate.h</includes>
    <incdepgraph>
      <node id="1654">
        <label>src/trees.c</label>
        <link refid="trees.c"/>
        <childnode refid="1655" relation="include">
        </childnode>
      </node>
      <node id="1658">
        <label>zconf.h</label>
        <link refid="zconf_8h"/>
      </node>
      <node id="1655">
        <label>deflate.h</label>
        <link refid="deflate_8h"/>
        <childnode refid="1656" relation="include">
        </childnode>
      </node>
      <node id="1656">
        <label>zutil.h</label>
        <link refid="zutil_8h"/>
        <childnode refid="1657" relation="include">
        </childnode>
      </node>
      <node id="1657">
        <label>zlib.h</label>
        <link refid="zlib_8h"/>
        <childnode refid="1658" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structstatic__tree__desc__s" prot="public">static_tree_desc_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="trees_8c_1a8f9fea0ddde71a75c6caf59ba993ca4e" prot="public" static="no">
        <name>MAX_BL_BITS</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="47" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="trees_8c_1a1e33ae802796dae8694948b87ac62d61" prot="public" static="no">
        <name>END_BLOCK</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="50" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="trees_8c_1a5d39bc5068c496733ec81b9d5543db40" prot="public" static="no">
        <name>REP_3_6</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="53" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="trees_8c_1a39f77126525d41c0155506e942365da8" prot="public" static="no">
        <name>REPZ_3_10</name>
        <initializer>17</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="56" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="trees_8c_1a350267bb8ca6269fac9ba06057336788" prot="public" static="no">
        <name>REPZ_11_138</name>
        <initializer>18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="59" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="trees_8c_1a0c0213b942f7535235cf515e8fe23bf9" prot="public" static="no">
        <name>Buf_size</name>
        <initializer>(8 * 2*sizeof(char))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="77" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="trees_8c_1a368ebabef641e688c8f848e76b704500" prot="public" static="no">
        <name>DIST_CODE_LEN</name>
        <initializer>512 /* see definition of array dist_code below */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="86" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="trees_8c_1a46e5de3915e644d07a6ff571e7db7bfa" prot="public" static="no">
        <name>send_code</name>
        <param><defname>s</defname></param>
        <param><defname>c</defname></param>
        <param><defname>tree</defname></param>
        <initializer><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s, tree[c].<ref refid="deflate_8h_1a068e76e6034d06450385bc98b69ea53e" kindref="member">Code</ref>, tree[c].<ref refid="deflate_8h_1a4490e644c06783cc69ad87c121e39e94" kindref="member">Len</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="168" column="11" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="trees_8c_1ae76cb23c4bc3d3f80e7a7917dd538c4e" prot="public" static="no">
        <name>put_short</name>
        <param><defname>s</defname></param>
        <param><defname>w</defname></param>
        <initializer>{ \
    <ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s, (<ref refid="zutil_8h_1af3307af5922c72924a837559c801a8a4" kindref="member">uch</ref>)((w) &amp; 0xff)); \
    put_byte(s, (uch)((ush)(w) &gt;&gt; 8)); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="181" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" prot="public" static="no">
        <name>send_bits</name>
        <param><defname>s</defname></param>
        <param><defname>value</defname></param>
        <param><defname>length</defname></param>
        <initializer>{ int len = length;\
  if (s-&gt;bi_valid &gt; (int)<ref refid="trees_8c_1a0c0213b942f7535235cf515e8fe23bf9" kindref="member">Buf_size</ref> - len) {\
    int val = value;\
    s-&gt;bi_buf |= (<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)val &lt;&lt; s-&gt;bi_valid;\
    <ref refid="trees_8c_1ae76cb23c4bc3d3f80e7a7917dd538c4e" kindref="member">put_short</ref>(s, s-&gt;bi_buf);\
    s-&gt;bi_buf = (<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)val &gt;&gt; (<ref refid="trees_8c_1a0c0213b942f7535235cf515e8fe23bf9" kindref="member">Buf_size</ref> - s-&gt;bi_valid);\
    s-&gt;bi_valid += len - <ref refid="trees_8c_1a0c0213b942f7535235cf515e8fe23bf9" kindref="member">Buf_size</ref>;\
  } else {\
    s-&gt;bi_buf |= (<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)(value) &lt;&lt; s-&gt;bi_valid;\
    s-&gt;bi_valid += len;\
  }\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="218" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="trees_8c_1ad14f32cbc4e0d9dfc99f6a3897ee4607" prot="public" static="no">
        <name>SMALLEST</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="430" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="trees_8c_1abf2ba789ae874d21ce278885758c4dcc" prot="public" static="no">
        <name>pqremove</name>
        <param><defname>s</defname></param>
        <param><defname>tree</defname></param>
        <param><defname>top</defname></param>
        <initializer>{\
    top = s-&gt;heap[<ref refid="trees_8c_1ad14f32cbc4e0d9dfc99f6a3897ee4607" kindref="member">SMALLEST</ref>]; \
    s-&gt;heap[<ref refid="trees_8c_1ad14f32cbc4e0d9dfc99f6a3897ee4607" kindref="member">SMALLEST</ref>] = s-&gt;heap[s-&gt;heap_len--]; \
    pqdownheap(s, tree, <ref refid="trees_8c_1ad14f32cbc4e0d9dfc99f6a3897ee4607" kindref="member">SMALLEST</ref>); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="438" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="trees_8c_1a78d1ce835d96eb110f23c580ad7fab7c" prot="public" static="no">
        <name>smaller</name>
        <param><defname>tree</defname></param>
        <param><defname>n</defname></param>
        <param><defname>m</defname></param>
        <param><defname>depth</defname></param>
        <initializer>(tree[n].<ref refid="deflate_8h_1a8bab2775fa423836b05f407d2f8bf6e2" kindref="member">Freq</ref> &lt; tree[m].<ref refid="deflate_8h_1a8bab2775fa423836b05f407d2f8bf6e2" kindref="member">Freq</ref> || \
   (tree[n].<ref refid="deflate_8h_1a8bab2775fa423836b05f407d2f8bf6e2" kindref="member">Freq</ref> == tree[m].<ref refid="deflate_8h_1a8bab2775fa423836b05f407d2f8bf6e2" kindref="member">Freq</ref> &amp;&amp; depth[n] &lt;= depth[m]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="449" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="449" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="trees_8c_1ab92710205038f90c8a770307c10539db" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int extra_lbits[29]</definition>
        <argsstring>[29]</argsstring>
        <name>extra_lbits</name>
        <initializer>= {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="62" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trees_8c_1aafcb84eaa65d10bbfb7c41f79a532a5c" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int extra_dbits[30]</definition>
        <argsstring>[30]</argsstring>
        <name>extra_dbits</name>
        <initializer>= {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="65" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trees_8c_1a3b03d8320a1577921bfd2b0584f9bf70" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int extra_blbits[19]</definition>
        <argsstring>[19]</argsstring>
        <name>extra_blbits</name>
        <initializer>= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="68" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trees_8c_1aeb104e4f6b3fb8efa53924ef6e8c155e" prot="public" static="yes" mutable="no">
        <type><ref refid="zutil_8h_1af3307af5922c72924a837559c801a8a4" kindref="member">uch</ref></type>
        <definition>uch bl_order[19]</definition>
        <argsstring>[19]</argsstring>
        <name>bl_order</name>
        <initializer>= {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="71" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trees_8c_1a6cf82e8aec0934c937f0a8838cc00fd3" prot="public" static="yes" mutable="no">
        <type><ref refid="structct__data" kindref="compound">ct_data</ref></type>
        <definition>ct_data static_ltree[(256+1+29)+2]</definition>
        <argsstring>[(256+1+29)+2]</argsstring>
        <name>static_ltree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="91" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trees_8c_1a154650d69b4c03680349392d5e970e7f" prot="public" static="yes" mutable="no">
        <type><ref refid="structct__data" kindref="compound">ct_data</ref></type>
        <definition>ct_data static_dtree[30]</definition>
        <argsstring>[30]</argsstring>
        <name>static_dtree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="98" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trees_8c_1ae97213ee7803a4450ee21295d1037b34" prot="public" static="no" mutable="no">
        <type><ref refid="zutil_8h_1af3307af5922c72924a837559c801a8a4" kindref="member">uch</ref></type>
        <definition>uch _dist_code[512]</definition>
        <argsstring>[512]</argsstring>
        <name>_dist_code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="103" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trees_8c_1a9d56663487d8c42a01173e620454c029" prot="public" static="no" mutable="no">
        <type><ref refid="zutil_8h_1af3307af5922c72924a837559c801a8a4" kindref="member">uch</ref></type>
        <definition>uch _length_code[258-3+1]</definition>
        <argsstring>[258-3+1]</argsstring>
        <name>_length_code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="109" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trees_8c_1af38f0b7f08f6bfd332424927ff29b4c8" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int base_length[29]</definition>
        <argsstring>[29]</argsstring>
        <name>base_length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="112" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trees_8c_1a327816179e1c339f6f1c4ad6213ac4d9" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int base_dist[30]</definition>
        <argsstring>[30]</argsstring>
        <name>base_dist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="115" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trees_8c_1ac67fa15c9489fd990b55754af14d3ccc" prot="public" static="yes" mutable="no">
        <type>static_tree_desc</type>
        <definition>static_tree_desc static_l_desc</definition>
        <argsstring></argsstring>
        <name>static_l_desc</name>
        <initializer>=
{<ref refid="trees_8h_1a6768b3bbdf10808bdddd44b13349c5a2" kindref="member">static_ltree</ref>, extra_lbits,  256 +1,  ( 256 +1+ 29 ) ,  15 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="130" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trees_8c_1a87f8ad971112cae6d1fd3bbecc185c4d" prot="public" static="yes" mutable="no">
        <type>static_tree_desc</type>
        <definition>static_tree_desc static_d_desc</definition>
        <argsstring></argsstring>
        <name>static_d_desc</name>
        <initializer>=
{<ref refid="trees_8h_1a32b77d04af5dc26c5312766355386cec" kindref="member">static_dtree</ref>, extra_dbits, 0,           30 ,  15 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="133" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trees_8c_1ae42ef7d80924399b6b7ff179abbc109c" prot="public" static="yes" mutable="no">
        <type>static_tree_desc</type>
        <definition>static_tree_desc static_bl_desc</definition>
        <argsstring></argsstring>
        <name>static_bl_desc</name>
        <initializer>=
{(   <ref refid="structct__data" kindref="compound">ct_data</ref> *)0, extra_blbits, 0,    19 ,  7 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="136" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="trees_8c_1aafd7faaa56f355e98152763c64aeb91d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tr_static_init</definition>
        <argsstring>()</argsstring>
        <name>tr_static_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="143" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="239" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a971556e5c17b87274810b172006e23e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void init_block</definition>
        <argsstring>()</argsstring>
        <name>init_block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a845f47d5018ba5d4bb24454dbdd1e40b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void pqdownheap</definition>
        <argsstring>()</argsstring>
        <name>pqdownheap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a8bfb8cc5f286f1997d6c87b1e6aabf86" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gen_bitlen</definition>
        <argsstring>()</argsstring>
        <name>gen_bitlen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1aa096025d4938b4a03b3a02758494f517" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gen_codes</definition>
        <argsstring>()</argsstring>
        <name>gen_codes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1acab4d6d5da940fcfafe452aafb566e38" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void build_tree</definition>
        <argsstring>()</argsstring>
        <name>build_tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a49213782683b23adb5c06d6a32905c1d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void scan_tree</definition>
        <argsstring>()</argsstring>
        <name>scan_tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1aa5f7b602f5171e56c11de1aaef96d774" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void send_tree</definition>
        <argsstring>()</argsstring>
        <name>send_tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a61403388ad2e62f5dac5856edf6e2d83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int build_bl_tree</definition>
        <argsstring>()</argsstring>
        <name>build_bl_tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a9966bd9302fe89d6a03951d6ad520665" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void send_all_trees</definition>
        <argsstring>()</argsstring>
        <name>send_all_trees</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1af23ac04fa55c43b78efd13e52996e803" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void compress_block</definition>
        <argsstring>()</argsstring>
        <name>compress_block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1ad0adf617da2af81b17a28ee721835ac8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int detect_data_type</definition>
        <argsstring>()</argsstring>
        <name>detect_data_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1ada8a21fa7113e756ae74cc3d0d9ad38a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>static unsigned bi_reverse</definition>
        <argsstring>()</argsstring>
        <name>bi_reverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1af4d7ef817bebb671b5639ed07ccc22d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void bi_windup</definition>
        <argsstring>()</argsstring>
        <name>bi_windup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1aa3721243c9578ab8909a1c09c4519ba3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void bi_flush</definition>
        <argsstring>()</argsstring>
        <name>bi_flush</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a46bbc8772bb0fd98432765ef9ab9f7ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void copy_block</definition>
        <argsstring>()</argsstring>
        <name>copy_block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a339961134b155099c972524109f9119b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _tr_init</definition>
        <argsstring>(deflate_state *s)</argsstring>
        <name>_tr_init</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="386" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="386" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a059b070306c60c863907637879848af3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void init_block</definition>
        <argsstring>(deflate_state *s)</argsstring>
        <name>init_block</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="415" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="415" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a5ef88bd2b94a1c43842ff28237a372da" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void pqdownheap</definition>
        <argsstring>(deflate_state *s, ct_data *tree, int k)</argsstring>
        <name>pqdownheap</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structct__data" kindref="compound">ct_data</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="459" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="459" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a4c4ff46e33a809f2fb63bd267f0ed6a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gen_bitlen</definition>
        <argsstring>(deflate_state *s, tree_desc *desc)</argsstring>
        <name>gen_bitlen</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structtree__desc" kindref="compound">tree_desc</ref> *</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="494" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="494" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a6476e76cd6808b91bbb2f6e97d8a2baa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gen_codes</definition>
        <argsstring>(ct_data *tree, int max_code, ushf *bl_count)</argsstring>
        <name>gen_codes</name>
        <param>
          <type><ref refid="structct__data" kindref="compound">ct_data</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_code</declname>
        </param>
        <param>
          <type><ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref> *</type>
          <declname>bl_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="581" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="581" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a851f39a45d486d0cf1f3c4ec605c8f3c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void build_tree</definition>
        <argsstring>(deflate_state *s, tree_desc *desc)</argsstring>
        <name>build_tree</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structtree__desc" kindref="compound">tree_desc</ref> *</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="623" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="623" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a56c8223c0a9c9753c5fe182973d1aa12" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void scan_tree</definition>
        <argsstring>(deflate_state *s, ct_data *tree, int max_code)</argsstring>
        <name>scan_tree</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structct__data" kindref="compound">ct_data</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="711" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="711" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1aef3f1e5bcd46849bba4991dbaded1a87" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void send_tree</definition>
        <argsstring>(deflate_state *s, ct_data *tree, int max_code)</argsstring>
        <name>send_tree</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structct__data" kindref="compound">ct_data</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="756" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="756" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a1e7e80f2e7e3cf0bfe7671d18702bddc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int build_bl_tree</definition>
        <argsstring>(deflate_state *s)</argsstring>
        <name>build_bl_tree</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="807" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="807" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a5446bb97b38aaefccef3a86532530bd5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void send_all_trees</definition>
        <argsstring>(deflate_state *s, int lcodes, int dcodes, int blcodes)</argsstring>
        <name>send_all_trees</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lcodes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcodes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blcodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="842" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="842" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a400f9b580e4928803db7f114d767bce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _tr_stored_block</definition>
        <argsstring>(deflate_state *s, charf *buf, ulg stored_len, int last)</argsstring>
        <name>_tr_stored_block</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="zconf_8h_1a864fa0e2e4e499038305f3276990689b" kindref="member">charf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref></type>
          <declname>stored_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="871" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="871" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a728f046b1fdbb36085e368a92a0d6738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _tr_align</definition>
        <argsstring>(deflate_state *s)</argsstring>
        <name>_tr_align</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="896" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="896" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1abe4596852fd6af7f31e9adaac4879fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _tr_flush_block</definition>
        <argsstring>(deflate_state *s, charf *buf, ulg stored_len, int last)</argsstring>
        <name>_tr_flush_block</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="zconf_8h_1a864fa0e2e4e499038305f3276990689b" kindref="member">charf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref></type>
          <declname>stored_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="925" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="925" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a3307d897f4939a67623f4f5120bd2ec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _tr_tally</definition>
        <argsstring>(deflate_state *s, unsigned dist, unsigned lc)</argsstring>
        <name>_tr_tally</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>lc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="1026" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="1026" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a8b900174ed6ace489acf2863ea348a1d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void compress_block</definition>
        <argsstring>(deflate_state *s, ct_data *ltree, ct_data *dtree)</argsstring>
        <name>compress_block</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structct__data" kindref="compound">ct_data</ref> *</type>
          <declname>ltree</declname>
        </param>
        <param>
          <type><ref refid="structct__data" kindref="compound">ct_data</ref> *</type>
          <declname>dtree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="1076" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="1076" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a64bde84253d95ef8eaa415f2d6160ef5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int detect_data_type</definition>
        <argsstring>(deflate_state *s)</argsstring>
        <name>detect_data_type</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="1137" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="1137" bodyend="1164"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a82bd92659fd4e8e115133378aa7c5d46" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>static unsigned bi_reverse</definition>
        <argsstring>(unsigned code, int len)</argsstring>
        <name>bi_reverse</name>
        <param>
          <type>unsigned</type>
          <declname>code</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="1171" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="1171" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a3fb6653bf13fa7da2a62924429186394" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void bi_flush</definition>
        <argsstring>(deflate_state *s)</argsstring>
        <name>bi_flush</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="1186" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="1186" bodyend="1198"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a84708b9f04aa5bb97ad0827be42b9f62" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void bi_windup</definition>
        <argsstring>(deflate_state *s)</argsstring>
        <name>bi_windup</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="1203" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="1203" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1af4a69a7c4396d8c1801657c613d54878" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void copy_block</definition>
        <argsstring>(deflate_state *s, charf *buf, unsigned len, int header)</argsstring>
        <name>copy_block</name>
        <param>
          <type><ref refid="structdeflate__state" kindref="compound">deflate_state</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="zconf_8h_1a864fa0e2e4e499038305f3276990689b" kindref="member">charf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" line="1222" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c" bodystart="1222" bodyend="1244"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>trees.c<sp/>--<sp/>output<sp/>deflated<sp/>data<sp/>using<sp/>Huffman<sp/>coding</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-2010<sp/>Jean-loup<sp/>Gailly</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>detect_data_type()<sp/>function<sp/>provided<sp/>freely<sp/>by<sp/>Cosmin<sp/>Truta,<sp/>2006</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>ALGORITHM</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>&quot;deflation&quot;<sp/>process<sp/>uses<sp/>several<sp/>Huffman<sp/>trees.<sp/>The<sp/>more</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>common<sp/>source<sp/>values<sp/>are<sp/>represented<sp/>by<sp/>shorter<sp/>bit<sp/>sequences.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Each<sp/>code<sp/>tree<sp/>is<sp/>stored<sp/>in<sp/>a<sp/>compressed<sp/>form<sp/>which<sp/>is<sp/>itself</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>a<sp/>Huffman<sp/>encoding<sp/>of<sp/>the<sp/>lengths<sp/>of<sp/>all<sp/>the<sp/>code<sp/>strings<sp/>(in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>ascending<sp/>order<sp/>by<sp/>source<sp/>values).<sp/><sp/>The<sp/>actual<sp/>code<sp/>strings<sp/>are</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>reconstructed<sp/>from<sp/>the<sp/>lengths<sp/>in<sp/>the<sp/>inflate<sp/>process,<sp/>as<sp/>described</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>deflate<sp/>specification.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>REFERENCES</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Deutsch,<sp/>L.P.,&quot;&apos;Deflate&apos;<sp/>Compressed<sp/>Data<sp/>Format<sp/>Specification&quot;.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Available<sp/>in<sp/>ftp.uu.net:/pub/archiving/zip/doc/deflate-1.1.doc</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Storer,<sp/>James<sp/>A.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data<sp/>Compression:<sp/><sp/>Methods<sp/>and<sp/>Theory,<sp/>pp.<sp/>49-50.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Computer<sp/>Science<sp/>Press,<sp/>1988.<sp/><sp/>ISBN<sp/>0-7167-8156-5.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Sedgewick,<sp/>R.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Algorithms,<sp/>p290.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Addison-Wesley,<sp/>1983.<sp/>ISBN<sp/>0-201-06672-6.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@(#)<sp/>$Id:<sp/>//poco/1.4/Foundation/src/trees.c#2<sp/>$<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>GEN_TREES_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="deflate_8h" kindref="compound">deflate.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>Constants</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_BL_BITS<sp/>7</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Bit<sp/>length<sp/>codes<sp/>must<sp/>not<sp/>exceed<sp/>MAX_BL_BITS<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>END_BLOCK<sp/>256</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>block<sp/>literal<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REP_3_6<sp/><sp/><sp/><sp/><sp/><sp/>16</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>repeat<sp/>previous<sp/>bit<sp/>length<sp/>3-6<sp/>times<sp/>(2<sp/>bits<sp/>of<sp/>repeat<sp/>count)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REPZ_3_10<sp/><sp/><sp/><sp/>17</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>repeat<sp/>a<sp/>zero<sp/>length<sp/>3-10<sp/>times<sp/><sp/>(3<sp/>bits<sp/>of<sp/>repeat<sp/>count)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REPZ_11_138<sp/><sp/>18</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>repeat<sp/>a<sp/>zero<sp/>length<sp/>11-138<sp/>times<sp/><sp/>(7<sp/>bits<sp/>of<sp/>repeat<sp/>count)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extra_lbits[<ref refid="deflate_8h_1a8dd3b78c666b6592944b2acf1706e611" kindref="member">LENGTH_CODES</ref>]<sp/></highlight><highlight class="comment">/*<sp/>extra<sp/>bits<sp/>for<sp/>each<sp/>length<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/>=<sp/>{0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extra_dbits[<ref refid="deflate_8h_1a8798a9a526623abbd88fedb0727e21aa" kindref="member">D_CODES</ref>]<sp/></highlight><highlight class="comment">/*<sp/>extra<sp/>bits<sp/>for<sp/>each<sp/>distance<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>=<sp/>{0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extra_blbits[<ref refid="deflate_8h_1a9e19158a493307d4f211cdf223da8319" kindref="member">BL_CODES</ref>]</highlight><highlight class="comment">/*<sp/>extra<sp/>bits<sp/>for<sp/>each<sp/>bit<sp/>length<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/>=<sp/>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="zutil_8h_1af3307af5922c72924a837559c801a8a4" kindref="member">uch</ref><sp/>bl_order[<ref refid="deflate_8h_1a9e19158a493307d4f211cdf223da8319" kindref="member">BL_CODES</ref>]</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/>=<sp/>{16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>lengths<sp/>of<sp/>the<sp/>bit<sp/>length<sp/>codes<sp/>are<sp/>sent<sp/>in<sp/>order<sp/>of<sp/>decreasing</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>probability,<sp/>to<sp/>avoid<sp/>transmitting<sp/>the<sp/>lengths<sp/>for<sp/>unused<sp/>bit<sp/>length<sp/>codes.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Buf_size<sp/>(8<sp/>*<sp/>2*sizeof(char))</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>bits<sp/>used<sp/>within<sp/>bi_buf.<sp/>(bi_buf<sp/>might<sp/>be<sp/>implemented<sp/>on</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>more<sp/>than<sp/>16<sp/>bits<sp/>on<sp/>some<sp/>systems.)</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>Local<sp/>data.<sp/>These<sp/>are<sp/>initialized<sp/>only<sp/>once.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DIST_CODE_LEN<sp/><sp/>512<sp/></highlight><highlight class="comment">/*<sp/>see<sp/>definition<sp/>of<sp/>array<sp/>dist_code<sp/>below<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GEN_TREES_H)<sp/>||<sp/>!defined(STDC)</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>non<sp/>ANSI<sp/>compilers<sp/>may<sp/>not<sp/>accept<sp/>trees.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/><ref refid="trees_8h_1a6768b3bbdf10808bdddd44b13349c5a2" kindref="member">static_ltree</ref>[<ref refid="deflate_8h_1a2b0cc00cc6a7d521fba8d208a1cae477" kindref="member">L_CODES</ref>+2];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>static<sp/>literal<sp/>tree.<sp/>Since<sp/>the<sp/>bit<sp/>lengths<sp/>are<sp/>imposed,<sp/>there<sp/>is<sp/>no</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>need<sp/>for<sp/>the<sp/>L_CODES<sp/>extra<sp/>codes<sp/>used<sp/>during<sp/>heap<sp/>construction.<sp/>However</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>The<sp/>codes<sp/>286<sp/>and<sp/>287<sp/>are<sp/>needed<sp/>to<sp/>build<sp/>a<sp/>canonical<sp/>tree<sp/>(see<sp/>_tr_init</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>below).</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/><ref refid="trees_8h_1a32b77d04af5dc26c5312766355386cec" kindref="member">static_dtree</ref>[<ref refid="deflate_8h_1a8798a9a526623abbd88fedb0727e21aa" kindref="member">D_CODES</ref>];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>static<sp/>distance<sp/>tree.<sp/>(Actually<sp/>a<sp/>trivial<sp/>tree<sp/>since<sp/>all<sp/>codes<sp/>use</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>5<sp/>bits.)</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><ref refid="zutil_8h_1af3307af5922c72924a837559c801a8a4" kindref="member">uch</ref><sp/><ref refid="deflate_8h_1af81d7b42325e3ddbcf2cca9436d0b310" kindref="member">_dist_code</ref>[<ref refid="trees_8c_1a368ebabef641e688c8f848e76b704500" kindref="member">DIST_CODE_LEN</ref>];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Distance<sp/>codes.<sp/>The<sp/>first<sp/>256<sp/>values<sp/>correspond<sp/>to<sp/>the<sp/>distances</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>3<sp/>..<sp/>258,<sp/>the<sp/>last<sp/>256<sp/>values<sp/>correspond<sp/>to<sp/>the<sp/>top<sp/>8<sp/>bits<sp/>of</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>the<sp/>15<sp/>bit<sp/>distances.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><ref refid="zutil_8h_1af3307af5922c72924a837559c801a8a4" kindref="member">uch</ref><sp/><ref refid="deflate_8h_1a034daec5591675c08dd7dde5a753a8da" kindref="member">_length_code</ref>[<ref refid="zutil_8h_1ab7a9188dce25dac8d3a970c01b89b0c6" kindref="member">MAX_MATCH</ref>-<ref refid="zutil_8h_1a7984ceb1ff48ac91172976b91ed43f60" kindref="member">MIN_MATCH</ref>+1];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>length<sp/>code<sp/>for<sp/>each<sp/>normalized<sp/>match<sp/>length<sp/>(0<sp/>==<sp/>MIN_MATCH)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="trees_8h_1ac443b72d29eda7b511a746eab5411199" kindref="member">base_length</ref>[<ref refid="deflate_8h_1a8dd3b78c666b6592944b2acf1706e611" kindref="member">LENGTH_CODES</ref>];</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>First<sp/>normalized<sp/>length<sp/>for<sp/>each<sp/>code<sp/>(0<sp/>=<sp/>MIN_MATCH)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="trees_8h_1a8aa132d4ec076aeec45b2fe616ce9db9" kindref="member">base_dist</ref>[<ref refid="deflate_8h_1a8798a9a526623abbd88fedb0727e21aa" kindref="member">D_CODES</ref>];</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>First<sp/>normalized<sp/>distance<sp/>for<sp/>each<sp/>code<sp/>(0<sp/>=<sp/>distance<sp/>of<sp/>1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&quot;<ref refid="trees_8h" kindref="compound">trees.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>GEN_TREES_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstatic__tree__desc__s" kindref="compound">static_tree_desc_s</ref><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*<ref refid="structstatic__tree__desc__s_1ae8933514525080b2fbb9d0afadfb2101" kindref="member">static_tree</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>static<sp/>tree<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a7c2da1a4711ea1e7cbf3174d4f5dda9b" kindref="member">intf</ref><sp/>*<ref refid="structstatic__tree__desc__s_1aee5d30249f343a17f2f7eaf551bedbe8" kindref="member">extra_bits</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>extra<sp/>bits<sp/>for<sp/>each<sp/>code<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structstatic__tree__desc__s_1a4bbcf3b9dd06ed8a571982d03bbc7f95" kindref="member">extra_base</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>base<sp/>index<sp/>for<sp/>extra_bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structstatic__tree__desc__s_1add0d96d3d8b2685e45dc174ed575687d" kindref="member">elems</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>max<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structstatic__tree__desc__s_1aa00d6f1e1a4e7ddae2b0ba306f97dba2" kindref="member">max_length</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>max<sp/>bit<sp/>length<sp/>for<sp/>the<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/>static_tree_desc<sp/><sp/>static_l_desc<sp/>=</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{<ref refid="trees_8h_1a6768b3bbdf10808bdddd44b13349c5a2" kindref="member">static_ltree</ref>,<sp/>extra_lbits,<sp/><ref refid="deflate_8h_1a3f59145500c9de746e7dc49fb98c29ef" kindref="member">LITERALS</ref>+1,<sp/><ref refid="deflate_8h_1a2b0cc00cc6a7d521fba8d208a1cae477" kindref="member">L_CODES</ref>,<sp/><ref refid="deflate_8h_1a51c241e7ad52441b8d4c1fd5f498b3b9" kindref="member">MAX_BITS</ref>};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/>static_tree_desc<sp/><sp/>static_d_desc<sp/>=</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{<ref refid="trees_8h_1a32b77d04af5dc26c5312766355386cec" kindref="member">static_dtree</ref>,<sp/>extra_dbits,<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a8798a9a526623abbd88fedb0727e21aa" kindref="member">D_CODES</ref>,<sp/><ref refid="deflate_8h_1a51c241e7ad52441b8d4c1fd5f498b3b9" kindref="member">MAX_BITS</ref>};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/>static_tree_desc<sp/><sp/>static_bl_desc<sp/>=</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*)0,<sp/>extra_blbits,<sp/>0,<sp/><sp/><sp/><ref refid="deflate_8h_1a9e19158a493307d4f211cdf223da8319" kindref="member">BL_CODES</ref>,<sp/><ref refid="trees_8c_1a8f9fea0ddde71a75c6caf59ba993ca4e" kindref="member">MAX_BL_BITS</ref>};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>Local<sp/>(static)<sp/>routines<sp/>in<sp/>this<sp/>file.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tr_static_init<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_block<sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pqdownheap<sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*tree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gen_bitlen<sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/><ref refid="structtree__desc" kindref="compound">tree_desc</ref><sp/>*desc));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gen_codes<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*tree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_code,<sp/><ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref><sp/>*bl_count));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>build_tree<sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/><ref refid="structtree__desc" kindref="compound">tree_desc</ref><sp/>*desc));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scan_tree<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*tree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_code));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send_tree<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*tree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_code));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>build_bl_tree<sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send_all_trees<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lcodes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dcodes,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blcodes));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compress_block<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*ltree,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*dtree));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>detect_data_type<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bi_reverse<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bi_windup<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bi_flush<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copy_block<sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/><ref refid="zconf_8h_1a864fa0e2e4e499038305f3276990689b" kindref="member">charf</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>header));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GEN_TREES_H</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gen_trees_header<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DEBUG</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>send_code(s,<sp/>c,<sp/>tree)<sp/>send_bits(s,<sp/>tree[c].Code,<sp/>tree[c].Len)</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Send<sp/>a<sp/>code<sp/>of<sp/>the<sp/>given<sp/>tree.<sp/>c<sp/>and<sp/>tree<sp/>must<sp/>not<sp/>have<sp/>side<sp/>effects<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>DEBUG<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>send_code(s,<sp/>c,<sp/>tree)<sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>{<sp/>if<sp/>(z_verbose&gt;2)<sp/>fprintf(stderr,&quot;\ncd<sp/>%3d<sp/>&quot;,(c));<sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>send_bits(s,<sp/>tree[c].Code,<sp/>tree[c].Len);<sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>Output<sp/>a<sp/>short<sp/>LSB<sp/>first<sp/>on<sp/>the<sp/>stream.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>IN<sp/>assertion:<sp/>there<sp/>is<sp/>enough<sp/>room<sp/>in<sp/>pendingBuf.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>put_short(s,<sp/>w)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>put_byte(s,<sp/>(uch)((w)<sp/>&amp;<sp/>0xff));<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>put_byte(s,<sp/>(uch)((ush)(w)<sp/>&gt;&gt;<sp/>8));<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>Send<sp/>a<sp/>value<sp/>on<sp/>a<sp/>given<sp/>number<sp/>of<sp/>bits.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>IN<sp/>assertion:<sp/>length<sp/>&lt;=<sp/>16<sp/>and<sp/>value<sp/>fits<sp/>in<sp/>length<sp/>bits.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s,<sp/>value,<sp/>length)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value;<sp/><sp/></highlight><highlight class="comment">/*<sp/>value<sp/>to<sp/>send<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;<sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1ae65182ff511f0b12345c20b6533f32d9" kindref="member">Tracevv</ref>((stderr,</highlight><highlight class="stringliteral">&quot;<sp/>l<sp/>%2d<sp/>v<sp/>%4x<sp/>&quot;</highlight><highlight class="normal">,<sp/>length,<sp/>value));</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(length<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>length<sp/>&lt;=<sp/>15,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;bits_sent<sp/>+=<sp/>(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)length;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>not<sp/>enough<sp/>room<sp/>in<sp/>bi_buf,<sp/>use<sp/>(valid)<sp/>bits<sp/>from<sp/>bi_buf<sp/>and</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(16<sp/>-<sp/>bi_valid)<sp/>bits<sp/>from<sp/>value,<sp/>leaving<sp/>(width<sp/>-<sp/>(16-bi_valid))</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>unused<sp/>bits<sp/>in<sp/>value.</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;bi_valid<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="trees_8c_1a0c0213b942f7535235cf515e8fe23bf9" kindref="member">Buf_size</ref><sp/>-<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bi_buf<sp/>|=<sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)value<sp/>&lt;&lt;<sp/>s-&gt;bi_valid;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1ae76cb23c4bc3d3f80e7a7917dd538c4e" kindref="member">put_short</ref>(s,<sp/>s-&gt;bi_buf);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bi_buf<sp/>=<sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)value<sp/>&gt;&gt;<sp/>(<ref refid="trees_8c_1a0c0213b942f7535235cf515e8fe23bf9" kindref="member">Buf_size</ref><sp/>-<sp/>s-&gt;bi_valid);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bi_valid<sp/>+=<sp/>length<sp/>-<sp/><ref refid="trees_8c_1a0c0213b942f7535235cf515e8fe23bf9" kindref="member">Buf_size</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bi_buf<sp/>|=<sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)value<sp/>&lt;&lt;<sp/>s-&gt;bi_valid;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bi_valid<sp/>+=<sp/>length;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!DEBUG<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>send_bits(s,<sp/>value,<sp/>length)<sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor">{<sp/>int<sp/>len<sp/>=<sp/>length;\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/>if<sp/>(s-&gt;bi_valid<sp/>&gt;<sp/>(int)Buf_size<sp/>-<sp/>len)<sp/>{\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>val<sp/>=<sp/>value;\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>s-&gt;bi_buf<sp/>|=<sp/>(ush)val<sp/>&lt;&lt;<sp/>s-&gt;bi_valid;\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>put_short(s,<sp/>s-&gt;bi_buf);\</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>s-&gt;bi_buf<sp/>=<sp/>(ush)val<sp/>&gt;&gt;<sp/>(Buf_size<sp/>-<sp/>s-&gt;bi_valid);\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>s-&gt;bi_valid<sp/>+=<sp/>len<sp/>-<sp/>Buf_size;\</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>s-&gt;bi_buf<sp/>|=<sp/>(ush)(value)<sp/>&lt;&lt;<sp/>s-&gt;bi_valid;\</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>s-&gt;bi_valid<sp/>+=<sp/>len;\</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEBUG<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>the<sp/>arguments<sp/>must<sp/>not<sp/>have<sp/>side<sp/>effects<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>the<sp/>various<sp/>&apos;constant&apos;<sp/>tables.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tr_static_init()</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GEN_TREES_H)<sp/>||<sp/>!defined(STDC)</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>static_init_done<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>iterates<sp/>over<sp/>tree<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structcode" kindref="compound">code</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>code<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dist;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref><sp/>bl_count[<ref refid="deflate_8h_1a51c241e7ad52441b8d4c1fd5f498b3b9" kindref="member">MAX_BITS</ref>+1];</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>codes<sp/>at<sp/>each<sp/>bit<sp/>length<sp/>for<sp/>an<sp/>optimal<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_init_done)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>some<sp/>embedded<sp/>targets,<sp/>global<sp/>variables<sp/>are<sp/>not<sp/>initialized:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NO_INIT_GLOBAL_POINTERS</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>static_l_desc.static_tree<sp/>=<sp/><ref refid="trees_8h_1a6768b3bbdf10808bdddd44b13349c5a2" kindref="member">static_ltree</ref>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>static_l_desc.extra_bits<sp/>=<sp/>extra_lbits;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>static_d_desc.static_tree<sp/>=<sp/><ref refid="trees_8h_1a32b77d04af5dc26c5312766355386cec" kindref="member">static_dtree</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>static_d_desc.extra_bits<sp/>=<sp/>extra_dbits;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>static_bl_desc.extra_bits<sp/>=<sp/>extra_blbits;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>mapping<sp/>length<sp/>(0..255)<sp/>-&gt;<sp/>length<sp/>code<sp/>(0..28)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(code<sp/>=<sp/>0;<sp/>code<sp/>&lt;<sp/><ref refid="deflate_8h_1a8dd3b78c666b6592944b2acf1706e611" kindref="member">LENGTH_CODES</ref>-1;<sp/>code++)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8h_1ac443b72d29eda7b511a746eab5411199" kindref="member">base_length</ref>[code]<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>(1&lt;&lt;extra_lbits[code]);<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a034daec5591675c08dd7dde5a753a8da" kindref="member">_length_code</ref>[length++]<sp/>=<sp/>(<ref refid="zutil_8h_1af3307af5922c72924a837559c801a8a4" kindref="member">uch</ref>)code;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref><sp/>(length<sp/>==<sp/>256,<sp/></highlight><highlight class="stringliteral">&quot;tr_static_init:<sp/>length<sp/>!=<sp/>256&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>the<sp/>length<sp/>255<sp/>(match<sp/>length<sp/>258)<sp/>can<sp/>be<sp/>represented</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>two<sp/>different<sp/>ways:<sp/>code<sp/>284<sp/>+<sp/>5<sp/>bits<sp/>or<sp/>code<sp/>285,<sp/>so<sp/>we</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>overwrite<sp/>length_code[255]<sp/>to<sp/>use<sp/>the<sp/>best<sp/>encoding:</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a034daec5591675c08dd7dde5a753a8da" kindref="member">_length_code</ref>[length-1]<sp/>=<sp/>(<ref refid="zutil_8h_1af3307af5922c72924a837559c801a8a4" kindref="member">uch</ref>)code;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>mapping<sp/>dist<sp/>(0..32K)<sp/>-&gt;<sp/>dist<sp/>code<sp/>(0..29)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(code<sp/>=<sp/>0<sp/>;<sp/>code<sp/>&lt;<sp/>16;<sp/>code++)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8h_1a8aa132d4ec076aeec45b2fe616ce9db9" kindref="member">base_dist</ref>[code]<sp/>=<sp/>dist;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>(1&lt;&lt;extra_dbits[code]);<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1af81d7b42325e3ddbcf2cca9436d0b310" kindref="member">_dist_code</ref>[dist++]<sp/>=<sp/>(<ref refid="zutil_8h_1af3307af5922c72924a837559c801a8a4" kindref="member">uch</ref>)code;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref><sp/>(dist<sp/>==<sp/>256,<sp/></highlight><highlight class="stringliteral">&quot;tr_static_init:<sp/>dist<sp/>!=<sp/>256&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>dist<sp/>&gt;&gt;=<sp/>7;<sp/></highlight><highlight class="comment">/*<sp/>from<sp/>now<sp/>on,<sp/>all<sp/>distances<sp/>are<sp/>divided<sp/>by<sp/>128<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>code<sp/>&lt;<sp/><ref refid="deflate_8h_1a8798a9a526623abbd88fedb0727e21aa" kindref="member">D_CODES</ref>;<sp/>code++)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8h_1a8aa132d4ec076aeec45b2fe616ce9db9" kindref="member">base_dist</ref>[code]<sp/>=<sp/>dist<sp/>&lt;&lt;<sp/>7;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>(1&lt;&lt;(extra_dbits[code]-7));<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1af81d7b42325e3ddbcf2cca9436d0b310" kindref="member">_dist_code</ref>[256<sp/>+<sp/>dist++]<sp/>=<sp/>(<ref refid="zutil_8h_1af3307af5922c72924a837559c801a8a4" kindref="member">uch</ref>)code;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref><sp/>(dist<sp/>==<sp/>256,<sp/></highlight><highlight class="stringliteral">&quot;tr_static_init:<sp/>256+dist<sp/>!=<sp/>512&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Construct<sp/>the<sp/>codes<sp/>of<sp/>the<sp/>static<sp/>literal<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bits<sp/>=<sp/>0;<sp/>bits<sp/>&lt;=<sp/><ref refid="deflate_8h_1a51c241e7ad52441b8d4c1fd5f498b3b9" kindref="member">MAX_BITS</ref>;<sp/>bits++)<sp/>bl_count[bits]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&lt;=<sp/>143)<sp/><ref refid="trees_8h_1a6768b3bbdf10808bdddd44b13349c5a2" kindref="member">static_ltree</ref>[n++].Len<sp/>=<sp/>8,<sp/>bl_count[8]++;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&lt;=<sp/>255)<sp/><ref refid="trees_8h_1a6768b3bbdf10808bdddd44b13349c5a2" kindref="member">static_ltree</ref>[n++].Len<sp/>=<sp/>9,<sp/>bl_count[9]++;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&lt;=<sp/>279)<sp/><ref refid="trees_8h_1a6768b3bbdf10808bdddd44b13349c5a2" kindref="member">static_ltree</ref>[n++].Len<sp/>=<sp/>7,<sp/>bl_count[7]++;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&lt;=<sp/>287)<sp/><ref refid="trees_8h_1a6768b3bbdf10808bdddd44b13349c5a2" kindref="member">static_ltree</ref>[n++].Len<sp/>=<sp/>8,<sp/>bl_count[8]++;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Codes<sp/>286<sp/>and<sp/>287<sp/>do<sp/>not<sp/>exist,<sp/>but<sp/>we<sp/>must<sp/>include<sp/>them<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>tree<sp/>construction<sp/>to<sp/>get<sp/>a<sp/>canonical<sp/>Huffman<sp/>tree<sp/>(longest<sp/>code</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>all<sp/>ones)</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>gen_codes((<ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*)<ref refid="trees_8h_1a6768b3bbdf10808bdddd44b13349c5a2" kindref="member">static_ltree</ref>,<sp/><ref refid="deflate_8h_1a2b0cc00cc6a7d521fba8d208a1cae477" kindref="member">L_CODES</ref>+1,<sp/>bl_count);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>static<sp/>distance<sp/>tree<sp/>is<sp/>trivial:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/><ref refid="deflate_8h_1a8798a9a526623abbd88fedb0727e21aa" kindref="member">D_CODES</ref>;<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8h_1a32b77d04af5dc26c5312766355386cec" kindref="member">static_dtree</ref>[n].Len<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8h_1a32b77d04af5dc26c5312766355386cec" kindref="member">static_dtree</ref>[n].Code<sp/>=<sp/>bi_reverse((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)n,<sp/>5);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>static_init_done<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>GEN_TREES_H</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>gen_trees_header();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="318"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(GEN_TREES_H)<sp/>||<sp/>!defined(STDC)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="319"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>Genererate<sp/>the<sp/>file<sp/>trees.h<sp/>describing<sp/>the<sp/>static<sp/>trees.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GEN_TREES_H</highlight></codeline>
<codeline lineno="325"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>DEBUG</highlight></codeline>
<codeline lineno="326"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="328"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>SEPARATOR(i,<sp/>last,<sp/>width)<sp/>\</highlight></codeline>
<codeline lineno="330"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((i)<sp/>==<sp/>(last)?<sp/>&quot;\n};\n\n&quot;<sp/>:<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="331"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((i)<sp/>%<sp/>(width)<sp/>==<sp/>(width)-1<sp/>?<sp/>&quot;,\n&quot;<sp/>:<sp/>&quot;,<sp/>&quot;))</highlight></codeline>
<codeline lineno="332"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gen_trees_header()</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*header<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;trees.h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref><sp/>(header<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>open<sp/>trees.h&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(header,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/*<sp/>header<sp/>created<sp/>automatically<sp/>with<sp/>-DGEN_TREES_H<sp/>*/\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(header,<sp/></highlight><highlight class="stringliteral">&quot;local<sp/>const<sp/>ct_data<sp/>static_ltree[L_CODES+2]<sp/>=<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="deflate_8h_1a2b0cc00cc6a7d521fba8d208a1cae477" kindref="member">L_CODES</ref>+2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(header,<sp/></highlight><highlight class="stringliteral">&quot;{{%3u},{%3u}}%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="trees_8h_1a6768b3bbdf10808bdddd44b13349c5a2" kindref="member">static_ltree</ref>[i].<ref refid="deflate_8h_1a068e76e6034d06450385bc98b69ea53e" kindref="member">Code</ref>,</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8h_1a6768b3bbdf10808bdddd44b13349c5a2" kindref="member">static_ltree</ref>[i].<ref refid="deflate_8h_1a4490e644c06783cc69ad87c121e39e94" kindref="member">Len</ref>,<sp/>SEPARATOR(i,<sp/>L_CODES+1,<sp/>5));</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(header,<sp/></highlight><highlight class="stringliteral">&quot;local<sp/>const<sp/>ct_data<sp/>static_dtree[D_CODES]<sp/>=<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="deflate_8h_1a8798a9a526623abbd88fedb0727e21aa" kindref="member">D_CODES</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(header,<sp/></highlight><highlight class="stringliteral">&quot;{{%2u},{%2u}}%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="trees_8h_1a32b77d04af5dc26c5312766355386cec" kindref="member">static_dtree</ref>[i].<ref refid="deflate_8h_1a068e76e6034d06450385bc98b69ea53e" kindref="member">Code</ref>,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8h_1a32b77d04af5dc26c5312766355386cec" kindref="member">static_dtree</ref>[i].<ref refid="deflate_8h_1a4490e644c06783cc69ad87c121e39e94" kindref="member">Len</ref>,<sp/>SEPARATOR(i,<sp/>D_CODES-1,<sp/>5));</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(header,<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>uch<sp/>ZLIB_INTERNAL<sp/>_dist_code[DIST_CODE_LEN]<sp/>=<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="trees_8c_1a368ebabef641e688c8f848e76b704500" kindref="member">DIST_CODE_LEN</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(header,<sp/></highlight><highlight class="stringliteral">&quot;%2u%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="deflate_8h_1af81d7b42325e3ddbcf2cca9436d0b310" kindref="member">_dist_code</ref>[i],</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEPARATOR(i,<sp/>DIST_CODE_LEN-1,<sp/>20));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(header,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;const<sp/>uch<sp/>ZLIB_INTERNAL<sp/>_length_code[MAX_MATCH-MIN_MATCH+1]=<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="zutil_8h_1ab7a9188dce25dac8d3a970c01b89b0c6" kindref="member">MAX_MATCH</ref>-<ref refid="zutil_8h_1a7984ceb1ff48ac91172976b91ed43f60" kindref="member">MIN_MATCH</ref>+1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(header,<sp/></highlight><highlight class="stringliteral">&quot;%2u%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="deflate_8h_1a034daec5591675c08dd7dde5a753a8da" kindref="member">_length_code</ref>[i],</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEPARATOR(i,<sp/><ref refid="zutil_8h_1ab7a9188dce25dac8d3a970c01b89b0c6" kindref="member">MAX_MATCH</ref>-MIN_MATCH,<sp/>20));</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(header,<sp/></highlight><highlight class="stringliteral">&quot;local<sp/>const<sp/>int<sp/>base_length[LENGTH_CODES]<sp/>=<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="deflate_8h_1a8dd3b78c666b6592944b2acf1706e611" kindref="member">LENGTH_CODES</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(header,<sp/></highlight><highlight class="stringliteral">&quot;%1u%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="trees_8h_1ac443b72d29eda7b511a746eab5411199" kindref="member">base_length</ref>[i],</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEPARATOR(i,<sp/>LENGTH_CODES-1,<sp/>20));</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(header,<sp/></highlight><highlight class="stringliteral">&quot;local<sp/>const<sp/>int<sp/>base_dist[D_CODES]<sp/>=<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="deflate_8h_1a8798a9a526623abbd88fedb0727e21aa" kindref="member">D_CODES</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(header,<sp/></highlight><highlight class="stringliteral">&quot;%5u%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="trees_8h_1a8aa132d4ec076aeec45b2fe616ce9db9" kindref="member">base_dist</ref>[i],</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEPARATOR(i,<sp/>D_CODES-1,<sp/>10));</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(header);</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>GEN_TREES_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="382"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>the<sp/>tree<sp/>data<sp/>structures<sp/>for<sp/>a<sp/>new<sp/>zlib<sp/>stream.</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/><ref refid="deflate_8h_1aa7c644b04c307b8f940eb1300f682575" kindref="member">_tr_init</ref>(s)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>tr_static_init();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;l_desc.dyn_tree<sp/>=<sp/>s-&gt;dyn_ltree;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;l_desc.stat_desc<sp/>=<sp/>&amp;static_l_desc;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;d_desc.dyn_tree<sp/>=<sp/>s-&gt;dyn_dtree;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;d_desc.stat_desc<sp/>=<sp/>&amp;static_d_desc;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;bl_desc.dyn_tree<sp/>=<sp/>s-&gt;bl_tree;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;bl_desc.stat_desc<sp/>=<sp/>&amp;static_bl_desc;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;bi_buf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;bi_valid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;last_eob_len<sp/>=<sp/>8;<sp/></highlight><highlight class="comment">/*<sp/>enough<sp/>lookahead<sp/>for<sp/>inflate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;compressed_len<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;bits_sent<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>first<sp/>block<sp/>of<sp/>the<sp/>first<sp/>file:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>init_block(s);</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>a<sp/>new<sp/>block.</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_block(s)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;<sp/></highlight><highlight class="comment">/*<sp/>iterates<sp/>over<sp/>tree<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>trees.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/><ref refid="deflate_8h_1a2b0cc00cc6a7d521fba8d208a1cae477" kindref="member">L_CODES</ref>;<sp/><sp/>n++)<sp/>s-&gt;<ref refid="structdeflate__state_1a38790f1c2c86d806c2e825deba4fa783" kindref="member">dyn_ltree</ref>[n].Freq<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/><ref refid="deflate_8h_1a8798a9a526623abbd88fedb0727e21aa" kindref="member">D_CODES</ref>;<sp/><sp/>n++)<sp/>s-&gt;dyn_dtree[n].Freq<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/><ref refid="deflate_8h_1a9e19158a493307d4f211cdf223da8319" kindref="member">BL_CODES</ref>;<sp/>n++)<sp/>s-&gt;bl_tree[n].Freq<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;dyn_ltree[<ref refid="trees_8c_1a1e33ae802796dae8694948b87ac62d61" kindref="member">END_BLOCK</ref>].Freq<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;opt_len<sp/>=<sp/>s-&gt;static_len<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;last_lit<sp/>=<sp/>s-&gt;matches<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SMALLEST<sp/>1</highlight></codeline>
<codeline lineno="431"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Index<sp/>within<sp/>the<sp/>heap<sp/>array<sp/>of<sp/>least<sp/>frequent<sp/>node<sp/>in<sp/>the<sp/>Huffman<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*<sp/>Remove<sp/>the<sp/>smallest<sp/>element<sp/>from<sp/>the<sp/>heap<sp/>and<sp/>recreate<sp/>the<sp/>heap<sp/>with</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/>one<sp/>less<sp/>element.<sp/>Updates<sp/>heap<sp/>and<sp/>heap_len.</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>pqremove(s,<sp/>tree,<sp/>top)<sp/>\</highlight></codeline>
<codeline lineno="439"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="440"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>top<sp/>=<sp/>s-&gt;heap[SMALLEST];<sp/>\</highlight></codeline>
<codeline lineno="441"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>s-&gt;heap[SMALLEST]<sp/>=<sp/>s-&gt;heap[s-&gt;heap_len--];<sp/>\</highlight></codeline>
<codeline lineno="442"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>pqdownheap(s,<sp/>tree,<sp/>SMALLEST);<sp/>\</highlight></codeline>
<codeline lineno="443"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="444"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*<sp/>Compares<sp/>to<sp/>subtrees,<sp/>using<sp/>the<sp/>tree<sp/>depth<sp/>as<sp/>tie<sp/>breaker<sp/>when</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*<sp/>the<sp/>subtrees<sp/>have<sp/>equal<sp/>frequency.<sp/>This<sp/>minimizes<sp/>the<sp/>worst<sp/>case<sp/>length.</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>smaller(tree,<sp/>n,<sp/>m,<sp/>depth)<sp/>\</highlight></codeline>
<codeline lineno="450"><highlight class="preprocessor"><sp/><sp/><sp/>(tree[n].Freq<sp/>&lt;<sp/>tree[m].Freq<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="451"><highlight class="preprocessor"><sp/><sp/><sp/>(tree[n].Freq<sp/>==<sp/>tree[m].Freq<sp/>&amp;&amp;<sp/>depth[n]<sp/>&lt;=<sp/>depth[m]))</highlight></codeline>
<codeline lineno="452"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/>*<sp/>Restore<sp/>the<sp/>heap<sp/>property<sp/>by<sp/>moving<sp/>down<sp/>the<sp/>tree<sp/>starting<sp/>at<sp/>node<sp/>k,</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*<sp/>exchanging<sp/>a<sp/>node<sp/>with<sp/>the<sp/>smallest<sp/>of<sp/>its<sp/>two<sp/>sons<sp/>if<sp/>necessary,<sp/>stopping</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*<sp/>when<sp/>the<sp/>heap<sp/>property<sp/>is<sp/>re-established<sp/>(each<sp/>father<sp/>smaller<sp/>than<sp/>its</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*<sp/>two<sp/>sons).</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pqdownheap(s,<sp/>tree,<sp/>k)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*tree;<sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>tree<sp/>to<sp/>restore<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>node<sp/>to<sp/>move<sp/>down<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>s-&gt;heap[k];</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>k<sp/>&lt;&lt;<sp/>1;<sp/><sp/></highlight><highlight class="comment">/*<sp/>left<sp/>son<sp/>of<sp/>k<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;=<sp/>s-&gt;heap_len)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>j<sp/>to<sp/>the<sp/>smallest<sp/>of<sp/>the<sp/>two<sp/>sons:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>s-&gt;heap_len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a78d1ce835d96eb110f23c580ad7fab7c" kindref="member">smaller</ref>(tree,<sp/>s-&gt;heap[j+1],<sp/>s-&gt;heap[j],<sp/>s-&gt;depth))<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Exit<sp/>if<sp/>v<sp/>is<sp/>smaller<sp/>than<sp/>both<sp/>sons<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="trees_8c_1a78d1ce835d96eb110f23c580ad7fab7c" kindref="member">smaller</ref>(tree,<sp/>v,<sp/>s-&gt;heap[j],<sp/>s-&gt;depth))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Exchange<sp/>v<sp/>with<sp/>the<sp/>smallest<sp/>son<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;heap[k]<sp/>=<sp/>s-&gt;heap[j];<sp/><sp/>k<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>And<sp/>continue<sp/>down<sp/>the<sp/>tree,<sp/>setting<sp/>j<sp/>to<sp/>the<sp/>left<sp/>son<sp/>of<sp/>k<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;heap[k]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/>Compute<sp/>the<sp/>optimal<sp/>bit<sp/>lengths<sp/>for<sp/>a<sp/>tree<sp/>and<sp/>update<sp/>the<sp/>total<sp/>bit<sp/>length</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/>for<sp/>the<sp/>current<sp/>block.</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*<sp/>IN<sp/>assertion:<sp/>the<sp/>fields<sp/>freq<sp/>and<sp/>dad<sp/>are<sp/>set,<sp/>heap[heap_max]<sp/>and</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>above<sp/>are<sp/>the<sp/>tree<sp/>nodes<sp/>sorted<sp/>by<sp/>increasing<sp/>frequency.</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/>OUT<sp/>assertions:<sp/>the<sp/>field<sp/>len<sp/>is<sp/>set<sp/>to<sp/>the<sp/>optimal<sp/>bit<sp/>length,<sp/>the</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>array<sp/>bl_count<sp/>contains<sp/>the<sp/>frequencies<sp/>for<sp/>each<sp/>bit<sp/>length.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>The<sp/>length<sp/>opt_len<sp/>is<sp/>updated;<sp/>static_len<sp/>is<sp/>also<sp/>updated<sp/>if<sp/>stree<sp/>is</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>not<sp/>null.</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gen_bitlen(s,<sp/>desc)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__desc" kindref="compound">tree_desc</ref><sp/>*desc;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>tree<sp/>descriptor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>desc-&gt;<ref refid="structtree__desc_1a532b4371e8e2da219cb85edc1e894643" kindref="member">dyn_tree</ref>;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_code<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>desc-&gt;<ref refid="structtree__desc_1a9c10b516bcc560f02ecba4e23e97df07" kindref="member">max_code</ref>;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*stree<sp/>=<sp/>desc-&gt;<ref refid="structtree__desc_1a7840fbd671777fa440712559a98be81d" kindref="member">stat_desc</ref>-&gt;static_tree;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a7c2da1a4711ea1e7cbf3174d4f5dda9b" kindref="member">intf</ref><sp/>*extra<sp/><sp/><sp/><sp/>=<sp/>desc-&gt;<ref refid="structtree__desc_1a7840fbd671777fa440712559a98be81d" kindref="member">stat_desc</ref>-&gt;extra_bits;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>desc-&gt;<ref refid="structtree__desc_1a7840fbd671777fa440712559a98be81d" kindref="member">stat_desc</ref>-&gt;extra_base;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_length<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>desc-&gt;<ref refid="structtree__desc_1a7840fbd671777fa440712559a98be81d" kindref="member">stat_desc</ref>-&gt;max_length;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>heap<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>m;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>iterate<sp/>over<sp/>the<sp/>tree<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xbits;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>extra<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref><sp/>f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>frequency<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>overflow<sp/>=<sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>elements<sp/>with<sp/>bit<sp/>length<sp/>too<sp/>large<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bits<sp/>=<sp/>0;<sp/>bits<sp/>&lt;=<sp/><ref refid="deflate_8h_1a51c241e7ad52441b8d4c1fd5f498b3b9" kindref="member">MAX_BITS</ref>;<sp/>bits++)<sp/>s-&gt;bl_count[bits]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>a<sp/>first<sp/>pass,<sp/>compute<sp/>the<sp/>optimal<sp/>bit<sp/>lengths<sp/>(which<sp/>may</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>overflow<sp/>in<sp/>the<sp/>case<sp/>of<sp/>the<sp/>bit<sp/>length<sp/>tree).</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>tree[s-&gt;heap[s-&gt;heap_max]].Len<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>root<sp/>of<sp/>the<sp/>heap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(h<sp/>=<sp/>s-&gt;heap_max+1;<sp/>h<sp/>&lt;<sp/><ref refid="deflate_8h_1a1b45302695680930829cac31d65e41e1" kindref="member">HEAP_SIZE</ref>;<sp/>h++)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>s-&gt;heap[h];</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>tree[tree[n].Dad].Len<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>&gt;<sp/>max_length)<sp/>bits<sp/>=<sp/>max_length,<sp/>overflow++;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree[n].Len<sp/>=<sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)bits;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>overwrite<sp/>tree[n].Dad<sp/>which<sp/>is<sp/>no<sp/>longer<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>max_code)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>a<sp/>leaf<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bl_count[bits]++;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xbits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>base)<sp/>xbits<sp/>=<sp/>extra[n-base];</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>tree[n].Freq;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;opt_len<sp/>+=<sp/>(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)f<sp/>*<sp/>(bits<sp/>+<sp/>xbits);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stree)<sp/>s-&gt;static_len<sp/>+=<sp/>(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)f<sp/>*<sp/>(stree[n].<ref refid="deflate_8h_1a4490e644c06783cc69ad87c121e39e94" kindref="member">Len</ref><sp/>+<sp/>xbits);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overflow<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a93bbe97269cf8304b452a4d472dba191" kindref="member">Trace</ref>((stderr,</highlight><highlight class="stringliteral">&quot;\nbit<sp/>length<sp/>overflow\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>happens<sp/>for<sp/>example<sp/>on<sp/>obj2<sp/>and<sp/>pic<sp/>of<sp/>the<sp/>Calgary<sp/>corpus<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>first<sp/>bit<sp/>length<sp/>which<sp/>could<sp/>increase:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>max_length-1;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s-&gt;bl_count[bits]<sp/>==<sp/>0)<sp/>bits--;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bl_count[bits]--;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>move<sp/>one<sp/>leaf<sp/>down<sp/>the<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bl_count[bits+1]<sp/>+=<sp/>2;<sp/></highlight><highlight class="comment">/*<sp/>move<sp/>one<sp/>overflow<sp/>item<sp/>as<sp/>its<sp/>brother<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bl_count[max_length]--;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>brother<sp/>of<sp/>the<sp/>overflow<sp/>item<sp/>also<sp/>moves<sp/>one<sp/>step<sp/>up,</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>but<sp/>this<sp/>does<sp/>not<sp/>affect<sp/>bl_count[max_length]</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overflow<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(overflow<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>recompute<sp/>all<sp/>bit<sp/>lengths,<sp/>scanning<sp/>in<sp/>increasing<sp/>frequency.</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>h<sp/>is<sp/>still<sp/>equal<sp/>to<sp/>HEAP_SIZE.<sp/>(It<sp/>is<sp/>simpler<sp/>to<sp/>reconstruct<sp/>all</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>lengths<sp/>instead<sp/>of<sp/>fixing<sp/>only<sp/>the<sp/>wrong<sp/>ones.<sp/>This<sp/>idea<sp/>is<sp/>taken</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>from<sp/>&apos;ar&apos;<sp/>written<sp/>by<sp/>Haruhiko<sp/>Okumura.)</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bits<sp/>=<sp/>max_length;<sp/>bits<sp/>!=<sp/>0;<sp/>bits--)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>s-&gt;bl_count[bits];</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>s-&gt;heap[--h];</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;<sp/>max_code)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)<sp/>tree[m].<ref refid="deflate_8h_1a4490e644c06783cc69ad87c121e39e94" kindref="member">Len</ref><sp/>!=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)<sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a93bbe97269cf8304b452a4d472dba191" kindref="member">Trace</ref>((stderr,</highlight><highlight class="stringliteral">&quot;code<sp/>%d<sp/>bits<sp/>%d-&gt;%d\n&quot;</highlight><highlight class="normal">,<sp/>m,<sp/>tree[m].<ref refid="deflate_8h_1a4490e644c06783cc69ad87c121e39e94" kindref="member">Len</ref>,<sp/>bits));</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;opt_len<sp/>+=<sp/>((long)bits<sp/>-<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)tree[m].Len)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)tree[m].Freq;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree[m].Len<sp/>=<sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)bits;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n--;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/>*<sp/>Generate<sp/>the<sp/>codes<sp/>for<sp/>a<sp/>given<sp/>tree<sp/>and<sp/>bit<sp/>counts<sp/>(which<sp/>need<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/>*<sp/>optimal).</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>*<sp/>IN<sp/>assertion:<sp/>the<sp/>array<sp/>bl_count<sp/>contains<sp/>the<sp/>bit<sp/>length<sp/>statistics<sp/>for</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/>*<sp/>the<sp/>given<sp/>tree<sp/>and<sp/>the<sp/>field<sp/>len<sp/>is<sp/>set<sp/>for<sp/>all<sp/>tree<sp/>elements.</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*<sp/>OUT<sp/>assertion:<sp/>the<sp/>field<sp/>code<sp/>is<sp/>set<sp/>for<sp/>all<sp/>tree<sp/>elements<sp/>of<sp/>non</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>zero<sp/>code<sp/>length.</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gen_codes<sp/>(tree,<sp/>max_code,<sp/>bl_count)</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*tree;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>tree<sp/>to<sp/>decorate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_code;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>largest<sp/>code<sp/>with<sp/>non<sp/>zero<sp/>frequency<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1acdf0e99b2ed932e64de21cfc46b8f89e" kindref="member">ushf</ref><sp/>*bl_count;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>codes<sp/>at<sp/>each<sp/>bit<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref><sp/>next_code[<ref refid="deflate_8h_1a51c241e7ad52441b8d4c1fd5f498b3b9" kindref="member">MAX_BITS</ref>+1];<sp/></highlight><highlight class="comment">/*<sp/>next<sp/>code<sp/>value<sp/>for<sp/>each<sp/>bit<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref><sp/>code<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>running<sp/>code<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>code<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>distribution<sp/>counts<sp/>are<sp/>first<sp/>used<sp/>to<sp/>generate<sp/>the<sp/>code<sp/>values</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>without<sp/>bit<sp/>reversal.</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bits<sp/>=<sp/>1;<sp/>bits<sp/>&lt;=<sp/><ref refid="deflate_8h_1a51c241e7ad52441b8d4c1fd5f498b3b9" kindref="member">MAX_BITS</ref>;<sp/>bits++)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_code[bits]<sp/>=<sp/>code<sp/>=<sp/>(code<sp/>+<sp/>bl_count[bits-1])<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>that<sp/>the<sp/>bit<sp/>counts<sp/>in<sp/>bl_count<sp/>are<sp/>consistent.<sp/>The<sp/>last<sp/>code</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>must<sp/>be<sp/>all<sp/>ones.</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref><sp/>(code<sp/>+<sp/>bl_count[<ref refid="deflate_8h_1a51c241e7ad52441b8d4c1fd5f498b3b9" kindref="member">MAX_BITS</ref>]-1<sp/>==<sp/>(1&lt;&lt;<ref refid="deflate_8h_1a51c241e7ad52441b8d4c1fd5f498b3b9" kindref="member">MAX_BITS</ref>)-1,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inconsistent<sp/>bit<sp/>counts&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,</highlight><highlight class="stringliteral">&quot;\ngen_codes:<sp/>max_code<sp/>%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>max_code));</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/><sp/>n<sp/>&lt;=<sp/>max_code;<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>tree[n].Len;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>reverse<sp/>the<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree[n].Code<sp/>=<sp/>bi_reverse(next_code[len]++,<sp/>len);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a54a66ee51c61d67607b64678b055af6b" kindref="member">Tracecv</ref>(tree<sp/>!=<sp/><ref refid="trees_8h_1a6768b3bbdf10808bdddd44b13349c5a2" kindref="member">static_ltree</ref>,<sp/>(stderr,</highlight><highlight class="stringliteral">&quot;\nn<sp/>%3d<sp/>%c<sp/>l<sp/>%2d<sp/>c<sp/>%4x<sp/>(%x)<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n,<sp/>(isgraph(n)<sp/>?<sp/>n<sp/>:<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">),<sp/>len,<sp/>tree[n].<ref refid="deflate_8h_1a068e76e6034d06450385bc98b69ea53e" kindref="member">Code</ref>,<sp/>next_code[len]-1));</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/>*<sp/>Construct<sp/>one<sp/>Huffman<sp/>tree<sp/>and<sp/>assigns<sp/>the<sp/>code<sp/>bit<sp/>strings<sp/>and<sp/>lengths.</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/>*<sp/>Update<sp/>the<sp/>total<sp/>bit<sp/>length<sp/>for<sp/>the<sp/>current<sp/>block.</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/>*<sp/>IN<sp/>assertion:<sp/>the<sp/>field<sp/>freq<sp/>is<sp/>set<sp/>for<sp/>all<sp/>tree<sp/>elements.</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/>*<sp/>OUT<sp/>assertions:<sp/>the<sp/>fields<sp/>len<sp/>and<sp/>code<sp/>are<sp/>set<sp/>to<sp/>the<sp/>optimal<sp/>bit<sp/>length</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>and<sp/>corresponding<sp/>code.<sp/>The<sp/>length<sp/>opt_len<sp/>is<sp/>updated;<sp/>static_len<sp/>is</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>also<sp/>updated<sp/>if<sp/>stree<sp/>is<sp/>not<sp/>null.<sp/>The<sp/>field<sp/>max_code<sp/>is<sp/>set.</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>build_tree(s,<sp/>desc)</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__desc" kindref="compound">tree_desc</ref><sp/>*desc;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>tree<sp/>descriptor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal">{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>desc-&gt;<ref refid="structtree__desc_1a532b4371e8e2da219cb85edc1e894643" kindref="member">dyn_tree</ref>;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*stree<sp/><sp/>=<sp/>desc-&gt;<ref refid="structtree__desc_1a7840fbd671777fa440712559a98be81d" kindref="member">stat_desc</ref>-&gt;static_tree;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elems<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>desc-&gt;<ref refid="structtree__desc_1a7840fbd671777fa440712559a98be81d" kindref="member">stat_desc</ref>-&gt;elems;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>m;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>iterate<sp/>over<sp/>heap<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_code<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">/*<sp/>largest<sp/>code<sp/>with<sp/>non<sp/>zero<sp/>frequency<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>new<sp/>node<sp/>being<sp/>created<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Construct<sp/>the<sp/>initial<sp/>heap,<sp/>with<sp/>least<sp/>frequent<sp/>element<sp/>in</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>heap[SMALLEST].<sp/>The<sp/>sons<sp/>of<sp/>heap[n]<sp/>are<sp/>heap[2*n]<sp/>and<sp/>heap[2*n+1].</highlight></codeline>
<codeline lineno="636"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>heap[0]<sp/>is<sp/>not<sp/>used.</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;heap_len<sp/>=<sp/>0,<sp/>s-&gt;heap_max<sp/>=<sp/><ref refid="deflate_8h_1a1b45302695680930829cac31d65e41e1" kindref="member">HEAP_SIZE</ref>;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>elems;<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tree[n].<ref refid="deflate_8h_1a8bab2775fa423836b05f407d2f8bf6e2" kindref="member">Freq</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;heap[++(s-&gt;heap_len)]<sp/>=<sp/>max_code<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;depth[n]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree[n].Len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>pkzip<sp/>format<sp/>requires<sp/>that<sp/>at<sp/>least<sp/>one<sp/>distance<sp/>code<sp/>exists,</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>that<sp/>at<sp/>least<sp/>one<sp/>bit<sp/>should<sp/>be<sp/>sent<sp/>even<sp/>if<sp/>there<sp/>is<sp/>only<sp/>one</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>possible<sp/>code.<sp/>So<sp/>to<sp/>avoid<sp/>special<sp/>checks<sp/>later<sp/>on<sp/>we<sp/>force<sp/>at<sp/>least</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>two<sp/>codes<sp/>of<sp/>non<sp/>zero<sp/>frequency.</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s-&gt;heap_len<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>s-&gt;heap[++(s-&gt;heap_len)]<sp/>=<sp/>(max_code<sp/>&lt;<sp/>2<sp/>?<sp/>++max_code<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree[node].Freq<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;depth[node]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;opt_len--;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stree)<sp/>s-&gt;static_len<sp/>-=<sp/>stree[node].Len;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>node<sp/>is<sp/>0<sp/>or<sp/>1<sp/>so<sp/>it<sp/>does<sp/>not<sp/>have<sp/>extra<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>desc-&gt;<ref refid="structtree__desc_1a9c10b516bcc560f02ecba4e23e97df07" kindref="member">max_code</ref><sp/>=<sp/>max_code;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>elements<sp/>heap[heap_len/2+1<sp/>..<sp/>heap_len]<sp/>are<sp/>leaves<sp/>of<sp/>the<sp/>tree,</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>establish<sp/>sub-heaps<sp/>of<sp/>increasing<sp/>lengths:</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>s-&gt;heap_len/2;<sp/>n<sp/>&gt;=<sp/>1;<sp/>n--)<sp/>pqdownheap(s,<sp/>tree,<sp/>n);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Construct<sp/>the<sp/>Huffman<sp/>tree<sp/>by<sp/>repeatedly<sp/>combining<sp/>the<sp/>least<sp/>two</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>frequent<sp/>nodes.</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>elems;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>internal<sp/>node<sp/>of<sp/>the<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1abf2ba789ae874d21ce278885758c4dcc" kindref="member">pqremove</ref>(s,<sp/>tree,<sp/>n);<sp/><sp/></highlight><highlight class="comment">/*<sp/>n<sp/>=<sp/>node<sp/>of<sp/>least<sp/>frequency<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>s-&gt;heap[<ref refid="trees_8c_1ad14f32cbc4e0d9dfc99f6a3897ee4607" kindref="member">SMALLEST</ref>];<sp/></highlight><highlight class="comment">/*<sp/>m<sp/>=<sp/>node<sp/>of<sp/>next<sp/>least<sp/>frequency<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;heap[--(s-&gt;heap_max)]<sp/>=<sp/>n;<sp/></highlight><highlight class="comment">/*<sp/>keep<sp/>the<sp/>nodes<sp/>sorted<sp/>by<sp/>frequency<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;heap[--(s-&gt;heap_max)]<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>new<sp/>node<sp/>father<sp/>of<sp/>n<sp/>and<sp/>m<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree[node].Freq<sp/>=<sp/>tree[n].Freq<sp/>+<sp/>tree[m].Freq;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;depth[node]<sp/>=<sp/>(<ref refid="zutil_8h_1af3307af5922c72924a837559c801a8a4" kindref="member">uch</ref>)((s-&gt;depth[n]<sp/>&gt;=<sp/>s-&gt;depth[m]<sp/>?</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;depth[n]<sp/>:<sp/>s-&gt;depth[m])<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree[n].Dad<sp/>=<sp/>tree[m].Dad<sp/>=<sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)node;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DUMP_BL_TREE</highlight></codeline>
<codeline lineno="685"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tree<sp/>==<sp/>s-&gt;bl_tree)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;\nnode<sp/>%d(%d),<sp/>sons<sp/>%d(%d)<sp/>%d(%d)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node,<sp/>tree[node].<ref refid="deflate_8h_1a8bab2775fa423836b05f407d2f8bf6e2" kindref="member">Freq</ref>,<sp/>n,<sp/>tree[n].Freq,<sp/>m,<sp/>tree[m].Freq);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="690"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>insert<sp/>the<sp/>new<sp/>node<sp/>in<sp/>the<sp/>heap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;heap[<ref refid="trees_8c_1ad14f32cbc4e0d9dfc99f6a3897ee4607" kindref="member">SMALLEST</ref>]<sp/>=<sp/>node++;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pqdownheap(s,<sp/>tree,<sp/><ref refid="trees_8c_1ad14f32cbc4e0d9dfc99f6a3897ee4607" kindref="member">SMALLEST</ref>);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s-&gt;heap_len<sp/>&gt;=<sp/>2);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;heap[--(s-&gt;heap_max)]<sp/>=<sp/>s-&gt;heap[<ref refid="trees_8c_1ad14f32cbc4e0d9dfc99f6a3897ee4607" kindref="member">SMALLEST</ref>];</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>At<sp/>this<sp/>point,<sp/>the<sp/>fields<sp/>freq<sp/>and<sp/>dad<sp/>are<sp/>set.<sp/>We<sp/>can<sp/>now</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>generate<sp/>the<sp/>bit<sp/>lengths.</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>gen_bitlen(s,<sp/>(<ref refid="structtree__desc" kindref="compound">tree_desc</ref><sp/>*)desc);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>field<sp/>len<sp/>is<sp/>now<sp/>set,<sp/>we<sp/>can<sp/>generate<sp/>the<sp/>bit<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>gen_codes<sp/>((<ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*)tree,<sp/>max_code,<sp/>s-&gt;bl_count);</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*<sp/>Scan<sp/>a<sp/>literal<sp/>or<sp/>distance<sp/>tree<sp/>to<sp/>determine<sp/>the<sp/>frequencies<sp/>of<sp/>the<sp/>codes</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>bit<sp/>length<sp/>tree.</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scan_tree<sp/>(s,<sp/>tree,<sp/>max_code)</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*tree;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>tree<sp/>to<sp/>be<sp/>scanned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_code;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>its<sp/>largest<sp/>code<sp/>of<sp/>non<sp/>zero<sp/>frequency<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>iterates<sp/>over<sp/>all<sp/>tree<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prevlen<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>last<sp/>emitted<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curlen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>of<sp/>current<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextlen<sp/>=<sp/>tree[0].Len;<sp/></highlight><highlight class="comment">/*<sp/>length<sp/>of<sp/>next<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>repeat<sp/>count<sp/>of<sp/>the<sp/>current<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_count<sp/>=<sp/>7;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>max<sp/>repeat<sp/>count<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_count<sp/>=<sp/>4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>min<sp/>repeat<sp/>count<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextlen<sp/>==<sp/>0)<sp/>max_count<sp/>=<sp/>138,<sp/>min_count<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>tree[max_code+1].Len<sp/>=<sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)0xffff;<sp/></highlight><highlight class="comment">/*<sp/>guard<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;=<sp/>max_code;<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curlen<sp/>=<sp/>nextlen;<sp/>nextlen<sp/>=<sp/>tree[n+1].Len;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++count<sp/>&lt;<sp/>max_count<sp/>&amp;&amp;<sp/>curlen<sp/>==<sp/>nextlen)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&lt;<sp/>min_count)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bl_tree[curlen].Freq<sp/>+=<sp/>count;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curlen<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curlen<sp/>!=<sp/>prevlen)<sp/>s-&gt;bl_tree[curlen].Freq++;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bl_tree[<ref refid="trees_8c_1a5d39bc5068c496733ec81b9d5543db40" kindref="member">REP_3_6</ref>].Freq++;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&lt;=<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bl_tree[<ref refid="trees_8c_1a39f77126525d41c0155506e942365da8" kindref="member">REPZ_3_10</ref>].Freq++;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bl_tree[<ref refid="trees_8c_1a350267bb8ca6269fac9ba06057336788" kindref="member">REPZ_11_138</ref>].Freq++;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;<sp/>prevlen<sp/>=<sp/>curlen;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextlen<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_count<sp/>=<sp/>138,<sp/>min_count<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curlen<sp/>==<sp/>nextlen)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_count<sp/>=<sp/>6,<sp/>min_count<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_count<sp/>=<sp/>7,<sp/>min_count<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*<sp/>Send<sp/>a<sp/>literal<sp/>or<sp/>distance<sp/>tree<sp/>in<sp/>compressed<sp/>form,<sp/>using<sp/>the<sp/>codes<sp/>in</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*<sp/>bl_tree.</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send_tree<sp/>(s,<sp/>tree,<sp/>max_code)</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*tree;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>tree<sp/>to<sp/>be<sp/>scanned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_code;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>its<sp/>largest<sp/>code<sp/>of<sp/>non<sp/>zero<sp/>frequency<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>iterates<sp/>over<sp/>all<sp/>tree<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prevlen<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>last<sp/>emitted<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curlen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>of<sp/>current<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextlen<sp/>=<sp/>tree[0].Len;<sp/></highlight><highlight class="comment">/*<sp/>length<sp/>of<sp/>next<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>repeat<sp/>count<sp/>of<sp/>the<sp/>current<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_count<sp/>=<sp/>7;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>max<sp/>repeat<sp/>count<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_count<sp/>=<sp/>4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>min<sp/>repeat<sp/>count<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tree[max_code+1].Len<sp/>=<sp/>-1;<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>guard<sp/>already<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextlen<sp/>==<sp/>0)<sp/>max_count<sp/>=<sp/>138,<sp/>min_count<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;=<sp/>max_code;<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curlen<sp/>=<sp/>nextlen;<sp/>nextlen<sp/>=<sp/>tree[n+1].Len;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++count<sp/>&lt;<sp/>max_count<sp/>&amp;&amp;<sp/>curlen<sp/>==<sp/>nextlen)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&lt;<sp/>min_count)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{<sp/><ref refid="trees_8c_1a46e5de3915e644d07a6ff571e7db7bfa" kindref="member">send_code</ref>(s,<sp/>curlen,<sp/>s-&gt;bl_tree);<sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--count<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curlen<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curlen<sp/>!=<sp/>prevlen)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a46e5de3915e644d07a6ff571e7db7bfa" kindref="member">send_code</ref>(s,<sp/>curlen,<sp/>s-&gt;bl_tree);<sp/>count--;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(count<sp/>&gt;=<sp/>3<sp/>&amp;&amp;<sp/>count<sp/>&lt;=<sp/>6,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>3_6?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a46e5de3915e644d07a6ff571e7db7bfa" kindref="member">send_code</ref>(s,<sp/><ref refid="trees_8c_1a5d39bc5068c496733ec81b9d5543db40" kindref="member">REP_3_6</ref>,<sp/>s-&gt;bl_tree);<sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s,<sp/>count-3,<sp/>2);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&lt;=<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a46e5de3915e644d07a6ff571e7db7bfa" kindref="member">send_code</ref>(s,<sp/><ref refid="trees_8c_1a39f77126525d41c0155506e942365da8" kindref="member">REPZ_3_10</ref>,<sp/>s-&gt;bl_tree);<sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s,<sp/>count-3,<sp/>3);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a46e5de3915e644d07a6ff571e7db7bfa" kindref="member">send_code</ref>(s,<sp/><ref refid="trees_8c_1a350267bb8ca6269fac9ba06057336788" kindref="member">REPZ_11_138</ref>,<sp/>s-&gt;bl_tree);<sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s,<sp/>count-11,<sp/>7);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;<sp/>prevlen<sp/>=<sp/>curlen;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextlen<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_count<sp/>=<sp/>138,<sp/>min_count<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curlen<sp/>==<sp/>nextlen)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_count<sp/>=<sp/>6,<sp/>min_count<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_count<sp/>=<sp/>7,<sp/>min_count<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*<sp/>Construct<sp/>the<sp/>Huffman<sp/>tree<sp/>for<sp/>the<sp/>bit<sp/>lengths<sp/>and<sp/>return<sp/>the<sp/>index<sp/>in</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*<sp/>bl_order<sp/>of<sp/>the<sp/>last<sp/>bit<sp/>length<sp/>code<sp/>to<sp/>send.</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>build_bl_tree(s)</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="809"><highlight class="normal">{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_blindex;<sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>of<sp/>last<sp/>bit<sp/>length<sp/>code<sp/>of<sp/>non<sp/>zero<sp/>freq<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Determine<sp/>the<sp/>bit<sp/>length<sp/>frequencies<sp/>for<sp/>literal<sp/>and<sp/>distance<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>scan_tree(s,<sp/>(<ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*)s-&gt;dyn_ltree,<sp/>s-&gt;l_desc.max_code);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>scan_tree(s,<sp/>(<ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*)s-&gt;dyn_dtree,<sp/>s-&gt;d_desc.max_code);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Build<sp/>the<sp/>bit<sp/>length<sp/>tree:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>build_tree(s,<sp/>(<ref refid="structtree__desc" kindref="compound">tree_desc</ref><sp/>*)(&amp;(s-&gt;bl_desc)));</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>opt_len<sp/>now<sp/>includes<sp/>the<sp/>length<sp/>of<sp/>the<sp/>tree<sp/>representations,<sp/>except</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>lengths<sp/>of<sp/>the<sp/>bit<sp/>lengths<sp/>codes<sp/>and<sp/>the<sp/>5+5+4<sp/>bits<sp/>for<sp/>the<sp/>counts.</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Determine<sp/>the<sp/>number<sp/>of<sp/>bit<sp/>length<sp/>codes<sp/>to<sp/>send.<sp/>The<sp/>pkzip<sp/>format</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>requires<sp/>that<sp/>at<sp/>least<sp/>4<sp/>bit<sp/>length<sp/>codes<sp/>be<sp/>sent.<sp/>(appnote.txt<sp/>says</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>3<sp/>but<sp/>the<sp/>actual<sp/>value<sp/>used<sp/>is<sp/>4.)</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(max_blindex<sp/>=<sp/><ref refid="deflate_8h_1a9e19158a493307d4f211cdf223da8319" kindref="member">BL_CODES</ref>-1;<sp/>max_blindex<sp/>&gt;=<sp/>3;<sp/>max_blindex--)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;bl_tree[bl_order[max_blindex]].Len<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>opt_len<sp/>to<sp/>include<sp/>the<sp/>bit<sp/>length<sp/>tree<sp/>and<sp/>counts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;opt_len<sp/>+=<sp/>3*(max_blindex+1)<sp/>+<sp/>5+5+4;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;\ndyn<sp/>trees:<sp/>dyn<sp/>%ld,<sp/>stat<sp/>%ld&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;opt_len,<sp/>s-&gt;static_len));</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_blindex;</highlight></codeline>
<codeline lineno="835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/>*<sp/>Send<sp/>the<sp/>header<sp/>for<sp/>a<sp/>block<sp/>using<sp/>dynamic<sp/>Huffman<sp/>trees:<sp/>the<sp/>counts,<sp/>the</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/>*<sp/>lengths<sp/>of<sp/>the<sp/>bit<sp/>length<sp/>codes,<sp/>the<sp/>literal<sp/>tree<sp/>and<sp/>the<sp/>distance<sp/>tree.</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/>*<sp/>IN<sp/>assertion:<sp/>lcodes<sp/>&gt;=<sp/>257,<sp/>dcodes<sp/>&gt;=<sp/>1,<sp/>blcodes<sp/>&gt;=<sp/>4.</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send_all_trees(s,<sp/>lcodes,<sp/>dcodes,<sp/>blcodes)</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lcodes,<sp/>dcodes,<sp/>blcodes;<sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>codes<sp/>for<sp/>each<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal">{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>in<sp/>bl_order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref><sp/>(lcodes<sp/>&gt;=<sp/>257<sp/>&amp;&amp;<sp/>dcodes<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>blcodes<sp/>&gt;=<sp/>4,<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>enough<sp/>codes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref><sp/>(lcodes<sp/>&lt;=<sp/>L_CODES<sp/>&amp;&amp;<sp/>dcodes<sp/>&lt;=<sp/>D_CODES<sp/>&amp;&amp;<sp/>blcodes<sp/>&lt;=<sp/><ref refid="deflate_8h_1a9e19158a493307d4f211cdf223da8319" kindref="member">BL_CODES</ref>,</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;too<sp/>many<sp/>codes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;\nbl<sp/>counts:<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s,<sp/>lcodes-257,<sp/>5);<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>+255<sp/>as<sp/>stated<sp/>in<sp/>appnote.txt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s,<sp/>dcodes-1,<sp/><sp/><sp/>5);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s,<sp/>blcodes-4,<sp/><sp/>4);<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>-3<sp/>as<sp/>stated<sp/>in<sp/>appnote.txt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rank<sp/>=<sp/>0;<sp/>rank<sp/>&lt;<sp/>blcodes;<sp/>rank++)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;\nbl<sp/>code<sp/>%2d<sp/>&quot;</highlight><highlight class="normal">,<sp/>bl_order[rank]));</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s,<sp/>s-&gt;bl_tree[bl_order[rank]].Len,<sp/>3);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;\nbl<sp/>tree:<sp/>sent<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>s-&gt;bits_sent));</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>send_tree(s,<sp/>(<ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*)s-&gt;dyn_ltree,<sp/>lcodes-1);<sp/></highlight><highlight class="comment">/*<sp/>literal<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;\nlit<sp/>tree:<sp/>sent<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>s-&gt;bits_sent));</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>send_tree(s,<sp/>(<ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*)s-&gt;dyn_dtree,<sp/>dcodes-1);<sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;\ndist<sp/>tree:<sp/>sent<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>s-&gt;bits_sent));</highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/>*<sp/>Send<sp/>a<sp/>stored<sp/>block</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/><ref refid="deflate_8h_1ab65c8957ea36ee7dea4ae237d89e69c2" kindref="member">_tr_stored_block</ref>(s,<sp/>buf,<sp/>stored_len,<sp/>last)</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a864fa0e2e4e499038305f3276990689b" kindref="member">charf</ref><sp/>*buf;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>input<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref><sp/>stored_len;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>of<sp/>input<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>one<sp/>if<sp/>this<sp/>is<sp/>the<sp/>last<sp/>block<sp/>for<sp/>a<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal">{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s,<sp/>(<ref refid="zutil_8h_1a9f650bc9c1fbd9499098e3a70d295b8a" kindref="member">STORED_BLOCK</ref>&lt;&lt;1)+last,<sp/>3);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>send<sp/>block<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="879"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;compressed_len<sp/>=<sp/>(s-&gt;compressed_len<sp/>+<sp/>3<sp/>+<sp/>7)<sp/>&amp;<sp/>(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)~7L;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;compressed_len<sp/>+=<sp/>(stored_len<sp/>+<sp/>4)<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="882"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>copy_block(s,<sp/>buf,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)stored_len,<sp/>1);<sp/></highlight><highlight class="comment">/*<sp/>with<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/>*<sp/>Send<sp/>one<sp/>empty<sp/>static<sp/>block<sp/>to<sp/>give<sp/>enough<sp/>lookahead<sp/>for<sp/>inflate.</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/>*<sp/>This<sp/>takes<sp/>10<sp/>bits,<sp/>of<sp/>which<sp/>7<sp/>may<sp/>remain<sp/>in<sp/>the<sp/>bit<sp/>buffer.</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/>*<sp/>The<sp/>current<sp/>inflate<sp/>code<sp/>requires<sp/>9<sp/>bits<sp/>of<sp/>lookahead.<sp/>If<sp/>the</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/>*<sp/>last<sp/>two<sp/>codes<sp/>for<sp/>the<sp/>previous<sp/>block<sp/>(real<sp/>code<sp/>plus<sp/>EOB)<sp/>were<sp/>coded</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/>*<sp/>on<sp/>5<sp/>bits<sp/>or<sp/>less,<sp/>inflate<sp/>may<sp/>have<sp/>only<sp/>5+3<sp/>bits<sp/>of<sp/>lookahead<sp/>to<sp/>decode</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/>*<sp/>the<sp/>last<sp/>real<sp/>code.<sp/>In<sp/>this<sp/>case<sp/>we<sp/>send<sp/>two<sp/>empty<sp/>static<sp/>blocks<sp/>instead</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/>*<sp/>of<sp/>one.<sp/>(There<sp/>are<sp/>no<sp/>problems<sp/>if<sp/>the<sp/>previous<sp/>block<sp/>is<sp/>stored<sp/>or<sp/>fixed.)</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/>*<sp/>To<sp/>simplify<sp/>the<sp/>code,<sp/>we<sp/>assume<sp/>the<sp/>worst<sp/>case<sp/>of<sp/>last<sp/>real<sp/>code<sp/>encoded</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/>*<sp/>on<sp/>one<sp/>bit<sp/>only.</highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/><ref refid="deflate_8h_1aaa5b2cba523b97783c33e48182e08ce5" kindref="member">_tr_align</ref>(s)</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="898"><highlight class="normal">{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s,<sp/><ref refid="zutil_8h_1a0f63a9090acfe4f653f117b638b289d1" kindref="member">STATIC_TREES</ref>&lt;&lt;1,<sp/>3);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a46e5de3915e644d07a6ff571e7db7bfa" kindref="member">send_code</ref>(s,<sp/><ref refid="trees_8c_1a1e33ae802796dae8694948b87ac62d61" kindref="member">END_BLOCK</ref>,<sp/><ref refid="trees_8h_1a6768b3bbdf10808bdddd44b13349c5a2" kindref="member">static_ltree</ref>);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="902"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;compressed_len<sp/>+=<sp/>10L;<sp/></highlight><highlight class="comment">/*<sp/>3<sp/>for<sp/>block<sp/>type,<sp/>7<sp/>for<sp/>EOB<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="904"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>bi_flush(s);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Of<sp/>the<sp/>10<sp/>bits<sp/>for<sp/>the<sp/>empty<sp/>block,<sp/>we<sp/>have<sp/>already<sp/>sent</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(10<sp/>-<sp/>bi_valid)<sp/>bits.<sp/>The<sp/>lookahead<sp/>for<sp/>the<sp/>last<sp/>real<sp/>code<sp/>(before</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>EOB<sp/>of<sp/>the<sp/>previous<sp/>block)<sp/>was<sp/>thus<sp/>at<sp/>least<sp/>one<sp/>plus<sp/>the<sp/>length</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>EOB<sp/>plus<sp/>what<sp/>we<sp/>have<sp/>just<sp/>sent<sp/>of<sp/>the<sp/>empty<sp/>static<sp/>block.</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(1<sp/>+<sp/>s-&gt;last_eob_len<sp/>+<sp/>10<sp/>-<sp/>s-&gt;bi_valid<sp/>&lt;<sp/>9)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s,<sp/><ref refid="zutil_8h_1a0f63a9090acfe4f653f117b638b289d1" kindref="member">STATIC_TREES</ref>&lt;&lt;1,<sp/>3);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a46e5de3915e644d07a6ff571e7db7bfa" kindref="member">send_code</ref>(s,<sp/><ref refid="trees_8c_1a1e33ae802796dae8694948b87ac62d61" kindref="member">END_BLOCK</ref>,<sp/><ref refid="trees_8h_1a6768b3bbdf10808bdddd44b13349c5a2" kindref="member">static_ltree</ref>);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="914"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;compressed_len<sp/>+=<sp/>10L;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="916"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bi_flush(s);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;last_eob_len<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/>*<sp/>Determine<sp/>the<sp/>best<sp/>encoding<sp/>for<sp/>the<sp/>current<sp/>block:<sp/>dynamic<sp/>trees,<sp/>static</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/>*<sp/>trees<sp/>or<sp/>store,<sp/>and<sp/>output<sp/>the<sp/>encoded<sp/>block<sp/>to<sp/>the<sp/>zip<sp/>file.</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/><ref refid="deflate_8h_1a4fff3e797f75b89a92f76428a8d21421" kindref="member">_tr_flush_block</ref>(s,<sp/>buf,<sp/>stored_len,<sp/>last)</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a864fa0e2e4e499038305f3276990689b" kindref="member">charf</ref><sp/>*buf;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>input<sp/>block,<sp/>or<sp/>NULL<sp/>if<sp/>too<sp/>old<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref><sp/>stored_len;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>of<sp/>input<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>one<sp/>if<sp/>this<sp/>is<sp/>the<sp/>last<sp/>block<sp/>for<sp/>a<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal">{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref><sp/>opt_lenb,<sp/>static_lenb;<sp/></highlight><highlight class="comment">/*<sp/>opt_len<sp/>and<sp/>static_len<sp/>in<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_blindex<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>of<sp/>last<sp/>bit<sp/>length<sp/>code<sp/>of<sp/>non<sp/>zero<sp/>freq<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Build<sp/>the<sp/>Huffman<sp/>trees<sp/>unless<sp/>a<sp/>stored<sp/>block<sp/>is<sp/>forced<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;level<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>the<sp/>file<sp/>is<sp/>binary<sp/>or<sp/>text<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;strm-&gt;data_type<sp/>==<sp/><ref refid="zlib_8h_1a4be54d9d68d40adb73f87492284cc290" kindref="member">Z_UNKNOWN</ref>)</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structdeflate__state_1a6bd9e93b9ae735c73a3bfb80d48f8ce3" kindref="member">strm</ref>-&gt;<ref refid="structz__stream_1a66ea7939b3719b8c1e4a8aa6ca80316a" kindref="member">data_type</ref><sp/>=<sp/>detect_data_type(s);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Construct<sp/>the<sp/>literal<sp/>and<sp/>distance<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>build_tree(s,<sp/>(<ref refid="structtree__desc" kindref="compound">tree_desc</ref><sp/>*)(&amp;(s-&gt;l_desc)));</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;\nlit<sp/>data:<sp/>dyn<sp/>%ld,<sp/>stat<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>s-&gt;opt_len,</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;static_len));</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>build_tree(s,<sp/>(<ref refid="structtree__desc" kindref="compound">tree_desc</ref><sp/>*)(&amp;(s-&gt;d_desc)));</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;\ndist<sp/>data:<sp/>dyn<sp/>%ld,<sp/>stat<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>s-&gt;opt_len,</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;static_len));</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>At<sp/>this<sp/>point,<sp/>opt_len<sp/>and<sp/>static_len<sp/>are<sp/>the<sp/>total<sp/>bit<sp/>lengths<sp/>of</highlight></codeline>
<codeline lineno="950"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>compressed<sp/>block<sp/>data,<sp/>excluding<sp/>the<sp/>tree<sp/>representations.</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Build<sp/>the<sp/>bit<sp/>length<sp/>tree<sp/>for<sp/>the<sp/>above<sp/>two<sp/>trees,<sp/>and<sp/>get<sp/>the<sp/>index</highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>bl_order<sp/>of<sp/>the<sp/>last<sp/>bit<sp/>length<sp/>code<sp/>to<sp/>send.</highlight></codeline>
<codeline lineno="955"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_blindex<sp/>=<sp/>build_bl_tree(s);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Determine<sp/>the<sp/>best<sp/>encoding.<sp/>Compute<sp/>the<sp/>block<sp/>lengths<sp/>in<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_lenb<sp/>=<sp/>(s-&gt;opt_len+3+7)&gt;&gt;3;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_lenb<sp/>=<sp/>(s-&gt;static_len+3+7)&gt;&gt;3;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;\nopt<sp/>%lu(%lu)<sp/>stat<sp/>%lu(%lu)<sp/>stored<sp/>%lu<sp/>lit<sp/>%u<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_lenb,<sp/>s-&gt;opt_len,<sp/>static_lenb,<sp/>s-&gt;static_len,<sp/>stored_len,</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;last_lit));</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_lenb<sp/>&lt;=<sp/>opt_lenb)<sp/>opt_lenb<sp/>=<sp/>static_lenb;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(buf<sp/>!=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)0,<sp/></highlight><highlight class="stringliteral">&quot;lost<sp/>buf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_lenb<sp/>=<sp/>static_lenb<sp/>=<sp/>stored_len<sp/>+<sp/>5;<sp/></highlight><highlight class="comment">/*<sp/>force<sp/>a<sp/>stored<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FORCE_STORED</highlight></codeline>
<codeline lineno="974"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf<sp/>!=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>force<sp/>stored<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="976"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stored_len+4<sp/>&lt;=<sp/>opt_lenb<sp/>&amp;&amp;<sp/>buf<sp/>!=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)0)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>4:<sp/>two<sp/>words<sp/>for<sp/>the<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="979"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>test<sp/>buf<sp/>!=<sp/>NULL<sp/>is<sp/>only<sp/>necessary<sp/>if<sp/>LIT_BUFSIZE<sp/>&gt;<sp/>WSIZE.</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Otherwise<sp/>we<sp/>can&apos;t<sp/>have<sp/>processed<sp/>more<sp/>than<sp/>WSIZE<sp/>input<sp/>bytes<sp/>since</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>last<sp/>block<sp/>flush,<sp/>because<sp/>compression<sp/>would<sp/>have<sp/>been</highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>successful.<sp/>If<sp/>LIT_BUFSIZE<sp/>&lt;=<sp/>WSIZE,<sp/>it<sp/>is<sp/>never<sp/>too<sp/>late<sp/>to</highlight></codeline>
<codeline lineno="983"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>transform<sp/>a<sp/>block<sp/>into<sp/>a<sp/>stored<sp/>block.</highlight></codeline>
<codeline lineno="984"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1ab65c8957ea36ee7dea4ae237d89e69c2" kindref="member">_tr_stored_block</ref>(s,<sp/>buf,<sp/>stored_len,<sp/>last);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FORCE_STATIC</highlight></codeline>
<codeline lineno="988"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_lenb<sp/>&gt;=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>force<sp/>static<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="990"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;strategy<sp/>==<sp/><ref refid="zlib_8h_1aaa5c996fbc985d5ec43f99112c0ac4a6" kindref="member">Z_FIXED</ref><sp/>||<sp/>static_lenb<sp/>==<sp/>opt_lenb)<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="992"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s,<sp/>(<ref refid="zutil_8h_1a0f63a9090acfe4f653f117b638b289d1" kindref="member">STATIC_TREES</ref>&lt;&lt;1)+last,<sp/>3);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compress_block(s,<sp/>(<ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*)<ref refid="trees_8h_1a6768b3bbdf10808bdddd44b13349c5a2" kindref="member">static_ltree</ref>,<sp/>(<ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*)<ref refid="trees_8h_1a32b77d04af5dc26c5312766355386cec" kindref="member">static_dtree</ref>);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="995"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;compressed_len<sp/>+=<sp/>3<sp/>+<sp/>s-&gt;static_len;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="997"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s,<sp/>(<ref refid="zutil_8h_1a40a71de753262f20a0bcacc2304e7b19" kindref="member">DYN_TREES</ref>&lt;&lt;1)+last,<sp/>3);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>send_all_trees(s,<sp/>s-&gt;l_desc.max_code+1,<sp/>s-&gt;d_desc.max_code+1,</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_blindex+1);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compress_block(s,<sp/>(<ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*)s-&gt;dyn_ltree,<sp/>(<ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*)s-&gt;dyn_dtree);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="1003"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;compressed_len<sp/>+=<sp/>3<sp/>+<sp/>s-&gt;opt_len;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1005"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref><sp/>(s-&gt;compressed_len<sp/>==<sp/>s-&gt;bits_sent,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>compressed<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>above<sp/>check<sp/>is<sp/>made<sp/>mod<sp/>2^32,<sp/>for<sp/>files<sp/>larger<sp/>than<sp/>512<sp/>MB</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>uLong<sp/>implemented<sp/>on<sp/>32<sp/>bits.</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>init_block(s);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last)<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bi_windup(s);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="1015"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;compressed_len<sp/>+=<sp/>7;<sp/><sp/></highlight><highlight class="comment">/*<sp/>align<sp/>on<sp/>byte<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1017"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,</highlight><highlight class="stringliteral">&quot;\ncomprlen<sp/>%lu(%lu)<sp/>&quot;</highlight><highlight class="normal">,<sp/>s-&gt;compressed_len&gt;&gt;3,</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;compressed_len-7*last));</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1023"><highlight class="comment"><sp/>*<sp/>Save<sp/>the<sp/>match<sp/>info<sp/>and<sp/>tally<sp/>the<sp/>frequency<sp/>counts.<sp/>Return<sp/>true<sp/>if</highlight></codeline>
<codeline lineno="1024"><highlight class="comment"><sp/>*<sp/>the<sp/>current<sp/>block<sp/>must<sp/>be<sp/>flushed.</highlight></codeline>
<codeline lineno="1025"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/><ref refid="deflate_8h_1aa06a7c431223b9b805340551f7800427" kindref="member">_tr_tally</ref><sp/>(s,<sp/>dist,<sp/>lc)</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>dist;<sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>of<sp/>matched<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lc;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>match<sp/>length-MIN_MATCH<sp/>or<sp/>unmatched<sp/>char<sp/>(if<sp/>dist==0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structdeflate__state_1a0826f7358a8ea817a0541462e387306a" kindref="member">d_buf</ref>[s-&gt;last_lit]<sp/>=<sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)dist;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;l_buf[s-&gt;last_lit++]<sp/>=<sp/>(<ref refid="zutil_8h_1af3307af5922c72924a837559c801a8a4" kindref="member">uch</ref>)lc;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>lc<sp/>is<sp/>the<sp/>unmatched<sp/>char<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;dyn_ltree[lc].Freq++;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;matches++;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Here,<sp/>lc<sp/>is<sp/>the<sp/>match<sp/>length<sp/>-<sp/>MIN_MATCH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist--;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dist<sp/>=<sp/>match<sp/>distance<sp/>-<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>((<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)dist<sp/>&lt;<sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)<ref refid="deflate_8h_1a1bac515806be1e59d7306b4126b0cca4" kindref="member">MAX_DIST</ref>(s)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)lc<sp/>&lt;=<sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)(<ref refid="zutil_8h_1ab7a9188dce25dac8d3a970c01b89b0c6" kindref="member">MAX_MATCH</ref>-MIN_MATCH)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)<ref refid="deflate_8h_1a578b4336ef92d19278e0a0d95699def5" kindref="member">d_code</ref>(dist)<sp/>&lt;<sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)D_CODES,<sp/><sp/></highlight><highlight class="stringliteral">&quot;_tr_tally:<sp/>bad<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;dyn_ltree[<ref refid="deflate_8h_1a034daec5591675c08dd7dde5a753a8da" kindref="member">_length_code</ref>[lc]+<ref refid="deflate_8h_1a3f59145500c9de746e7dc49fb98c29ef" kindref="member">LITERALS</ref>+1].Freq++;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;dyn_dtree[<ref refid="deflate_8h_1a578b4336ef92d19278e0a0d95699def5" kindref="member">d_code</ref>(dist)].Freq++;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRUNCATE_BLOCK</highlight></codeline>
<codeline lineno="1049"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>guess<sp/>if<sp/>it<sp/>is<sp/>profitable<sp/>to<sp/>stop<sp/>the<sp/>current<sp/>block<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s-&gt;last_lit<sp/>&amp;<sp/>0x1fff)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>s-&gt;level<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>an<sp/>upper<sp/>bound<sp/>for<sp/>the<sp/>compressed<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref><sp/>out_length<sp/>=<sp/>(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)s-&gt;last_lit*8L;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref><sp/>in_length<sp/>=<sp/>(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)((long)s-&gt;strstart<sp/>-<sp/>s-&gt;block_start);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dcode;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(dcode<sp/>=<sp/>0;<sp/>dcode<sp/>&lt;<sp/><ref refid="deflate_8h_1a8798a9a526623abbd88fedb0727e21aa" kindref="member">D_CODES</ref>;<sp/>dcode++)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_length<sp/>+=<sp/>(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)s-&gt;dyn_dtree[dcode].Freq<sp/>*</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(5L+extra_dbits[dcode]);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_length<sp/>&gt;&gt;=<sp/>3;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,</highlight><highlight class="stringliteral">&quot;\nlast_lit<sp/>%u,<sp/>in<sp/>%ld,<sp/>out<sp/>~%ld(%ld%%)<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;last_lit,<sp/>in_length,<sp/>out_length,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100L<sp/>-<sp/>out_length*100L/in_length));</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;matches<sp/>&lt;<sp/>s-&gt;last_lit/2<sp/>&amp;&amp;<sp/>out_length<sp/>&lt;<sp/>in_length/2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1066"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(s-&gt;last_lit<sp/>==<sp/>s-&gt;lit_bufsize-1);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>avoid<sp/>equality<sp/>with<sp/>lit_bufsize<sp/>because<sp/>of<sp/>wraparound<sp/>at<sp/>64K</highlight></codeline>
<codeline lineno="1068"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>on<sp/>16<sp/>bit<sp/>machines<sp/>and<sp/>because<sp/>stored<sp/>blocks<sp/>are<sp/>restricted<sp/>to</highlight></codeline>
<codeline lineno="1069"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>64K-1<sp/>bytes.</highlight></codeline>
<codeline lineno="1070"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/>*<sp/>Send<sp/>the<sp/>block<sp/>data<sp/>compressed<sp/>using<sp/>the<sp/>given<sp/>Huffman<sp/>trees</highlight></codeline>
<codeline lineno="1075"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compress_block(s,<sp/>ltree,<sp/>dtree)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*ltree;<sp/></highlight><highlight class="comment">/*<sp/>literal<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structct__data" kindref="compound">ct_data</ref><sp/>*dtree;<sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>dist;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>of<sp/>matched<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>match<sp/>length<sp/>or<sp/>unmatched<sp/>char<sp/>(if<sp/>dist<sp/>==<sp/>0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lx<sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>running<sp/>index<sp/>in<sp/>l_buf<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>code;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>code<sp/>to<sp/>send<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extra;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>extra<sp/>bits<sp/>to<sp/>send<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;last_lit<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>s-&gt;d_buf[lx];</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lc<sp/>=<sp/>s-&gt;l_buf[lx++];</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a46e5de3915e644d07a6ff571e7db7bfa" kindref="member">send_code</ref>(s,<sp/>lc,<sp/>ltree);<sp/></highlight><highlight class="comment">/*<sp/>send<sp/>a<sp/>literal<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a54a66ee51c61d67607b64678b055af6b" kindref="member">Tracecv</ref>(isgraph(lc),<sp/>(stderr,</highlight><highlight class="stringliteral">&quot;<sp/>&apos;%c&apos;<sp/>&quot;</highlight><highlight class="normal">,<sp/>lc));</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Here,<sp/>lc<sp/>is<sp/>the<sp/>match<sp/>length<sp/>-<sp/>MIN_MATCH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/><ref refid="deflate_8h_1a034daec5591675c08dd7dde5a753a8da" kindref="member">_length_code</ref>[lc];</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a46e5de3915e644d07a6ff571e7db7bfa" kindref="member">send_code</ref>(s,<sp/>code+<ref refid="deflate_8h_1a3f59145500c9de746e7dc49fb98c29ef" kindref="member">LITERALS</ref>+1,<sp/>ltree);<sp/></highlight><highlight class="comment">/*<sp/>send<sp/>the<sp/>length<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra<sp/>=<sp/>extra_lbits[code];</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extra<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lc<sp/>-=<sp/><ref refid="trees_8h_1ac443b72d29eda7b511a746eab5411199" kindref="member">base_length</ref>[code];</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s,<sp/>lc,<sp/>extra);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>send<sp/>the<sp/>extra<sp/>length<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist--;<sp/></highlight><highlight class="comment">/*<sp/>dist<sp/>is<sp/>now<sp/>the<sp/>match<sp/>distance<sp/>-<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/><ref refid="deflate_8h_1a578b4336ef92d19278e0a0d95699def5" kindref="member">d_code</ref>(dist);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref><sp/>(code<sp/>&lt;<sp/>D_CODES,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>d_code&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a46e5de3915e644d07a6ff571e7db7bfa" kindref="member">send_code</ref>(s,<sp/>code,<sp/>dtree);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>send<sp/>the<sp/>distance<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra<sp/>=<sp/>extra_dbits[code];</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extra<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>-=<sp/><ref refid="trees_8h_1a8aa132d4ec076aeec45b2fe616ce9db9" kindref="member">base_dist</ref>[code];</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1aea5290b53438097651a8d1c7098aa5ef" kindref="member">send_bits</ref>(s,<sp/>dist,<sp/>extra);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>send<sp/>the<sp/>extra<sp/>distance<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>literal<sp/>or<sp/>match<sp/>pair<sp/>?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>that<sp/>the<sp/>overlay<sp/>between<sp/>pending_buf<sp/>and<sp/>d_buf+l_buf<sp/>is<sp/>ok:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>((<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)(s-&gt;pending)<sp/>&lt;<sp/>s-&gt;lit_bufsize<sp/>+<sp/>2*lx,</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pendingBuf<sp/>overflow&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lx<sp/>&lt;<sp/>s-&gt;last_lit);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a46e5de3915e644d07a6ff571e7db7bfa" kindref="member">send_code</ref>(s,<sp/><ref refid="trees_8c_1a1e33ae802796dae8694948b87ac62d61" kindref="member">END_BLOCK</ref>,<sp/>ltree);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;last_eob_len<sp/>=<sp/>ltree[<ref refid="trees_8c_1a1e33ae802796dae8694948b87ac62d61" kindref="member">END_BLOCK</ref>].Len;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1125"><highlight class="comment"><sp/>*<sp/>Check<sp/>if<sp/>the<sp/>data<sp/>type<sp/>is<sp/>TEXT<sp/>or<sp/>BINARY,<sp/>using<sp/>the<sp/>following<sp/>algorithm:</highlight></codeline>
<codeline lineno="1126"><highlight class="comment"><sp/>*<sp/>-<sp/>TEXT<sp/>if<sp/>the<sp/>two<sp/>conditions<sp/>below<sp/>are<sp/>satisfied:</highlight></codeline>
<codeline lineno="1127"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>a)<sp/>There<sp/>are<sp/>no<sp/>non-portable<sp/>control<sp/>characters<sp/>belonging<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="1128"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;black<sp/>list&quot;<sp/>(0..6,<sp/>14..25,<sp/>28..31).</highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>b)<sp/>There<sp/>is<sp/>at<sp/>least<sp/>one<sp/>printable<sp/>character<sp/>belonging<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;white<sp/>list&quot;<sp/>(9<sp/>{TAB},<sp/>10<sp/>{LF},<sp/>13<sp/>{CR},<sp/>32..255).</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/>*<sp/>-<sp/>BINARY<sp/>otherwise.</highlight></codeline>
<codeline lineno="1132"><highlight class="comment"><sp/>*<sp/>-<sp/>The<sp/>following<sp/>partially-portable<sp/>control<sp/>characters<sp/>form<sp/>a</highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/>*<sp/><sp/><sp/>&quot;gray<sp/>list&quot;<sp/>that<sp/>is<sp/>ignored<sp/>in<sp/>this<sp/>detection<sp/>algorithm:</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(7<sp/>{BEL},<sp/>8<sp/>{BS},<sp/>11<sp/>{VT},<sp/>12<sp/>{FF},<sp/>26<sp/>{SUB},<sp/>27<sp/>{ESC}).</highlight></codeline>
<codeline lineno="1135"><highlight class="comment"><sp/>*<sp/>IN<sp/>assertion:<sp/>the<sp/>fields<sp/>Freq<sp/>of<sp/>dyn_ltree<sp/>are<sp/>set.</highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>detect_data_type(s)</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>black_mask<sp/>is<sp/>the<sp/>bit<sp/>mask<sp/>of<sp/>black-listed<sp/>bytes</highlight></codeline>
<codeline lineno="1141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>set<sp/>bits<sp/>0..6,<sp/>14..25,<sp/>and<sp/>28..31</highlight></codeline>
<codeline lineno="1142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>0xf3ffc07f<sp/>=<sp/>binary<sp/>11110011111111111100000001111111</highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>black_mask<sp/>=<sp/>0xf3ffc07f<ref refid="namespace_poco_1ac52fa8319172aa7f502e473fb894fb2e" kindref="member">UL</ref>;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>non-textual<sp/>(&quot;black-listed&quot;)<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;=<sp/>31;<sp/>n++,<sp/>black_mask<sp/>&gt;&gt;=<sp/>1)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((black_mask<sp/>&amp;<sp/>1)<sp/>&amp;&amp;<sp/>(s-&gt;dyn_ltree[n].Freq<sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a2bfe22ed89d3553335d18a4c3cab67af" kindref="member">Z_BINARY</ref>;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>textual<sp/>(&quot;white-listed&quot;)<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;dyn_ltree[9].Freq<sp/>!=<sp/>0<sp/>||<sp/>s-&gt;dyn_ltree[10].Freq<sp/>!=<sp/>0</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>s-&gt;dyn_ltree[13].Freq<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1ac5c9021ac9271248094c6b93c61e1f02" kindref="member">Z_TEXT</ref>;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>32;<sp/>n<sp/>&lt;<sp/><ref refid="deflate_8h_1a3f59145500c9de746e7dc49fb98c29ef" kindref="member">LITERALS</ref>;<sp/>n++)</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;dyn_ltree[n].Freq<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1ac5c9021ac9271248094c6b93c61e1f02" kindref="member">Z_TEXT</ref>;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>are<sp/>no<sp/>&quot;black-listed&quot;<sp/>or<sp/>&quot;white-listed&quot;<sp/>bytes:</highlight></codeline>
<codeline lineno="1161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>this<sp/>stream<sp/>either<sp/>is<sp/>empty<sp/>or<sp/>has<sp/>tolerated<sp/>(&quot;gray-listed&quot;)<sp/>bytes<sp/>only.</highlight></codeline>
<codeline lineno="1162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a2bfe22ed89d3553335d18a4c3cab67af" kindref="member">Z_BINARY</ref>;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1167"><highlight class="comment"><sp/>*<sp/>Reverse<sp/>the<sp/>first<sp/>len<sp/>bits<sp/>of<sp/>a<sp/>code,<sp/>using<sp/>straightforward<sp/>code<sp/>(a<sp/>faster</highlight></codeline>
<codeline lineno="1168"><highlight class="comment"><sp/>*<sp/>method<sp/>would<sp/>use<sp/>a<sp/>table)</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"><sp/>*<sp/>IN<sp/>assertion:<sp/>1<sp/>&lt;=<sp/>len<sp/>&lt;=<sp/>15</highlight></codeline>
<codeline lineno="1170"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bi_reverse(code,<sp/>len)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>unsigned<sp/>code;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>value<sp/>to<sp/>invert<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>its<sp/>bit<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>|=<sp/>code<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>&gt;&gt;=<sp/>1,<sp/>res<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--len<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1184"><highlight class="comment"><sp/>*<sp/>Flush<sp/>the<sp/>bit<sp/>buffer,<sp/>keeping<sp/>at<sp/>most<sp/>7<sp/>bits<sp/>in<sp/>it.</highlight></codeline>
<codeline lineno="1185"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bi_flush(s)</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;bi_valid<sp/>==<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1ae76cb23c4bc3d3f80e7a7917dd538c4e" kindref="member">put_short</ref>(s,<sp/>s-&gt;bi_buf);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bi_buf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bi_valid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;bi_valid<sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)s-&gt;bi_buf);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bi_buf<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bi_valid<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1201"><highlight class="comment"><sp/>*<sp/>Flush<sp/>the<sp/>bit<sp/>buffer<sp/>and<sp/>align<sp/>the<sp/>output<sp/>on<sp/>a<sp/>byte<sp/>boundary</highlight></codeline>
<codeline lineno="1202"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bi_windup(s)</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;bi_valid<sp/>&gt;<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1ae76cb23c4bc3d3f80e7a7917dd538c4e" kindref="member">put_short</ref>(s,<sp/>s-&gt;bi_buf);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;bi_valid<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>(<ref refid="zconf_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>)s-&gt;bi_buf);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;bi_buf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;bi_valid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="1214"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;bits_sent<sp/>=<sp/>(s-&gt;bits_sent+7)<sp/>&amp;<sp/>~7;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1216"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1219"><highlight class="comment"><sp/>*<sp/>Copy<sp/>a<sp/>stored<sp/>block,<sp/>storing<sp/>first<sp/>the<sp/>length<sp/>and<sp/>its</highlight></codeline>
<codeline lineno="1220"><highlight class="comment"><sp/>*<sp/>one&apos;s<sp/>complement<sp/>if<sp/>requested.</highlight></codeline>
<codeline lineno="1221"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copy_block(s,<sp/>buf,<sp/>len,<sp/>header)</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdeflate__state" kindref="compound">deflate_state</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a864fa0e2e4e499038305f3276990689b" kindref="member">charf</ref><sp/><sp/><sp/><sp/>*buf;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>input<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>len;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>its<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>header;<sp/><sp/></highlight><highlight class="comment">/*<sp/>true<sp/>if<sp/>block<sp/>header<sp/>must<sp/>be<sp/>written<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>bi_windup(s);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>align<sp/>on<sp/>byte<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;last_eob_len<sp/>=<sp/>8;<sp/></highlight><highlight class="comment">/*<sp/>enough<sp/>lookahead<sp/>for<sp/>inflate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header)<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1ae76cb23c4bc3d3f80e7a7917dd538c4e" kindref="member">put_short</ref>(s,<sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)len);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1ae76cb23c4bc3d3f80e7a7917dd538c4e" kindref="member">put_short</ref>(s,<sp/>(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)~len);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="1235"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bits_sent<sp/>+=<sp/>2*16;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1237"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="1239"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;bits_sent<sp/>+=<sp/>(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)len&lt;&lt;3;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1241"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len--)<sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="deflate_8h_1a662a0774c0de95a9f1309019d52e914b" kindref="member">put_byte</ref>(s,<sp/>*buf++);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/trees.c"/>
  </compounddef>
</doxygen>
