<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="zutil_8c" kind="file">
    <compoundname>zutil.c</compoundname>
    <includes refid="zutil_8h" local="yes">zutil.h</includes>
    <incdepgraph>
      <node id="1803">
        <label>zconf.h</label>
        <link refid="zconf_8h"/>
      </node>
      <node id="1800">
        <label>src/zutil.c</label>
        <link refid="zutil.c"/>
        <childnode refid="1801" relation="include">
        </childnode>
      </node>
      <node id="1801">
        <label>zutil.h</label>
        <link refid="zutil_8h"/>
        <childnode refid="1802" relation="include">
        </childnode>
      </node>
      <node id="1802">
        <label>zlib.h</label>
        <link refid="zlib_8h"/>
        <childnode refid="1803" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structinternal__state" prot="public">internal_state</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="zutil_8c_1a0c8f7adb2bf9bcb3fcb006487dadc624" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* z_errmsg[10]</definition>
        <argsstring>[10]</argsstring>
        <name>z_errmsg</name>
        <initializer>= {
&quot;need dictionary&quot;,     
&quot;stream end&quot;,          
&quot;&quot;,                    
&quot;file error&quot;,          
&quot;stream error&quot;,        
&quot;data error&quot;,          
&quot;insufficient memory&quot;, 
&quot;buffer error&quot;,        
&quot;incompatible version&quot;,
&quot;&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" line="14" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="zutil_8c_1abce074566fe1761a0bc1746663ea3124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* zlibVersion</definition>
        <argsstring>()</argsstring>
        <name>zlibVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" line="27" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1a416647b2b534c3aa03be6d88aa2429fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref></type>
        <definition>uLong zlibCompileFlags</definition>
        <argsstring>()</argsstring>
        <name>zlibCompileFlags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" line="32" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" bodystart="32" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1a69344caff9f322d1f915c3b6bcc0efe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* zError</definition>
        <argsstring>(int err)</argsstring>
        <name>zError</name>
        <param>
          <type>int</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" line="133" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1a20971e15496f76249b852c9764cf38ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zmemcpy</definition>
        <argsstring>(Bytef *dest, Bytef *source, uInt len)</argsstring>
        <name>zmemcpy</name>
        <param>
          <type><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" line="149" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" bodystart="149" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1a25f235744ff0e6b602a6fed428b00aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int zmemcmp</definition>
        <argsstring>(Bytef *s1, Bytef *s2, uInt len)</argsstring>
        <name>zmemcmp</name>
        <param>
          <type><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref> *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref> *</type>
          <declname>s2</declname>
        </param>
        <param>
          <type><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" line="160" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" bodystart="160" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1ae92187bde62d7c4e84b231576d291881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zmemzero</definition>
        <argsstring>(Bytef *dest, uInt len)</argsstring>
        <name>zmemzero</name>
        <param>
          <type><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" line="173" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" bodystart="173" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1a1fe6941708c67e715d2ed1a73a475257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zconf_8h_1aa3397ff439b5e076528b04bc9b8b086a" kindref="member">voidp</ref></type>
        <definition>voidp malloc</definition>
        <argsstring>()</argsstring>
        <name>malloc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1aebd5c667302d7b972ed849f359982306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zconf_8h_1aa3397ff439b5e076528b04bc9b8b086a" kindref="member">voidp</ref></type>
        <definition>voidp calloc</definition>
        <argsstring>()</argsstring>
        <name>calloc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1aafde19f7d36ca163a143579c1b125b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free</definition>
        <argsstring>()</argsstring>
        <name>free</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1acd6de6ee77b7c44353e61511b6eb1d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref></type>
        <definition>voidpf zcalloc</definition>
        <argsstring>(voidpf opaque, unsigned items, unsigned size)</argsstring>
        <name>zcalloc</name>
        <param>
          <type><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref></type>
          <declname>opaque</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>items</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" line="300" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" bodystart="300" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1ac5167b77f4a79cb68ba27c598b52485e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zcfree</definition>
        <argsstring>(voidpf opaque, voidpf ptr)</argsstring>
        <name>zcfree</name>
        <param>
          <type><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref></type>
          <declname>opaque</declname>
        </param>
        <param>
          <type><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref></type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" line="310" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" bodystart="310" bodyend="316"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>zutil.c<sp/>--<sp/>target<sp/>dependent<sp/>utility<sp/>functions<sp/>for<sp/>the<sp/>compression<sp/>library</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-2005,<sp/>2010<sp/>Jean-loup<sp/>Gailly.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@(#)<sp/>$Id:<sp/>//poco/1.4/Foundation/src/zutil.c#2<sp/>$<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="zutil_8h" kindref="compound">zutil.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_DUMMY_DECL</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinternal__state" kindref="compound">internal_state</ref><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structinternal__state_1ab000a3e3c901dd063859521988ad7e52" kindref="member">dummy</ref>;};<sp/></highlight><highlight class="comment">/*<sp/>for<sp/>buggy<sp/>compilers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="zutil_8c_1a0c8f7adb2bf9bcb3fcb006487dadc624" kindref="member">z_errmsg</ref>[10]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;need<sp/>dictionary&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Z_NEED_DICT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;stream<sp/>end&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Z_STREAM_END<sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Z_OK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;file<sp/>error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Z_ERRNO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;stream<sp/>error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Z_STREAM_ERROR<sp/><sp/>(-2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;data<sp/>error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Z_DATA_ERROR<sp/><sp/><sp/><sp/>(-3)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;insufficient<sp/>memory&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">/*<sp/>Z_MEM_ERROR<sp/><sp/><sp/><sp/><sp/>(-4)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;buffer<sp/>error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Z_BUF_ERROR<sp/><sp/><sp/><sp/><sp/>(-5)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;incompatible<sp/>version&quot;</highlight><highlight class="normal">,</highlight><highlight class="comment">/*<sp/>Z_VERSION_ERROR<sp/>(-6)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1abce074566fe1761a0bc1746663ea3124" kindref="member">zlibVersion</ref>()</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a51dc9dc65e483b3222c1f0f6a87eb76e" kindref="member">ZLIB_VERSION</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1a416647b2b534c3aa03be6d88aa2429fb" kindref="member">zlibCompileFlags</ref>()</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/>flags;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:<sp/><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>2;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:<sp/><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>2<sp/>&lt;&lt;<sp/>2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>3<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:<sp/><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>2<sp/>&lt;&lt;<sp/>4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>3<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="zconf_8h_1a8cf4661a88ec12823d7cbdd3fa629eb0" kindref="member">z_off_t</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:<sp/><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>2<sp/>&lt;&lt;<sp/>6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>3<sp/>&lt;&lt;<sp/>6;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMV)<sp/>||<sp/>defined(ASMINF)</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>9;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>ZLIB_WINAPI</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>10;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>BUILDFIXED</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>12;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>DYNAMIC_CRC_TABLE</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>13;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>NO_GZCOMPRESS</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1L<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>NO_GZIP</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1L<sp/>&lt;&lt;<sp/>17;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>PKZIP_BUG_WORKAROUND</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1L<sp/>&lt;&lt;<sp/>20;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>FASTEST</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1L<sp/>&lt;&lt;<sp/>21;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>STDC</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>NO_vsnprintf</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1L<sp/>&lt;&lt;<sp/>25;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>ifdef<sp/>HAS_vsprintf_void</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1L<sp/>&lt;&lt;<sp/>26;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>ifdef<sp/>HAS_vsnprintf_void</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1L<sp/>&lt;&lt;<sp/>26;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1L<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>NO_snprintf</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1L<sp/>&lt;&lt;<sp/>25;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>ifdef<sp/>HAS_sprintf_void</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1L<sp/>&lt;&lt;<sp/>26;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>ifdef<sp/>HAS_snprintf_void</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>+=<sp/>1L<sp/>&lt;&lt;<sp/>26;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>verbose</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>verbose<sp/>0</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/>z_verbose<sp/>=<sp/>verbose;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/>z_error<sp/>(m)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>*m;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>m);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>exported<sp/>to<sp/>allow<sp/>conversion<sp/>of<sp/>error<sp/>code<sp/>to<sp/>string<sp/>for<sp/>compress()<sp/>and</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>uncompress()</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1a87ceacafbe5ce56c16c353ceea4019d5" kindref="member">zError</ref>(err)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>err;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zutil_8h_1a66466516a4a71f3c78ccc40d203c92e5" kindref="member">ERR_MSG</ref>(err);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32_WCE)</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>Microsoft<sp/>C<sp/>Run-Time<sp/>Library<sp/>for<sp/>Windows<sp/>CE<sp/>doesn&apos;t<sp/>have</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>errno.<sp/><sp/>We<sp/>define<sp/>it<sp/>as<sp/>a<sp/>global<sp/>variable<sp/>to<sp/>simplify<sp/>porting.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Its<sp/>value<sp/>is<sp/>always<sp/>0<sp/>and<sp/>should<sp/>not<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_MEMCPY</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/><ref refid="zutil_8c_1a20971e15496f76249b852c9764cf38ef" kindref="member">zmemcpy</ref>(dest,<sp/>source,<sp/>len)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref>*<sp/>dest;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref>*<sp/>source;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/><sp/>len;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest++<sp/>=<sp/>*source++;<sp/></highlight><highlight class="comment">/*<sp/>???<sp/>to<sp/>be<sp/>unrolled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--len<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/><ref refid="zutil_8c_1a25f235744ff0e6b602a6fed428b00aa1" kindref="member">zmemcmp</ref>(s1,<sp/>s2,<sp/>len)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref>*<sp/>s1;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref>*<sp/>s2;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/><sp/>len;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>j;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>len;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s1[j]<sp/>!=<sp/>s2[j])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2*(s1[j]<sp/>&gt;<sp/>s2[j])-1;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/><ref refid="zutil_8c_1ae92187bde62d7c4e84b231576d291881" kindref="member">zmemzero</ref>(dest,<sp/>len)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref>*<sp/>dest;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/><sp/>len;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest++<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">/*<sp/>???<sp/>to<sp/>be<sp/>unrolled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--len<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SYS16BIT</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__TURBOC__</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Turbo<sp/>C<sp/>in<sp/>16-bit<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MY_ZCALLOC</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Turbo<sp/>C<sp/>malloc()<sp/>does<sp/>not<sp/>allow<sp/>dynamic<sp/>allocation<sp/>of<sp/>64K<sp/>bytes</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>and<sp/>farmalloc(64K)<sp/>returns<sp/>a<sp/>pointer<sp/>with<sp/>an<sp/>offset<sp/>of<sp/>8,<sp/>so<sp/>we</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>must<sp/>fix<sp/>the<sp/>pointer.<sp/>Warning:<sp/>the<sp/>pointer<sp/>must<sp/>be<sp/>put<sp/>back<sp/>to<sp/>its</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>original<sp/>form<sp/>in<sp/>order<sp/>to<sp/>free<sp/>it,<sp/>use<sp/>zcfree().</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_PTR<sp/>10</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>10*64K<sp/>=<sp/>640K<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next_ptr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ptr_table_s<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>org_ptr;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>new_ptr;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}<sp/>ptr_table;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/>ptr_table<sp/>table[MAX_PTR];</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>table<sp/>is<sp/>used<sp/>to<sp/>remember<sp/>the<sp/>original<sp/>form<sp/>of<sp/>pointers</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>to<sp/>large<sp/>buffers<sp/>(64K).<sp/>Such<sp/>pointers<sp/>are<sp/>normalized<sp/>with<sp/>a<sp/>zero<sp/>offset.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>Since<sp/>MSDOS<sp/>is<sp/>not<sp/>a<sp/>preemptive<sp/>multitasking<sp/>OS,<sp/>this<sp/>table<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>protected<sp/>from<sp/>concurrent<sp/>access.<sp/>This<sp/>hack<sp/>doesn&apos;t<sp/>work<sp/>anyway<sp/>on</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>a<sp/>protected<sp/>system<sp/>like<sp/>OS/2.<sp/>Use<sp/>Microsoft<sp/>C<sp/>instead.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/><ref refid="zutil_8c_1acd6de6ee77b7c44353e61511b6eb1d90" kindref="member">zcalloc</ref><sp/>(<ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>opaque,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>items,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>buf<sp/>=<sp/>opaque;<sp/></highlight><highlight class="comment">/*<sp/>just<sp/>to<sp/>make<sp/>some<sp/>compilers<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref><sp/>bsize<sp/>=<sp/>(<ref refid="zutil_8h_1abd6f60bf9450af2ecb94097a32c19a64" kindref="member">ulg</ref>)items*size;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>allocate<sp/>less<sp/>than<sp/>65520<sp/>bytes,<sp/>we<sp/>assume<sp/>that<sp/>farmalloc</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>will<sp/>return<sp/>a<sp/>usable<sp/>pointer<sp/>which<sp/>doesn&apos;t<sp/>have<sp/>to<sp/>be<sp/>normalized.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bsize<sp/>&lt;<sp/>65520L)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>farmalloc(bsize);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>*)&amp;buf<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>farmalloc(bsize<sp/>+<sp/>16L);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf<sp/>==<sp/>NULL<sp/>||<sp/>next_ptr<sp/>&gt;=<sp/>MAX_PTR)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>table[next_ptr].org_ptr<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Normalize<sp/>the<sp/>pointer<sp/>to<sp/>seg:0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>*((<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>*)&amp;buf+1)<sp/>+=<sp/>((<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>)((<ref refid="zutil_8h_1af3307af5922c72924a837559c801a8a4" kindref="member">uch</ref>*)buf-0)<sp/>+<sp/>15)<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>*(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>*)&amp;buf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>table[next_ptr++].new_ptr<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/><ref refid="zutil_8c_1ac5167b77f4a79cb68ba27c598b52485e" kindref="member">zcfree</ref><sp/>(<ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>opaque,<sp/><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>ptr)</highlight></codeline>
<codeline lineno="241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*(<ref refid="zutil_8h_1a3754180d606d4ed15468d15d9665aa2e" kindref="member">ush</ref>*)&amp;ptr<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>object<sp/>&lt;<sp/>64K<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>farfree(ptr);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>original<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>next_ptr;<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>table[n].new_ptr)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>farfree(table[n].org_ptr);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++n<sp/>&lt;<sp/>next_ptr)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table[n-1]<sp/>=<sp/>table[n];</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_ptr--;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>opaque;<sp/></highlight><highlight class="comment">/*<sp/>just<sp/>to<sp/>make<sp/>some<sp/>compilers<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a5c8d8d889189d1461d10df831f3cd40e" kindref="member">Assert</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;zcfree:<sp/>ptr<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__TURBOC__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>M_I86</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Microsoft<sp/>C<sp/>in<sp/>16-bit<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MY_ZCALLOC</highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(_MSC_VER)<sp/>||<sp/>(_MSC_VER<sp/>&lt;=<sp/>600))</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>_halloc<sp/><sp/>halloc</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>_hfree<sp/><sp/><sp/>hfree</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/><ref refid="zutil_8c_1acd6de6ee77b7c44353e61511b6eb1d90" kindref="member">zcalloc</ref><sp/>(<ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>opaque,<sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>items,<sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>size)</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opaque)<sp/>opaque<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>to<sp/>make<sp/>compiler<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_halloc((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)items,<sp/>size);</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/><ref refid="zutil_8c_1ac5167b77f4a79cb68ba27c598b52485e" kindref="member">zcfree</ref><sp/>(<ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>opaque,<sp/><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>ptr)</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opaque)<sp/>opaque<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>to<sp/>make<sp/>compiler<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>_hfree(ptr);</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>M_I86<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SYS16BIT<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MY_ZCALLOC<sp/></highlight><highlight class="comment">/*<sp/>Any<sp/>system<sp/>without<sp/>a<sp/>special<sp/>alloc<sp/>function<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STDC</highlight></codeline>
<codeline lineno="295"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aa3397ff439b5e076528b04bc9b8b086a" kindref="member">voidp</ref><sp/><sp/><ref refid="zutil_8c_1a1fe6941708c67e715d2ed1a73a475257" kindref="member">malloc</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>size));</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aa3397ff439b5e076528b04bc9b8b086a" kindref="member">voidp</ref><sp/><sp/><ref refid="zutil_8c_1aebd5c667302d7b972ed849f359982306" kindref="member">calloc</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>items,<sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>size));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="zutil_8c_1aafde19f7d36ca163a143579c1b125b6d" kindref="member">free</ref><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>ptr));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/><ref refid="zutil_8c_1acd6de6ee77b7c44353e61511b6eb1d90" kindref="member">zcalloc</ref><sp/>(opaque,<sp/>items,<sp/>size)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>opaque;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>items;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opaque)<sp/>items<sp/>+=<sp/>size<sp/>-<sp/>size;<sp/></highlight><highlight class="comment">/*<sp/>make<sp/>compiler<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>)<sp/>&gt;<sp/>2<sp/>?<sp/>(<ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref>)<ref refid="zutil_8c_1a1fe6941708c67e715d2ed1a73a475257" kindref="member">malloc</ref>(items<sp/>*<sp/>size)<sp/>:</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref>)<ref refid="zutil_8c_1aebd5c667302d7b972ed849f359982306" kindref="member">calloc</ref>(items,<sp/>size);</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/><ref refid="zutil_8c_1ac5167b77f4a79cb68ba27c598b52485e" kindref="member">zcfree</ref><sp/>(opaque,<sp/>ptr)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>opaque;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>ptr;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8c_1aafde19f7d36ca163a143579c1b125b6d" kindref="member">free</ref>(ptr);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opaque)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>make<sp/>compiler<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MY_ZCALLOC<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c"/>
  </compounddef>
</doxygen>
