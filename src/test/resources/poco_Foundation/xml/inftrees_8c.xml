<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="inftrees_8c" kind="file">
    <compoundname>inftrees.c</compoundname>
    <includes refid="zutil_8h" local="yes">zutil.h</includes>
    <includes refid="inftrees_8h" local="yes">inftrees.h</includes>
    <incdepgraph>
      <node id="599">
        <label>zconf.h</label>
        <link refid="zconf_8h"/>
      </node>
      <node id="597">
        <label>zutil.h</label>
        <link refid="zutil_8h"/>
        <childnode refid="598" relation="include">
        </childnode>
      </node>
      <node id="598">
        <label>zlib.h</label>
        <link refid="zlib_8h"/>
        <childnode refid="599" relation="include">
        </childnode>
      </node>
      <node id="596">
        <label>src/inftrees.c</label>
        <link refid="inftrees.c"/>
        <childnode refid="597" relation="include">
        </childnode>
        <childnode refid="600" relation="include">
        </childnode>
      </node>
      <node id="600">
        <label>inftrees.h</label>
        <link refid="inftrees_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="inftrees_8c_1a6fcad31e688110d9d61bdcc99b2a59d7" prot="public" static="no">
        <name>MAXBITS</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/inftrees.c" line="9" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/inftrees.c" bodystart="9" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="inftrees_8c_1a175b87e66438975177c7ed7cc0c17da1" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char inflate_copyright[]</definition>
        <argsstring>[]</argsstring>
        <name>inflate_copyright</name>
        <initializer>=
   &quot; inflate 1.2.5 Copyright 1995-2010 Mark Adler &quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/inftrees.c" line="11" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/inftrees.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="inftrees_8c_1abdadeebf4630332213acd06c8612654b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflate_table</definition>
        <argsstring>(codetype type, unsigned short *lens, unsigned codes, code **table, unsigned *bits, unsigned short *work)</argsstring>
        <name>inflate_table</name>
        <param>
          <type><ref refid="inftrees_8h_1a0f33f5acf9079ff1f054fa235df2443b" kindref="member">codetype</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>unsigned short *</type>
          <declname>lens</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>codes</declname>
        </param>
        <param>
          <type><ref refid="structcode" kindref="compound">code</ref> **</type>
          <declname>table</declname>
        </param>
        <param>
          <type>unsigned *</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>unsigned short *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/inftrees.c" line="32" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/inftrees.c" bodystart="32" bodyend="330"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>inftrees.c<sp/>--<sp/>generate<sp/>Huffman<sp/>trees<sp/>for<sp/>efficient<sp/>decoding</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-2010<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="zutil_8h" kindref="compound">zutil.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="inftrees_8h" kindref="compound">inftrees.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAXBITS<sp/>15</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="inftrees_8c_1a175b87e66438975177c7ed7cc0c17da1" kindref="member">inflate_copyright</ref>[]<sp/>=</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>inflate<sp/>1.2.5<sp/>Copyright<sp/>1995-2010<sp/>Mark<sp/>Adler<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>If<sp/>you<sp/>use<sp/>the<sp/>zlib<sp/>library<sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>is<sp/>welcome</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>in<sp/>the<sp/>documentation<sp/>of<sp/>your<sp/>product.<sp/>If<sp/>for<sp/>some<sp/>reason<sp/>you<sp/>cannot</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>include<sp/>such<sp/>an<sp/>acknowledgment,<sp/>I<sp/>would<sp/>appreciate<sp/>that<sp/>you<sp/>keep<sp/>this</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>copyright<sp/>string<sp/>in<sp/>the<sp/>executable<sp/>of<sp/>your<sp/>product.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/>Build<sp/>a<sp/>set<sp/>of<sp/>tables<sp/>to<sp/>decode<sp/>the<sp/>provided<sp/>canonical<sp/>Huffman<sp/>code.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/>The<sp/>code<sp/>lengths<sp/>are<sp/>lens[0..codes-1].<sp/><sp/>The<sp/>result<sp/>starts<sp/>at<sp/>*table,</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/>whose<sp/>indices<sp/>are<sp/>0..2^bits-1.<sp/><sp/>work<sp/>is<sp/>a<sp/>writable<sp/>array<sp/>of<sp/>at<sp/>least</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/>lens<sp/>shorts,<sp/>which<sp/>is<sp/>used<sp/>as<sp/>a<sp/>work<sp/>area.<sp/><sp/>type<sp/>is<sp/>the<sp/>type<sp/>of<sp/>code</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/>to<sp/>be<sp/>generated,<sp/>CODES,<sp/>LENS,<sp/>or<sp/>DISTS.<sp/><sp/>On<sp/>return,<sp/>zero<sp/>is<sp/>success,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/>-1<sp/>is<sp/>an<sp/>invalid<sp/>code,<sp/>and<sp/>+1<sp/>means<sp/>that<sp/>ENOUGH<sp/>isn&apos;t<sp/>enough.<sp/><sp/>table</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/>on<sp/>return<sp/>points<sp/>to<sp/>the<sp/>next<sp/>available<sp/>entry&apos;s<sp/>address.<sp/><sp/>bits<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/>requested<sp/>root<sp/>table<sp/>index<sp/>bits,<sp/>and<sp/>on<sp/>return<sp/>it<sp/>is<sp/>the<sp/>actual<sp/>root</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/>table<sp/>index<sp/>bits.<sp/><sp/>It<sp/>will<sp/>differ<sp/>if<sp/>the<sp/>request<sp/>is<sp/>greater<sp/>than<sp/>the</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/>longest<sp/>code<sp/>or<sp/>if<sp/>it<sp/>is<sp/>less<sp/>than<sp/>the<sp/>shortest<sp/>code.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a59d4d7ef4d73655c759211ec33a5d44f" kindref="member">ZLIB_INTERNAL</ref><sp/><ref refid="inftrees_8c_1abdadeebf4630332213acd06c8612654b" kindref="member">inflate_table</ref>(type,<sp/>lens,<sp/>codes,<sp/>table,<sp/>bits,<sp/>work)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="inftrees_8h_1a0f33f5acf9079ff1f054fa235df2443b" kindref="member">codetype</ref><sp/>type;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*lens;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>codes;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="structcode" kindref="compound">code</ref><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*<sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*table;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*bits;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*work;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>a<sp/>code&apos;s<sp/>length<sp/>in<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sym;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>of<sp/>code<sp/>symbols<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>min,<sp/>max;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>minimum<sp/>and<sp/>maximum<sp/>code<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>root;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>index<sp/>bits<sp/>for<sp/>root<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>curr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>index<sp/>bits<sp/>for<sp/>current<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>drop;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>code<sp/>bits<sp/>to<sp/>drop<sp/>for<sp/>sub-table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>prefix<sp/>codes<sp/>available<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>used;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>code<sp/>entries<sp/>in<sp/>table<sp/>used<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>huff;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Huffman<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>incr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>incrementing<sp/>code,<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>fill;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>for<sp/>replicating<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>low;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>low<sp/>bits<sp/>for<sp/>current<sp/>root<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>mask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>mask<sp/>for<sp/>low<sp/>root<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcode" kindref="compound">code</ref><sp/>here;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>table<sp/>entry<sp/>for<sp/>duplication<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcode" kindref="compound">code</ref><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*next;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>available<sp/>space<sp/>in<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*base;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>base<sp/>value<sp/>table<sp/>to<sp/>use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*extra;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>extra<sp/>bits<sp/>table<sp/>to<sp/>use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>base<sp/>and<sp/>extra<sp/>for<sp/>symbol<sp/>&gt;<sp/>end<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>count[<ref refid="inftrees_8c_1a6fcad31e688110d9d61bdcc99b2a59d7" kindref="member">MAXBITS</ref>+1];<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>codes<sp/>of<sp/>each<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>offs[<ref refid="inftrees_8c_1a6fcad31e688110d9d61bdcc99b2a59d7" kindref="member">MAXBITS</ref>+1];<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>offsets<sp/>in<sp/>table<sp/>for<sp/>each<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>lbase[31]<sp/>=<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Length<sp/>codes<sp/>257..285<sp/>base<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11,<sp/>13,<sp/>15,<sp/>17,<sp/>19,<sp/>23,<sp/>27,<sp/>31,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>35,<sp/>43,<sp/>51,<sp/>59,<sp/>67,<sp/>83,<sp/>99,<sp/>115,<sp/>131,<sp/>163,<sp/>195,<sp/>227,<sp/>258,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>lext[31]<sp/>=<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Length<sp/>codes<sp/>257..285<sp/>extra<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16,<sp/>16,<sp/>16,<sp/>16,<sp/>16,<sp/>16,<sp/>16,<sp/>16,<sp/>17,<sp/>17,<sp/>17,<sp/>17,<sp/>18,<sp/>18,<sp/>18,<sp/>18,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>19,<sp/>19,<sp/>19,<sp/>19,<sp/>20,<sp/>20,<sp/>20,<sp/>20,<sp/>21,<sp/>21,<sp/>21,<sp/>21,<sp/>16,<sp/>73,<sp/>195};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>dbase[32]<sp/>=<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Distance<sp/>codes<sp/>0..29<sp/>base<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>7,<sp/>9,<sp/>13,<sp/>17,<sp/>25,<sp/>33,<sp/>49,<sp/>65,<sp/>97,<sp/>129,<sp/>193,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>257,<sp/>385,<sp/>513,<sp/>769,<sp/>1025,<sp/>1537,<sp/>2049,<sp/>3073,<sp/>4097,<sp/>6145,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8193,<sp/>12289,<sp/>16385,<sp/>24577,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>dext[32]<sp/>=<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Distance<sp/>codes<sp/>0..29<sp/>extra<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16,<sp/>16,<sp/>16,<sp/>16,<sp/>17,<sp/>17,<sp/>18,<sp/>18,<sp/>19,<sp/>19,<sp/>20,<sp/>20,<sp/>21,<sp/>21,<sp/>22,<sp/>22,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>23,<sp/>23,<sp/>24,<sp/>24,<sp/>25,<sp/>25,<sp/>26,<sp/>26,<sp/>27,<sp/>27,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>28,<sp/>28,<sp/>29,<sp/>29,<sp/>64,<sp/>64};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Process<sp/>a<sp/>set<sp/>of<sp/>code<sp/>lengths<sp/>to<sp/>create<sp/>a<sp/>canonical<sp/>Huffman<sp/>code.<sp/><sp/>The</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>lengths<sp/>are<sp/>lens[0..codes-1].<sp/><sp/>Each<sp/>length<sp/>corresponds<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbols<sp/>0..codes-1.<sp/><sp/>The<sp/>Huffman<sp/>code<sp/>is<sp/>generated<sp/>by<sp/>first<sp/>sorting<sp/>the</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbols<sp/>by<sp/>length<sp/>from<sp/>short<sp/>to<sp/>long,<sp/>and<sp/>retaining<sp/>the<sp/>symbol<sp/>order</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>codes<sp/>with<sp/>equal<sp/>lengths.<sp/><sp/>Then<sp/>the<sp/>code<sp/>starts<sp/>with<sp/>all<sp/>zero<sp/>bits</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>the<sp/>first<sp/>code<sp/>of<sp/>the<sp/>shortest<sp/>length,<sp/>and<sp/>the<sp/>codes<sp/>are<sp/>integer</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increments<sp/>for<sp/>the<sp/>same<sp/>length,<sp/>and<sp/>zeros<sp/>are<sp/>appended<sp/>as<sp/>the<sp/>length</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increases.<sp/><sp/>For<sp/>the<sp/>deflate<sp/>format,<sp/>these<sp/>bits<sp/>are<sp/>stored<sp/>backwards</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>their<sp/>more<sp/>natural<sp/>integer<sp/>increment<sp/>ordering,<sp/>and<sp/>so<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoding<sp/>tables<sp/>are<sp/>built<sp/>in<sp/>the<sp/>large<sp/>loop<sp/>below,<sp/>the<sp/>integer<sp/>codes</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>are<sp/>incremented<sp/>backwards.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>routine<sp/>assumes,<sp/>but<sp/>does<sp/>not<sp/>check,<sp/>that<sp/>all<sp/>of<sp/>the<sp/>entries<sp/>in</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lens[]<sp/>are<sp/>in<sp/>the<sp/>range<sp/>0..MAXBITS.<sp/><sp/>The<sp/>caller<sp/>must<sp/>assure<sp/>this.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1..MAXBITS<sp/>is<sp/>interpreted<sp/>as<sp/>that<sp/>code<sp/>length.<sp/><sp/>zero<sp/>means<sp/>that<sp/>that</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol<sp/>does<sp/>not<sp/>occur<sp/>in<sp/>this<sp/>code.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>codes<sp/>are<sp/>sorted<sp/>by<sp/>computing<sp/>a<sp/>count<sp/>of<sp/>codes<sp/>for<sp/>each<sp/>length,</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>creating<sp/>from<sp/>that<sp/>a<sp/>table<sp/>of<sp/>starting<sp/>indices<sp/>for<sp/>each<sp/>length<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted<sp/>table,<sp/>and<sp/>then<sp/>entering<sp/>the<sp/>symbols<sp/>in<sp/>order<sp/>in<sp/>the<sp/>sorted</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table.<sp/><sp/>The<sp/>sorted<sp/>table<sp/>is<sp/>work[],<sp/>with<sp/>that<sp/>space<sp/>being<sp/>provided<sp/>by</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>caller.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>length<sp/>counts<sp/>are<sp/>used<sp/>for<sp/>other<sp/>purposes<sp/>as<sp/>well,<sp/>i.e.<sp/>finding</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>minimum<sp/>and<sp/>maximum<sp/>length<sp/>codes,<sp/>determining<sp/>if<sp/>there<sp/>are<sp/>any</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codes<sp/>at<sp/>all,<sp/>checking<sp/>for<sp/>a<sp/>valid<sp/>set<sp/>of<sp/>lengths,<sp/>and<sp/>looking<sp/>ahead</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>at<sp/>length<sp/>counts<sp/>to<sp/>determine<sp/>sub-table<sp/>sizes<sp/>when<sp/>building<sp/>the</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoding<sp/>tables.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>accumulate<sp/>lengths<sp/>for<sp/>codes<sp/>(assumes<sp/>lens[]<sp/>all<sp/>in<sp/>0..MAXBITS)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(len<sp/>=<sp/>0;<sp/>len<sp/>&lt;=<sp/><ref refid="inftrees_8c_1a6fcad31e688110d9d61bdcc99b2a59d7" kindref="member">MAXBITS</ref>;<sp/>len++)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count[len]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sym<sp/>=<sp/>0;<sp/>sym<sp/>&lt;<sp/>codes;<sp/>sym++)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count[lens[sym]]++;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bound<sp/>code<sp/>lengths,<sp/>force<sp/>root<sp/>to<sp/>be<sp/>within<sp/>code<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>root<sp/>=<sp/>*bits;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(max<sp/>=<sp/><ref refid="inftrees_8c_1a6fcad31e688110d9d61bdcc99b2a59d7" kindref="member">MAXBITS</ref>;<sp/>max<sp/>&gt;=<sp/>1;<sp/>max--)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count[max]<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root<sp/>&gt;<sp/>max)<sp/>root<sp/>=<sp/>max;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>==<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>symbols<sp/>to<sp/>code<sp/>at<sp/>all<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)64;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>invalid<sp/>code<sp/>marker<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)1;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(*table)++<sp/>=<sp/>here;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>a<sp/>table<sp/>to<sp/>force<sp/>an<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(*table)++<sp/>=<sp/>here;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bits<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>symbols,<sp/>but<sp/>wait<sp/>for<sp/>decoding<sp/>to<sp/>report<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(min<sp/>=<sp/>1;<sp/>min<sp/>&lt;<sp/>max;<sp/>min++)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count[min]<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root<sp/>&lt;<sp/>min)<sp/>root<sp/>=<sp/>min;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>for<sp/>an<sp/>over-subscribed<sp/>or<sp/>incomplete<sp/>set<sp/>of<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(len<sp/>=<sp/>1;<sp/>len<sp/>&lt;=<sp/><ref refid="inftrees_8c_1a6fcad31e688110d9d61bdcc99b2a59d7" kindref="member">MAXBITS</ref>;<sp/>len++)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>-=<sp/>count[len];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>over-subscribed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(type<sp/>==<sp/><ref refid="inftrees_8h_1a0f33f5acf9079ff1f054fa235df2443ba4f2ec4135d8cf82c6c35780e470cac28" kindref="member">CODES</ref><sp/>||<sp/>max<sp/>!=<sp/>1))</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>incomplete<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>generate<sp/>offsets<sp/>into<sp/>symbol<sp/>table<sp/>for<sp/>each<sp/>length<sp/>for<sp/>sorting<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>offs[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(len<sp/>=<sp/>1;<sp/>len<sp/>&lt;<sp/><ref refid="inftrees_8c_1a6fcad31e688110d9d61bdcc99b2a59d7" kindref="member">MAXBITS</ref>;<sp/>len++)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offs[len<sp/>+<sp/>1]<sp/>=<sp/>offs[len]<sp/>+<sp/>count[len];</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sort<sp/>symbols<sp/>by<sp/>length,<sp/>by<sp/>symbol<sp/>order<sp/>within<sp/>each<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sym<sp/>=<sp/>0;<sp/>sym<sp/>&lt;<sp/>codes;<sp/>sym++)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lens[sym]<sp/>!=<sp/>0)<sp/>work[offs[lens[sym]]++]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)sym;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Create<sp/>and<sp/>fill<sp/>in<sp/>decoding<sp/>tables.<sp/><sp/>In<sp/>this<sp/>loop,<sp/>the<sp/>table<sp/>being</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filled<sp/>is<sp/>at<sp/>next<sp/>and<sp/>has<sp/>curr<sp/>index<sp/>bits.<sp/><sp/>The<sp/>code<sp/>being<sp/>used<sp/>is<sp/>huff</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>length<sp/>len.<sp/><sp/>That<sp/>code<sp/>is<sp/>converted<sp/>to<sp/>an<sp/>index<sp/>by<sp/>dropping<sp/>drop</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>off<sp/>of<sp/>the<sp/>bottom.<sp/><sp/>For<sp/>codes<sp/>where<sp/>len<sp/>is<sp/>less<sp/>than<sp/>drop<sp/>+<sp/>curr,</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>those<sp/>top<sp/>drop<sp/>+<sp/>curr<sp/>-<sp/>len<sp/>bits<sp/>are<sp/>incremented<sp/>through<sp/>all<sp/>values<sp/>to</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill<sp/>the<sp/>table<sp/>with<sp/>replicated<sp/>entries.</highlight></codeline>
<codeline lineno="156"><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root<sp/>is<sp/>the<sp/>number<sp/>of<sp/>index<sp/>bits<sp/>for<sp/>the<sp/>root<sp/>table.<sp/><sp/>When<sp/>len<sp/>exceeds</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root,<sp/>sub-tables<sp/>are<sp/>created<sp/>pointed<sp/>to<sp/>by<sp/>the<sp/>root<sp/>entry<sp/>with<sp/>an<sp/>index</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>low<sp/>root<sp/>bits<sp/>of<sp/>huff.<sp/><sp/>This<sp/>is<sp/>saved<sp/>in<sp/>low<sp/>to<sp/>check<sp/>for<sp/>when<sp/>a</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>sub-table<sp/>should<sp/>be<sp/>started.<sp/><sp/>drop<sp/>is<sp/>zero<sp/>when<sp/>the<sp/>root<sp/>table<sp/>is</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>being<sp/>filled,<sp/>and<sp/>drop<sp/>is<sp/>root<sp/>when<sp/>sub-tables<sp/>are<sp/>being<sp/>filled.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>a<sp/>new<sp/>sub-table<sp/>is<sp/>needed,<sp/>it<sp/>is<sp/>necessary<sp/>to<sp/>look<sp/>ahead<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>lengths<sp/>to<sp/>determine<sp/>what<sp/>size<sp/>sub-table<sp/>is<sp/>needed.<sp/><sp/>The<sp/>length</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counts<sp/>are<sp/>used<sp/>for<sp/>this,<sp/>and<sp/>so<sp/>count[]<sp/>is<sp/>decremented<sp/>as<sp/>codes<sp/>are</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entered<sp/>in<sp/>the<sp/>tables.</highlight></codeline>
<codeline lineno="167"><highlight class="comment"></highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>keeps<sp/>track<sp/>of<sp/>how<sp/>many<sp/>table<sp/>entries<sp/>have<sp/>been<sp/>allocated<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>provided<sp/>*table<sp/>space.<sp/><sp/>It<sp/>is<sp/>checked<sp/>for<sp/>LENS<sp/>and<sp/>DIST<sp/>tables<sp/>against</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>constants<sp/>ENOUGH_LENS<sp/>and<sp/>ENOUGH_DISTS<sp/>to<sp/>guard<sp/>against<sp/>changes<sp/>in</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>initial<sp/>root<sp/>table<sp/>size<sp/>constants.<sp/><sp/>See<sp/>the<sp/>comments<sp/>in<sp/>inftrees.h</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"></highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sym<sp/>increments<sp/>through<sp/>all<sp/>symbols,<sp/>and<sp/>the<sp/>loop<sp/>terminates<sp/>when</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all<sp/>codes<sp/>of<sp/>length<sp/>max,<sp/>i.e.<sp/>all<sp/>codes,<sp/>have<sp/>been<sp/>processed.<sp/><sp/>This</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>routine<sp/>permits<sp/>incomplete<sp/>codes,<sp/>so<sp/>another<sp/>loop<sp/>after<sp/>this<sp/>one<sp/>fills</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>decoding<sp/>tables<sp/>with<sp/>invalid<sp/>code<sp/>markers.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>up<sp/>for<sp/>code<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="inftrees_8h_1a0f33f5acf9079ff1f054fa235df2443ba4f2ec4135d8cf82c6c35780e470cac28" kindref="member">CODES</ref>:</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>extra<sp/>=<sp/>work;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dummy<sp/>value--not<sp/>used<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>19;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="inftrees_8h_1a0f33f5acf9079ff1f054fa235df2443ba86b0f8050ddd8ae0b99e2f9323ad00a1" kindref="member">LENS</ref>:</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>lbase;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>-=<sp/>257;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra<sp/>=<sp/>lext;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra<sp/>-=<sp/>257;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DISTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>dbase;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra<sp/>=<sp/>dext;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>state<sp/>for<sp/>loop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>huff<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>starting<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>sym<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>starting<sp/>code<sp/>symbol<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>min;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>starting<sp/>code<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/>*table;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>table<sp/>to<sp/>fill<sp/>in<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>root;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>table<sp/>index<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>drop<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>bits<sp/>to<sp/>drop<sp/>from<sp/>code<sp/>for<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>low<sp/>=<sp/>(unsigned)(-1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>trigger<sp/>new<sp/>sub-table<sp/>when<sp/>len<sp/>&gt;<sp/>root<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>used<sp/>=<sp/>1U<sp/>&lt;&lt;<sp/>root;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>root<sp/>table<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>used<sp/>-<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>mask<sp/>for<sp/>comparing<sp/>low<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>available<sp/>table<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((type<sp/>==<sp/><ref refid="inftrees_8h_1a0f33f5acf9079ff1f054fa235df2443ba86b0f8050ddd8ae0b99e2f9323ad00a1" kindref="member">LENS</ref><sp/>&amp;&amp;<sp/>used<sp/>&gt;=<sp/><ref refid="inftrees_8h_1a9785642d346454e272be30a8016dff04" kindref="member">ENOUGH_LENS</ref>)<sp/>||</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type<sp/>==<sp/><ref refid="inftrees_8h_1a0f33f5acf9079ff1f054fa235df2443bafd7fbb659c736b26e79316ef09a2a9a1" kindref="member">DISTS</ref><sp/>&amp;&amp;<sp/>used<sp/>&gt;=<sp/><ref refid="inftrees_8h_1aa4f18dce1f4ecd74cfa8b18c8cd62933" kindref="member">ENOUGH_DISTS</ref>))</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>process<sp/>all<sp/>codes<sp/>and<sp/>make<sp/>table<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>table<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(len<sp/>-<sp/>drop);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(work[sym])<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)0;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref><sp/>=<sp/>work[sym];</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(work[sym])<sp/>&gt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(extra[work[sym]]);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref><sp/>=<sp/>base[work[sym]];</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(32<sp/>+<sp/>64);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>replicate<sp/>for<sp/>those<sp/>indices<sp/>with<sp/>low<sp/>len<sp/>bits<sp/>equal<sp/>to<sp/>huff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incr<sp/>=<sp/>1U<sp/>&lt;&lt;<sp/>(len<sp/>-<sp/>drop);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill<sp/>=<sp/>1U<sp/>&lt;&lt;<sp/>curr;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>fill;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>save<sp/>offset<sp/>to<sp/>next<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill<sp/>-=<sp/>incr;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next[(huff<sp/>&gt;&gt;<sp/>drop)<sp/>+<sp/>fill]<sp/>=<sp/>here;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fill<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>backwards<sp/>increment<sp/>the<sp/>len-bit<sp/>code<sp/>huff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incr<sp/>=<sp/>1U<sp/>&lt;&lt;<sp/>(len<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(huff<sp/>&amp;<sp/>incr)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incr<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(incr<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huff<sp/>&amp;=<sp/>incr<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huff<sp/>+=<sp/>incr;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>go<sp/>to<sp/>next<sp/>symbol,<sp/>update<sp/>count,<sp/>len<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sym++;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--(count[len])<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>max)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>lens[work[sym]];</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>new<sp/>sub-table<sp/>if<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>root<sp/>&amp;&amp;<sp/>(huff<sp/>&amp;<sp/>mask)<sp/>!=<sp/>low)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>first<sp/>time,<sp/>transition<sp/>to<sp/>sub-tables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drop<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drop<sp/>=<sp/>root;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>increment<sp/>past<sp/>last<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>+=<sp/>min;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>here<sp/>min<sp/>is<sp/>1<sp/>&lt;&lt;<sp/>curr<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>determine<sp/>length<sp/>of<sp/>next<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>len<sp/>-<sp/>drop;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>(int)(1<sp/>&lt;&lt;<sp/>curr);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(curr<sp/>+<sp/>drop<sp/>&lt;<sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>-=<sp/>count[curr<sp/>+<sp/>drop];</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr++;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>for<sp/>enough<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>+=<sp/>1U<sp/>&lt;&lt;<sp/>curr;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((type<sp/>==<sp/><ref refid="inftrees_8h_1a0f33f5acf9079ff1f054fa235df2443ba86b0f8050ddd8ae0b99e2f9323ad00a1" kindref="member">LENS</ref><sp/>&amp;&amp;<sp/>used<sp/>&gt;=<sp/><ref refid="inftrees_8h_1a9785642d346454e272be30a8016dff04" kindref="member">ENOUGH_LENS</ref>)<sp/>||</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type<sp/>==<sp/><ref refid="inftrees_8h_1a0f33f5acf9079ff1f054fa235df2443bafd7fbb659c736b26e79316ef09a2a9a1" kindref="member">DISTS</ref><sp/>&amp;&amp;<sp/>used<sp/>&gt;=<sp/><ref refid="inftrees_8h_1aa4f18dce1f4ecd74cfa8b18c8cd62933" kindref="member">ENOUGH_DISTS</ref>))</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>point<sp/>entry<sp/>in<sp/>root<sp/>table<sp/>to<sp/>sub-table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>low<sp/>=<sp/>huff<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*table)[low].<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)curr;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*table)[low].bits<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)root;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*table)[low].val<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)(next<sp/>-<sp/>*table);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fill<sp/>in<sp/>rest<sp/>of<sp/>table<sp/>for<sp/>incomplete<sp/>codes.<sp/><sp/>This<sp/>loop<sp/>is<sp/>similar<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loop<sp/>above<sp/>in<sp/>incrementing<sp/>huff<sp/>for<sp/>table<sp/>indices.<sp/><sp/>It<sp/>is<sp/>assumed<sp/>that</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>is<sp/>equal<sp/>to<sp/>curr<sp/>+<sp/>drop,<sp/>so<sp/>there<sp/>is<sp/>no<sp/>loop<sp/>needed<sp/>to<sp/>increment</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>through<sp/>high<sp/>index<sp/>bits.<sp/><sp/>When<sp/>the<sp/>current<sp/>sub-table<sp/>is<sp/>filled,<sp/>the<sp/>loop</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drops<sp/>back<sp/>to<sp/>the<sp/>root<sp/>table<sp/>to<sp/>fill<sp/>in<sp/>any<sp/>remaining<sp/>entries<sp/>there.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>here.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)64;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>invalid<sp/>code<sp/>marker<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(len<sp/>-<sp/>drop);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>here.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)0;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(huff<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>when<sp/>done<sp/>with<sp/>sub-table,<sp/>drop<sp/>back<sp/>to<sp/>root<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drop<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>(huff<sp/>&amp;<sp/>mask)<sp/>!=<sp/>low)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drop<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>root;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>*table;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)len;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>put<sp/>invalid<sp/>code<sp/>marker<sp/>in<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next[huff<sp/>&gt;&gt;<sp/>drop]<sp/>=<sp/>here;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>backwards<sp/>increment<sp/>the<sp/>len-bit<sp/>code<sp/>huff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incr<sp/>=<sp/>1U<sp/>&lt;&lt;<sp/>(len<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(huff<sp/>&amp;<sp/>incr)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incr<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(incr<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huff<sp/>&amp;=<sp/>incr<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huff<sp/>+=<sp/>incr;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>return<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>*table<sp/>+=<sp/>used;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>*bits<sp/>=<sp/>root;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/inftrees.c"/>
  </compounddef>
</doxygen>
