<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="zlib_8h" kind="file">
    <compoundname>zlib.h</compoundname>
    <includes refid="zconf_8h" local="yes">zconf.h</includes>
    <includedby refid="zutil_8h" local="yes">src/zutil.h</includedby>
    <includedby refid="compress_8c" local="yes">src/compress.c</includedby>
    <incdepgraph>
      <node id="1786">
        <label>zconf.h</label>
        <link refid="zconf_8h"/>
      </node>
      <node id="1785">
        <label>src/zlib.h</label>
        <link refid="zlib.h"/>
        <childnode refid="1786" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1795">
        <label>src/inffast.c</label>
        <link refid="inffast_8c"/>
      </node>
      <node id="1793">
        <label>src/trees.c</label>
        <link refid="trees_8c"/>
      </node>
      <node id="1789">
        <label>src/adler32.c</label>
        <link refid="adler32_8c"/>
      </node>
      <node id="1796">
        <label>src/inflate.c</label>
        <link refid="inflate_8c"/>
      </node>
      <node id="1799">
        <label>src/compress.c</label>
        <link refid="compress_8c"/>
      </node>
      <node id="1792">
        <label>src/deflate.c</label>
        <link refid="deflate_8c"/>
      </node>
      <node id="1791">
        <label>src/deflate.h</label>
        <link refid="deflate_8h"/>
        <childnode refid="1792" relation="include">
        </childnode>
        <childnode refid="1793" relation="include">
        </childnode>
      </node>
      <node id="1798">
        <label>src/zutil.c</label>
        <link refid="zutil_8c"/>
      </node>
      <node id="1788">
        <label>src/zutil.h</label>
        <link refid="zutil_8h"/>
        <childnode refid="1789" relation="include">
        </childnode>
        <childnode refid="1790" relation="include">
        </childnode>
        <childnode refid="1791" relation="include">
        </childnode>
        <childnode refid="1794" relation="include">
        </childnode>
        <childnode refid="1795" relation="include">
        </childnode>
        <childnode refid="1796" relation="include">
        </childnode>
        <childnode refid="1797" relation="include">
        </childnode>
        <childnode refid="1798" relation="include">
        </childnode>
      </node>
      <node id="1787">
        <label>src/zlib.h</label>
        <link refid="zlib.h"/>
        <childnode refid="1788" relation="include">
        </childnode>
        <childnode refid="1799" relation="include">
        </childnode>
      </node>
      <node id="1790">
        <label>src/crc32.c</label>
        <link refid="crc32_8c"/>
      </node>
      <node id="1794">
        <label>src/infback.c</label>
        <link refid="infback_8c"/>
      </node>
      <node id="1797">
        <label>src/inftrees.c</label>
        <link refid="inftrees_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structz__stream" prot="public">z_stream</innerclass>
    <innerclass refid="structgz__header" prot="public">gz_header</innerclass>
    <innerclass refid="structinternal__state" prot="public">internal_state</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="zlib_8h_1a51dc9dc65e483b3222c1f0f6a87eb76e" prot="public" static="no">
        <name>ZLIB_VERSION</name>
        <initializer>&quot;1.2.5&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="40" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a6413cdfb4cdc0b5a09cf9b5f3f8f48ef" prot="public" static="no">
        <name>ZLIB_VERNUM</name>
        <initializer>0x1250</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="41" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a52eec052f38e306d472e75bfafda9608" prot="public" static="no">
        <name>ZLIB_VER_MAJOR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="42" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a82109105b5511ffa8f8373b6a917e1e4" prot="public" static="no">
        <name>ZLIB_VER_MINOR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="43" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1ad3662b8749a50045ec1c120354fb7e9d" prot="public" static="no">
        <name>ZLIB_VER_REVISION</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="44" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a788ea49a5b65e12b11d7f274542d5af5" prot="public" static="no">
        <name>ZLIB_VER_SUBREVISION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="45" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1ac3b62e37b9922d9496014515acd6083a" prot="public" static="no">
        <name>Z_NO_FLUSH</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="164" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1adbd49089a5611593f05ac80c9e12cc7f" prot="public" static="no">
        <name>Z_PARTIAL_FLUSH</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="165" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1aa32ca175522e0ef314f4dc0b0196bada" prot="public" static="no">
        <name>Z_SYNC_FLUSH</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="166" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1aed4fbb038c3973aacf52fccffbc44b53" prot="public" static="no">
        <name>Z_FULL_FLUSH</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="167" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" prot="public" static="no">
        <name>Z_FINISH</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="168" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a73e5f4c24156c63ba863014396685062" prot="public" static="no">
        <name>Z_BLOCK</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="169" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a0c44b4d8d05cacb1227b535cd8ed538f" prot="public" static="no">
        <name>Z_TREES</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="170" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" prot="public" static="no">
        <name>Z_OK</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="173" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a7d94a4a852228a899864a0053162e7a8" prot="public" static="no">
        <name>Z_STREAM_END</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="174" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a32916ba675b2d06463da2576b6a49d64" prot="public" static="no">
        <name>Z_NEED_DICT</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="175" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a3c66d64c427c0337c64e578537478737" prot="public" static="no">
        <name>Z_ERRNO</name>
        <initializer>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="176" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" prot="public" static="no">
        <name>Z_STREAM_ERROR</name>
        <initializer>(-2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="177" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a9eda83d428a71752d148f38b5dbe04f2" prot="public" static="no">
        <name>Z_DATA_ERROR</name>
        <initializer>(-3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="178" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1ae2be6be871e377c6e2c25a7296ce320c" prot="public" static="no">
        <name>Z_MEM_ERROR</name>
        <initializer>(-4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="179" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a425e2f0664e1b1f75bf2bffab88d353d" prot="public" static="no">
        <name>Z_BUF_ERROR</name>
        <initializer>(-5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="180" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a7634cdd55f955ee1be99c065c6977371" prot="public" static="no">
        <name>Z_VERSION_ERROR</name>
        <initializer>(-6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="181" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a496a4523776bcfa14568cd083b59f24c" prot="public" static="no">
        <name>Z_NO_COMPRESSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="186" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1ad5222ae19b77c6e83815d07ca5d03fd8" prot="public" static="no">
        <name>Z_BEST_SPEED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="187" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a8db83edd9dea51f8cf0afd1727838b95" prot="public" static="no">
        <name>Z_BEST_COMPRESSION</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="188" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1af5387baee05124298e431ebe6fe96b17" prot="public" static="no">
        <name>Z_DEFAULT_COMPRESSION</name>
        <initializer>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="189" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1af01ccb5a9db8d415cde987d9553ad200" prot="public" static="no">
        <name>Z_FILTERED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="192" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a1eec3d3720ba91fd54fa08d2757c1785" prot="public" static="no">
        <name>Z_HUFFMAN_ONLY</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="193" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1af52c1220e7193d2da78332d75f9251ea" prot="public" static="no">
        <name>Z_RLE</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="194" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1aaa5c996fbc985d5ec43f99112c0ac4a6" prot="public" static="no">
        <name>Z_FIXED</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="195" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a580d7c2527e653ddd783109271750849" prot="public" static="no">
        <name>Z_DEFAULT_STRATEGY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="196" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a2bfe22ed89d3553335d18a4c3cab67af" prot="public" static="no">
        <name>Z_BINARY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="199" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1ac5c9021ac9271248094c6b93c61e1f02" prot="public" static="no">
        <name>Z_TEXT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="200" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a9a852d9163cdb10687403d4e79dda06e" prot="public" static="no">
        <name>Z_ASCII</name>
        <initializer><ref refid="zlib_8h_1ac5c9021ac9271248094c6b93c61e1f02" kindref="member">Z_TEXT</ref>   /* for compatibility with 1.2.2 and earlier */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="201" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a4be54d9d68d40adb73f87492284cc290" prot="public" static="no">
        <name>Z_UNKNOWN</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="202" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a27a96226f3dc88e4743131c632adf32f" prot="public" static="no">
        <name>Z_DEFLATED</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="205" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" prot="public" static="no">
        <name>Z_NULL</name>
        <initializer>0  /* for initializing zalloc, zfree, opaque */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="208" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a1f228220c3e6935eb171761c61487059" prot="public" static="no">
        <name>zlib_version</name>
        <initializer><ref refid="zutil_8c_1abce074566fe1761a0bc1746663ea3124" kindref="member">zlibVersion</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="210" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1ae7440c1c5a8becba6dbf410275dc0a5c" prot="public" static="no">
        <name>deflateInit</name>
        <param><defname>strm</defname></param>
        <param><defname>level</defname></param>
        <initializer><ref refid="zlib_8h_1a4ce97b605e1f88ff90cfe5f4e9384dee" kindref="member">deflateInit_</ref>((strm), (level),       <ref refid="zlib_8h_1a51dc9dc65e483b3222c1f0f6a87eb76e" kindref="member">ZLIB_VERSION</ref>, sizeof(<ref refid="structz__stream" kindref="compound">z_stream</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1546" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="1546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1ad7c6797b618699f70f61323c5184f26e" prot="public" static="no">
        <name>inflateInit</name>
        <param><defname>strm</defname></param>
        <initializer><ref refid="zlib_8h_1af05ac251e4d6b723e96170e66e614ddb" kindref="member">inflateInit_</ref>((strm),                <ref refid="zlib_8h_1a51dc9dc65e483b3222c1f0f6a87eb76e" kindref="member">ZLIB_VERSION</ref>, sizeof(<ref refid="structz__stream" kindref="compound">z_stream</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1548" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="1548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a59b575a521efe7ea0d3b9dd3c8d315c1" prot="public" static="no">
        <name>deflateInit2</name>
        <param><defname>strm</defname></param>
        <param><defname>level</defname></param>
        <param><defname>method</defname></param>
        <param><defname>windowBits</defname></param>
        <param><defname>memLevel</defname></param>
        <param><defname>strategy</defname></param>
        <initializer><ref refid="zlib_8h_1aeb60dc2e4671a1d3ae5e43f5cace4dd7" kindref="member">deflateInit2_</ref>((strm),(level),(method),(windowBits),(memLevel),\
                      (strategy),           <ref refid="zlib_8h_1a51dc9dc65e483b3222c1f0f6a87eb76e" kindref="member">ZLIB_VERSION</ref>, sizeof(<ref refid="structz__stream" kindref="compound">z_stream</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1550" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="1550" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a611fc206e69f34e812ca8b590982fdd5" prot="public" static="no">
        <name>inflateInit2</name>
        <param><defname>strm</defname></param>
        <param><defname>windowBits</defname></param>
        <initializer><ref refid="zlib_8h_1a12762e4d200671d124431cb1933beeb7" kindref="member">inflateInit2_</ref>((strm), (windowBits), <ref refid="zlib_8h_1a51dc9dc65e483b3222c1f0f6a87eb76e" kindref="member">ZLIB_VERSION</ref>, sizeof(<ref refid="structz__stream" kindref="compound">z_stream</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1553" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="1553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a9253571ea0fc77cc53c330c0411b8c19" prot="public" static="no">
        <name>inflateBackInit</name>
        <param><defname>strm</defname></param>
        <param><defname>windowBits</defname></param>
        <param><defname>window</defname></param>
        <initializer><ref refid="zlib_8h_1a30c77ac5987236a9bc883723d9b52382" kindref="member">inflateBackInit_</ref>((strm), (windowBits), (window), \
                                            <ref refid="zlib_8h_1a51dc9dc65e483b3222c1f0f6a87eb76e" kindref="member">ZLIB_VERSION</ref>, sizeof(<ref refid="structz__stream" kindref="compound">z_stream</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1555" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="1555" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="zlib_8h_1af90139b484e48372e0e6db52bb9f6733" prot="public" static="no">
        <type><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref>(*</type>
        <definition>typedef voidpf(* alloc_func)()</definition>
        <argsstring>)()</argsstring>
        <name>alloc_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="80" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zlib_8h_1af07471bf3f37f2c29078ed11ac59fc7f" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* free_func)()</definition>
        <argsstring>)()</argsstring>
        <name>free_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="81" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" prot="public" static="no">
        <type><ref refid="structz__stream" kindref="compound">z_stream</ref> *</type>
        <definition>typedef z_stream* z_streamp</definition>
        <argsstring></argsstring>
        <name>z_streamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="106" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zlib_8h_1a20a6ffc695393cb54433da98ab4be7eb" prot="public" static="no">
        <type><ref refid="structgz__header" kindref="compound">gz_header</ref> *</type>
        <definition>typedef gz_header* gz_headerp</definition>
        <argsstring></argsstring>
        <name>gz_headerp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="129" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zlib_8h_1a9cd6b998d9f92d367ff716541f2d9ece" prot="public" static="no">
        <type>unsigned(*</type>
        <definition>typedef unsigned(* in_func)()</definition>
        <argsstring>)()</argsstring>
        <name>in_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="970" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="970" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zlib_8h_1aeb8cd045bf118bb18980dc7c03481b8f" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* out_func)()</definition>
        <argsstring>)()</argsstring>
        <name>out_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="971" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="971" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zlib_8h_1acd0143ddd532551631ecc7093fd7adfc" prot="public" static="no">
        <type><ref refid="zconf_8h_1aa3397ff439b5e076528b04bc9b8b086a" kindref="member">voidp</ref></type>
        <definition>typedef voidp gzFile</definition>
        <argsstring></argsstring>
        <name>gzFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1165" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" bodystart="1165" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="zlib_8h_1abce074566fe1761a0bc1746663ea3124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* zlibVersion</definition>
        <argsstring>()</argsstring>
        <name>zlibVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="216" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a599c64964d883e17aa8e0c272522e474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflate</definition>
        <argsstring>()</argsstring>
        <name>deflate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a76d5d113b3e84d27c5654b452f80dbdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateEnd</definition>
        <argsstring>()</argsstring>
        <name>deflateEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a3386ec59cf0d65a8e7ec9991d9de8103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflate</definition>
        <argsstring>()</argsstring>
        <name>inflate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a6d3375da05eac1d025829a74fe1b1ab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateEnd</definition>
        <argsstring>()</argsstring>
        <name>inflateEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1adb4cae33cbcd71c3abcfa1e2005f1fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateSetDictionary</definition>
        <argsstring>()</argsstring>
        <name>deflateSetDictionary</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1ab57df6912085b9f5d56d8accc416fa24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateCopy</definition>
        <argsstring>()</argsstring>
        <name>deflateCopy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="617" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a2c70dd543be2a7744032d74eaea3990e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateReset</definition>
        <argsstring>()</argsstring>
        <name>deflateReset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1ad07836ee74ff4980d3dff01dd655aa0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateParams</definition>
        <argsstring>()</argsstring>
        <name>deflateParams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="646" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a8cd127988c6cc76d7f8288cc1a758e50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateTune</definition>
        <argsstring>()</argsstring>
        <name>deflateTune</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="667" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a4cd29815c4db5974aebbea9069754ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref></type>
        <definition>uLong deflateBound</definition>
        <argsstring>()</argsstring>
        <name>deflateBound</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="684" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a03f869970e2ab624e4740b8f81fbd559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflatePrime</definition>
        <argsstring>()</argsstring>
        <name>deflatePrime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="694" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a81d1049bbbe1745a3e1111be810fa16e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateSetHeader</definition>
        <argsstring>()</argsstring>
        <name>deflateSetHeader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="710" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a60118f4b043ec93ffce3f68a41cd90ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateSetDictionary</definition>
        <argsstring>()</argsstring>
        <name>inflateSetDictionary</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="784" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a134ffb41f5270821902cd82b6a8fef21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateSync</definition>
        <argsstring>()</argsstring>
        <name>inflateSync</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="806" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a59959e7d3bbfd1eadd922be8102f3090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateCopy</definition>
        <argsstring>()</argsstring>
        <name>inflateCopy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="821" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1af972734d8753a1369cdbf70de283d2aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateReset</definition>
        <argsstring>()</argsstring>
        <name>inflateReset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="837" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a917b8745da840669c217364e42454273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateReset2</definition>
        <argsstring>()</argsstring>
        <name>inflateReset2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="847" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a90807293b174e30e7af922df1bcf1c58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflatePrime</definition>
        <argsstring>()</argsstring>
        <name>inflatePrime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="859" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1ab64909ab544c56dda1e4f10f218c2516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long inflateMark</definition>
        <argsstring>()</argsstring>
        <name>inflateMark</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="880" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a02ed8b932c9f112c86d6e91900d2e62e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateGetHeader</definition>
        <argsstring>()</argsstring>
        <name>inflateGetHeader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="908" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a8ca4e0d2efcd37b375123befdfa17ace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateBack</definition>
        <argsstring>()</argsstring>
        <name>inflateBack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="973" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a06f9bf0d5ca60ef3f02dd550e30ed6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateBackEnd</definition>
        <argsstring>()</argsstring>
        <name>inflateBackEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1042" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a416647b2b534c3aa03be6d88aa2429fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref></type>
        <definition>uLong zlibCompileFlags</definition>
        <argsstring>()</argsstring>
        <name>zlibCompileFlags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1050" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zutil.c" bodystart="32" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1aa235d73d70547130c04b97d73aad9489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compress</definition>
        <argsstring>()</argsstring>
        <name>compress</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1ab395a146cf2f3ee2e4390a880cc1901a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compress2</definition>
        <argsstring>()</argsstring>
        <name>compress2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a3ab974d7814e56a017840792222426ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref></type>
        <definition>uLong compressBound</definition>
        <argsstring>()</argsstring>
        <name>compressBound</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1ac3cad591ff052f1abe68bc74c6054747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uncompress</definition>
        <argsstring>()</argsstring>
        <name>uncompress</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1ad32e31401f3f926fc30d40298307e451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zlib_8h_1acd0143ddd532551631ecc7093fd7adfc" kindref="member">gzFile</ref></type>
        <definition>gzFile gzdopen</definition>
        <argsstring>()</argsstring>
        <name>gzdopen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1abc6ba34577ba2bcde4005a624fa3e63b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzbuffer</definition>
        <argsstring>()</argsstring>
        <name>gzbuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a12e921f4713c149e3e089cd308d9610e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzsetparams</definition>
        <argsstring>()</argsstring>
        <name>gzsetparams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1afde3d37f67f1b2d4e31fc3056cc5508e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzread</definition>
        <argsstring>()</argsstring>
        <name>gzread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a9e275a784606f8b2ae63569c8a59076e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzwrite</definition>
        <argsstring>()</argsstring>
        <name>gzwrite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a4a2a9186c4a21cf2032e813f40466ad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzprintf</definition>
        <argsstring>()</argsstring>
        <name>gzprintf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1ac41c37d4e14b0e87d43866e7395d7683" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzputs</definition>
        <argsstring>()</argsstring>
        <name>gzputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a2278a94d5999c8a939476a915ee6c924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* gzgets</definition>
        <argsstring>()</argsstring>
        <name>gzgets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1ad58e376fd354414421c2b10f395d37b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzputc</definition>
        <argsstring>()</argsstring>
        <name>gzputc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a322014ec15696f3650eedf4b30eb703d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzgetc</definition>
        <argsstring>()</argsstring>
        <name>gzgetc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a0916bed0b751310ef2e79ba07d382884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzungetc</definition>
        <argsstring>()</argsstring>
        <name>gzungetc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a040367f4d07aa1fb4efebc76f8096deb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzflush</definition>
        <argsstring>()</argsstring>
        <name>gzflush</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a74851e4e30c2d078bff8fa5fb24771fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzrewind</definition>
        <argsstring>()</argsstring>
        <name>gzrewind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a64c8b210e7230c74417a3f6dd07d3119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzeof</definition>
        <argsstring>()</argsstring>
        <name>gzeof</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1ad54d9319d905186be81e14f939f2bb6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzdirect</definition>
        <argsstring>()</argsstring>
        <name>gzdirect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a6010d2f602a06d4c42eafdce2d252252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzclose</definition>
        <argsstring>()</argsstring>
        <name>gzclose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1add00d78cc9782490c582e8bf69e716de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzclose_r</definition>
        <argsstring>()</argsstring>
        <name>gzclose_r</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1425" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a9935a4758b0eb1662fa9710d331a0e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzclose_w</definition>
        <argsstring>()</argsstring>
        <name>gzclose_w</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1acc4473baa9a30856df76a19f22e8316a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* gzerror</definition>
        <argsstring>()</argsstring>
        <name>gzerror</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1aa3ae0c2a6612dbd04984e91eebc98b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gzclearerr</definition>
        <argsstring>()</argsstring>
        <name>gzclearerr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a154683f5b7c8527aee6e9f54d2a469e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref></type>
        <definition>uLong adler32</definition>
        <argsstring>()</argsstring>
        <name>adler32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1ae594a92daa59da8ef2c346cea7abdf68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref></type>
        <definition>uLong crc32</definition>
        <argsstring>()</argsstring>
        <name>crc32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1498" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a4ce97b605e1f88ff90cfe5f4e9384dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateInit_</definition>
        <argsstring>()</argsstring>
        <name>deflateInit_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1af05ac251e4d6b723e96170e66e614ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateInit_</definition>
        <argsstring>()</argsstring>
        <name>inflateInit_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1534" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1aeb60dc2e4671a1d3ae5e43f5cace4dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateInit2_</definition>
        <argsstring>()</argsstring>
        <name>deflateInit2_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1536" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a12762e4d200671d124431cb1933beeb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateInit2_</definition>
        <argsstring>()</argsstring>
        <name>inflateInit2_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1540" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a30c77ac5987236a9bc883723d9b52382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateBackInit_</definition>
        <argsstring>()</argsstring>
        <name>inflateBackInit_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a6e42c605021523b910f07ec4861d0089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zlib_8h_1acd0143ddd532551631ecc7093fd7adfc" kindref="member">gzFile</ref></type>
        <definition>gzFile gzopen</definition>
        <argsstring>()</argsstring>
        <name>gzopen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1590" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1afaae5589204ce502339fe0b534e888c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long gzseek</definition>
        <argsstring>()</argsstring>
        <name>gzseek</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1591" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a12a766c517aea3ae3a59b22959049bb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long gztell</definition>
        <argsstring>()</argsstring>
        <name>gztell</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1592" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a0b005b487678b528628305685025760c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long gzoffset</definition>
        <argsstring>()</argsstring>
        <name>gzoffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1593" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1ab160436dcde208c94e0a8b295fda5f0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref></type>
        <definition>uLong adler32_combine</definition>
        <argsstring>()</argsstring>
        <name>adler32_combine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1594" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a68dcbcb5943abbbd759dc8173e3fe869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref></type>
        <definition>uLong crc32_combine</definition>
        <argsstring>()</argsstring>
        <name>crc32_combine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1595" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a87ceacafbe5ce56c16c353ceea4019d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* zError</definition>
        <argsstring>()</argsstring>
        <name>zError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1ad460ac10d1dd6f0efe235cf2258ae545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateSyncPoint</definition>
        <argsstring>()</argsstring>
        <name>inflateSyncPoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1605" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1abf10d55579884b151b1633f6d1a11357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="zconf_8h_1ace0e0570092c9eb6acd3c85f88cc97ec" kindref="member">uLongf</ref> *</type>
        <definition>uLongf* get_crc_table</definition>
        <argsstring>()</argsstring>
        <name>get_crc_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1606" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/crc32.c" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a99698377731bb75e8a7c4d9a165482ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateUndermine</definition>
        <argsstring>()</argsstring>
        <name>inflateUndermine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h" line="1607" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>zlib.h<sp/>--<sp/>interface<sp/>of<sp/>the<sp/>&apos;zlib&apos;<sp/>general<sp/>purpose<sp/>compression<sp/>library</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>version<sp/>1.2.5,<sp/>April<sp/>19th,<sp/>2010</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/>Copyright<sp/>(C)<sp/>1995-2010<sp/>Jean-loup<sp/>Gailly<sp/>and<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/>Jean-loup<sp/>Gailly<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/>jloup@gzip.org<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>madler@alumni.caltech.edu</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/>The<sp/>data<sp/>format<sp/>used<sp/>by<sp/>the<sp/>zlib<sp/>library<sp/>is<sp/>described<sp/>by<sp/>RFCs<sp/>(Request<sp/>for</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/>Comments)<sp/>1950<sp/>to<sp/>1952<sp/>in<sp/>the<sp/>files<sp/>http://www.ietf.org/rfc/rfc1950.txt</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/>(zlib<sp/>format),<sp/>rfc1951.txt<sp/>(deflate<sp/>format)<sp/>and<sp/>rfc1952.txt<sp/>(gzip<sp/>format).</highlight></codeline>
<codeline lineno="29"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZLIB_H</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZLIB_H</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="zconf_8h" kindref="compound">zconf.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="zlib_8h_1a51dc9dc65e483b3222c1f0f6a87eb76e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZLIB_VERSION<sp/>&quot;1.2.5&quot;</highlight></codeline>
<codeline lineno="41" refid="zlib_8h_1a6413cdfb4cdc0b5a09cf9b5f3f8f48ef" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZLIB_VERNUM<sp/>0x1250</highlight></codeline>
<codeline lineno="42" refid="zlib_8h_1a52eec052f38e306d472e75bfafda9608" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZLIB_VER_MAJOR<sp/>1</highlight></codeline>
<codeline lineno="43" refid="zlib_8h_1a82109105b5511ffa8f8373b6a917e1e4" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZLIB_VER_MINOR<sp/>2</highlight></codeline>
<codeline lineno="44" refid="zlib_8h_1ad3662b8749a50045ec1c120354fb7e9d" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZLIB_VER_REVISION<sp/>5</highlight></codeline>
<codeline lineno="45" refid="zlib_8h_1a788ea49a5b65e12b11d7f274542d5af5" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZLIB_VER_SUBREVISION<sp/>0</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>&apos;zlib&apos;<sp/>compression<sp/>library<sp/>provides<sp/>in-memory<sp/>compression<sp/>and</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/>decompression<sp/>functions,<sp/>including<sp/>integrity<sp/>checks<sp/>of<sp/>the<sp/>uncompressed<sp/>data.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/>This<sp/>version<sp/>of<sp/>the<sp/>library<sp/>supports<sp/>only<sp/>one<sp/>compression<sp/>method<sp/>(deflation)</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/>but<sp/>other<sp/>algorithms<sp/>will<sp/>be<sp/>added<sp/>later<sp/>and<sp/>will<sp/>have<sp/>the<sp/>same<sp/>stream</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/>interface.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/>Compression<sp/>can<sp/>be<sp/>done<sp/>in<sp/>a<sp/>single<sp/>step<sp/>if<sp/>the<sp/>buffers<sp/>are<sp/>large<sp/>enough,</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>or<sp/>can<sp/>be<sp/>done<sp/>by<sp/>repeated<sp/>calls<sp/>of<sp/>the<sp/>compression<sp/>function.<sp/><sp/>In<sp/>the<sp/>latter</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/>case,<sp/>the<sp/>application<sp/>must<sp/>provide<sp/>more<sp/>input<sp/>and/or<sp/>consume<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/>(providing<sp/>more<sp/>output<sp/>space)<sp/>before<sp/>each<sp/>call.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>compressed<sp/>data<sp/>format<sp/>used<sp/>by<sp/>default<sp/>by<sp/>the<sp/>in-memory<sp/>functions<sp/>is</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/>the<sp/>zlib<sp/>format,<sp/>which<sp/>is<sp/>a<sp/>zlib<sp/>wrapper<sp/>documented<sp/>in<sp/>RFC<sp/>1950,<sp/>wrapped</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/>around<sp/>a<sp/>deflate<sp/>stream,<sp/>which<sp/>is<sp/>itself<sp/>documented<sp/>in<sp/>RFC<sp/>1951.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"></highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>library<sp/>also<sp/>supports<sp/>reading<sp/>and<sp/>writing<sp/>files<sp/>in<sp/>gzip<sp/>(.gz)<sp/>format</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/>with<sp/>an<sp/>interface<sp/>similar<sp/>to<sp/>that<sp/>of<sp/>stdio<sp/>using<sp/>the<sp/>functions<sp/>that<sp/>start</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/>with<sp/>&quot;gz&quot;.<sp/><sp/>The<sp/>gzip<sp/>format<sp/>is<sp/>different<sp/>from<sp/>the<sp/>zlib<sp/>format.<sp/><sp/>gzip<sp/>is<sp/>a</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/>gzip<sp/>wrapper,<sp/>documented<sp/>in<sp/>RFC<sp/>1952,<sp/>wrapped<sp/>around<sp/>a<sp/>deflate<sp/>stream.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>library<sp/>can<sp/>optionally<sp/>read<sp/>and<sp/>write<sp/>gzip<sp/>streams<sp/>in<sp/>memory<sp/>as<sp/>well.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>zlib<sp/>format<sp/>was<sp/>designed<sp/>to<sp/>be<sp/>compact<sp/>and<sp/>fast<sp/>for<sp/>use<sp/>in<sp/>memory</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/>and<sp/>on<sp/>communications<sp/>channels.<sp/><sp/>The<sp/>gzip<sp/>format<sp/>was<sp/>designed<sp/>for<sp/>single-</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/>file<sp/>compression<sp/>on<sp/>file<sp/>systems,<sp/>has<sp/>a<sp/>larger<sp/>header<sp/>than<sp/>zlib<sp/>to<sp/>maintain</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/>directory<sp/>information,<sp/>and<sp/>uses<sp/>a<sp/>different,<sp/>slower<sp/>check<sp/>method<sp/>than<sp/>zlib.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"></highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>library<sp/>does<sp/>not<sp/>install<sp/>any<sp/>signal<sp/>handler.<sp/><sp/>The<sp/>decoder<sp/>checks</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/>the<sp/>consistency<sp/>of<sp/>the<sp/>compressed<sp/>data,<sp/>so<sp/>the<sp/>library<sp/>should<sp/>never<sp/>crash</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/>even<sp/>in<sp/>case<sp/>of<sp/>corrupted<sp/>input.</highlight></codeline>
<codeline lineno="78"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="zlib_8h_1af90139b484e48372e0e6db52bb9f6733" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>(*<ref refid="zlib_8h_1af90139b484e48372e0e6db52bb9f6733" kindref="member">alloc_func</ref>)<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>opaque,<sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>items,<sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>size));</highlight></codeline>
<codeline lineno="81" refid="zlib_8h_1af07471bf3f37f2c29078ed11ac59fc7f" refkind="member"><highlight class="normal">typedef<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>(*<ref refid="zlib_8h_1af07471bf3f37f2c29078ed11ac59fc7f" kindref="member">free_func</ref>)<sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>opaque,<sp/><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/>address));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">struct<sp/><ref refid="structinternal__state" kindref="compound">internal_state</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="structz__stream" refkind="compound"><highlight class="normal">typedef<sp/>struct<sp/>z_stream_s<sp/>{</highlight></codeline>
<codeline lineno="86" refid="structz__stream_1abea40a334c642cae56275e32f1bd7f11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/><sp/><sp/><sp/>*<ref refid="structz__stream_1abea40a334c642cae56275e32f1bd7f11" kindref="member">next_in</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>input<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="structz__stream_1a687b6a0bbb7485527e4f9d1a443b144b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/><sp/><sp/><sp/><sp/><ref refid="structz__stream_1a687b6a0bbb7485527e4f9d1a443b144b" kindref="member">avail_in</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>bytes<sp/>available<sp/>at<sp/>next_in<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="structz__stream_1a37acd10cd6841ba0ad5bee7c910e5ef9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><sp/><sp/><sp/><ref refid="structz__stream_1a37acd10cd6841ba0ad5bee7c910e5ef9" kindref="member">total_in</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>nb<sp/>of<sp/>input<sp/>bytes<sp/>read<sp/>so<sp/>far<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="structz__stream_1a5e34f774c4940b8aa5fe476390864192" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/><sp/><sp/><sp/>*<ref refid="structz__stream_1a5e34f774c4940b8aa5fe476390864192" kindref="member">next_out</ref>;<sp/></highlight><highlight class="comment">/*<sp/>next<sp/>output<sp/>byte<sp/>should<sp/>be<sp/>put<sp/>there<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="structz__stream_1a39ffd574ef0c5160c8b9ad373b8dd27a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/><sp/><sp/><sp/><sp/><ref refid="structz__stream_1a39ffd574ef0c5160c8b9ad373b8dd27a" kindref="member">avail_out</ref>;<sp/></highlight><highlight class="comment">/*<sp/>remaining<sp/>free<sp/>space<sp/>at<sp/>next_out<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="structz__stream_1a3478dda91cd0a6d88a54af293c174f38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><sp/><sp/><sp/><ref refid="structz__stream_1a3478dda91cd0a6d88a54af293c174f38" kindref="member">total_out</ref>;<sp/></highlight><highlight class="comment">/*<sp/>total<sp/>nb<sp/>of<sp/>bytes<sp/>output<sp/>so<sp/>far<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="structz__stream_1ad675908c2bdd3b63a4657c7a1604e868" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<ref refid="structz__stream_1ad675908c2bdd3b63a4657c7a1604e868" kindref="member">msg</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>last<sp/>error<sp/>message,<sp/>NULL<sp/>if<sp/>no<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="structz__stream_1ab74ae90fe165934eaf95da212b16ab9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">internal_state<sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*<ref refid="structz__stream_1ab74ae90fe165934eaf95da212b16ab9f" kindref="member">state</ref>;<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>visible<sp/>by<sp/>applications<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="structz__stream_1a39c3f1f00aaace5bf803e1c80643113b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zlib_8h_1af90139b484e48372e0e6db52bb9f6733" kindref="member">alloc_func</ref><sp/><ref refid="structz__stream_1a39c3f1f00aaace5bf803e1c80643113b" kindref="member">zalloc</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>used<sp/>to<sp/>allocate<sp/>the<sp/>internal<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="structz__stream_1ab96ddcd732e86c059414c3f2927cad65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zlib_8h_1af07471bf3f37f2c29078ed11ac59fc7f" kindref="member">free_func</ref><sp/><sp/><ref refid="structz__stream_1ab96ddcd732e86c059414c3f2927cad65" kindref="member">zfree</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>used<sp/>to<sp/>free<sp/>the<sp/>internal<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="structz__stream_1aa3bd7fad5556e34ae1626d8ffd89acde" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref><sp/><sp/><sp/><sp/><sp/><ref refid="structz__stream_1aa3bd7fad5556e34ae1626d8ffd89acde" kindref="member">opaque</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>private<sp/>data<sp/>object<sp/>passed<sp/>to<sp/>zalloc<sp/>and<sp/>zfree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="structz__stream_1a66ea7939b3719b8c1e4a8aa6ca80316a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structz__stream_1a66ea7939b3719b8c1e4a8aa6ca80316a" kindref="member">data_type</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>best<sp/>guess<sp/>about<sp/>the<sp/>data<sp/>type:<sp/>binary<sp/>or<sp/>text<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="structz__stream_1a04334dfae29f0790d16d50052614e87f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><sp/><sp/><ref refid="structz__stream_1a04334dfae29f0790d16d50052614e87f" kindref="member">adler</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>adler32<sp/>value<sp/>of<sp/>the<sp/>uncompressed<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="structz__stream_1a9aa801f395596bdc62381d08fb96f648" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><sp/><sp/><ref refid="structz__stream_1a9aa801f395596bdc62381d08fb96f648" kindref="member">reserved</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reserved<sp/>for<sp/>future<sp/>use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">}<sp/><ref refid="structz__stream" kindref="compound">z_stream</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structz__stream" kindref="compound">z_stream</ref><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*<ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzip<sp/>header<sp/>information<sp/>passed<sp/>to<sp/>and<sp/>from<sp/>zlib<sp/>routines.<sp/><sp/>See<sp/>RFC<sp/>1952</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/>for<sp/>more<sp/>details<sp/>on<sp/>the<sp/>meanings<sp/>of<sp/>these<sp/>fields.</highlight></codeline>
<codeline lineno="111"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="structgz__header" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gz_header_s<sp/>{</highlight></codeline>
<codeline lineno="113" refid="structgz__header_1a0f360ae15271478c63d71eeff3aadf61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structgz__header_1a0f360ae15271478c63d71eeff3aadf61" kindref="member">text</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>true<sp/>if<sp/>compressed<sp/>data<sp/>believed<sp/>to<sp/>be<sp/>text<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="structgz__header_1af78d48bb737730209bdd4f408d7423ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><sp/><sp/><ref refid="structgz__header_1af78d48bb737730209bdd4f408d7423ab" kindref="member">time</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>modification<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="structgz__header_1aff725451a3584a5f1e37fcfb1beccd59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structgz__header_1aff725451a3584a5f1e37fcfb1beccd59" kindref="member">xflags</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>extra<sp/>flags<sp/>(not<sp/>used<sp/>when<sp/>writing<sp/>a<sp/>gzip<sp/>file)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="structgz__header_1a11efbbce191f03696d2773de0688945d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structgz__header_1a11efbbce191f03696d2773de0688945d" kindref="member">os</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>operating<sp/>system<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="structgz__header_1ac5e2665487a2de750abf4058cb540b4c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/><sp/><sp/>*<ref refid="structgz__header_1ac5e2665487a2de750abf4058cb540b4c" kindref="member">extra</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>extra<sp/>field<sp/>or<sp/>Z_NULL<sp/>if<sp/>none<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="structgz__header_1ab16f7081fb292374b007651899c61fc6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/><sp/><sp/><sp/><ref refid="structgz__header_1ab16f7081fb292374b007651899c61fc6" kindref="member">extra_len</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>extra<sp/>field<sp/>length<sp/>(valid<sp/>if<sp/>extra<sp/>!=<sp/>Z_NULL)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="structgz__header_1a15ed037e60f245bea1edb697b25630a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/><sp/><sp/><sp/><ref refid="structgz__header_1a15ed037e60f245bea1edb697b25630a4" kindref="member">extra_max</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>space<sp/>at<sp/>extra<sp/>(only<sp/>when<sp/>reading<sp/>header)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="structgz__header_1a6590a8fcdb4bcf458256f7a9fc3e9c32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/><sp/><sp/>*<ref refid="structgz__header_1a6590a8fcdb4bcf458256f7a9fc3e9c32" kindref="member">name</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>zero-terminated<sp/>file<sp/>name<sp/>or<sp/>Z_NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="structgz__header_1ac58c21e1f423d0215aa7769c3713ac61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/><sp/><sp/><sp/><ref refid="structgz__header_1ac58c21e1f423d0215aa7769c3713ac61" kindref="member">name_max</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>space<sp/>at<sp/>name<sp/>(only<sp/>when<sp/>reading<sp/>header)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="structgz__header_1a12494f0a21cd71356bb2eb9f1abf9743" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/><sp/><sp/>*<ref refid="structgz__header_1a12494f0a21cd71356bb2eb9f1abf9743" kindref="member">comment</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>zero-terminated<sp/>comment<sp/>or<sp/>Z_NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="structgz__header_1a9a86a6f486d381aa55dcaa1451f38fc1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/><sp/><sp/><sp/><ref refid="structgz__header_1a9a86a6f486d381aa55dcaa1451f38fc1" kindref="member">comm_max</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>space<sp/>at<sp/>comment<sp/>(only<sp/>when<sp/>reading<sp/>header)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="structgz__header_1a2a7bc80ae487368f31c86140848835b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structgz__header_1a2a7bc80ae487368f31c86140848835b0" kindref="member">hcrc</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>true<sp/>if<sp/>there<sp/>was<sp/>or<sp/>will<sp/>be<sp/>a<sp/>header<sp/>crc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="structgz__header_1a0f32d102ac6b1a49a0065088ce4e7a11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structgz__header_1a0f32d102ac6b1a49a0065088ce4e7a11" kindref="member">done</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>true<sp/>when<sp/>done<sp/>reading<sp/>gzip<sp/>header<sp/>(not<sp/>used</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>when<sp/>writing<sp/>a<sp/>gzip<sp/>file)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">}<sp/><ref refid="structgz__header" kindref="compound">gz_header</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="zlib_8h_1a20a6ffc695393cb54433da98ab4be7eb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structgz__header" kindref="compound">gz_header</ref><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*<ref refid="zlib_8h_1a20a6ffc695393cb54433da98ab4be7eb" kindref="member">gz_headerp</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>application<sp/>must<sp/>update<sp/>next_in<sp/>and<sp/>avail_in<sp/>when<sp/>avail_in<sp/>has<sp/>dropped</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/>to<sp/>zero.<sp/><sp/>It<sp/>must<sp/>update<sp/>next_out<sp/>and<sp/>avail_out<sp/>when<sp/>avail_out<sp/>has<sp/>dropped</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/>to<sp/>zero.<sp/><sp/>The<sp/>application<sp/>must<sp/>initialize<sp/>zalloc,<sp/>zfree<sp/>and<sp/>opaque<sp/>before</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/>calling<sp/>the<sp/>init<sp/>function.<sp/><sp/>All<sp/>other<sp/>fields<sp/>are<sp/>set<sp/>by<sp/>the<sp/>compression</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/>library<sp/>and<sp/>must<sp/>not<sp/>be<sp/>updated<sp/>by<sp/>the<sp/>application.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>opaque<sp/>value<sp/>provided<sp/>by<sp/>the<sp/>application<sp/>will<sp/>be<sp/>passed<sp/>as<sp/>the<sp/>first</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/>parameter<sp/>for<sp/>calls<sp/>of<sp/>zalloc<sp/>and<sp/>zfree.<sp/><sp/>This<sp/>can<sp/>be<sp/>useful<sp/>for<sp/>custom</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/>memory<sp/>management.<sp/><sp/>The<sp/>compression<sp/>library<sp/>attaches<sp/>no<sp/>meaning<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/>opaque<sp/>value.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>zalloc<sp/>must<sp/>return<sp/>Z_NULL<sp/>if<sp/>there<sp/>is<sp/>not<sp/>enough<sp/>memory<sp/>for<sp/>the<sp/>object.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/>If<sp/>zlib<sp/>is<sp/>used<sp/>in<sp/>a<sp/>multi-threaded<sp/>application,<sp/>zalloc<sp/>and<sp/>zfree<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/>thread<sp/>safe.</highlight></codeline>
<codeline lineno="146"><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>On<sp/>16-bit<sp/>systems,<sp/>the<sp/>functions<sp/>zalloc<sp/>and<sp/>zfree<sp/>must<sp/>be<sp/>able<sp/>to<sp/>allocate</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/>exactly<sp/>65536<sp/>bytes,<sp/>but<sp/>will<sp/>not<sp/>be<sp/>required<sp/>to<sp/>allocate<sp/>more<sp/>than<sp/>this<sp/>if</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/>the<sp/>symbol<sp/>MAXSEG_64K<sp/>is<sp/>defined<sp/>(see<sp/>zconf.h).<sp/><sp/>WARNING:<sp/>On<sp/>MSDOS,<sp/>pointers</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/>returned<sp/>by<sp/>zalloc<sp/>for<sp/>objects<sp/>of<sp/>exactly<sp/>65536<sp/>bytes<sp/>*must*<sp/>have<sp/>their</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/>offset<sp/>normalized<sp/>to<sp/>zero.<sp/><sp/>The<sp/>default<sp/>allocation<sp/>function<sp/>provided<sp/>by<sp/>this</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/>library<sp/>ensures<sp/>this<sp/>(see<sp/>zutil.c).<sp/><sp/>To<sp/>reduce<sp/>memory<sp/>requirements<sp/>and<sp/>avoid</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/>any<sp/>allocation<sp/>of<sp/>64K<sp/>objects,<sp/>at<sp/>the<sp/>expense<sp/>of<sp/>compression<sp/>ratio,<sp/>compile</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/>the<sp/>library<sp/>with<sp/>-DMAX_WBITS=14<sp/>(see<sp/>zconf.h).</highlight></codeline>
<codeline lineno="155"><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>fields<sp/>total_in<sp/>and<sp/>total_out<sp/>can<sp/>be<sp/>used<sp/>for<sp/>statistics<sp/>or<sp/>progress</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/>reports.<sp/><sp/>After<sp/>compression,<sp/>total_in<sp/>holds<sp/>the<sp/>total<sp/>size<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/>uncompressed<sp/>data<sp/>and<sp/>may<sp/>be<sp/>saved<sp/>for<sp/>use<sp/>in<sp/>the<sp/>decompressor<sp/>(particularly</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/>if<sp/>the<sp/>decompressor<sp/>wants<sp/>to<sp/>decompress<sp/>everything<sp/>in<sp/>a<sp/>single<sp/>step).</highlight></codeline>
<codeline lineno="160"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>constants<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="zlib_8h_1ac3b62e37b9922d9496014515acd6083a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NO_FLUSH<sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="165" refid="zlib_8h_1adbd49089a5611593f05ac80c9e12cc7f" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_PARTIAL_FLUSH<sp/>1</highlight></codeline>
<codeline lineno="166" refid="zlib_8h_1aa32ca175522e0ef314f4dc0b0196bada" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_SYNC_FLUSH<sp/><sp/><sp/><sp/>2</highlight></codeline>
<codeline lineno="167" refid="zlib_8h_1aed4fbb038c3973aacf52fccffbc44b53" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_FULL_FLUSH<sp/><sp/><sp/><sp/>3</highlight></codeline>
<codeline lineno="168" refid="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_FINISH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight></codeline>
<codeline lineno="169" refid="zlib_8h_1a73e5f4c24156c63ba863014396685062" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_BLOCK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5</highlight></codeline>
<codeline lineno="170" refid="zlib_8h_1a0c44b4d8d05cacb1227b535cd8ed538f" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_TREES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Allowed<sp/>flush<sp/>values;<sp/>see<sp/>deflate()<sp/>and<sp/>inflate()<sp/>below<sp/>for<sp/>details<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_OK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="174" refid="zlib_8h_1a7d94a4a852228a899864a0053162e7a8" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_STREAM_END<sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="175" refid="zlib_8h_1a32916ba675b2d06463da2576b6a49d64" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_NEED_DICT<sp/><sp/><sp/><sp/><sp/>2</highlight></codeline>
<codeline lineno="176" refid="zlib_8h_1a3c66d64c427c0337c64e578537478737" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_ERRNO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight></codeline>
<codeline lineno="177" refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_STREAM_ERROR<sp/>(-2)</highlight></codeline>
<codeline lineno="178" refid="zlib_8h_1a9eda83d428a71752d148f38b5dbe04f2" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_DATA_ERROR<sp/><sp/><sp/>(-3)</highlight></codeline>
<codeline lineno="179" refid="zlib_8h_1ae2be6be871e377c6e2c25a7296ce320c" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_MEM_ERROR<sp/><sp/><sp/><sp/>(-4)</highlight></codeline>
<codeline lineno="180" refid="zlib_8h_1a425e2f0664e1b1f75bf2bffab88d353d" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_BUF_ERROR<sp/><sp/><sp/><sp/>(-5)</highlight></codeline>
<codeline lineno="181" refid="zlib_8h_1a7634cdd55f955ee1be99c065c6977371" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_VERSION_ERROR<sp/>(-6)</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Return<sp/>codes<sp/>for<sp/>the<sp/>compression/decompression<sp/>functions.<sp/>Negative<sp/>values</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>are<sp/>errors,<sp/>positive<sp/>values<sp/>are<sp/>used<sp/>for<sp/>special<sp/>but<sp/>normal<sp/>events.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="zlib_8h_1a496a4523776bcfa14568cd083b59f24c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NO_COMPRESSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="187" refid="zlib_8h_1ad5222ae19b77c6e83815d07ca5d03fd8" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_BEST_SPEED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="188" refid="zlib_8h_1a8db83edd9dea51f8cf0afd1727838b95" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_BEST_COMPRESSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/>9</highlight></codeline>
<codeline lineno="189" refid="zlib_8h_1af5387baee05124298e431ebe6fe96b17" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_DEFAULT_COMPRESSION<sp/><sp/>(-1)</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>compression<sp/>levels<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="zlib_8h_1af01ccb5a9db8d415cde987d9553ad200" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_FILTERED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="193" refid="zlib_8h_1a1eec3d3720ba91fd54fa08d2757c1785" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_HUFFMAN_ONLY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight></codeline>
<codeline lineno="194" refid="zlib_8h_1af52c1220e7193d2da78332d75f9251ea" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_RLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight></codeline>
<codeline lineno="195" refid="zlib_8h_1aaa5c996fbc985d5ec43f99112c0ac4a6" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_FIXED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight></codeline>
<codeline lineno="196" refid="zlib_8h_1a580d7c2527e653ddd783109271750849" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_DEFAULT_STRATEGY<sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>compression<sp/>strategy;<sp/>see<sp/>deflateInit2()<sp/>below<sp/>for<sp/>details<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="zlib_8h_1a2bfe22ed89d3553335d18a4c3cab67af" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_BINARY<sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="200" refid="zlib_8h_1ac5c9021ac9271248094c6b93c61e1f02" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_TEXT<sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="201" refid="zlib_8h_1a9a852d9163cdb10687403d4e79dda06e" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_ASCII<sp/><sp/><sp/><sp/>Z_TEXT<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>compatibility<sp/>with<sp/>1.2.2<sp/>and<sp/>earlier<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="202" refid="zlib_8h_1a4be54d9d68d40adb73f87492284cc290" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_UNKNOWN<sp/><sp/>2</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Possible<sp/>values<sp/>of<sp/>the<sp/>data_type<sp/>field<sp/>(though<sp/>see<sp/>inflate())<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="zlib_8h_1a27a96226f3dc88e4743131c632adf32f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEFLATED<sp/><sp/><sp/>8</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>The<sp/>deflate<sp/>compression<sp/>method<sp/>(the<sp/>only<sp/>one<sp/>supported<sp/>in<sp/>this<sp/>version)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NULL<sp/><sp/>0<sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>initializing<sp/>zalloc,<sp/>zfree,<sp/>opaque<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="zlib_8h_1a1f228220c3e6935eb171761c61487059" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>zlib_version<sp/>zlibVersion()</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>for<sp/>compatibility<sp/>with<sp/>versions<sp/>&lt;<sp/>1.0.2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>basic<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1abce074566fe1761a0bc1746663ea3124" kindref="member">zlibVersion</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>application<sp/>can<sp/>compare<sp/>zlibVersion<sp/>and<sp/>ZLIB_VERSION<sp/>for<sp/>consistency.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/>If<sp/>the<sp/>first<sp/>character<sp/>differs,<sp/>the<sp/>library<sp/>code<sp/>actually<sp/>used<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/>compatible<sp/>with<sp/>the<sp/>zlib.h<sp/>header<sp/>file<sp/>used<sp/>by<sp/>the<sp/>application.<sp/><sp/>This<sp/>check</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/>is<sp/>automatically<sp/>made<sp/>by<sp/>deflateInit<sp/>and<sp/>inflateInit.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="224"><highlight class="comment">ZEXTERN<sp/>int<sp/>ZEXPORT<sp/>deflateInit<sp/>OF((z_streamp<sp/>strm,<sp/>int<sp/>level));</highlight></codeline>
<codeline lineno="225"><highlight class="comment"></highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>internal<sp/>stream<sp/>state<sp/>for<sp/>compression.<sp/><sp/>The<sp/>fields</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/>zalloc,<sp/>zfree<sp/>and<sp/>opaque<sp/>must<sp/>be<sp/>initialized<sp/>before<sp/>by<sp/>the<sp/>caller.<sp/><sp/>If</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/>zalloc<sp/>and<sp/>zfree<sp/>are<sp/>set<sp/>to<sp/>Z_NULL,<sp/>deflateInit<sp/>updates<sp/>them<sp/>to<sp/>use<sp/>default</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/>allocation<sp/>functions.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"></highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>compression<sp/>level<sp/>must<sp/>be<sp/>Z_DEFAULT_COMPRESSION,<sp/>or<sp/>between<sp/>0<sp/>and<sp/>9:</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/>1<sp/>gives<sp/>best<sp/>speed,<sp/>9<sp/>gives<sp/>best<sp/>compression,<sp/>0<sp/>gives<sp/>no<sp/>compression<sp/>at<sp/>all</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/>(the<sp/>input<sp/>data<sp/>is<sp/>simply<sp/>copied<sp/>a<sp/>block<sp/>at<sp/>a<sp/>time).<sp/><sp/>Z_DEFAULT_COMPRESSION</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/>requests<sp/>a<sp/>default<sp/>compromise<sp/>between<sp/>speed<sp/>and<sp/>compression<sp/>(currently</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/>equivalent<sp/>to<sp/>level<sp/>6).</highlight></codeline>
<codeline lineno="236"><highlight class="comment"></highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateInit<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/>memory,<sp/>Z_STREAM_ERROR<sp/>if<sp/>level<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>compression<sp/>level,<sp/>or</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/>Z_VERSION_ERROR<sp/>if<sp/>the<sp/>zlib<sp/>library<sp/>version<sp/>(zlib_version)<sp/>is<sp/>incompatible</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/>with<sp/>the<sp/>version<sp/>assumed<sp/>by<sp/>the<sp/>caller<sp/>(ZLIB_VERSION).<sp/><sp/>msg<sp/>is<sp/>set<sp/>to<sp/>null</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/>if<sp/>there<sp/>is<sp/>no<sp/>error<sp/>message.<sp/><sp/>deflateInit<sp/>does<sp/>not<sp/>perform<sp/>any<sp/>compression:</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>deflate().</highlight></codeline>
<codeline lineno="243"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a020eb25653da3ef0f1f4f59a82c1e8ae" kindref="member">deflate</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush));</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/>deflate<sp/>compresses<sp/>as<sp/>much<sp/>data<sp/>as<sp/>possible,<sp/>and<sp/>stops<sp/>when<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/>buffer<sp/>becomes<sp/>empty<sp/>or<sp/>the<sp/>output<sp/>buffer<sp/>becomes<sp/>full.<sp/><sp/>It<sp/>may<sp/>introduce</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/>some<sp/>output<sp/>latency<sp/>(reading<sp/>input<sp/>without<sp/>producing<sp/>any<sp/>output)<sp/>except<sp/>when</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/>forced<sp/>to<sp/>flush.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"></highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>detailed<sp/>semantics<sp/>are<sp/>as<sp/>follows.<sp/><sp/>deflate<sp/>performs<sp/>one<sp/>or<sp/>both<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/>following<sp/>actions:</highlight></codeline>
<codeline lineno="255"><highlight class="comment"></highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/>-<sp/>Compress<sp/>more<sp/>input<sp/>starting<sp/>at<sp/>next_in<sp/>and<sp/>update<sp/>next_in<sp/>and<sp/>avail_in</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/>accordingly.<sp/><sp/>If<sp/>not<sp/>all<sp/>input<sp/>can<sp/>be<sp/>processed<sp/>(because<sp/>there<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output<sp/>buffer),<sp/>next_in<sp/>and<sp/>avail_in<sp/>are<sp/>updated<sp/>and</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/>processing<sp/>will<sp/>resume<sp/>at<sp/>this<sp/>point<sp/>for<sp/>the<sp/>next<sp/>call<sp/>of<sp/>deflate().</highlight></codeline>
<codeline lineno="260"><highlight class="comment"></highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/>-<sp/>Provide<sp/>more<sp/>output<sp/>starting<sp/>at<sp/>next_out<sp/>and<sp/>update<sp/>next_out<sp/>and<sp/>avail_out</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/>accordingly.<sp/><sp/>This<sp/>action<sp/>is<sp/>forced<sp/>if<sp/>the<sp/>parameter<sp/>flush<sp/>is<sp/>non<sp/>zero.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/>Forcing<sp/>flush<sp/>frequently<sp/>degrades<sp/>the<sp/>compression<sp/>ratio,<sp/>so<sp/>this<sp/>parameter</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/>should<sp/>be<sp/>set<sp/>only<sp/>when<sp/>necessary<sp/>(in<sp/>interactive<sp/>applications).<sp/><sp/>Some</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/>output<sp/>may<sp/>be<sp/>provided<sp/>even<sp/>if<sp/>flush<sp/>is<sp/>not<sp/>set.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"></highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/>Before<sp/>the<sp/>call<sp/>of<sp/>deflate(),<sp/>the<sp/>application<sp/>should<sp/>ensure<sp/>that<sp/>at<sp/>least</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/>one<sp/>of<sp/>the<sp/>actions<sp/>is<sp/>possible,<sp/>by<sp/>providing<sp/>more<sp/>input<sp/>and/or<sp/>consuming<sp/>more</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/>output,<sp/>and<sp/>updating<sp/>avail_in<sp/>or<sp/>avail_out<sp/>accordingly;<sp/>avail_out<sp/>should</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/>never<sp/>be<sp/>zero<sp/>before<sp/>the<sp/>call.<sp/><sp/>The<sp/>application<sp/>can<sp/>consume<sp/>the<sp/>compressed</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/>output<sp/>when<sp/>it<sp/>wants,<sp/>for<sp/>example<sp/>when<sp/>the<sp/>output<sp/>buffer<sp/>is<sp/>full<sp/>(avail_out</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/>==<sp/>0),<sp/>or<sp/>after<sp/>each<sp/>call<sp/>of<sp/>deflate().<sp/><sp/>If<sp/>deflate<sp/>returns<sp/>Z_OK<sp/>and<sp/>with</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/>zero<sp/>avail_out,<sp/>it<sp/>must<sp/>be<sp/>called<sp/>again<sp/>after<sp/>making<sp/>room<sp/>in<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/>buffer<sp/>because<sp/>there<sp/>might<sp/>be<sp/>more<sp/>output<sp/>pending.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"></highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/>Normally<sp/>the<sp/>parameter<sp/>flush<sp/>is<sp/>set<sp/>to<sp/>Z_NO_FLUSH,<sp/>which<sp/>allows<sp/>deflate<sp/>to</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/>decide<sp/>how<sp/>much<sp/>data<sp/>to<sp/>accumulate<sp/>before<sp/>producing<sp/>output,<sp/>in<sp/>order<sp/>to</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/>maximize<sp/>compression.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"></highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>the<sp/>parameter<sp/>flush<sp/>is<sp/>set<sp/>to<sp/>Z_SYNC_FLUSH,<sp/>all<sp/>pending<sp/>output<sp/>is</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/>flushed<sp/>to<sp/>the<sp/>output<sp/>buffer<sp/>and<sp/>the<sp/>output<sp/>is<sp/>aligned<sp/>on<sp/>a<sp/>byte<sp/>boundary,<sp/>so</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/>that<sp/>the<sp/>decompressor<sp/>can<sp/>get<sp/>all<sp/>input<sp/>data<sp/>available<sp/>so<sp/>far.<sp/><sp/>(In</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/>particular<sp/>avail_in<sp/>is<sp/>zero<sp/>after<sp/>the<sp/>call<sp/>if<sp/>enough<sp/>output<sp/>space<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/>provided<sp/>before<sp/>the<sp/>call.)<sp/>Flushing<sp/>may<sp/>degrade<sp/>compression<sp/>for<sp/>some</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/>compression<sp/>algorithms<sp/>and<sp/>so<sp/>it<sp/>should<sp/>be<sp/>used<sp/>only<sp/>when<sp/>necessary.<sp/><sp/>This</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/>completes<sp/>the<sp/>current<sp/>deflate<sp/>block<sp/>and<sp/>follows<sp/>it<sp/>with<sp/>an<sp/>empty<sp/>stored<sp/>block</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/>that<sp/>is<sp/>three<sp/>bits<sp/>plus<sp/>filler<sp/>bits<sp/>to<sp/>the<sp/>next<sp/>byte,<sp/>followed<sp/>by<sp/>four<sp/>bytes</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/>(00<sp/>00<sp/>ff<sp/>ff).</highlight></codeline>
<codeline lineno="289"><highlight class="comment"></highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>flush<sp/>is<sp/>set<sp/>to<sp/>Z_PARTIAL_FLUSH,<sp/>all<sp/>pending<sp/>output<sp/>is<sp/>flushed<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/>output<sp/>buffer,<sp/>but<sp/>the<sp/>output<sp/>is<sp/>not<sp/>aligned<sp/>to<sp/>a<sp/>byte<sp/>boundary.<sp/><sp/>All<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/>input<sp/>data<sp/>so<sp/>far<sp/>will<sp/>be<sp/>available<sp/>to<sp/>the<sp/>decompressor,<sp/>as<sp/>for<sp/>Z_SYNC_FLUSH.</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/>This<sp/>completes<sp/>the<sp/>current<sp/>deflate<sp/>block<sp/>and<sp/>follows<sp/>it<sp/>with<sp/>an<sp/>empty<sp/>fixed</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/>codes<sp/>block<sp/>that<sp/>is<sp/>10<sp/>bits<sp/>long.<sp/><sp/>This<sp/>assures<sp/>that<sp/>enough<sp/>bytes<sp/>are<sp/>output</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/>in<sp/>order<sp/>for<sp/>the<sp/>decompressor<sp/>to<sp/>finish<sp/>the<sp/>block<sp/>before<sp/>the<sp/>empty<sp/>fixed<sp/>code</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/>block.</highlight></codeline>
<codeline lineno="297"><highlight class="comment"></highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>flush<sp/>is<sp/>set<sp/>to<sp/>Z_BLOCK,<sp/>a<sp/>deflate<sp/>block<sp/>is<sp/>completed<sp/>and<sp/>emitted,<sp/>as</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/>for<sp/>Z_SYNC_FLUSH,<sp/>but<sp/>the<sp/>output<sp/>is<sp/>not<sp/>aligned<sp/>on<sp/>a<sp/>byte<sp/>boundary,<sp/>and<sp/>up<sp/>to</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/>seven<sp/>bits<sp/>of<sp/>the<sp/>current<sp/>block<sp/>are<sp/>held<sp/>to<sp/>be<sp/>written<sp/>as<sp/>the<sp/>next<sp/>byte<sp/>after</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/>the<sp/>next<sp/>deflate<sp/>block<sp/>is<sp/>completed.<sp/><sp/>In<sp/>this<sp/>case,<sp/>the<sp/>decompressor<sp/>may<sp/>not</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/>be<sp/>provided<sp/>enough<sp/>bits<sp/>at<sp/>this<sp/>point<sp/>in<sp/>order<sp/>to<sp/>complete<sp/>decompression<sp/>of</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/>the<sp/>data<sp/>provided<sp/>so<sp/>far<sp/>to<sp/>the<sp/>compressor.<sp/><sp/>It<sp/>may<sp/>need<sp/>to<sp/>wait<sp/>for<sp/>the<sp/>next</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/>block<sp/>to<sp/>be<sp/>emitted.<sp/><sp/>This<sp/>is<sp/>for<sp/>advanced<sp/>applications<sp/>that<sp/>need<sp/>to<sp/>control</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/>the<sp/>emission<sp/>of<sp/>deflate<sp/>blocks.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"></highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>flush<sp/>is<sp/>set<sp/>to<sp/>Z_FULL_FLUSH,<sp/>all<sp/>output<sp/>is<sp/>flushed<sp/>as<sp/>with</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/>Z_SYNC_FLUSH,<sp/>and<sp/>the<sp/>compression<sp/>state<sp/>is<sp/>reset<sp/>so<sp/>that<sp/>decompression<sp/>can</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/>restart<sp/>from<sp/>this<sp/>point<sp/>if<sp/>previous<sp/>compressed<sp/>data<sp/>has<sp/>been<sp/>damaged<sp/>or<sp/>if</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/>random<sp/>access<sp/>is<sp/>desired.<sp/><sp/>Using<sp/>Z_FULL_FLUSH<sp/>too<sp/>often<sp/>can<sp/>seriously<sp/>degrade</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/>compression.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"></highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>deflate<sp/>returns<sp/>with<sp/>avail_out<sp/>==<sp/>0,<sp/>this<sp/>function<sp/>must<sp/>be<sp/>called<sp/>again</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/>with<sp/>the<sp/>same<sp/>value<sp/>of<sp/>the<sp/>flush<sp/>parameter<sp/>and<sp/>more<sp/>output<sp/>space<sp/>(updated</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/>avail_out),<sp/>until<sp/>the<sp/>flush<sp/>is<sp/>complete<sp/>(deflate<sp/>returns<sp/>with<sp/>non-zero</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/>avail_out).<sp/><sp/>In<sp/>the<sp/>case<sp/>of<sp/>a<sp/>Z_FULL_FLUSH<sp/>or<sp/>Z_SYNC_FLUSH,<sp/>make<sp/>sure<sp/>that</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/>avail_out<sp/>is<sp/>greater<sp/>than<sp/>six<sp/>to<sp/>avoid<sp/>repeated<sp/>flush<sp/>markers<sp/>due<sp/>to</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/>avail_out<sp/>==<sp/>0<sp/>on<sp/>return.</highlight></codeline>
<codeline lineno="319"><highlight class="comment"></highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>the<sp/>parameter<sp/>flush<sp/>is<sp/>set<sp/>to<sp/>Z_FINISH,<sp/>pending<sp/>input<sp/>is<sp/>processed,</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/>pending<sp/>output<sp/>is<sp/>flushed<sp/>and<sp/>deflate<sp/>returns<sp/>with<sp/>Z_STREAM_END<sp/>if<sp/>there<sp/>was</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/>enough<sp/>output<sp/>space;<sp/>if<sp/>deflate<sp/>returns<sp/>with<sp/>Z_OK,<sp/>this<sp/>function<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/>called<sp/>again<sp/>with<sp/>Z_FINISH<sp/>and<sp/>more<sp/>output<sp/>space<sp/>(updated<sp/>avail_out)<sp/>but<sp/>no</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/>more<sp/>input<sp/>data,<sp/>until<sp/>it<sp/>returns<sp/>with<sp/>Z_STREAM_END<sp/>or<sp/>an<sp/>error.<sp/><sp/>After</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/>deflate<sp/>has<sp/>returned<sp/>Z_STREAM_END,<sp/>the<sp/>only<sp/>possible<sp/>operations<sp/>on<sp/>the<sp/>stream</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/>are<sp/>deflateReset<sp/>or<sp/>deflateEnd.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"></highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/>Z_FINISH<sp/>can<sp/>be<sp/>used<sp/>immediately<sp/>after<sp/>deflateInit<sp/>if<sp/>all<sp/>the<sp/>compression</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/>is<sp/>to<sp/>be<sp/>done<sp/>in<sp/>a<sp/>single<sp/>step.<sp/><sp/>In<sp/>this<sp/>case,<sp/>avail_out<sp/>must<sp/>be<sp/>at<sp/>least<sp/>the</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/>value<sp/>returned<sp/>by<sp/>deflateBound<sp/>(see<sp/>below).<sp/><sp/>If<sp/>deflate<sp/>does<sp/>not<sp/>return</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/>Z_STREAM_END,<sp/>then<sp/>it<sp/>must<sp/>be<sp/>called<sp/>again<sp/>as<sp/>described<sp/>above.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"></highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/><sp/>deflate()<sp/>sets<sp/>strm-&gt;adler<sp/>to<sp/>the<sp/>adler32<sp/>checksum<sp/>of<sp/>all<sp/>input<sp/>read</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/>so<sp/>far<sp/>(that<sp/>is,<sp/>total_in<sp/>bytes).</highlight></codeline>
<codeline lineno="335"><highlight class="comment"></highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/><sp/><sp/>deflate()<sp/>may<sp/>update<sp/>strm-&gt;data_type<sp/>if<sp/>it<sp/>can<sp/>make<sp/>a<sp/>good<sp/>guess<sp/>about</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/>the<sp/>input<sp/>data<sp/>type<sp/>(Z_BINARY<sp/>or<sp/>Z_TEXT).<sp/><sp/>In<sp/>doubt,<sp/>the<sp/>data<sp/>is<sp/>considered</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/>binary.<sp/><sp/>This<sp/>field<sp/>is<sp/>only<sp/>for<sp/>information<sp/>purposes<sp/>and<sp/>does<sp/>not<sp/>affect<sp/>the</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/>compression<sp/>algorithm<sp/>in<sp/>any<sp/>manner.</highlight></codeline>
<codeline lineno="340"><highlight class="comment"></highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/>deflate()<sp/>returns<sp/>Z_OK<sp/>if<sp/>some<sp/>progress<sp/>has<sp/>been<sp/>made<sp/>(more<sp/>input</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/>processed<sp/>or<sp/>more<sp/>output<sp/>produced),<sp/>Z_STREAM_END<sp/>if<sp/>all<sp/>input<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/>consumed<sp/>and<sp/>all<sp/>output<sp/>has<sp/>been<sp/>produced<sp/>(only<sp/>when<sp/>flush<sp/>is<sp/>set<sp/>to</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/>Z_FINISH),<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>state<sp/>was<sp/>inconsistent<sp/>(for<sp/>example</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/>if<sp/>next_in<sp/>or<sp/>next_out<sp/>was<sp/>Z_NULL),<sp/>Z_BUF_ERROR<sp/>if<sp/>no<sp/>progress<sp/>is<sp/>possible</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/>(for<sp/>example<sp/>avail_in<sp/>or<sp/>avail_out<sp/>was<sp/>zero).<sp/><sp/>Note<sp/>that<sp/>Z_BUF_ERROR<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/>fatal,<sp/>and<sp/>deflate()<sp/>can<sp/>be<sp/>called<sp/>again<sp/>with<sp/>more<sp/>input<sp/>and<sp/>more<sp/>output</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/>space<sp/>to<sp/>continue<sp/>compressing.</highlight></codeline>
<codeline lineno="349"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a6b32d6d4fa68d8aea22445f97048cf67" kindref="member">deflateEnd</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>All<sp/>dynamically<sp/>allocated<sp/>data<sp/>structures<sp/>for<sp/>this<sp/>stream<sp/>are<sp/>freed.</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/><sp/>This<sp/>function<sp/>discards<sp/>any<sp/>unprocessed<sp/>input<sp/>and<sp/>does<sp/>not<sp/>flush<sp/>any<sp/>pending</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/>output.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"></highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateEnd<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_STREAM_ERROR<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent,<sp/>Z_DATA_ERROR<sp/>if<sp/>the<sp/>stream<sp/>was<sp/>freed</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/><sp/><sp/>prematurely<sp/>(some<sp/>input<sp/>or<sp/>output<sp/>was<sp/>discarded).<sp/><sp/>In<sp/>the<sp/>error<sp/>case,<sp/>msg</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/><sp/>may<sp/>be<sp/>set<sp/>but<sp/>then<sp/>points<sp/>to<sp/>a<sp/>static<sp/>string<sp/>(which<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/><sp/>deallocated).</highlight></codeline>
<codeline lineno="363"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="367"><highlight class="comment">ZEXTERN<sp/>int<sp/>ZEXPORT<sp/>inflateInit<sp/>OF((z_streamp<sp/>strm));</highlight></codeline>
<codeline lineno="368"><highlight class="comment"></highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>internal<sp/>stream<sp/>state<sp/>for<sp/>decompression.<sp/><sp/>The<sp/>fields</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/>next_in,<sp/>avail_in,<sp/>zalloc,<sp/>zfree<sp/>and<sp/>opaque<sp/>must<sp/>be<sp/>initialized<sp/>before<sp/>by</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/>the<sp/>caller.<sp/><sp/>If<sp/>next_in<sp/>is<sp/>not<sp/>Z_NULL<sp/>and<sp/>avail_in<sp/>is<sp/>large<sp/>enough<sp/>(the</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/>exact<sp/>value<sp/>depends<sp/>on<sp/>the<sp/>compression<sp/>method),<sp/>inflateInit<sp/>determines<sp/>the</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>method<sp/>from<sp/>the<sp/>zlib<sp/>header<sp/>and<sp/>allocates<sp/>all<sp/>data<sp/>structures</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/><sp/>accordingly;<sp/>otherwise<sp/>the<sp/>allocation<sp/>will<sp/>be<sp/>deferred<sp/>to<sp/>the<sp/>first<sp/>call<sp/>of</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/>inflate.<sp/><sp/>If<sp/>zalloc<sp/>and<sp/>zfree<sp/>are<sp/>set<sp/>to<sp/>Z_NULL,<sp/>inflateInit<sp/>updates<sp/>them<sp/>to</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/>use<sp/>default<sp/>allocation<sp/>functions.</highlight></codeline>
<codeline lineno="377"><highlight class="comment"></highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateInit<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/>memory,<sp/>Z_VERSION_ERROR<sp/>if<sp/>the<sp/>zlib<sp/>library<sp/>version<sp/>is<sp/>incompatible<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/>version<sp/>assumed<sp/>by<sp/>the<sp/>caller,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>parameters<sp/>are</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/>invalid,<sp/>such<sp/>as<sp/>a<sp/>null<sp/>pointer<sp/>to<sp/>the<sp/>structure.<sp/><sp/>msg<sp/>is<sp/>set<sp/>to<sp/>null<sp/>if</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/>there<sp/>is<sp/>no<sp/>error<sp/>message.<sp/><sp/>inflateInit<sp/>does<sp/>not<sp/>perform<sp/>any<sp/>decompression</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/>apart<sp/>from<sp/>possibly<sp/>reading<sp/>the<sp/>zlib<sp/>header<sp/>if<sp/>present:<sp/>actual<sp/>decompression</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/>will<sp/>be<sp/>done<sp/>by<sp/>inflate().<sp/><sp/>(So<sp/>next_in<sp/>and<sp/>avail_in<sp/>may<sp/>be<sp/>modified,<sp/>but</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/>next_out<sp/>and<sp/>avail_out<sp/>are<sp/>unused<sp/>and<sp/>unchanged.)<sp/>The<sp/>current<sp/>implementation</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/>of<sp/>inflateInit()<sp/>does<sp/>not<sp/>process<sp/>any<sp/>header<sp/>information<sp/>--<sp/>that<sp/>is<sp/>deferred</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/><sp/>until<sp/>inflate()<sp/>is<sp/>called.</highlight></codeline>
<codeline lineno="388"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="inflate_8c_1a79b92a0a5ce8f5dcdfe65d301e6c12a4" kindref="member">inflate</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush));</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/><sp/>inflate<sp/>decompresses<sp/>as<sp/>much<sp/>data<sp/>as<sp/>possible,<sp/>and<sp/>stops<sp/>when<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/>buffer<sp/>becomes<sp/>empty<sp/>or<sp/>the<sp/>output<sp/>buffer<sp/>becomes<sp/>full.<sp/><sp/>It<sp/>may<sp/>introduce</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/>some<sp/>output<sp/>latency<sp/>(reading<sp/>input<sp/>without<sp/>producing<sp/>any<sp/>output)<sp/>except<sp/>when</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/><sp/>forced<sp/>to<sp/>flush.</highlight></codeline>
<codeline lineno="397"><highlight class="comment"></highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/><sp/>The<sp/>detailed<sp/>semantics<sp/>are<sp/>as<sp/>follows.<sp/><sp/>inflate<sp/>performs<sp/>one<sp/>or<sp/>both<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/><sp/>following<sp/>actions:</highlight></codeline>
<codeline lineno="400"><highlight class="comment"></highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/>-<sp/>Decompress<sp/>more<sp/>input<sp/>starting<sp/>at<sp/>next_in<sp/>and<sp/>update<sp/>next_in<sp/>and<sp/>avail_in</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/><sp/><sp/>accordingly.<sp/><sp/>If<sp/>not<sp/>all<sp/>input<sp/>can<sp/>be<sp/>processed<sp/>(because<sp/>there<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output<sp/>buffer),<sp/>next_in<sp/>is<sp/>updated<sp/>and<sp/>processing<sp/>will</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/><sp/>resume<sp/>at<sp/>this<sp/>point<sp/>for<sp/>the<sp/>next<sp/>call<sp/>of<sp/>inflate().</highlight></codeline>
<codeline lineno="405"><highlight class="comment"></highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/>-<sp/>Provide<sp/>more<sp/>output<sp/>starting<sp/>at<sp/>next_out<sp/>and<sp/>update<sp/>next_out<sp/>and<sp/>avail_out</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/><sp/><sp/>accordingly.<sp/><sp/>inflate()<sp/>provides<sp/>as<sp/>much<sp/>output<sp/>as<sp/>possible,<sp/>until<sp/>there<sp/>is</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/><sp/><sp/>no<sp/>more<sp/>input<sp/>data<sp/>or<sp/>no<sp/>more<sp/>space<sp/>in<sp/>the<sp/>output<sp/>buffer<sp/>(see<sp/>below<sp/>about</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>flush<sp/>parameter).</highlight></codeline>
<codeline lineno="410"><highlight class="comment"></highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/><sp/>Before<sp/>the<sp/>call<sp/>of<sp/>inflate(),<sp/>the<sp/>application<sp/>should<sp/>ensure<sp/>that<sp/>at<sp/>least</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/>one<sp/>of<sp/>the<sp/>actions<sp/>is<sp/>possible,<sp/>by<sp/>providing<sp/>more<sp/>input<sp/>and/or<sp/>consuming<sp/>more</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/>output,<sp/>and<sp/>updating<sp/>the<sp/>next_*<sp/>and<sp/>avail_*<sp/>values<sp/>accordingly.<sp/><sp/>The</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/>application<sp/>can<sp/>consume<sp/>the<sp/>uncompressed<sp/>output<sp/>when<sp/>it<sp/>wants,<sp/>for<sp/>example</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/>when<sp/>the<sp/>output<sp/>buffer<sp/>is<sp/>full<sp/>(avail_out<sp/>==<sp/>0),<sp/>or<sp/>after<sp/>each<sp/>call<sp/>of</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/>inflate().<sp/><sp/>If<sp/>inflate<sp/>returns<sp/>Z_OK<sp/>and<sp/>with<sp/>zero<sp/>avail_out,<sp/>it<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/>called<sp/>again<sp/>after<sp/>making<sp/>room<sp/>in<sp/>the<sp/>output<sp/>buffer<sp/>because<sp/>there<sp/>might<sp/>be</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/>more<sp/>output<sp/>pending.</highlight></codeline>
<codeline lineno="419"><highlight class="comment"></highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>flush<sp/>parameter<sp/>of<sp/>inflate()<sp/>can<sp/>be<sp/>Z_NO_FLUSH,<sp/>Z_SYNC_FLUSH,<sp/>Z_FINISH,</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/><sp/>Z_BLOCK,<sp/>or<sp/>Z_TREES.<sp/><sp/>Z_SYNC_FLUSH<sp/>requests<sp/>that<sp/>inflate()<sp/>flush<sp/>as<sp/>much</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/>output<sp/>as<sp/>possible<sp/>to<sp/>the<sp/>output<sp/>buffer.<sp/><sp/>Z_BLOCK<sp/>requests<sp/>that<sp/>inflate()</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/>stop<sp/>if<sp/>and<sp/>when<sp/>it<sp/>gets<sp/>to<sp/>the<sp/>next<sp/>deflate<sp/>block<sp/>boundary.<sp/><sp/>When<sp/>decoding</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/>the<sp/>zlib<sp/>or<sp/>gzip<sp/>format,<sp/>this<sp/>will<sp/>cause<sp/>inflate()<sp/>to<sp/>return<sp/>immediately</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/>after<sp/>the<sp/>header<sp/>and<sp/>before<sp/>the<sp/>first<sp/>block.<sp/><sp/>When<sp/>doing<sp/>a<sp/>raw<sp/>inflate,</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/>inflate()<sp/>will<sp/>go<sp/>ahead<sp/>and<sp/>process<sp/>the<sp/>first<sp/>block,<sp/>and<sp/>will<sp/>return<sp/>when<sp/>it</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/>gets<sp/>to<sp/>the<sp/>end<sp/>of<sp/>that<sp/>block,<sp/>or<sp/>when<sp/>it<sp/>runs<sp/>out<sp/>of<sp/>data.</highlight></codeline>
<codeline lineno="428"><highlight class="comment"></highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>Z_BLOCK<sp/>option<sp/>assists<sp/>in<sp/>appending<sp/>to<sp/>or<sp/>combining<sp/>deflate<sp/>streams.</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/>Also<sp/>to<sp/>assist<sp/>in<sp/>this,<sp/>on<sp/>return<sp/>inflate()<sp/>will<sp/>set<sp/>strm-&gt;data_type<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/>number<sp/>of<sp/>unused<sp/>bits<sp/>in<sp/>the<sp/>last<sp/>byte<sp/>taken<sp/>from<sp/>strm-&gt;next_in,<sp/>plus<sp/>64<sp/>if</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/>inflate()<sp/>is<sp/>currently<sp/>decoding<sp/>the<sp/>last<sp/>block<sp/>in<sp/>the<sp/>deflate<sp/>stream,<sp/>plus</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/>128<sp/>if<sp/>inflate()<sp/>returned<sp/>immediately<sp/>after<sp/>decoding<sp/>an<sp/>end-of-block<sp/>code<sp/>or</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/>decoding<sp/>the<sp/>complete<sp/>header<sp/>up<sp/>to<sp/>just<sp/>before<sp/>the<sp/>first<sp/>byte<sp/>of<sp/>the<sp/>deflate</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/>stream.<sp/><sp/>The<sp/>end-of-block<sp/>will<sp/>not<sp/>be<sp/>indicated<sp/>until<sp/>all<sp/>of<sp/>the<sp/>uncompressed</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/>data<sp/>from<sp/>that<sp/>block<sp/>has<sp/>been<sp/>written<sp/>to<sp/>strm-&gt;next_out.<sp/><sp/>The<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/>unused<sp/>bits<sp/>may<sp/>in<sp/>general<sp/>be<sp/>greater<sp/>than<sp/>seven,<sp/>except<sp/>when<sp/>bit<sp/>7<sp/>of</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/>data_type<sp/>is<sp/>set,<sp/>in<sp/>which<sp/>case<sp/>the<sp/>number<sp/>of<sp/>unused<sp/>bits<sp/>will<sp/>be<sp/>less<sp/>than</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/>eight.<sp/><sp/>data_type<sp/>is<sp/>set<sp/>as<sp/>noted<sp/>here<sp/>every<sp/>time<sp/>inflate()<sp/>returns<sp/>for<sp/>all</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/>flush<sp/>options,<sp/>and<sp/>so<sp/>can<sp/>be<sp/>used<sp/>to<sp/>determine<sp/>the<sp/>amount<sp/>of<sp/>currently</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/>consumed<sp/>input<sp/>in<sp/>bits.</highlight></codeline>
<codeline lineno="442"><highlight class="comment"></highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>Z_TREES<sp/>option<sp/>behaves<sp/>as<sp/>Z_BLOCK<sp/>does,<sp/>but<sp/>it<sp/>also<sp/>returns<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/>end<sp/>of<sp/>each<sp/>deflate<sp/>block<sp/>header<sp/>is<sp/>reached,<sp/>before<sp/>any<sp/>actual<sp/>data<sp/>in<sp/>that</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/>block<sp/>is<sp/>decoded.<sp/><sp/>This<sp/>allows<sp/>the<sp/>caller<sp/>to<sp/>determine<sp/>the<sp/>length<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/>deflate<sp/>block<sp/>header<sp/>for<sp/>later<sp/>use<sp/>in<sp/>random<sp/>access<sp/>within<sp/>a<sp/>deflate<sp/>block.</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/>256<sp/>is<sp/>added<sp/>to<sp/>the<sp/>value<sp/>of<sp/>strm-&gt;data_type<sp/>when<sp/>inflate()<sp/>returns</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/>immediately<sp/>after<sp/>reaching<sp/>the<sp/>end<sp/>of<sp/>the<sp/>deflate<sp/>block<sp/>header.</highlight></codeline>
<codeline lineno="449"><highlight class="comment"></highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/><sp/>inflate()<sp/>should<sp/>normally<sp/>be<sp/>called<sp/>until<sp/>it<sp/>returns<sp/>Z_STREAM_END<sp/>or<sp/>an</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/>error.<sp/><sp/>However<sp/>if<sp/>all<sp/>decompression<sp/>is<sp/>to<sp/>be<sp/>performed<sp/>in<sp/>a<sp/>single<sp/>step<sp/>(a</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/>single<sp/>call<sp/>of<sp/>inflate),<sp/>the<sp/>parameter<sp/>flush<sp/>should<sp/>be<sp/>set<sp/>to<sp/>Z_FINISH.<sp/><sp/>In</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/>this<sp/>case<sp/>all<sp/>pending<sp/>input<sp/>is<sp/>processed<sp/>and<sp/>all<sp/>pending<sp/>output<sp/>is<sp/>flushed;</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/>avail_out<sp/>must<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>hold<sp/>all<sp/>the<sp/>uncompressed<sp/>data.<sp/><sp/>(The<sp/>size</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/>of<sp/>the<sp/>uncompressed<sp/>data<sp/>may<sp/>have<sp/>been<sp/>saved<sp/>by<sp/>the<sp/>compressor<sp/>for<sp/>this</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/><sp/>purpose.)<sp/>The<sp/>next<sp/>operation<sp/>on<sp/>this<sp/>stream<sp/>must<sp/>be<sp/>inflateEnd<sp/>to<sp/>deallocate</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/>the<sp/>decompression<sp/>state.<sp/><sp/>The<sp/>use<sp/>of<sp/>Z_FINISH<sp/>is<sp/>never<sp/>required,<sp/>but<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/>used<sp/>to<sp/>inform<sp/>inflate<sp/>that<sp/>a<sp/>faster<sp/>approach<sp/>may<sp/>be<sp/>used<sp/>for<sp/>the<sp/>single</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/>inflate()<sp/>call.</highlight></codeline>
<codeline lineno="460"><highlight class="comment"></highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>In<sp/>this<sp/>implementation,<sp/>inflate()<sp/>always<sp/>flushes<sp/>as<sp/>much<sp/>output<sp/>as</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/><sp/>possible<sp/>to<sp/>the<sp/>output<sp/>buffer,<sp/>and<sp/>always<sp/>uses<sp/>the<sp/>faster<sp/>approach<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/>first<sp/>call.<sp/><sp/>So<sp/>the<sp/>only<sp/>effect<sp/>of<sp/>the<sp/>flush<sp/>parameter<sp/>in<sp/>this<sp/>implementation</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/><sp/>is<sp/>on<sp/>the<sp/>return<sp/>value<sp/>of<sp/>inflate(),<sp/>as<sp/>noted<sp/>below,<sp/>or<sp/>when<sp/>it<sp/>returns<sp/>early</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/>because<sp/>Z_BLOCK<sp/>or<sp/>Z_TREES<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="466"><highlight class="comment"></highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>a<sp/>preset<sp/>dictionary<sp/>is<sp/>needed<sp/>after<sp/>this<sp/>call<sp/>(see<sp/>inflateSetDictionary</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/>below),<sp/>inflate<sp/>sets<sp/>strm-&gt;adler<sp/>to<sp/>the<sp/>adler32<sp/>checksum<sp/>of<sp/>the<sp/>dictionary</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/>chosen<sp/>by<sp/>the<sp/>compressor<sp/>and<sp/>returns<sp/>Z_NEED_DICT;<sp/>otherwise<sp/>it<sp/>sets</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/>strm-&gt;adler<sp/>to<sp/>the<sp/>adler32<sp/>checksum<sp/>of<sp/>all<sp/>output<sp/>produced<sp/>so<sp/>far<sp/>(that<sp/>is,</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/>total_out<sp/>bytes)<sp/>and<sp/>returns<sp/>Z_OK,<sp/>Z_STREAM_END<sp/>or<sp/>an<sp/>error<sp/>code<sp/>as<sp/>described</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/>below.<sp/><sp/>At<sp/>the<sp/>end<sp/>of<sp/>the<sp/>stream,<sp/>inflate()<sp/>checks<sp/>that<sp/>its<sp/>computed<sp/>adler32</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/>checksum<sp/>is<sp/>equal<sp/>to<sp/>that<sp/>saved<sp/>by<sp/>the<sp/>compressor<sp/>and<sp/>returns<sp/>Z_STREAM_END</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/>only<sp/>if<sp/>the<sp/>checksum<sp/>is<sp/>correct.</highlight></codeline>
<codeline lineno="475"><highlight class="comment"></highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/><sp/>inflate()<sp/>can<sp/>decompress<sp/>and<sp/>check<sp/>either<sp/>zlib-wrapped<sp/>or<sp/>gzip-wrapped</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/>deflate<sp/>data.<sp/><sp/>The<sp/>header<sp/>type<sp/>is<sp/>detected<sp/>automatically,<sp/>if<sp/>requested<sp/>when</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/>initializing<sp/>with<sp/>inflateInit2().<sp/><sp/>Any<sp/>information<sp/>contained<sp/>in<sp/>the<sp/>gzip</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/>header<sp/>is<sp/>not<sp/>retained,<sp/>so<sp/>applications<sp/>that<sp/>need<sp/>that<sp/>information<sp/>should</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/>instead<sp/>use<sp/>raw<sp/>inflate,<sp/>see<sp/>inflateInit2()<sp/>below,<sp/>or<sp/>inflateBack()<sp/>and</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/>perform<sp/>their<sp/>own<sp/>processing<sp/>of<sp/>the<sp/>gzip<sp/>header<sp/>and<sp/>trailer.</highlight></codeline>
<codeline lineno="482"><highlight class="comment"></highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/><sp/>inflate()<sp/>returns<sp/>Z_OK<sp/>if<sp/>some<sp/>progress<sp/>has<sp/>been<sp/>made<sp/>(more<sp/>input<sp/>processed</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/>or<sp/>more<sp/>output<sp/>produced),<sp/>Z_STREAM_END<sp/>if<sp/>the<sp/>end<sp/>of<sp/>the<sp/>compressed<sp/>data<sp/>has</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/>been<sp/>reached<sp/>and<sp/>all<sp/>uncompressed<sp/>output<sp/>has<sp/>been<sp/>produced,<sp/>Z_NEED_DICT<sp/>if<sp/>a</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/>preset<sp/>dictionary<sp/>is<sp/>needed<sp/>at<sp/>this<sp/>point,<sp/>Z_DATA_ERROR<sp/>if<sp/>the<sp/>input<sp/>data<sp/>was</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/>corrupted<sp/>(input<sp/>stream<sp/>not<sp/>conforming<sp/>to<sp/>the<sp/>zlib<sp/>format<sp/>or<sp/>incorrect<sp/>check</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/><sp/>value),<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>structure<sp/>was<sp/>inconsistent<sp/>(for<sp/>example</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/>next_in<sp/>or<sp/>next_out<sp/>was<sp/>Z_NULL),<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough<sp/>memory,</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/><sp/>Z_BUF_ERROR<sp/>if<sp/>no<sp/>progress<sp/>is<sp/>possible<sp/>or<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough<sp/>room<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/><sp/>output<sp/>buffer<sp/>when<sp/>Z_FINISH<sp/>is<sp/>used.<sp/><sp/>Note<sp/>that<sp/>Z_BUF_ERROR<sp/>is<sp/>not<sp/>fatal,<sp/>and</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/><sp/>inflate()<sp/>can<sp/>be<sp/>called<sp/>again<sp/>with<sp/>more<sp/>input<sp/>and<sp/>more<sp/>output<sp/>space<sp/>to</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/><sp/>continue<sp/>decompressing.<sp/><sp/>If<sp/>Z_DATA_ERROR<sp/>is<sp/>returned,<sp/>the<sp/>application<sp/>may</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/><sp/>then<sp/>call<sp/>inflateSync()<sp/>to<sp/>look<sp/>for<sp/>a<sp/>good<sp/>compression<sp/>block<sp/>if<sp/>a<sp/>partial</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/>recovery<sp/>of<sp/>the<sp/>data<sp/>is<sp/>desired.</highlight></codeline>
<codeline lineno="496"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="inflate_8c_1abc6f3c66e6691b5007ecc9e1cb570fa2" kindref="member">inflateEnd</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm));</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>All<sp/>dynamically<sp/>allocated<sp/>data<sp/>structures<sp/>for<sp/>this<sp/>stream<sp/>are<sp/>freed.</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/><sp/>This<sp/>function<sp/>discards<sp/>any<sp/>unprocessed<sp/>input<sp/>and<sp/>does<sp/>not<sp/>flush<sp/>any<sp/>pending</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/>output.</highlight></codeline>
<codeline lineno="504"><highlight class="comment"></highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateEnd<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>state</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/><sp/><sp/>was<sp/>inconsistent.<sp/><sp/>In<sp/>the<sp/>error<sp/>case,<sp/>msg<sp/>may<sp/>be<sp/>set<sp/>but<sp/>then<sp/>points<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/><sp/><sp/>static<sp/>string<sp/>(which<sp/>must<sp/>not<sp/>be<sp/>deallocated).</highlight></codeline>
<codeline lineno="508"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Advanced<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>following<sp/>functions<sp/>are<sp/>needed<sp/>only<sp/>in<sp/>some<sp/>special<sp/>applications.</highlight></codeline>
<codeline lineno="515"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="518"><highlight class="comment">ZEXTERN<sp/>int<sp/>ZEXPORT<sp/>deflateInit2<sp/>OF((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>level,</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>method,</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>windowBits,</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>memLevel,</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>strategy));</highlight></codeline>
<codeline lineno="524"><highlight class="comment"></highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>another<sp/>version<sp/>of<sp/>deflateInit<sp/>with<sp/>more<sp/>compression<sp/>options.<sp/><sp/>The</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/><sp/><sp/>fields<sp/>next_in,<sp/>zalloc,<sp/>zfree<sp/>and<sp/>opaque<sp/>must<sp/>be<sp/>initialized<sp/>before<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/><sp/><sp/>caller.</highlight></codeline>
<codeline lineno="528"><highlight class="comment"></highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>method<sp/>parameter<sp/>is<sp/>the<sp/>compression<sp/>method.<sp/><sp/>It<sp/>must<sp/>be<sp/>Z_DEFLATED<sp/>in</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/><sp/><sp/>this<sp/>version<sp/>of<sp/>the<sp/>library.</highlight></codeline>
<codeline lineno="531"><highlight class="comment"></highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>windowBits<sp/>parameter<sp/>is<sp/>the<sp/>base<sp/>two<sp/>logarithm<sp/>of<sp/>the<sp/>window<sp/>size</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/><sp/>(the<sp/>size<sp/>of<sp/>the<sp/>history<sp/>buffer).<sp/><sp/>It<sp/>should<sp/>be<sp/>in<sp/>the<sp/>range<sp/>8..15<sp/>for<sp/>this</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/><sp/><sp/>version<sp/>of<sp/>the<sp/>library.<sp/><sp/>Larger<sp/>values<sp/>of<sp/>this<sp/>parameter<sp/>result<sp/>in<sp/>better</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>at<sp/>the<sp/>expense<sp/>of<sp/>memory<sp/>usage.<sp/><sp/>The<sp/>default<sp/>value<sp/>is<sp/>15<sp/>if</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/><sp/>deflateInit<sp/>is<sp/>used<sp/>instead.</highlight></codeline>
<codeline lineno="537"><highlight class="comment"></highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>windowBits<sp/>can<sp/>also<sp/>be<sp/>-8..-15<sp/>for<sp/>raw<sp/>deflate.<sp/><sp/>In<sp/>this<sp/>case,<sp/>-windowBits</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/><sp/><sp/>determines<sp/>the<sp/>window<sp/>size.<sp/><sp/>deflate()<sp/>will<sp/>then<sp/>generate<sp/>raw<sp/>deflate<sp/>data</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/><sp/><sp/>with<sp/>no<sp/>zlib<sp/>header<sp/>or<sp/>trailer,<sp/>and<sp/>will<sp/>not<sp/>compute<sp/>an<sp/>adler32<sp/>check<sp/>value.</highlight></codeline>
<codeline lineno="541"><highlight class="comment"></highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>windowBits<sp/>can<sp/>also<sp/>be<sp/>greater<sp/>than<sp/>15<sp/>for<sp/>optional<sp/>gzip<sp/>encoding.<sp/><sp/>Add</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/><sp/><sp/>16<sp/>to<sp/>windowBits<sp/>to<sp/>write<sp/>a<sp/>simple<sp/>gzip<sp/>header<sp/>and<sp/>trailer<sp/>around<sp/>the</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/><sp/>compressed<sp/>data<sp/>instead<sp/>of<sp/>a<sp/>zlib<sp/>wrapper.<sp/><sp/>The<sp/>gzip<sp/>header<sp/>will<sp/>have<sp/>no</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/><sp/>file<sp/>name,<sp/>no<sp/>extra<sp/>data,<sp/>no<sp/>comment,<sp/>no<sp/>modification<sp/>time<sp/>(set<sp/>to<sp/>zero),<sp/>no</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/><sp/><sp/>header<sp/>crc,<sp/>and<sp/>the<sp/>operating<sp/>system<sp/>will<sp/>be<sp/>set<sp/>to<sp/>255<sp/>(unknown).<sp/><sp/>If<sp/>a</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/><sp/>gzip<sp/>stream<sp/>is<sp/>being<sp/>written,<sp/>strm-&gt;adler<sp/>is<sp/>a<sp/>crc32<sp/>instead<sp/>of<sp/>an<sp/>adler32.</highlight></codeline>
<codeline lineno="548"><highlight class="comment"></highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>memLevel<sp/>parameter<sp/>specifies<sp/>how<sp/>much<sp/>memory<sp/>should<sp/>be<sp/>allocated</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/><sp/><sp/>for<sp/>the<sp/>internal<sp/>compression<sp/>state.<sp/><sp/>memLevel=1<sp/>uses<sp/>minimum<sp/>memory<sp/>but<sp/>is</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/><sp/><sp/>slow<sp/>and<sp/>reduces<sp/>compression<sp/>ratio;<sp/>memLevel=9<sp/>uses<sp/>maximum<sp/>memory<sp/>for</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/><sp/><sp/>optimal<sp/>speed.<sp/><sp/>The<sp/>default<sp/>value<sp/>is<sp/>8.<sp/><sp/>See<sp/>zconf.h<sp/>for<sp/>total<sp/>memory<sp/>usage</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/><sp/><sp/>as<sp/>a<sp/>function<sp/>of<sp/>windowBits<sp/>and<sp/>memLevel.</highlight></codeline>
<codeline lineno="554"><highlight class="comment"></highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>strategy<sp/>parameter<sp/>is<sp/>used<sp/>to<sp/>tune<sp/>the<sp/>compression<sp/>algorithm.<sp/><sp/>Use<sp/>the</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/><sp/>value<sp/>Z_DEFAULT_STRATEGY<sp/>for<sp/>normal<sp/>data,<sp/>Z_FILTERED<sp/>for<sp/>data<sp/>produced<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/><sp/>filter<sp/>(or<sp/>predictor),<sp/>Z_HUFFMAN_ONLY<sp/>to<sp/>force<sp/>Huffman<sp/>encoding<sp/>only<sp/>(no</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/><sp/><sp/>string<sp/>match),<sp/>or<sp/>Z_RLE<sp/>to<sp/>limit<sp/>match<sp/>distances<sp/>to<sp/>one<sp/>(run-length</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/><sp/>encoding).<sp/><sp/>Filtered<sp/>data<sp/>consists<sp/>mostly<sp/>of<sp/>small<sp/>values<sp/>with<sp/>a<sp/>somewhat</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/><sp/>random<sp/>distribution.<sp/><sp/>In<sp/>this<sp/>case,<sp/>the<sp/>compression<sp/>algorithm<sp/>is<sp/>tuned<sp/>to</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/>compress<sp/>them<sp/>better.<sp/><sp/>The<sp/>effect<sp/>of<sp/>Z_FILTERED<sp/>is<sp/>to<sp/>force<sp/>more<sp/>Huffman</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/><sp/>coding<sp/>and<sp/>less<sp/>string<sp/>matching;<sp/>it<sp/>is<sp/>somewhat<sp/>intermediate<sp/>between</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/>Z_DEFAULT_STRATEGY<sp/>and<sp/>Z_HUFFMAN_ONLY.<sp/><sp/>Z_RLE<sp/>is<sp/>designed<sp/>to<sp/>be<sp/>almost<sp/>as</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/><sp/><sp/>fast<sp/>as<sp/>Z_HUFFMAN_ONLY,<sp/>but<sp/>give<sp/>better<sp/>compression<sp/>for<sp/>PNG<sp/>image<sp/>data.<sp/><sp/>The</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/><sp/>strategy<sp/>parameter<sp/>only<sp/>affects<sp/>the<sp/>compression<sp/>ratio<sp/>but<sp/>not<sp/>the</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/><sp/><sp/>correctness<sp/>of<sp/>the<sp/>compressed<sp/>output<sp/>even<sp/>if<sp/>it<sp/>is<sp/>not<sp/>set<sp/>appropriately.</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/><sp/><sp/>Z_FIXED<sp/>prevents<sp/>the<sp/>use<sp/>of<sp/>dynamic<sp/>Huffman<sp/>codes,<sp/>allowing<sp/>for<sp/>a<sp/>simpler</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/><sp/><sp/>decoder<sp/>for<sp/>special<sp/>applications.</highlight></codeline>
<codeline lineno="569"><highlight class="comment"></highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateInit2<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/><sp/>memory,<sp/>Z_STREAM_ERROR<sp/>if<sp/>any<sp/>parameter<sp/>is<sp/>invalid<sp/>(such<sp/>as<sp/>an<sp/>invalid</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/><sp/><sp/>method),<sp/>or<sp/>Z_VERSION_ERROR<sp/>if<sp/>the<sp/>zlib<sp/>library<sp/>version<sp/>(zlib_version)<sp/>is</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/><sp/><sp/>incompatible<sp/>with<sp/>the<sp/>version<sp/>assumed<sp/>by<sp/>the<sp/>caller<sp/>(ZLIB_VERSION).<sp/><sp/>msg<sp/>is</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/><sp/><sp/>set<sp/>to<sp/>null<sp/>if<sp/>there<sp/>is<sp/>no<sp/>error<sp/>message.<sp/><sp/>deflateInit2<sp/>does<sp/>not<sp/>perform<sp/>any</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/><sp/><sp/>compression:<sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>deflate().</highlight></codeline>
<codeline lineno="576"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a49e4f2317baf6ab80f81d0934e49a6b6" kindref="member">deflateSetDictionary</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*dictionary,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/><sp/>dictLength));</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>compression<sp/>dictionary<sp/>from<sp/>the<sp/>given<sp/>byte<sp/>sequence</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/><sp/><sp/>without<sp/>producing<sp/>any<sp/>compressed<sp/>output.<sp/><sp/>This<sp/>function<sp/>must<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/><sp/><sp/>immediately<sp/>after<sp/>deflateInit,<sp/>deflateInit2<sp/>or<sp/>deflateReset,<sp/>before<sp/>any<sp/>call</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/><sp/><sp/>of<sp/>deflate.<sp/><sp/>The<sp/>compressor<sp/>and<sp/>decompressor<sp/>must<sp/>use<sp/>exactly<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/><sp/><sp/>dictionary<sp/>(see<sp/>inflateSetDictionary).</highlight></codeline>
<codeline lineno="587"><highlight class="comment"></highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>dictionary<sp/>should<sp/>consist<sp/>of<sp/>strings<sp/>(byte<sp/>sequences)<sp/>that<sp/>are<sp/>likely</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/><sp/><sp/>to<sp/>be<sp/>encountered<sp/>later<sp/>in<sp/>the<sp/>data<sp/>to<sp/>be<sp/>compressed,<sp/>with<sp/>the<sp/>most<sp/>commonly</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/><sp/><sp/>used<sp/>strings<sp/>preferably<sp/>put<sp/>towards<sp/>the<sp/>end<sp/>of<sp/>the<sp/>dictionary.<sp/><sp/>Using<sp/>a</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/><sp/><sp/>dictionary<sp/>is<sp/>most<sp/>useful<sp/>when<sp/>the<sp/>data<sp/>to<sp/>be<sp/>compressed<sp/>is<sp/>short<sp/>and<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/><sp/><sp/>predicted<sp/>with<sp/>good<sp/>accuracy;<sp/>the<sp/>data<sp/>can<sp/>then<sp/>be<sp/>compressed<sp/>better<sp/>than</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/><sp/>with<sp/>the<sp/>default<sp/>empty<sp/>dictionary.</highlight></codeline>
<codeline lineno="594"><highlight class="comment"></highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Depending<sp/>on<sp/>the<sp/>size<sp/>of<sp/>the<sp/>compression<sp/>data<sp/>structures<sp/>selected<sp/>by</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/><sp/><sp/>deflateInit<sp/>or<sp/>deflateInit2,<sp/>a<sp/>part<sp/>of<sp/>the<sp/>dictionary<sp/>may<sp/>in<sp/>effect<sp/>be</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/><sp/><sp/>discarded,<sp/>for<sp/>example<sp/>if<sp/>the<sp/>dictionary<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>window<sp/>size</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/><sp/><sp/>provided<sp/>in<sp/>deflateInit<sp/>or<sp/>deflateInit2.<sp/><sp/>Thus<sp/>the<sp/>strings<sp/>most<sp/>likely<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/><sp/><sp/>useful<sp/>should<sp/>be<sp/>put<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>dictionary,<sp/>not<sp/>at<sp/>the<sp/>front.<sp/><sp/>In</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/><sp/><sp/>addition,<sp/>the<sp/>current<sp/>implementation<sp/>of<sp/>deflate<sp/>will<sp/>use<sp/>at<sp/>most<sp/>the<sp/>window</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/><sp/><sp/>size<sp/>minus<sp/>262<sp/>bytes<sp/>of<sp/>the<sp/>provided<sp/>dictionary.</highlight></codeline>
<codeline lineno="602"><highlight class="comment"></highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Upon<sp/>return<sp/>of<sp/>this<sp/>function,<sp/>strm-&gt;adler<sp/>is<sp/>set<sp/>to<sp/>the<sp/>adler32<sp/>value</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/><sp/><sp/>of<sp/>the<sp/>dictionary;<sp/>the<sp/>decompressor<sp/>may<sp/>later<sp/>use<sp/>this<sp/>value<sp/>to<sp/>determine</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/><sp/><sp/>which<sp/>dictionary<sp/>has<sp/>been<sp/>used<sp/>by<sp/>the<sp/>compressor.<sp/><sp/>(The<sp/>adler32<sp/>value</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/><sp/><sp/>applies<sp/>to<sp/>the<sp/>whole<sp/>dictionary<sp/>even<sp/>if<sp/>only<sp/>a<sp/>subset<sp/>of<sp/>the<sp/>dictionary<sp/>is</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/>actually<sp/>used<sp/>by<sp/>the<sp/>compressor.)<sp/>If<sp/>a<sp/>raw<sp/>deflate<sp/>was<sp/>requested,<sp/>then<sp/>the</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/><sp/>adler32<sp/>value<sp/>is<sp/>not<sp/>computed<sp/>and<sp/>strm-&gt;adler<sp/>is<sp/>not<sp/>set.</highlight></codeline>
<codeline lineno="609"><highlight class="comment"></highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateSetDictionary<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>a</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/><sp/><sp/>parameter<sp/>is<sp/>invalid<sp/>(e.g.<sp/><sp/>dictionary<sp/>being<sp/>Z_NULL)<sp/>or<sp/>the<sp/>stream<sp/>state<sp/>is</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/><sp/><sp/>inconsistent<sp/>(for<sp/>example<sp/>if<sp/>deflate<sp/>has<sp/>already<sp/>been<sp/>called<sp/>for<sp/>this<sp/>stream</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/><sp/><sp/>or<sp/>if<sp/>the<sp/>compression<sp/>method<sp/>is<sp/>bsort).<sp/><sp/>deflateSetDictionary<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="614"><highlight class="comment"><sp/><sp/><sp/>perform<sp/>any<sp/>compression:<sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>deflate().</highlight></codeline>
<codeline lineno="615"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1aa38b4c952efce070b3dbb6fdc41d9cf4" kindref="member">deflateCopy</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>dest,</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_streamp<sp/>source));</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Sets<sp/>the<sp/>destination<sp/>stream<sp/>as<sp/>a<sp/>complete<sp/>copy<sp/>of<sp/>the<sp/>source<sp/>stream.</highlight></codeline>
<codeline lineno="621"><highlight class="comment"></highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>can<sp/>be<sp/>useful<sp/>when<sp/>several<sp/>compression<sp/>strategies<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/><sp/><sp/>tried,<sp/>for<sp/>example<sp/>when<sp/>there<sp/>are<sp/>several<sp/>ways<sp/>of<sp/>pre-processing<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/><sp/>data<sp/>with<sp/>a<sp/>filter.<sp/><sp/>The<sp/>streams<sp/>that<sp/>will<sp/>be<sp/>discarded<sp/>should<sp/>then<sp/>be<sp/>freed</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/>by<sp/>calling<sp/>deflateEnd.<sp/><sp/>Note<sp/>that<sp/>deflateCopy<sp/>duplicates<sp/>the<sp/>internal</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>state<sp/>which<sp/>can<sp/>be<sp/>quite<sp/>large,<sp/>so<sp/>this<sp/>strategy<sp/>is<sp/>slow<sp/>and<sp/>can</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/>consume<sp/>lots<sp/>of<sp/>memory.</highlight></codeline>
<codeline lineno="628"><highlight class="comment"></highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateCopy<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/><sp/>enough<sp/>memory,<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source<sp/>stream<sp/>state<sp/>was<sp/>inconsistent</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/><sp/><sp/>(such<sp/>as<sp/>zalloc<sp/>being<sp/>Z_NULL).<sp/><sp/>msg<sp/>is<sp/>left<sp/>unchanged<sp/>in<sp/>both<sp/>source<sp/>and</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/><sp/><sp/>destination.</highlight></codeline>
<codeline lineno="633"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a1678e92d49418699a3caa1fb88b8ab52" kindref="member">deflateReset</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm));</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>is<sp/>equivalent<sp/>to<sp/>deflateEnd<sp/>followed<sp/>by<sp/>deflateInit,</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/><sp/><sp/>but<sp/>does<sp/>not<sp/>free<sp/>and<sp/>reallocate<sp/>all<sp/>the<sp/>internal<sp/>compression<sp/>state.<sp/><sp/>The</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>will<sp/>keep<sp/>the<sp/>same<sp/>compression<sp/>level<sp/>and<sp/>any<sp/>other<sp/>attributes<sp/>that</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/><sp/><sp/>may<sp/>have<sp/>been<sp/>set<sp/>by<sp/>deflateInit2.</highlight></codeline>
<codeline lineno="641"><highlight class="comment"></highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateReset<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent<sp/>(such<sp/>as<sp/>zalloc<sp/>or<sp/>state<sp/>being<sp/>Z_NULL).</highlight></codeline>
<codeline lineno="644"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1adb08871bcd410fb9d8d221a1ae378fa8" kindref="member">deflateParams</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strategy));</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Dynamically<sp/>update<sp/>the<sp/>compression<sp/>level<sp/>and<sp/>compression<sp/>strategy.<sp/><sp/>The</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/><sp/>interpretation<sp/>of<sp/>level<sp/>and<sp/>strategy<sp/>is<sp/>as<sp/>in<sp/>deflateInit2.<sp/><sp/>This<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/><sp/>used<sp/>to<sp/>switch<sp/>between<sp/>compression<sp/>and<sp/>straight<sp/>copy<sp/>of<sp/>the<sp/>input<sp/>data,<sp/>or</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/>to<sp/>switch<sp/>to<sp/>a<sp/>different<sp/>kind<sp/>of<sp/>input<sp/>data<sp/>requiring<sp/>a<sp/>different<sp/>strategy.</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/><sp/><sp/>If<sp/>the<sp/>compression<sp/>level<sp/>is<sp/>changed,<sp/>the<sp/>input<sp/>available<sp/>so<sp/>far<sp/>is</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/><sp/><sp/>compressed<sp/>with<sp/>the<sp/>old<sp/>level<sp/>(and<sp/>may<sp/>be<sp/>flushed);<sp/>the<sp/>new<sp/>level<sp/>will<sp/>take</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/><sp/><sp/>effect<sp/>only<sp/>at<sp/>the<sp/>next<sp/>call<sp/>of<sp/>deflate().</highlight></codeline>
<codeline lineno="657"><highlight class="comment"></highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Before<sp/>the<sp/>call<sp/>of<sp/>deflateParams,<sp/>the<sp/>stream<sp/>state<sp/>must<sp/>be<sp/>set<sp/>as<sp/>for</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/><sp/><sp/>a<sp/>call<sp/>of<sp/>deflate(),<sp/>since<sp/>the<sp/>currently<sp/>available<sp/>input<sp/>may<sp/>have<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/><sp/><sp/>compressed<sp/>and<sp/>flushed.<sp/><sp/>In<sp/>particular,<sp/>strm-&gt;avail_out<sp/>must<sp/>be<sp/>non-zero.</highlight></codeline>
<codeline lineno="661"><highlight class="comment"></highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateParams<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent<sp/>or<sp/>if<sp/>a<sp/>parameter<sp/>was<sp/>invalid,<sp/>Z_BUF_ERROR<sp/>if</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/><sp/><sp/>strm-&gt;avail_out<sp/>was<sp/>zero.</highlight></codeline>
<codeline lineno="665"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a66ffe828d83d0610fa2f62bb7a076faf" kindref="member">deflateTune</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>good_length,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_lazy,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nice_length,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_chain));</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Fine<sp/>tune<sp/>deflate&apos;s<sp/>internal<sp/>compression<sp/>parameters.<sp/><sp/>This<sp/>should<sp/>only<sp/>be</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/><sp/><sp/>used<sp/>by<sp/>someone<sp/>who<sp/>understands<sp/>the<sp/>algorithm<sp/>used<sp/>by<sp/>zlib&apos;s<sp/>deflate<sp/>for</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/><sp/><sp/>searching<sp/>for<sp/>the<sp/>best<sp/>matching<sp/>string,<sp/>and<sp/>even<sp/>then<sp/>only<sp/>by<sp/>the<sp/>most</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/><sp/><sp/>fanatic<sp/>optimizer<sp/>trying<sp/>to<sp/>squeeze<sp/>out<sp/>the<sp/>last<sp/>compressed<sp/>bit<sp/>for<sp/>their</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/><sp/><sp/>specific<sp/>input<sp/>data.<sp/><sp/>Read<sp/>the<sp/>deflate.c<sp/>source<sp/>code<sp/>for<sp/>the<sp/>meaning<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/><sp/><sp/>max_lazy,<sp/>good_length,<sp/>nice_length,<sp/>and<sp/>max_chain<sp/>parameters.</highlight></codeline>
<codeline lineno="679"><highlight class="comment"></highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateTune()<sp/>can<sp/>be<sp/>called<sp/>after<sp/>deflateInit()<sp/>or<sp/>deflateInit2(),<sp/>and</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/><sp/>returns<sp/>Z_OK<sp/>on<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>for<sp/>an<sp/>invalid<sp/>deflate<sp/>stream.</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a193af31ee07ae28a0db592fe7d257e8d" kindref="member">deflateBound</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/>sourceLen));</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateBound()<sp/>returns<sp/>an<sp/>upper<sp/>bound<sp/>on<sp/>the<sp/>compressed<sp/>size<sp/>after</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/><sp/>deflation<sp/>of<sp/>sourceLen<sp/>bytes.<sp/><sp/>It<sp/>must<sp/>be<sp/>called<sp/>after<sp/>deflateInit()<sp/>or</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/><sp/><sp/>deflateInit2(),<sp/>and<sp/>after<sp/>deflateSetHeader(),<sp/>if<sp/>used.<sp/><sp/>This<sp/>would<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/><sp/><sp/>to<sp/>allocate<sp/>an<sp/>output<sp/>buffer<sp/>for<sp/>deflation<sp/>in<sp/>a<sp/>single<sp/>pass,<sp/>and<sp/>so<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/><sp/><sp/>called<sp/>before<sp/>deflate().</highlight></codeline>
<codeline lineno="692"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a0376f713dfb9676c3eadaf1bb0c759b5" kindref="member">deflatePrime</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits,</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value));</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflatePrime()<sp/>inserts<sp/>bits<sp/>in<sp/>the<sp/>deflate<sp/>output<sp/>stream.<sp/><sp/>The<sp/>intent</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/>is<sp/>that<sp/>this<sp/>function<sp/>is<sp/>used<sp/>to<sp/>start<sp/>off<sp/>the<sp/>deflate<sp/>output<sp/>with<sp/>the<sp/>bits</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/>leftover<sp/>from<sp/>a<sp/>previous<sp/>deflate<sp/>stream<sp/>when<sp/>appending<sp/>to<sp/>it.<sp/><sp/>As<sp/>such,<sp/>this</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/>function<sp/>can<sp/>only<sp/>be<sp/>used<sp/>for<sp/>raw<sp/>deflate,<sp/>and<sp/>must<sp/>be<sp/>used<sp/>before<sp/>the<sp/>first</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/><sp/><sp/>deflate()<sp/>call<sp/>after<sp/>a<sp/>deflateInit2()<sp/>or<sp/>deflateReset().<sp/><sp/>bits<sp/>must<sp/>be<sp/>less</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/><sp/><sp/>than<sp/>or<sp/>equal<sp/>to<sp/>16,<sp/>and<sp/>that<sp/>many<sp/>of<sp/>the<sp/>least<sp/>significant<sp/>bits<sp/>of<sp/>value</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/><sp/><sp/>will<sp/>be<sp/>inserted<sp/>in<sp/>the<sp/>output.</highlight></codeline>
<codeline lineno="705"><highlight class="comment"></highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflatePrime<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent.</highlight></codeline>
<codeline lineno="708"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a9a22f76091e3a8e93d22eff573ea684d" kindref="member">deflateSetHeader</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gz_headerp<sp/>head));</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateSetHeader()<sp/>provides<sp/>gzip<sp/>header<sp/>information<sp/>for<sp/>when<sp/>a<sp/>gzip</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>is<sp/>requested<sp/>by<sp/>deflateInit2().<sp/><sp/>deflateSetHeader()<sp/>may<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/><sp/><sp/>after<sp/>deflateInit2()<sp/>or<sp/>deflateReset()<sp/>and<sp/>before<sp/>the<sp/>first<sp/>call<sp/>of</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/><sp/><sp/>deflate().<sp/><sp/>The<sp/>text,<sp/>time,<sp/>os,<sp/>extra<sp/>field,<sp/>name,<sp/>and<sp/>comment<sp/>information</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/><sp/><sp/>in<sp/>the<sp/>provided<sp/>gz_header<sp/>structure<sp/>are<sp/>written<sp/>to<sp/>the<sp/>gzip<sp/>header<sp/>(xflag<sp/>is</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/><sp/><sp/>ignored<sp/>--<sp/>the<sp/>extra<sp/>flags<sp/>are<sp/>set<sp/>according<sp/>to<sp/>the<sp/>compression<sp/>level).<sp/><sp/>The</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/><sp/><sp/>caller<sp/>must<sp/>assure<sp/>that,<sp/>if<sp/>not<sp/>Z_NULL,<sp/>name<sp/>and<sp/>comment<sp/>are<sp/>terminated<sp/>with</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/><sp/><sp/>a<sp/>zero<sp/>byte,<sp/>and<sp/>that<sp/>if<sp/>extra<sp/>is<sp/>not<sp/>Z_NULL,<sp/>that<sp/>extra_len<sp/>bytes<sp/>are</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/><sp/><sp/>available<sp/>there.<sp/><sp/>If<sp/>hcrc<sp/>is<sp/>true,<sp/>a<sp/>gzip<sp/>header<sp/>crc<sp/>is<sp/>included.<sp/><sp/>Note<sp/>that</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/><sp/><sp/>the<sp/>current<sp/>versions<sp/>of<sp/>the<sp/>command-line<sp/>version<sp/>of<sp/>gzip<sp/>(up<sp/>through<sp/>version</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/><sp/><sp/>1.3.x)<sp/>do<sp/>not<sp/>support<sp/>header<sp/>crc&apos;s,<sp/>and<sp/>will<sp/>report<sp/>that<sp/>it<sp/>is<sp/>a<sp/>&quot;multi-part</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/><sp/><sp/>gzip<sp/>file&quot;<sp/>and<sp/>give<sp/>up.</highlight></codeline>
<codeline lineno="725"><highlight class="comment"></highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>deflateSetHeader<sp/>is<sp/>not<sp/>used,<sp/>the<sp/>default<sp/>gzip<sp/>header<sp/>has<sp/>text<sp/>false,</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/><sp/><sp/>the<sp/>time<sp/>set<sp/>to<sp/>zero,<sp/>and<sp/>os<sp/>set<sp/>to<sp/>255,<sp/>with<sp/>no<sp/>extra,<sp/>name,<sp/>or<sp/>comment</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/><sp/>fields.<sp/><sp/>The<sp/>gzip<sp/>header<sp/>is<sp/>returned<sp/>to<sp/>the<sp/>default<sp/>state<sp/>by<sp/>deflateReset().</highlight></codeline>
<codeline lineno="729"><highlight class="comment"></highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateSetHeader<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent.</highlight></codeline>
<codeline lineno="732"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="735"><highlight class="comment">ZEXTERN<sp/>int<sp/>ZEXPORT<sp/>inflateInit2<sp/>OF((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>windowBits));</highlight></codeline>
<codeline lineno="737"><highlight class="comment"></highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>another<sp/>version<sp/>of<sp/>inflateInit<sp/>with<sp/>an<sp/>extra<sp/>parameter.<sp/><sp/>The</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/><sp/><sp/>fields<sp/>next_in,<sp/>avail_in,<sp/>zalloc,<sp/>zfree<sp/>and<sp/>opaque<sp/>must<sp/>be<sp/>initialized</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/><sp/>before<sp/>by<sp/>the<sp/>caller.</highlight></codeline>
<codeline lineno="741"><highlight class="comment"></highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>windowBits<sp/>parameter<sp/>is<sp/>the<sp/>base<sp/>two<sp/>logarithm<sp/>of<sp/>the<sp/>maximum<sp/>window</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/><sp/>size<sp/>(the<sp/>size<sp/>of<sp/>the<sp/>history<sp/>buffer).<sp/><sp/>It<sp/>should<sp/>be<sp/>in<sp/>the<sp/>range<sp/>8..15<sp/>for</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/><sp/><sp/>this<sp/>version<sp/>of<sp/>the<sp/>library.<sp/><sp/>The<sp/>default<sp/>value<sp/>is<sp/>15<sp/>if<sp/>inflateInit<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/><sp/>instead.<sp/><sp/>windowBits<sp/>must<sp/>be<sp/>greater<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>the<sp/>windowBits<sp/>value</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/><sp/>provided<sp/>to<sp/>deflateInit2()<sp/>while<sp/>compressing,<sp/>or<sp/>it<sp/>must<sp/>be<sp/>equal<sp/>to<sp/>15<sp/>if</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/><sp/><sp/>deflateInit2()<sp/>was<sp/>not<sp/>used.<sp/><sp/>If<sp/>a<sp/>compressed<sp/>stream<sp/>with<sp/>a<sp/>larger<sp/>window</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/><sp/><sp/>size<sp/>is<sp/>given<sp/>as<sp/>input,<sp/>inflate()<sp/>will<sp/>return<sp/>with<sp/>the<sp/>error<sp/>code</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/><sp/>Z_DATA_ERROR<sp/>instead<sp/>of<sp/>trying<sp/>to<sp/>allocate<sp/>a<sp/>larger<sp/>window.</highlight></codeline>
<codeline lineno="750"><highlight class="comment"></highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>windowBits<sp/>can<sp/>also<sp/>be<sp/>zero<sp/>to<sp/>request<sp/>that<sp/>inflate<sp/>use<sp/>the<sp/>window<sp/>size<sp/>in</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/><sp/>the<sp/>zlib<sp/>header<sp/>of<sp/>the<sp/>compressed<sp/>stream.</highlight></codeline>
<codeline lineno="753"><highlight class="comment"></highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>windowBits<sp/>can<sp/>also<sp/>be<sp/>-8..-15<sp/>for<sp/>raw<sp/>inflate.<sp/><sp/>In<sp/>this<sp/>case,<sp/>-windowBits</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/><sp/><sp/>determines<sp/>the<sp/>window<sp/>size.<sp/><sp/>inflate()<sp/>will<sp/>then<sp/>process<sp/>raw<sp/>deflate<sp/>data,</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/><sp/><sp/>not<sp/>looking<sp/>for<sp/>a<sp/>zlib<sp/>or<sp/>gzip<sp/>header,<sp/>not<sp/>generating<sp/>a<sp/>check<sp/>value,<sp/>and<sp/>not</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/><sp/>looking<sp/>for<sp/>any<sp/>check<sp/>values<sp/>for<sp/>comparison<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>stream.<sp/><sp/>This</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/><sp/><sp/>is<sp/>for<sp/>use<sp/>with<sp/>other<sp/>formats<sp/>that<sp/>use<sp/>the<sp/>deflate<sp/>compressed<sp/>data<sp/>format</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/><sp/><sp/>such<sp/>as<sp/>zip.<sp/><sp/>Those<sp/>formats<sp/>provide<sp/>their<sp/>own<sp/>check<sp/>values.<sp/><sp/>If<sp/>a<sp/>custom</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/><sp/><sp/>format<sp/>is<sp/>developed<sp/>using<sp/>the<sp/>raw<sp/>deflate<sp/>format<sp/>for<sp/>compressed<sp/>data,<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/><sp/><sp/>recommended<sp/>that<sp/>a<sp/>check<sp/>value<sp/>such<sp/>as<sp/>an<sp/>adler32<sp/>or<sp/>a<sp/>crc32<sp/>be<sp/>applied<sp/>to</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/><sp/><sp/>the<sp/>uncompressed<sp/>data<sp/>as<sp/>is<sp/>done<sp/>in<sp/>the<sp/>zlib,<sp/>gzip,<sp/>and<sp/>zip<sp/>formats.<sp/><sp/>For</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/><sp/><sp/>most<sp/>applications,<sp/>the<sp/>zlib<sp/>format<sp/>should<sp/>be<sp/>used<sp/>as<sp/>is.<sp/><sp/>Note<sp/>that<sp/>comments</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/><sp/><sp/>above<sp/>on<sp/>the<sp/>use<sp/>in<sp/>deflateInit2()<sp/>applies<sp/>to<sp/>the<sp/>magnitude<sp/>of<sp/>windowBits.</highlight></codeline>
<codeline lineno="765"><highlight class="comment"></highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>windowBits<sp/>can<sp/>also<sp/>be<sp/>greater<sp/>than<sp/>15<sp/>for<sp/>optional<sp/>gzip<sp/>decoding.<sp/><sp/>Add</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/><sp/><sp/>32<sp/>to<sp/>windowBits<sp/>to<sp/>enable<sp/>zlib<sp/>and<sp/>gzip<sp/>decoding<sp/>with<sp/>automatic<sp/>header</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/><sp/><sp/>detection,<sp/>or<sp/>add<sp/>16<sp/>to<sp/>decode<sp/>only<sp/>the<sp/>gzip<sp/>format<sp/>(the<sp/>zlib<sp/>format<sp/>will</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/><sp/><sp/>return<sp/>a<sp/>Z_DATA_ERROR).<sp/><sp/>If<sp/>a<sp/>gzip<sp/>stream<sp/>is<sp/>being<sp/>decoded,<sp/>strm-&gt;adler<sp/>is<sp/>a</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/><sp/><sp/>crc32<sp/>instead<sp/>of<sp/>an<sp/>adler32.</highlight></codeline>
<codeline lineno="771"><highlight class="comment"></highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateInit2<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/><sp/><sp/>memory,<sp/>Z_VERSION_ERROR<sp/>if<sp/>the<sp/>zlib<sp/>library<sp/>version<sp/>is<sp/>incompatible<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/><sp/><sp/>version<sp/>assumed<sp/>by<sp/>the<sp/>caller,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>parameters<sp/>are</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/><sp/><sp/>invalid,<sp/>such<sp/>as<sp/>a<sp/>null<sp/>pointer<sp/>to<sp/>the<sp/>structure.<sp/><sp/>msg<sp/>is<sp/>set<sp/>to<sp/>null<sp/>if</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/><sp/><sp/>there<sp/>is<sp/>no<sp/>error<sp/>message.<sp/><sp/>inflateInit2<sp/>does<sp/>not<sp/>perform<sp/>any<sp/>decompression</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/><sp/><sp/>apart<sp/>from<sp/>possibly<sp/>reading<sp/>the<sp/>zlib<sp/>header<sp/>if<sp/>present:<sp/>actual<sp/>decompression</highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/><sp/><sp/>will<sp/>be<sp/>done<sp/>by<sp/>inflate().<sp/><sp/>(So<sp/>next_in<sp/>and<sp/>avail_in<sp/>may<sp/>be<sp/>modified,<sp/>but</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/><sp/><sp/>next_out<sp/>and<sp/>avail_out<sp/>are<sp/>unused<sp/>and<sp/>unchanged.)<sp/>The<sp/>current<sp/>implementation</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/><sp/><sp/>of<sp/>inflateInit2()<sp/>does<sp/>not<sp/>process<sp/>any<sp/>header<sp/>information<sp/>--<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/><sp/><sp/>deferred<sp/>until<sp/>inflate()<sp/>is<sp/>called.</highlight></codeline>
<codeline lineno="782"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="inflate_8c_1a70a95f343952a809bbb6bcf3b362e593" kindref="member">inflateSetDictionary</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*dictionary,</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/><sp/>dictLength));</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>decompression<sp/>dictionary<sp/>from<sp/>the<sp/>given<sp/>uncompressed<sp/>byte</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/><sp/><sp/>sequence.<sp/><sp/>This<sp/>function<sp/>must<sp/>be<sp/>called<sp/>immediately<sp/>after<sp/>a<sp/>call<sp/>of<sp/>inflate,</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/><sp/><sp/>if<sp/>that<sp/>call<sp/>returned<sp/>Z_NEED_DICT.<sp/><sp/>The<sp/>dictionary<sp/>chosen<sp/>by<sp/>the<sp/>compressor</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/><sp/><sp/>can<sp/>be<sp/>determined<sp/>from<sp/>the<sp/>adler32<sp/>value<sp/>returned<sp/>by<sp/>that<sp/>call<sp/>of<sp/>inflate.</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/><sp/><sp/>The<sp/>compressor<sp/>and<sp/>decompressor<sp/>must<sp/>use<sp/>exactly<sp/>the<sp/>same<sp/>dictionary<sp/>(see</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/><sp/><sp/>deflateSetDictionary).<sp/><sp/>For<sp/>raw<sp/>inflate,<sp/>this<sp/>function<sp/>can<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/><sp/><sp/>immediately<sp/>after<sp/>inflateInit2()<sp/>or<sp/>inflateReset()<sp/>and<sp/>before<sp/>any<sp/>call<sp/>of</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/><sp/><sp/>inflate()<sp/>to<sp/>set<sp/>the<sp/>dictionary.<sp/><sp/>The<sp/>application<sp/>must<sp/>insure<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/><sp/><sp/>dictionary<sp/>that<sp/>was<sp/>used<sp/>for<sp/>compression<sp/>is<sp/>provided.</highlight></codeline>
<codeline lineno="797"><highlight class="comment"></highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateSetDictionary<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_STREAM_ERROR<sp/>if<sp/>a</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/><sp/><sp/>parameter<sp/>is<sp/>invalid<sp/>(e.g.<sp/><sp/>dictionary<sp/>being<sp/>Z_NULL)<sp/>or<sp/>the<sp/>stream<sp/>state<sp/>is</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/><sp/><sp/>inconsistent,<sp/>Z_DATA_ERROR<sp/>if<sp/>the<sp/>given<sp/>dictionary<sp/>doesn&apos;t<sp/>match<sp/>the</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/><sp/><sp/>expected<sp/>one<sp/>(incorrect<sp/>adler32<sp/>value).<sp/><sp/>inflateSetDictionary<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/><sp/>perform<sp/>any<sp/>decompression:<sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>subsequent<sp/>calls<sp/>of</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/><sp/><sp/>inflate().</highlight></codeline>
<codeline lineno="804"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="inflate_8c_1a6311fc784f0bf21d96cb58962359ea61" kindref="member">inflateSync</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm));</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Skips<sp/>invalid<sp/>compressed<sp/>data<sp/>until<sp/>a<sp/>full<sp/>flush<sp/>point<sp/>(see<sp/>above<sp/>the</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/><sp/><sp/>description<sp/>of<sp/>deflate<sp/>with<sp/>Z_FULL_FLUSH)<sp/>can<sp/>be<sp/>found,<sp/>or<sp/>until<sp/>all</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/><sp/><sp/>available<sp/>input<sp/>is<sp/>skipped.<sp/><sp/>No<sp/>output<sp/>is<sp/>provided.</highlight></codeline>
<codeline lineno="811"><highlight class="comment"></highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateSync<sp/>returns<sp/>Z_OK<sp/>if<sp/>a<sp/>full<sp/>flush<sp/>point<sp/>has<sp/>been<sp/>found,<sp/>Z_BUF_ERROR</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/><sp/><sp/>if<sp/>no<sp/>more<sp/>input<sp/>was<sp/>provided,<sp/>Z_DATA_ERROR<sp/>if<sp/>no<sp/>flush<sp/>point<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/><sp/><sp/>found,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>structure<sp/>was<sp/>inconsistent.<sp/><sp/>In<sp/>the</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/><sp/><sp/>success<sp/>case,<sp/>the<sp/>application<sp/>may<sp/>save<sp/>the<sp/>current<sp/>current<sp/>value<sp/>of<sp/>total_in</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/><sp/><sp/>which<sp/>indicates<sp/>where<sp/>valid<sp/>compressed<sp/>data<sp/>was<sp/>found.<sp/><sp/>In<sp/>the<sp/>error<sp/>case,</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/><sp/><sp/>the<sp/>application<sp/>may<sp/>repeatedly<sp/>call<sp/>inflateSync,<sp/>providing<sp/>more<sp/>input<sp/>each</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/><sp/><sp/>time,<sp/>until<sp/>success<sp/>or<sp/>end<sp/>of<sp/>the<sp/>input<sp/>data.</highlight></codeline>
<codeline lineno="819"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="inflate_8c_1a4be131080ab2d224f9bebbcab3a2ccd6" kindref="member">inflateCopy</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>dest,</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_streamp<sp/>source));</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Sets<sp/>the<sp/>destination<sp/>stream<sp/>as<sp/>a<sp/>complete<sp/>copy<sp/>of<sp/>the<sp/>source<sp/>stream.</highlight></codeline>
<codeline lineno="825"><highlight class="comment"></highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>can<sp/>be<sp/>useful<sp/>when<sp/>randomly<sp/>accessing<sp/>a<sp/>large<sp/>stream.<sp/><sp/>The</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/><sp/><sp/>first<sp/>pass<sp/>through<sp/>the<sp/>stream<sp/>can<sp/>periodically<sp/>record<sp/>the<sp/>inflate<sp/>state,</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/><sp/>allowing<sp/>restarting<sp/>inflate<sp/>at<sp/>those<sp/>points<sp/>when<sp/>randomly<sp/>accessing<sp/>the</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/>stream.</highlight></codeline>
<codeline lineno="830"><highlight class="comment"></highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateCopy<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/><sp/>enough<sp/>memory,<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source<sp/>stream<sp/>state<sp/>was<sp/>inconsistent</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/><sp/>(such<sp/>as<sp/>zalloc<sp/>being<sp/>Z_NULL).<sp/><sp/>msg<sp/>is<sp/>left<sp/>unchanged<sp/>in<sp/>both<sp/>source<sp/>and</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/><sp/>destination.</highlight></codeline>
<codeline lineno="835"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="inflate_8c_1a9990ecfeb0e3b82bcfe07920cef7b1c2" kindref="member">inflateReset</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm));</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>is<sp/>equivalent<sp/>to<sp/>inflateEnd<sp/>followed<sp/>by<sp/>inflateInit,</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/><sp/><sp/>but<sp/>does<sp/>not<sp/>free<sp/>and<sp/>reallocate<sp/>all<sp/>the<sp/>internal<sp/>decompression<sp/>state.<sp/><sp/>The</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>will<sp/>keep<sp/>attributes<sp/>that<sp/>may<sp/>have<sp/>been<sp/>set<sp/>by<sp/>inflateInit2.</highlight></codeline>
<codeline lineno="842"><highlight class="comment"></highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateReset<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="844"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent<sp/>(such<sp/>as<sp/>zalloc<sp/>or<sp/>state<sp/>being<sp/>Z_NULL).</highlight></codeline>
<codeline lineno="845"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="inflate_8c_1a9f7870e285eb71c6eb69b9afe76a9e7a" kindref="member">inflateReset2</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowBits));</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>is<sp/>the<sp/>same<sp/>as<sp/>inflateReset,<sp/>but<sp/>it<sp/>also<sp/>permits<sp/>changing</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/><sp/><sp/>the<sp/>wrap<sp/>and<sp/>window<sp/>size<sp/>requests.<sp/><sp/>The<sp/>windowBits<sp/>parameter<sp/>is<sp/>interpreted</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/><sp/><sp/>the<sp/>same<sp/>as<sp/>it<sp/>is<sp/>for<sp/>inflateInit2.</highlight></codeline>
<codeline lineno="853"><highlight class="comment"></highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateReset2<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent<sp/>(such<sp/>as<sp/>zalloc<sp/>or<sp/>state<sp/>being<sp/>Z_NULL),<sp/>or<sp/>if</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/><sp/><sp/>the<sp/>windowBits<sp/>parameter<sp/>is<sp/>invalid.</highlight></codeline>
<codeline lineno="857"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="inflate_8c_1af1347edaf73085e58907e49e5176aaab" kindref="member">inflatePrime</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits,</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value));</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>inserts<sp/>bits<sp/>in<sp/>the<sp/>inflate<sp/>input<sp/>stream.<sp/><sp/>The<sp/>intent<sp/>is</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/><sp/>that<sp/>this<sp/>function<sp/>is<sp/>used<sp/>to<sp/>start<sp/>inflating<sp/>at<sp/>a<sp/>bit<sp/>position<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/><sp/><sp/>middle<sp/>of<sp/>a<sp/>byte.<sp/><sp/>The<sp/>provided<sp/>bits<sp/>will<sp/>be<sp/>used<sp/>before<sp/>any<sp/>bytes<sp/>are<sp/>used</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/><sp/><sp/>from<sp/>next_in.<sp/><sp/>This<sp/>function<sp/>should<sp/>only<sp/>be<sp/>used<sp/>with<sp/>raw<sp/>inflate,<sp/>and</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/><sp/><sp/>should<sp/>be<sp/>used<sp/>before<sp/>the<sp/>first<sp/>inflate()<sp/>call<sp/>after<sp/>inflateInit2()<sp/>or</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/><sp/><sp/>inflateReset().<sp/><sp/>bits<sp/>must<sp/>be<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>16,<sp/>and<sp/>that<sp/>many<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/><sp/><sp/>least<sp/>significant<sp/>bits<sp/>of<sp/>value<sp/>will<sp/>be<sp/>inserted<sp/>in<sp/>the<sp/>input.</highlight></codeline>
<codeline lineno="870"><highlight class="comment"></highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>bits<sp/>is<sp/>negative,<sp/>then<sp/>the<sp/>input<sp/>stream<sp/>bit<sp/>buffer<sp/>is<sp/>emptied.<sp/><sp/>Then</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/><sp/><sp/>inflatePrime()<sp/>can<sp/>be<sp/>called<sp/>again<sp/>to<sp/>put<sp/>bits<sp/>in<sp/>the<sp/>buffer.<sp/><sp/>This<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/><sp/><sp/>to<sp/>clear<sp/>out<sp/>bits<sp/>leftover<sp/>after<sp/>feeding<sp/>inflate<sp/>a<sp/>block<sp/>description<sp/>prior</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/><sp/>to<sp/>feeding<sp/>inflate<sp/>codes.</highlight></codeline>
<codeline lineno="875"><highlight class="comment"></highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflatePrime<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent.</highlight></codeline>
<codeline lineno="878"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="inflate_8c_1a44cda52058b0618a3c2beb861b14d649" kindref="member">inflateMark</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm));</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="882"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>returns<sp/>two<sp/>values,<sp/>one<sp/>in<sp/>the<sp/>lower<sp/>16<sp/>bits<sp/>of<sp/>the<sp/>return</highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/><sp/><sp/>value,<sp/>and<sp/>the<sp/>other<sp/>in<sp/>the<sp/>remaining<sp/>upper<sp/>bits,<sp/>obtained<sp/>by<sp/>shifting<sp/>the</highlight></codeline>
<codeline lineno="884"><highlight class="comment"><sp/><sp/><sp/>return<sp/>value<sp/>down<sp/>16<sp/>bits.<sp/><sp/>If<sp/>the<sp/>upper<sp/>value<sp/>is<sp/>-1<sp/>and<sp/>the<sp/>lower<sp/>value<sp/>is</highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/><sp/><sp/>zero,<sp/>then<sp/>inflate()<sp/>is<sp/>currently<sp/>decoding<sp/>information<sp/>outside<sp/>of<sp/>a<sp/>block.</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/><sp/><sp/>If<sp/>the<sp/>upper<sp/>value<sp/>is<sp/>-1<sp/>and<sp/>the<sp/>lower<sp/>value<sp/>is<sp/>non-zero,<sp/>then<sp/>inflate<sp/>is<sp/>in</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/><sp/><sp/>the<sp/>middle<sp/>of<sp/>a<sp/>stored<sp/>block,<sp/>with<sp/>the<sp/>lower<sp/>value<sp/>equaling<sp/>the<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/><sp/><sp/>bytes<sp/>from<sp/>the<sp/>input<sp/>remaining<sp/>to<sp/>copy.<sp/><sp/>If<sp/>the<sp/>upper<sp/>value<sp/>is<sp/>not<sp/>-1,<sp/>then</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/><sp/><sp/>it<sp/>is<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>back<sp/>from<sp/>the<sp/>current<sp/>bit<sp/>position<sp/>in<sp/>the<sp/>input<sp/>of</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/><sp/><sp/>the<sp/>code<sp/>(literal<sp/>or<sp/>length/distance<sp/>pair)<sp/>currently<sp/>being<sp/>processed.<sp/><sp/>In</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/><sp/><sp/>that<sp/>case<sp/>the<sp/>lower<sp/>value<sp/>is<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>already<sp/>emitted<sp/>for<sp/>that</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/><sp/><sp/>code.</highlight></codeline>
<codeline lineno="893"><highlight class="comment"></highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>A<sp/>code<sp/>is<sp/>being<sp/>processed<sp/>if<sp/>inflate<sp/>is<sp/>waiting<sp/>for<sp/>more<sp/>input<sp/>to<sp/>complete</highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/><sp/><sp/>decoding<sp/>of<sp/>the<sp/>code,<sp/>or<sp/>if<sp/>it<sp/>has<sp/>completed<sp/>decoding<sp/>but<sp/>is<sp/>waiting<sp/>for</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/><sp/><sp/>more<sp/>output<sp/>space<sp/>to<sp/>write<sp/>the<sp/>literal<sp/>or<sp/>match<sp/>data.</highlight></codeline>
<codeline lineno="897"><highlight class="comment"></highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateMark()<sp/>is<sp/>used<sp/>to<sp/>mark<sp/>locations<sp/>in<sp/>the<sp/>input<sp/>data<sp/>for<sp/>random</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/><sp/><sp/>access,<sp/>which<sp/>may<sp/>be<sp/>at<sp/>bit<sp/>positions,<sp/>and<sp/>to<sp/>note<sp/>those<sp/>cases<sp/>where<sp/>the</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/>output<sp/>of<sp/>a<sp/>code<sp/>may<sp/>span<sp/>boundaries<sp/>of<sp/>random<sp/>access<sp/>blocks.<sp/><sp/>The<sp/>current</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/><sp/>location<sp/>in<sp/>the<sp/>input<sp/>stream<sp/>can<sp/>be<sp/>determined<sp/>from<sp/>avail_in<sp/>and<sp/>data_type</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/><sp/><sp/>as<sp/>noted<sp/>in<sp/>the<sp/>description<sp/>for<sp/>the<sp/>Z_BLOCK<sp/>flush<sp/>parameter<sp/>for<sp/>inflate.</highlight></codeline>
<codeline lineno="903"><highlight class="comment"></highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateMark<sp/>returns<sp/>the<sp/>value<sp/>noted<sp/>above<sp/>or<sp/>-1<sp/>&lt;&lt;<sp/>16<sp/>if<sp/>the<sp/>provided</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/><sp/><sp/>source<sp/>stream<sp/>state<sp/>was<sp/>inconsistent.</highlight></codeline>
<codeline lineno="906"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="inflate_8c_1ab62a5fbe5226dd4e9300eb0cb6d6610e" kindref="member">inflateGetHeader</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gz_headerp<sp/>head));</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateGetHeader()<sp/>requests<sp/>that<sp/>gzip<sp/>header<sp/>information<sp/>be<sp/>stored<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/><sp/><sp/>provided<sp/>gz_header<sp/>structure.<sp/><sp/>inflateGetHeader()<sp/>may<sp/>be<sp/>called<sp/>after</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/><sp/><sp/>inflateInit2()<sp/>or<sp/>inflateReset(),<sp/>and<sp/>before<sp/>the<sp/>first<sp/>call<sp/>of<sp/>inflate().</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/><sp/>As<sp/>inflate()<sp/>processes<sp/>the<sp/>gzip<sp/>stream,<sp/>head-&gt;done<sp/>is<sp/>zero<sp/>until<sp/>the<sp/>header</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/><sp/><sp/>is<sp/>completed,<sp/>at<sp/>which<sp/>time<sp/>head-&gt;done<sp/>is<sp/>set<sp/>to<sp/>one.<sp/><sp/>If<sp/>a<sp/>zlib<sp/>stream<sp/>is</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/><sp/><sp/>being<sp/>decoded,<sp/>then<sp/>head-&gt;done<sp/>is<sp/>set<sp/>to<sp/>-1<sp/>to<sp/>indicate<sp/>that<sp/>there<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/><sp/><sp/>no<sp/>gzip<sp/>header<sp/>information<sp/>forthcoming.<sp/><sp/>Note<sp/>that<sp/>Z_BLOCK<sp/>or<sp/>Z_TREES<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/><sp/><sp/>used<sp/>to<sp/>force<sp/>inflate()<sp/>to<sp/>return<sp/>immediately<sp/>after<sp/>header<sp/>processing<sp/>is</highlight></codeline>
<codeline lineno="919"><highlight class="comment"><sp/><sp/><sp/>complete<sp/>and<sp/>before<sp/>any<sp/>actual<sp/>data<sp/>is<sp/>decompressed.</highlight></codeline>
<codeline lineno="920"><highlight class="comment"></highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>text,<sp/>time,<sp/>xflags,<sp/>and<sp/>os<sp/>fields<sp/>are<sp/>filled<sp/>in<sp/>with<sp/>the<sp/>gzip<sp/>header</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/><sp/><sp/>contents.<sp/><sp/>hcrc<sp/>is<sp/>set<sp/>to<sp/>true<sp/>if<sp/>there<sp/>is<sp/>a<sp/>header<sp/>CRC.<sp/><sp/>(The<sp/>header<sp/>CRC</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/><sp/><sp/>was<sp/>valid<sp/>if<sp/>done<sp/>is<sp/>set<sp/>to<sp/>one.)<sp/>If<sp/>extra<sp/>is<sp/>not<sp/>Z_NULL,<sp/>then<sp/>extra_max</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/><sp/><sp/>contains<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>bytes<sp/>to<sp/>write<sp/>to<sp/>extra.<sp/><sp/>Once<sp/>done<sp/>is<sp/>true,</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/><sp/><sp/>extra_len<sp/>contains<sp/>the<sp/>actual<sp/>extra<sp/>field<sp/>length,<sp/>and<sp/>extra<sp/>contains<sp/>the</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/><sp/><sp/>extra<sp/>field,<sp/>or<sp/>that<sp/>field<sp/>truncated<sp/>if<sp/>extra_max<sp/>is<sp/>less<sp/>than<sp/>extra_len.</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/><sp/><sp/>If<sp/>name<sp/>is<sp/>not<sp/>Z_NULL,<sp/>then<sp/>up<sp/>to<sp/>name_max<sp/>characters<sp/>are<sp/>written<sp/>there,</highlight></codeline>
<codeline lineno="928"><highlight class="comment"><sp/><sp/><sp/>terminated<sp/>with<sp/>a<sp/>zero<sp/>unless<sp/>the<sp/>length<sp/>is<sp/>greater<sp/>than<sp/>name_max.<sp/><sp/>If</highlight></codeline>
<codeline lineno="929"><highlight class="comment"><sp/><sp/><sp/>comment<sp/>is<sp/>not<sp/>Z_NULL,<sp/>then<sp/>up<sp/>to<sp/>comm_max<sp/>characters<sp/>are<sp/>written<sp/>there,</highlight></codeline>
<codeline lineno="930"><highlight class="comment"><sp/><sp/><sp/>terminated<sp/>with<sp/>a<sp/>zero<sp/>unless<sp/>the<sp/>length<sp/>is<sp/>greater<sp/>than<sp/>comm_max.<sp/><sp/>When<sp/>any</highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/><sp/><sp/>of<sp/>extra,<sp/>name,<sp/>or<sp/>comment<sp/>are<sp/>not<sp/>Z_NULL<sp/>and<sp/>the<sp/>respective<sp/>field<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/><sp/><sp/>present<sp/>in<sp/>the<sp/>header,<sp/>then<sp/>that<sp/>field<sp/>is<sp/>set<sp/>to<sp/>Z_NULL<sp/>to<sp/>signal<sp/>its</highlight></codeline>
<codeline lineno="933"><highlight class="comment"><sp/><sp/><sp/>absence.<sp/><sp/>This<sp/>allows<sp/>the<sp/>use<sp/>of<sp/>deflateSetHeader()<sp/>with<sp/>the<sp/>returned</highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/><sp/><sp/>structure<sp/>to<sp/>duplicate<sp/>the<sp/>header.<sp/><sp/>However<sp/>if<sp/>those<sp/>fields<sp/>are<sp/>set<sp/>to</highlight></codeline>
<codeline lineno="935"><highlight class="comment"><sp/><sp/><sp/>allocated<sp/>memory,<sp/>then<sp/>the<sp/>application<sp/>will<sp/>need<sp/>to<sp/>save<sp/>those<sp/>pointers</highlight></codeline>
<codeline lineno="936"><highlight class="comment"><sp/><sp/><sp/>elsewhere<sp/>so<sp/>that<sp/>they<sp/>can<sp/>be<sp/>eventually<sp/>freed.</highlight></codeline>
<codeline lineno="937"><highlight class="comment"></highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>inflateGetHeader<sp/>is<sp/>not<sp/>used,<sp/>then<sp/>the<sp/>header<sp/>information<sp/>is<sp/>simply</highlight></codeline>
<codeline lineno="939"><highlight class="comment"><sp/><sp/><sp/>discarded.<sp/><sp/>The<sp/>header<sp/>is<sp/>always<sp/>checked<sp/>for<sp/>validity,<sp/>including<sp/>the<sp/>header</highlight></codeline>
<codeline lineno="940"><highlight class="comment"><sp/><sp/><sp/>CRC<sp/>if<sp/>present.<sp/><sp/>inflateReset()<sp/>will<sp/>reset<sp/>the<sp/>process<sp/>to<sp/>discard<sp/>the<sp/>header</highlight></codeline>
<codeline lineno="941"><highlight class="comment"><sp/><sp/><sp/>information.<sp/><sp/>The<sp/>application<sp/>would<sp/>need<sp/>to<sp/>call<sp/>inflateGetHeader()<sp/>again<sp/>to</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/><sp/><sp/>retrieve<sp/>the<sp/>header<sp/>from<sp/>the<sp/>next<sp/>gzip<sp/>stream.</highlight></codeline>
<codeline lineno="943"><highlight class="comment"></highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateGetHeader<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent.</highlight></codeline>
<codeline lineno="946"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="949"><highlight class="comment">ZEXTERN<sp/>int<sp/>ZEXPORT<sp/>inflateBackInit<sp/>OF((z_streamp<sp/>strm,<sp/>int<sp/>windowBits,</highlight></codeline>
<codeline lineno="950"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>FAR<sp/>*window));</highlight></codeline>
<codeline lineno="951"><highlight class="comment"></highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Initialize<sp/>the<sp/>internal<sp/>stream<sp/>state<sp/>for<sp/>decompression<sp/>using<sp/>inflateBack()</highlight></codeline>
<codeline lineno="953"><highlight class="comment"><sp/><sp/><sp/>calls.<sp/><sp/>The<sp/>fields<sp/>zalloc,<sp/>zfree<sp/>and<sp/>opaque<sp/>in<sp/>strm<sp/>must<sp/>be<sp/>initialized</highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/><sp/><sp/>before<sp/>the<sp/>call.<sp/><sp/>If<sp/>zalloc<sp/>and<sp/>zfree<sp/>are<sp/>Z_NULL,<sp/>then<sp/>the<sp/>default<sp/>library-</highlight></codeline>
<codeline lineno="955"><highlight class="comment"><sp/><sp/><sp/>derived<sp/>memory<sp/>allocation<sp/>routines<sp/>are<sp/>used.<sp/><sp/>windowBits<sp/>is<sp/>the<sp/>base<sp/>two</highlight></codeline>
<codeline lineno="956"><highlight class="comment"><sp/><sp/><sp/>logarithm<sp/>of<sp/>the<sp/>window<sp/>size,<sp/>in<sp/>the<sp/>range<sp/>8..15.<sp/><sp/>window<sp/>is<sp/>a<sp/>caller</highlight></codeline>
<codeline lineno="957"><highlight class="comment"><sp/><sp/><sp/>supplied<sp/>buffer<sp/>of<sp/>that<sp/>size.<sp/><sp/>Except<sp/>for<sp/>special<sp/>applications<sp/>where<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/><sp/><sp/>assured<sp/>that<sp/>deflate<sp/>was<sp/>used<sp/>with<sp/>small<sp/>window<sp/>sizes,<sp/>windowBits<sp/>must<sp/>be<sp/>15</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/><sp/><sp/>and<sp/>a<sp/>32K<sp/>byte<sp/>window<sp/>must<sp/>be<sp/>supplied<sp/>to<sp/>be<sp/>able<sp/>to<sp/>decompress<sp/>general</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/><sp/><sp/>deflate<sp/>streams.</highlight></codeline>
<codeline lineno="961"><highlight class="comment"></highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>See<sp/>inflateBack()<sp/>for<sp/>the<sp/>usage<sp/>of<sp/>these<sp/>routines.</highlight></codeline>
<codeline lineno="963"><highlight class="comment"></highlight></codeline>
<codeline lineno="964"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateBackInit<sp/>will<sp/>return<sp/>Z_OK<sp/>on<sp/>success,<sp/>Z_STREAM_ERROR<sp/>if<sp/>any<sp/>of</highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/><sp/><sp/>the<sp/>paramaters<sp/>are<sp/>invalid,<sp/>Z_MEM_ERROR<sp/>if<sp/>the<sp/>internal<sp/>state<sp/>could<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/><sp/><sp/>allocated,<sp/>or<sp/>Z_VERSION_ERROR<sp/>if<sp/>the<sp/>version<sp/>of<sp/>the<sp/>library<sp/>does<sp/>not<sp/>match</highlight></codeline>
<codeline lineno="967"><highlight class="comment"><sp/><sp/><sp/>the<sp/>version<sp/>of<sp/>the<sp/>header<sp/>file.</highlight></codeline>
<codeline lineno="968"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970" refid="zlib_8h_1a9cd6b998d9f92d367ff716541f2d9ece" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>unsigned<sp/>(*<ref refid="zlib_8h_1a9cd6b998d9f92d367ff716541f2d9ece" kindref="member">in_func</ref>)<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>FAR<sp/>*<sp/>FAR<sp/>*));</highlight></codeline>
<codeline lineno="971" refid="zlib_8h_1aeb8cd045bf118bb18980dc7c03481b8f" refkind="member"><highlight class="normal">typedef<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*<ref refid="zlib_8h_1aeb8cd045bf118bb18980dc7c03481b8f" kindref="member">out_func</ref>)<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>FAR<sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="infback_8c_1a71700074020b4a3ad5bee6be0bd42b30" kindref="member">inflateBack</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zlib_8h_1a9cd6b998d9f92d367ff716541f2d9ece" kindref="member">in_func</ref><sp/>in,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*in_desc,</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zlib_8h_1aeb8cd045bf118bb18980dc7c03481b8f" kindref="member">out_func</ref><sp/>out,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*out_desc));</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="977"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateBack()<sp/>does<sp/>a<sp/>raw<sp/>inflate<sp/>with<sp/>a<sp/>single<sp/>call<sp/>using<sp/>a<sp/>call-back</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/><sp/><sp/>interface<sp/>for<sp/>input<sp/>and<sp/>output.<sp/><sp/>This<sp/>is<sp/>more<sp/>efficient<sp/>than<sp/>inflate()<sp/>for</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/><sp/><sp/>file<sp/>i/o<sp/>applications<sp/>in<sp/>that<sp/>it<sp/>avoids<sp/>copying<sp/>between<sp/>the<sp/>output<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/><sp/><sp/>sliding<sp/>window<sp/>by<sp/>simply<sp/>making<sp/>the<sp/>window<sp/>itself<sp/>the<sp/>output<sp/>buffer.<sp/><sp/>This</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/><sp/><sp/>function<sp/>trusts<sp/>the<sp/>application<sp/>to<sp/>not<sp/>change<sp/>the<sp/>output<sp/>buffer<sp/>passed<sp/>by</highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/><sp/><sp/>the<sp/>output<sp/>function,<sp/>at<sp/>least<sp/>until<sp/>inflateBack()<sp/>returns.</highlight></codeline>
<codeline lineno="983"><highlight class="comment"></highlight></codeline>
<codeline lineno="984"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateBackInit()<sp/>must<sp/>be<sp/>called<sp/>first<sp/>to<sp/>allocate<sp/>the<sp/>internal<sp/>state</highlight></codeline>
<codeline lineno="985"><highlight class="comment"><sp/><sp/><sp/>and<sp/>to<sp/>initialize<sp/>the<sp/>state<sp/>with<sp/>the<sp/>user-provided<sp/>window<sp/>buffer.</highlight></codeline>
<codeline lineno="986"><highlight class="comment"><sp/><sp/><sp/>inflateBack()<sp/>may<sp/>then<sp/>be<sp/>used<sp/>multiple<sp/>times<sp/>to<sp/>inflate<sp/>a<sp/>complete,<sp/>raw</highlight></codeline>
<codeline lineno="987"><highlight class="comment"><sp/><sp/><sp/>deflate<sp/>stream<sp/>with<sp/>each<sp/>call.<sp/><sp/>inflateBackEnd()<sp/>is<sp/>then<sp/>called<sp/>to<sp/>free<sp/>the</highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/><sp/><sp/>allocated<sp/>state.</highlight></codeline>
<codeline lineno="989"><highlight class="comment"></highlight></codeline>
<codeline lineno="990"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>A<sp/>raw<sp/>deflate<sp/>stream<sp/>is<sp/>one<sp/>with<sp/>no<sp/>zlib<sp/>or<sp/>gzip<sp/>header<sp/>or<sp/>trailer.</highlight></codeline>
<codeline lineno="991"><highlight class="comment"><sp/><sp/><sp/>This<sp/>routine<sp/>would<sp/>normally<sp/>be<sp/>used<sp/>in<sp/>a<sp/>utility<sp/>that<sp/>reads<sp/>zip<sp/>or<sp/>gzip</highlight></codeline>
<codeline lineno="992"><highlight class="comment"><sp/><sp/><sp/>files<sp/>and<sp/>writes<sp/>out<sp/>uncompressed<sp/>files.<sp/><sp/>The<sp/>utility<sp/>would<sp/>decode<sp/>the</highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/><sp/><sp/>header<sp/>and<sp/>process<sp/>the<sp/>trailer<sp/>on<sp/>its<sp/>own,<sp/>hence<sp/>this<sp/>routine<sp/>expects<sp/>only</highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/><sp/><sp/>the<sp/>raw<sp/>deflate<sp/>stream<sp/>to<sp/>decompress.<sp/><sp/>This<sp/>is<sp/>different<sp/>from<sp/>the<sp/>normal</highlight></codeline>
<codeline lineno="995"><highlight class="comment"><sp/><sp/><sp/>behavior<sp/>of<sp/>inflate(),<sp/>which<sp/>expects<sp/>either<sp/>a<sp/>zlib<sp/>or<sp/>gzip<sp/>header<sp/>and</highlight></codeline>
<codeline lineno="996"><highlight class="comment"><sp/><sp/><sp/>trailer<sp/>around<sp/>the<sp/>deflate<sp/>stream.</highlight></codeline>
<codeline lineno="997"><highlight class="comment"></highlight></codeline>
<codeline lineno="998"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateBack()<sp/>uses<sp/>two<sp/>subroutines<sp/>supplied<sp/>by<sp/>the<sp/>caller<sp/>that<sp/>are<sp/>then</highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/><sp/><sp/>called<sp/>by<sp/>inflateBack()<sp/>for<sp/>input<sp/>and<sp/>output.<sp/><sp/>inflateBack()<sp/>calls<sp/>those</highlight></codeline>
<codeline lineno="1000"><highlight class="comment"><sp/><sp/><sp/>routines<sp/>until<sp/>it<sp/>reads<sp/>a<sp/>complete<sp/>deflate<sp/>stream<sp/>and<sp/>writes<sp/>out<sp/>all<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="1001"><highlight class="comment"><sp/><sp/><sp/>uncompressed<sp/>data,<sp/>or<sp/>until<sp/>it<sp/>encounters<sp/>an<sp/>error.<sp/><sp/>The<sp/>function&apos;s</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/><sp/><sp/>parameters<sp/>and<sp/>return<sp/>types<sp/>are<sp/>defined<sp/>above<sp/>in<sp/>the<sp/>in_func<sp/>and<sp/>out_func</highlight></codeline>
<codeline lineno="1003"><highlight class="comment"><sp/><sp/><sp/>typedefs.<sp/><sp/>inflateBack()<sp/>will<sp/>call<sp/>in(in_desc,<sp/>&amp;buf)<sp/>which<sp/>should<sp/>return<sp/>the</highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/><sp/><sp/>number<sp/>of<sp/>bytes<sp/>of<sp/>provided<sp/>input,<sp/>and<sp/>a<sp/>pointer<sp/>to<sp/>that<sp/>input<sp/>in<sp/>buf.<sp/><sp/>If</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"><sp/><sp/><sp/>there<sp/>is<sp/>no<sp/>input<sp/>available,<sp/>in()<sp/>must<sp/>return<sp/>zero--buf<sp/>is<sp/>ignored<sp/>in<sp/>that</highlight></codeline>
<codeline lineno="1006"><highlight class="comment"><sp/><sp/><sp/>case--and<sp/>inflateBack()<sp/>will<sp/>return<sp/>a<sp/>buffer<sp/>error.<sp/><sp/>inflateBack()<sp/>will<sp/>call</highlight></codeline>
<codeline lineno="1007"><highlight class="comment"><sp/><sp/><sp/>out(out_desc,<sp/>buf,<sp/>len)<sp/>to<sp/>write<sp/>the<sp/>uncompressed<sp/>data<sp/>buf[0..len-1].<sp/><sp/>out()</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/><sp/><sp/>should<sp/>return<sp/>zero<sp/>on<sp/>success,<sp/>or<sp/>non-zero<sp/>on<sp/>failure.<sp/><sp/>If<sp/>out()<sp/>returns</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/><sp/><sp/>non-zero,<sp/>inflateBack()<sp/>will<sp/>return<sp/>with<sp/>an<sp/>error.<sp/><sp/>Neither<sp/>in()<sp/>nor<sp/>out()</highlight></codeline>
<codeline lineno="1010"><highlight class="comment"><sp/><sp/><sp/>are<sp/>permitted<sp/>to<sp/>change<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>window<sp/>provided<sp/>to</highlight></codeline>
<codeline lineno="1011"><highlight class="comment"><sp/><sp/><sp/>inflateBackInit(),<sp/>which<sp/>is<sp/>also<sp/>the<sp/>buffer<sp/>that<sp/>out()<sp/>uses<sp/>to<sp/>write<sp/>from.</highlight></codeline>
<codeline lineno="1012"><highlight class="comment"><sp/><sp/><sp/>The<sp/>length<sp/>written<sp/>by<sp/>out()<sp/>will<sp/>be<sp/>at<sp/>most<sp/>the<sp/>window<sp/>size.<sp/><sp/>Any<sp/>non-zero</highlight></codeline>
<codeline lineno="1013"><highlight class="comment"><sp/><sp/><sp/>amount<sp/>of<sp/>input<sp/>may<sp/>be<sp/>provided<sp/>by<sp/>in().</highlight></codeline>
<codeline lineno="1014"><highlight class="comment"></highlight></codeline>
<codeline lineno="1015"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>For<sp/>convenience,<sp/>inflateBack()<sp/>can<sp/>be<sp/>provided<sp/>input<sp/>on<sp/>the<sp/>first<sp/>call<sp/>by</highlight></codeline>
<codeline lineno="1016"><highlight class="comment"><sp/><sp/><sp/>setting<sp/>strm-&gt;next_in<sp/>and<sp/>strm-&gt;avail_in.<sp/><sp/>If<sp/>that<sp/>input<sp/>is<sp/>exhausted,<sp/>then</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/><sp/><sp/>in()<sp/>will<sp/>be<sp/>called.<sp/><sp/>Therefore<sp/>strm-&gt;next_in<sp/>must<sp/>be<sp/>initialized<sp/>before</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"><sp/><sp/><sp/>calling<sp/>inflateBack().<sp/><sp/>If<sp/>strm-&gt;next_in<sp/>is<sp/>Z_NULL,<sp/>then<sp/>in()<sp/>will<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="1019"><highlight class="comment"><sp/><sp/><sp/>immediately<sp/>for<sp/>input.<sp/><sp/>If<sp/>strm-&gt;next_in<sp/>is<sp/>not<sp/>Z_NULL,<sp/>then<sp/>strm-&gt;avail_in</highlight></codeline>
<codeline lineno="1020"><highlight class="comment"><sp/><sp/><sp/>must<sp/>also<sp/>be<sp/>initialized,<sp/>and<sp/>then<sp/>if<sp/>strm-&gt;avail_in<sp/>is<sp/>not<sp/>zero,<sp/>input<sp/>will</highlight></codeline>
<codeline lineno="1021"><highlight class="comment"><sp/><sp/><sp/>initially<sp/>be<sp/>taken<sp/>from<sp/>strm-&gt;next_in[0<sp/>..<sp/><sp/>strm-&gt;avail_in<sp/>-<sp/>1].</highlight></codeline>
<codeline lineno="1022"><highlight class="comment"></highlight></codeline>
<codeline lineno="1023"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>in_desc<sp/>and<sp/>out_desc<sp/>parameters<sp/>of<sp/>inflateBack()<sp/>is<sp/>passed<sp/>as<sp/>the</highlight></codeline>
<codeline lineno="1024"><highlight class="comment"><sp/><sp/><sp/>first<sp/>parameter<sp/>of<sp/>in()<sp/>and<sp/>out()<sp/>respectively<sp/>when<sp/>they<sp/>are<sp/>called.<sp/><sp/>These</highlight></codeline>
<codeline lineno="1025"><highlight class="comment"><sp/><sp/><sp/>descriptors<sp/>can<sp/>be<sp/>optionally<sp/>used<sp/>to<sp/>pass<sp/>any<sp/>information<sp/>that<sp/>the<sp/>caller-</highlight></codeline>
<codeline lineno="1026"><highlight class="comment"><sp/><sp/><sp/>supplied<sp/>in()<sp/>and<sp/>out()<sp/>functions<sp/>need<sp/>to<sp/>do<sp/>their<sp/>job.</highlight></codeline>
<codeline lineno="1027"><highlight class="comment"></highlight></codeline>
<codeline lineno="1028"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>On<sp/>return,<sp/>inflateBack()<sp/>will<sp/>set<sp/>strm-&gt;next_in<sp/>and<sp/>strm-&gt;avail_in<sp/>to</highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/><sp/><sp/>pass<sp/>back<sp/>any<sp/>unused<sp/>input<sp/>that<sp/>was<sp/>provided<sp/>by<sp/>the<sp/>last<sp/>in()<sp/>call.<sp/><sp/>The</highlight></codeline>
<codeline lineno="1030"><highlight class="comment"><sp/><sp/><sp/>return<sp/>values<sp/>of<sp/>inflateBack()<sp/>can<sp/>be<sp/>Z_STREAM_END<sp/>on<sp/>success,<sp/>Z_BUF_ERROR</highlight></codeline>
<codeline lineno="1031"><highlight class="comment"><sp/><sp/><sp/>if<sp/>in()<sp/>or<sp/>out()<sp/>returned<sp/>an<sp/>error,<sp/>Z_DATA_ERROR<sp/>if<sp/>there<sp/>was<sp/>a<sp/>format<sp/>error</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"><sp/><sp/><sp/>in<sp/>the<sp/>deflate<sp/>stream<sp/>(in<sp/>which<sp/>case<sp/>strm-&gt;msg<sp/>is<sp/>set<sp/>to<sp/>indicate<sp/>the<sp/>nature</highlight></codeline>
<codeline lineno="1033"><highlight class="comment"><sp/><sp/><sp/>of<sp/>the<sp/>error),<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>was<sp/>not<sp/>properly<sp/>initialized.</highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/><sp/><sp/>In<sp/>the<sp/>case<sp/>of<sp/>Z_BUF_ERROR,<sp/>an<sp/>input<sp/>or<sp/>output<sp/>error<sp/>can<sp/>be<sp/>distinguished</highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/><sp/><sp/>using<sp/>strm-&gt;next_in<sp/>which<sp/>will<sp/>be<sp/>Z_NULL<sp/>only<sp/>if<sp/>in()<sp/>returned<sp/>an<sp/>error.<sp/><sp/>If</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/><sp/><sp/>strm-&gt;next_in<sp/>is<sp/>not<sp/>Z_NULL,<sp/>then<sp/>the<sp/>Z_BUF_ERROR<sp/>was<sp/>due<sp/>to<sp/>out()<sp/>returning</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/><sp/><sp/>non-zero.<sp/><sp/>(in()<sp/>will<sp/>always<sp/>be<sp/>called<sp/>before<sp/>out(),<sp/>so<sp/>strm-&gt;next_in<sp/>is</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/><sp/><sp/>assured<sp/>to<sp/>be<sp/>defined<sp/>if<sp/>out()<sp/>returns<sp/>non-zero.)<sp/>Note<sp/>that<sp/>inflateBack()</highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/><sp/><sp/>cannot<sp/>return<sp/>Z_OK.</highlight></codeline>
<codeline lineno="1040"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="infback_8c_1ad1240e7eb9af97f01186d6f0d25286ce" kindref="member">inflateBackEnd</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm));</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>All<sp/>memory<sp/>allocated<sp/>by<sp/>inflateBackInit()<sp/>is<sp/>freed.</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"></highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateBackEnd()<sp/>returns<sp/>Z_OK<sp/>on<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>stream</highlight></codeline>
<codeline lineno="1047"><highlight class="comment"><sp/><sp/><sp/>state<sp/>was<sp/>inconsistent.</highlight></codeline>
<codeline lineno="1048"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1a416647b2b534c3aa03be6d88aa2429fb" kindref="member">zlibCompileFlags</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>flags<sp/>indicating<sp/>compile-time<sp/>options.</highlight></codeline>
<codeline lineno="1052"><highlight class="comment"></highlight></codeline>
<codeline lineno="1053"><highlight class="comment"><sp/><sp/><sp/><sp/>Type<sp/>sizes,<sp/>two<sp/>bits<sp/>each,<sp/>00<sp/>=<sp/>16<sp/>bits,<sp/>01<sp/>=<sp/>32,<sp/>10<sp/>=<sp/>64,<sp/>11<sp/>=<sp/>other:</highlight></codeline>
<codeline lineno="1054"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>1.0:<sp/>size<sp/>of<sp/>uInt</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>3.2:<sp/>size<sp/>of<sp/>uLong</highlight></codeline>
<codeline lineno="1056"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>5.4:<sp/>size<sp/>of<sp/>voidpf<sp/>(pointer)</highlight></codeline>
<codeline lineno="1057"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>7.6:<sp/>size<sp/>of<sp/>z_off_t</highlight></codeline>
<codeline lineno="1058"><highlight class="comment"></highlight></codeline>
<codeline lineno="1059"><highlight class="comment"><sp/><sp/><sp/><sp/>Compiler,<sp/>assembler,<sp/>and<sp/>debug<sp/>options:</highlight></codeline>
<codeline lineno="1060"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>8:<sp/>DEBUG</highlight></codeline>
<codeline lineno="1061"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>9:<sp/>ASMV<sp/>or<sp/>ASMINF<sp/>--<sp/>use<sp/>ASM<sp/>code</highlight></codeline>
<codeline lineno="1062"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>10:<sp/>ZLIB_WINAPI<sp/>--<sp/>exported<sp/>functions<sp/>use<sp/>the<sp/>WINAPI<sp/>calling<sp/>convention</highlight></codeline>
<codeline lineno="1063"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>11:<sp/>0<sp/>(reserved)</highlight></codeline>
<codeline lineno="1064"><highlight class="comment"></highlight></codeline>
<codeline lineno="1065"><highlight class="comment"><sp/><sp/><sp/><sp/>One-time<sp/>table<sp/>building<sp/>(smaller<sp/>code,<sp/>but<sp/>not<sp/>thread-safe<sp/>if<sp/>true):</highlight></codeline>
<codeline lineno="1066"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>12:<sp/>BUILDFIXED<sp/>--<sp/>build<sp/>static<sp/>block<sp/>decoding<sp/>tables<sp/>when<sp/>needed</highlight></codeline>
<codeline lineno="1067"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>13:<sp/>DYNAMIC_CRC_TABLE<sp/>--<sp/>build<sp/>CRC<sp/>calculation<sp/>tables<sp/>when<sp/>needed</highlight></codeline>
<codeline lineno="1068"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>14,15:<sp/>0<sp/>(reserved)</highlight></codeline>
<codeline lineno="1069"><highlight class="comment"></highlight></codeline>
<codeline lineno="1070"><highlight class="comment"><sp/><sp/><sp/><sp/>Library<sp/>content<sp/>(indicates<sp/>missing<sp/>functionality):</highlight></codeline>
<codeline lineno="1071"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>16:<sp/>NO_GZCOMPRESS<sp/>--<sp/>gz*<sp/>functions<sp/>cannot<sp/>compress<sp/>(to<sp/>avoid<sp/>linking</highlight></codeline>
<codeline lineno="1072"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deflate<sp/>code<sp/>when<sp/>not<sp/>needed)</highlight></codeline>
<codeline lineno="1073"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>17:<sp/>NO_GZIP<sp/>--<sp/>deflate<sp/>can&apos;t<sp/>write<sp/>gzip<sp/>streams,<sp/>and<sp/>inflate<sp/>can&apos;t<sp/>detect</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>decode<sp/>gzip<sp/>streams<sp/>(to<sp/>avoid<sp/>linking<sp/>crc<sp/>code)</highlight></codeline>
<codeline lineno="1075"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>18-19:<sp/>0<sp/>(reserved)</highlight></codeline>
<codeline lineno="1076"><highlight class="comment"></highlight></codeline>
<codeline lineno="1077"><highlight class="comment"><sp/><sp/><sp/><sp/>Operation<sp/>variations<sp/>(changes<sp/>in<sp/>library<sp/>functionality):</highlight></codeline>
<codeline lineno="1078"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>20:<sp/>PKZIP_BUG_WORKAROUND<sp/>--<sp/>slightly<sp/>more<sp/>permissive<sp/>inflate</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>21:<sp/>FASTEST<sp/>--<sp/>deflate<sp/>algorithm<sp/>with<sp/>only<sp/>one,<sp/>lowest<sp/>compression<sp/>level</highlight></codeline>
<codeline lineno="1080"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>22,23:<sp/>0<sp/>(reserved)</highlight></codeline>
<codeline lineno="1081"><highlight class="comment"></highlight></codeline>
<codeline lineno="1082"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>sprintf<sp/>variant<sp/>used<sp/>by<sp/>gzprintf<sp/>(zero<sp/>is<sp/>best):</highlight></codeline>
<codeline lineno="1083"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>24:<sp/>0<sp/>=<sp/>vs*,<sp/>1<sp/>=<sp/>s*<sp/>--<sp/>1<sp/>means<sp/>limited<sp/>to<sp/>20<sp/>arguments<sp/>after<sp/>the<sp/>format</highlight></codeline>
<codeline lineno="1084"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>25:<sp/>0<sp/>=<sp/>*nprintf,<sp/>1<sp/>=<sp/>*printf<sp/>--<sp/>1<sp/>means<sp/>gzprintf()<sp/>not<sp/>secure!</highlight></codeline>
<codeline lineno="1085"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>26:<sp/>0<sp/>=<sp/>returns<sp/>value,<sp/>1<sp/>=<sp/>void<sp/>--<sp/>1<sp/>means<sp/>inferred<sp/>string<sp/>length<sp/>returned</highlight></codeline>
<codeline lineno="1086"><highlight class="comment"></highlight></codeline>
<codeline lineno="1087"><highlight class="comment"><sp/><sp/><sp/><sp/>Remainder:</highlight></codeline>
<codeline lineno="1088"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>27-31:<sp/>0<sp/>(reserved)</highlight></codeline>
<codeline lineno="1089"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>utility<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>following<sp/>utility<sp/>functions<sp/>are<sp/>implemented<sp/>on<sp/>top<sp/>of<sp/>the<sp/>basic</highlight></codeline>
<codeline lineno="1096"><highlight class="comment"><sp/><sp/><sp/>stream-oriented<sp/>functions.<sp/><sp/>To<sp/>simplify<sp/>the<sp/>interface,<sp/>some<sp/>default<sp/>options</highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/><sp/><sp/>are<sp/>assumed<sp/>(compression<sp/>level<sp/>and<sp/>memory<sp/>usage,<sp/>standard<sp/>memory<sp/>allocation</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/><sp/><sp/>functions).<sp/><sp/>The<sp/>source<sp/>code<sp/>of<sp/>these<sp/>utility<sp/>functions<sp/>can<sp/>be<sp/>modified<sp/>if</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/><sp/><sp/>you<sp/>need<sp/>special<sp/>options.</highlight></codeline>
<codeline lineno="1100"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="compress_8c_1aa0962f70f4c727dc553d573d9fbb6364" kindref="member">compress</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*dest,<sp/><sp/><sp/><ref refid="zconf_8h_1ace0e0570092c9eb6acd3c85f88cc97ec" kindref="member">uLongf</ref><sp/>*destLen,</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*source,<sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/>sourceLen));</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Compresses<sp/>the<sp/>source<sp/>buffer<sp/>into<sp/>the<sp/>destination<sp/>buffer.<sp/><sp/>sourceLen<sp/>is</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/><sp/><sp/>the<sp/>byte<sp/>length<sp/>of<sp/>the<sp/>source<sp/>buffer.<sp/><sp/>Upon<sp/>entry,<sp/>destLen<sp/>is<sp/>the<sp/>total<sp/>size</highlight></codeline>
<codeline lineno="1107"><highlight class="comment"><sp/><sp/><sp/>of<sp/>the<sp/>destination<sp/>buffer,<sp/>which<sp/>must<sp/>be<sp/>at<sp/>least<sp/>the<sp/>value<sp/>returned<sp/>by</highlight></codeline>
<codeline lineno="1108"><highlight class="comment"><sp/><sp/><sp/>compressBound(sourceLen).<sp/><sp/>Upon<sp/>exit,<sp/>destLen<sp/>is<sp/>the<sp/>actual<sp/>size<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="1109"><highlight class="comment"><sp/><sp/><sp/>compressed<sp/>buffer.</highlight></codeline>
<codeline lineno="1110"><highlight class="comment"></highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>compress<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="1112"><highlight class="comment"><sp/><sp/><sp/>enough<sp/>memory,<sp/>Z_BUF_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="1113"><highlight class="comment"><sp/><sp/><sp/>buffer.</highlight></codeline>
<codeline lineno="1114"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="compress_8c_1a340dc71f63ab0e664ba8a57ae4bf501c" kindref="member">compress2</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*dest,<sp/><sp/><sp/><ref refid="zconf_8h_1ace0e0570092c9eb6acd3c85f88cc97ec" kindref="member">uLongf</ref><sp/>*destLen,</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*source,<sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/>sourceLen,</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level));</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Compresses<sp/>the<sp/>source<sp/>buffer<sp/>into<sp/>the<sp/>destination<sp/>buffer.<sp/><sp/>The<sp/>level</highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/><sp/><sp/>parameter<sp/>has<sp/>the<sp/>same<sp/>meaning<sp/>as<sp/>in<sp/>deflateInit.<sp/><sp/>sourceLen<sp/>is<sp/>the<sp/>byte</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/><sp/><sp/>length<sp/>of<sp/>the<sp/>source<sp/>buffer.<sp/><sp/>Upon<sp/>entry,<sp/>destLen<sp/>is<sp/>the<sp/>total<sp/>size<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"><sp/><sp/><sp/>destination<sp/>buffer,<sp/>which<sp/>must<sp/>be<sp/>at<sp/>least<sp/>the<sp/>value<sp/>returned<sp/>by</highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/><sp/><sp/>compressBound(sourceLen).<sp/><sp/>Upon<sp/>exit,<sp/>destLen<sp/>is<sp/>the<sp/>actual<sp/>size<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="1125"><highlight class="comment"><sp/><sp/><sp/>compressed<sp/>buffer.</highlight></codeline>
<codeline lineno="1126"><highlight class="comment"></highlight></codeline>
<codeline lineno="1127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>compress2<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough</highlight></codeline>
<codeline lineno="1128"><highlight class="comment"><sp/><sp/><sp/>memory,<sp/>Z_BUF_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output<sp/>buffer,</highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/><sp/><sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>level<sp/>parameter<sp/>is<sp/>invalid.</highlight></codeline>
<codeline lineno="1130"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="compress_8c_1ac2d18c08ae11286a4d0bc7ad34374c60" kindref="member">compressBound</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/>sourceLen));</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>compressBound()<sp/>returns<sp/>an<sp/>upper<sp/>bound<sp/>on<sp/>the<sp/>compressed<sp/>size<sp/>after</highlight></codeline>
<codeline lineno="1135"><highlight class="comment"><sp/><sp/><sp/>compress()<sp/>or<sp/>compress2()<sp/>on<sp/>sourceLen<sp/>bytes.<sp/><sp/>It<sp/>would<sp/>be<sp/>used<sp/>before<sp/>a</highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/><sp/><sp/>compress()<sp/>or<sp/>compress2()<sp/>call<sp/>to<sp/>allocate<sp/>the<sp/>destination<sp/>buffer.</highlight></codeline>
<codeline lineno="1137"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1ac3cad591ff052f1abe68bc74c6054747" kindref="member">uncompress</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*dest,<sp/><sp/><sp/><ref refid="zconf_8h_1ace0e0570092c9eb6acd3c85f88cc97ec" kindref="member">uLongf</ref><sp/>*destLen,</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*source,<sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/>sourceLen));</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Decompresses<sp/>the<sp/>source<sp/>buffer<sp/>into<sp/>the<sp/>destination<sp/>buffer.<sp/><sp/>sourceLen<sp/>is</highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/><sp/><sp/>the<sp/>byte<sp/>length<sp/>of<sp/>the<sp/>source<sp/>buffer.<sp/><sp/>Upon<sp/>entry,<sp/>destLen<sp/>is<sp/>the<sp/>total<sp/>size</highlight></codeline>
<codeline lineno="1144"><highlight class="comment"><sp/><sp/><sp/>of<sp/>the<sp/>destination<sp/>buffer,<sp/>which<sp/>must<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>hold<sp/>the<sp/>entire</highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/><sp/><sp/>uncompressed<sp/>data.<sp/><sp/>(The<sp/>size<sp/>of<sp/>the<sp/>uncompressed<sp/>data<sp/>must<sp/>have<sp/>been<sp/>saved</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/><sp/><sp/>previously<sp/>by<sp/>the<sp/>compressor<sp/>and<sp/>transmitted<sp/>to<sp/>the<sp/>decompressor<sp/>by<sp/>some</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/><sp/><sp/>mechanism<sp/>outside<sp/>the<sp/>scope<sp/>of<sp/>this<sp/>compression<sp/>library.)<sp/>Upon<sp/>exit,<sp/>destLen</highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/><sp/><sp/>is<sp/>the<sp/>actual<sp/>size<sp/>of<sp/>the<sp/>uncompressed<sp/>buffer.</highlight></codeline>
<codeline lineno="1149"><highlight class="comment"></highlight></codeline>
<codeline lineno="1150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>uncompress<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="1151"><highlight class="comment"><sp/><sp/><sp/>enough<sp/>memory,<sp/>Z_BUF_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="1152"><highlight class="comment"><sp/><sp/><sp/>buffer,<sp/>or<sp/>Z_DATA_ERROR<sp/>if<sp/>the<sp/>input<sp/>data<sp/>was<sp/>corrupted<sp/>or<sp/>incomplete.</highlight></codeline>
<codeline lineno="1153"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>gzip<sp/>file<sp/>access<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>library<sp/>supports<sp/>reading<sp/>and<sp/>writing<sp/>files<sp/>in<sp/>gzip<sp/>(.gz)<sp/>format<sp/>with</highlight></codeline>
<codeline lineno="1160"><highlight class="comment"><sp/><sp/><sp/>an<sp/>interface<sp/>similar<sp/>to<sp/>that<sp/>of<sp/>stdio,<sp/>using<sp/>the<sp/>functions<sp/>that<sp/>start<sp/>with</highlight></codeline>
<codeline lineno="1161"><highlight class="comment"><sp/><sp/><sp/>&quot;gz&quot;.<sp/><sp/>The<sp/>gzip<sp/>format<sp/>is<sp/>different<sp/>from<sp/>the<sp/>zlib<sp/>format.<sp/><sp/>gzip<sp/>is<sp/>a<sp/>gzip</highlight></codeline>
<codeline lineno="1162"><highlight class="comment"><sp/><sp/><sp/>wrapper,<sp/>documented<sp/>in<sp/>RFC<sp/>1952,<sp/>wrapped<sp/>around<sp/>a<sp/>deflate<sp/>stream.</highlight></codeline>
<codeline lineno="1163"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165" refid="zlib_8h_1acd0143ddd532551631ecc7093fd7adfc" refkind="member"><highlight class="normal">typedef<sp/><ref refid="zconf_8h_1aa3397ff439b5e076528b04bc9b8b086a" kindref="member">voidp</ref><sp/><ref refid="zlib_8h_1acd0143ddd532551631ecc7093fd7adfc" kindref="member">gzFile</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>opaque<sp/>gzip<sp/>file<sp/>descriptor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1168"><highlight class="comment">ZEXTERN<sp/>gzFile<sp/>ZEXPORT<sp/>gzopen<sp/>OF((const<sp/>char<sp/>*path,<sp/>const<sp/>char<sp/>*mode));</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"></highlight></codeline>
<codeline lineno="1170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Opens<sp/>a<sp/>gzip<sp/>(.gz)<sp/>file<sp/>for<sp/>reading<sp/>or<sp/>writing.<sp/><sp/>The<sp/>mode<sp/>parameter<sp/>is<sp/>as</highlight></codeline>
<codeline lineno="1171"><highlight class="comment"><sp/><sp/><sp/>in<sp/>fopen<sp/>(&quot;rb&quot;<sp/>or<sp/>&quot;wb&quot;)<sp/>but<sp/>can<sp/>also<sp/>include<sp/>a<sp/>compression<sp/>level<sp/>(&quot;wb9&quot;)<sp/>or</highlight></codeline>
<codeline lineno="1172"><highlight class="comment"><sp/><sp/><sp/>a<sp/>strategy:<sp/>&apos;f&apos;<sp/>for<sp/>filtered<sp/>data<sp/>as<sp/>in<sp/>&quot;wb6f&quot;,<sp/>&apos;h&apos;<sp/>for<sp/>Huffman-only</highlight></codeline>
<codeline lineno="1173"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>as<sp/>in<sp/>&quot;wb1h&quot;,<sp/>&apos;R&apos;<sp/>for<sp/>run-length<sp/>encoding<sp/>as<sp/>in<sp/>&quot;wb1R&quot;,<sp/>or<sp/>&apos;F&apos;</highlight></codeline>
<codeline lineno="1174"><highlight class="comment"><sp/><sp/><sp/>for<sp/>fixed<sp/>code<sp/>compression<sp/>as<sp/>in<sp/>&quot;wb9F&quot;.<sp/><sp/>(See<sp/>the<sp/>description<sp/>of</highlight></codeline>
<codeline lineno="1175"><highlight class="comment"><sp/><sp/><sp/>deflateInit2<sp/>for<sp/>more<sp/>information<sp/>about<sp/>the<sp/>strategy<sp/>parameter.)<sp/>Also<sp/>&quot;a&quot;</highlight></codeline>
<codeline lineno="1176"><highlight class="comment"><sp/><sp/><sp/>can<sp/>be<sp/>used<sp/>instead<sp/>of<sp/>&quot;w&quot;<sp/>to<sp/>request<sp/>that<sp/>the<sp/>gzip<sp/>stream<sp/>that<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="1177"><highlight class="comment"><sp/><sp/><sp/>written<sp/>be<sp/>appended<sp/>to<sp/>the<sp/>file.<sp/><sp/>&quot;+&quot;<sp/>will<sp/>result<sp/>in<sp/>an<sp/>error,<sp/>since<sp/>reading</highlight></codeline>
<codeline lineno="1178"><highlight class="comment"><sp/><sp/><sp/>and<sp/>writing<sp/>to<sp/>the<sp/>same<sp/>gzip<sp/>file<sp/>is<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="1179"><highlight class="comment"></highlight></codeline>
<codeline lineno="1180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzopen<sp/>can<sp/>be<sp/>used<sp/>to<sp/>read<sp/>a<sp/>file<sp/>which<sp/>is<sp/>not<sp/>in<sp/>gzip<sp/>format;<sp/>in<sp/>this</highlight></codeline>
<codeline lineno="1181"><highlight class="comment"><sp/><sp/><sp/>case<sp/>gzread<sp/>will<sp/>directly<sp/>read<sp/>from<sp/>the<sp/>file<sp/>without<sp/>decompression.</highlight></codeline>
<codeline lineno="1182"><highlight class="comment"></highlight></codeline>
<codeline lineno="1183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzopen<sp/>returns<sp/>NULL<sp/>if<sp/>the<sp/>file<sp/>could<sp/>not<sp/>be<sp/>opened,<sp/>if<sp/>there<sp/>was</highlight></codeline>
<codeline lineno="1184"><highlight class="comment"><sp/><sp/><sp/>insufficient<sp/>memory<sp/>to<sp/>allocate<sp/>the<sp/>gzFile<sp/>state,<sp/>or<sp/>if<sp/>an<sp/>invalid<sp/>mode<sp/>was</highlight></codeline>
<codeline lineno="1185"><highlight class="comment"><sp/><sp/><sp/>specified<sp/>(an<sp/>&apos;r&apos;,<sp/>&apos;w&apos;,<sp/>or<sp/>&apos;a&apos;<sp/>was<sp/>not<sp/>provided,<sp/>or<sp/>&apos;+&apos;<sp/>was<sp/>provided).</highlight></codeline>
<codeline lineno="1186"><highlight class="comment"><sp/><sp/><sp/>errno<sp/>can<sp/>be<sp/>checked<sp/>to<sp/>determine<sp/>if<sp/>the<sp/>reason<sp/>gzopen<sp/>failed<sp/>was<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="1187"><highlight class="comment"><sp/><sp/><sp/>file<sp/>could<sp/>not<sp/>be<sp/>opened.</highlight></codeline>
<codeline lineno="1188"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/>gzFile<sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1ad32e31401f3f926fc30d40298307e451" kindref="member">gzdopen</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode));</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzdopen<sp/>associates<sp/>a<sp/>gzFile<sp/>with<sp/>the<sp/>file<sp/>descriptor<sp/>fd.<sp/><sp/>File<sp/>descriptors</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"><sp/><sp/><sp/>are<sp/>obtained<sp/>from<sp/>calls<sp/>like<sp/>open,<sp/>dup,<sp/>creat,<sp/>pipe<sp/>or<sp/>fileno<sp/>(if<sp/>the<sp/>file</highlight></codeline>
<codeline lineno="1194"><highlight class="comment"><sp/><sp/><sp/>has<sp/>been<sp/>previously<sp/>opened<sp/>with<sp/>fopen).<sp/><sp/>The<sp/>mode<sp/>parameter<sp/>is<sp/>as<sp/>in<sp/>gzopen.</highlight></codeline>
<codeline lineno="1195"><highlight class="comment"></highlight></codeline>
<codeline lineno="1196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>next<sp/>call<sp/>of<sp/>gzclose<sp/>on<sp/>the<sp/>returned<sp/>gzFile<sp/>will<sp/>also<sp/>close<sp/>the<sp/>file</highlight></codeline>
<codeline lineno="1197"><highlight class="comment"><sp/><sp/><sp/>descriptor<sp/>fd,<sp/>just<sp/>like<sp/>fclose(fdopen(fd,<sp/>mode))<sp/>closes<sp/>the<sp/>file<sp/>descriptor</highlight></codeline>
<codeline lineno="1198"><highlight class="comment"><sp/><sp/><sp/>fd.<sp/><sp/>If<sp/>you<sp/>want<sp/>to<sp/>keep<sp/>fd<sp/>open,<sp/>use<sp/>fd<sp/>=<sp/>dup(fd_keep);<sp/>gz<sp/>=<sp/>gzdopen(fd,</highlight></codeline>
<codeline lineno="1199"><highlight class="comment"><sp/><sp/><sp/>mode);.<sp/><sp/>The<sp/>duplicated<sp/>descriptor<sp/>should<sp/>be<sp/>saved<sp/>to<sp/>avoid<sp/>a<sp/>leak,<sp/>since</highlight></codeline>
<codeline lineno="1200"><highlight class="comment"><sp/><sp/><sp/>gzdopen<sp/>does<sp/>not<sp/>close<sp/>fd<sp/>if<sp/>it<sp/>fails.</highlight></codeline>
<codeline lineno="1201"><highlight class="comment"></highlight></codeline>
<codeline lineno="1202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzdopen<sp/>returns<sp/>NULL<sp/>if<sp/>there<sp/>was<sp/>insufficient<sp/>memory<sp/>to<sp/>allocate<sp/>the</highlight></codeline>
<codeline lineno="1203"><highlight class="comment"><sp/><sp/><sp/>gzFile<sp/>state,<sp/>if<sp/>an<sp/>invalid<sp/>mode<sp/>was<sp/>specified<sp/>(an<sp/>&apos;r&apos;,<sp/>&apos;w&apos;,<sp/>or<sp/>&apos;a&apos;<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="1204"><highlight class="comment"><sp/><sp/><sp/>provided,<sp/>or<sp/>&apos;+&apos;<sp/>was<sp/>provided),<sp/>or<sp/>if<sp/>fd<sp/>is<sp/>-1.<sp/><sp/>The<sp/>file<sp/>descriptor<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="1205"><highlight class="comment"><sp/><sp/><sp/>used<sp/>until<sp/>the<sp/>next<sp/>gz*<sp/>read,<sp/>write,<sp/>seek,<sp/>or<sp/>close<sp/>operation,<sp/>so<sp/>gzdopen</highlight></codeline>
<codeline lineno="1206"><highlight class="comment"><sp/><sp/><sp/>will<sp/>not<sp/>detect<sp/>if<sp/>fd<sp/>is<sp/>invalid<sp/>(unless<sp/>fd<sp/>is<sp/>-1).</highlight></codeline>
<codeline lineno="1207"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1abc6ba34577ba2bcde4005a624fa3e63b" kindref="member">gzbuffer</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size));</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Set<sp/>the<sp/>internal<sp/>buffer<sp/>size<sp/>used<sp/>by<sp/>this<sp/>library&apos;s<sp/>functions.<sp/><sp/>The</highlight></codeline>
<codeline lineno="1212"><highlight class="comment"><sp/><sp/><sp/>default<sp/>buffer<sp/>size<sp/>is<sp/>8192<sp/>bytes.<sp/><sp/>This<sp/>function<sp/>must<sp/>be<sp/>called<sp/>after</highlight></codeline>
<codeline lineno="1213"><highlight class="comment"><sp/><sp/><sp/>gzopen()<sp/>or<sp/>gzdopen(),<sp/>and<sp/>before<sp/>any<sp/>other<sp/>calls<sp/>that<sp/>read<sp/>or<sp/>write<sp/>the</highlight></codeline>
<codeline lineno="1214"><highlight class="comment"><sp/><sp/><sp/>file.<sp/><sp/>The<sp/>buffer<sp/>memory<sp/>allocation<sp/>is<sp/>always<sp/>deferred<sp/>to<sp/>the<sp/>first<sp/>read<sp/>or</highlight></codeline>
<codeline lineno="1215"><highlight class="comment"><sp/><sp/><sp/>write.<sp/><sp/>Two<sp/>buffers<sp/>are<sp/>allocated,<sp/>either<sp/>both<sp/>of<sp/>the<sp/>specified<sp/>size<sp/>when</highlight></codeline>
<codeline lineno="1216"><highlight class="comment"><sp/><sp/><sp/>writing,<sp/>or<sp/>one<sp/>of<sp/>the<sp/>specified<sp/>size<sp/>and<sp/>the<sp/>other<sp/>twice<sp/>that<sp/>size<sp/>when</highlight></codeline>
<codeline lineno="1217"><highlight class="comment"><sp/><sp/><sp/>reading.<sp/><sp/>A<sp/>larger<sp/>buffer<sp/>size<sp/>of,<sp/>for<sp/>example,<sp/>64K<sp/>or<sp/>128K<sp/>bytes<sp/>will</highlight></codeline>
<codeline lineno="1218"><highlight class="comment"><sp/><sp/><sp/>noticeably<sp/>increase<sp/>the<sp/>speed<sp/>of<sp/>decompression<sp/>(reading).</highlight></codeline>
<codeline lineno="1219"><highlight class="comment"></highlight></codeline>
<codeline lineno="1220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>new<sp/>buffer<sp/>size<sp/>also<sp/>affects<sp/>the<sp/>maximum<sp/>length<sp/>for<sp/>gzprintf().</highlight></codeline>
<codeline lineno="1221"><highlight class="comment"></highlight></codeline>
<codeline lineno="1222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzbuffer()<sp/>returns<sp/>0<sp/>on<sp/>success,<sp/>or<sp/>-1<sp/>on<sp/>failure,<sp/>such<sp/>as<sp/>being<sp/>called</highlight></codeline>
<codeline lineno="1223"><highlight class="comment"><sp/><sp/><sp/>too<sp/>late.</highlight></codeline>
<codeline lineno="1224"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1a12e921f4713c149e3e089cd308d9610e" kindref="member">gzsetparams</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strategy));</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Dynamically<sp/>update<sp/>the<sp/>compression<sp/>level<sp/>or<sp/>strategy.<sp/><sp/>See<sp/>the<sp/>description</highlight></codeline>
<codeline lineno="1229"><highlight class="comment"><sp/><sp/><sp/>of<sp/>deflateInit2<sp/>for<sp/>the<sp/>meaning<sp/>of<sp/>these<sp/>parameters.</highlight></codeline>
<codeline lineno="1230"><highlight class="comment"></highlight></codeline>
<codeline lineno="1231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzsetparams<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>file<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"><sp/><sp/><sp/>opened<sp/>for<sp/>writing.</highlight></codeline>
<codeline lineno="1233"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1afde3d37f67f1b2d4e31fc3056cc5508e" kindref="member">gzread</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file,<sp/><ref refid="zconf_8h_1aa3397ff439b5e076528b04bc9b8b086a" kindref="member">voidp</ref><sp/>buf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>len));</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Reads<sp/>the<sp/>given<sp/>number<sp/>of<sp/>uncompressed<sp/>bytes<sp/>from<sp/>the<sp/>compressed<sp/>file.<sp/><sp/>If</highlight></codeline>
<codeline lineno="1238"><highlight class="comment"><sp/><sp/><sp/>the<sp/>input<sp/>file<sp/>was<sp/>not<sp/>in<sp/>gzip<sp/>format,<sp/>gzread<sp/>copies<sp/>the<sp/>given<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="1239"><highlight class="comment"><sp/><sp/><sp/>bytes<sp/>into<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="1240"><highlight class="comment"></highlight></codeline>
<codeline lineno="1241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>After<sp/>reaching<sp/>the<sp/>end<sp/>of<sp/>a<sp/>gzip<sp/>stream<sp/>in<sp/>the<sp/>input,<sp/>gzread<sp/>will<sp/>continue</highlight></codeline>
<codeline lineno="1242"><highlight class="comment"><sp/><sp/><sp/>to<sp/>read,<sp/>looking<sp/>for<sp/>another<sp/>gzip<sp/>stream,<sp/>or<sp/>failing<sp/>that,<sp/>reading<sp/>the<sp/>rest</highlight></codeline>
<codeline lineno="1243"><highlight class="comment"><sp/><sp/><sp/>of<sp/>the<sp/>input<sp/>file<sp/>directly<sp/>without<sp/>decompression.<sp/><sp/>The<sp/>entire<sp/>input<sp/>file</highlight></codeline>
<codeline lineno="1244"><highlight class="comment"><sp/><sp/><sp/>will<sp/>be<sp/>read<sp/>if<sp/>gzread<sp/>is<sp/>called<sp/>until<sp/>it<sp/>returns<sp/>less<sp/>than<sp/>the<sp/>requested</highlight></codeline>
<codeline lineno="1245"><highlight class="comment"><sp/><sp/><sp/>len.</highlight></codeline>
<codeline lineno="1246"><highlight class="comment"></highlight></codeline>
<codeline lineno="1247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzread<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>uncompressed<sp/>bytes<sp/>actually<sp/>read,<sp/>less<sp/>than</highlight></codeline>
<codeline lineno="1248"><highlight class="comment"><sp/><sp/><sp/>len<sp/>for<sp/>end<sp/>of<sp/>file,<sp/>or<sp/>-1<sp/>for<sp/>error.</highlight></codeline>
<codeline lineno="1249"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1a9e275a784606f8b2ae63569c8a59076e" kindref="member">gzwrite</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file,</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a2c81736dda4a3a3f349a054031876954" kindref="member">voidpc</ref><sp/>buf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>len));</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Writes<sp/>the<sp/>given<sp/>number<sp/>of<sp/>uncompressed<sp/>bytes<sp/>into<sp/>the<sp/>compressed<sp/>file.</highlight></codeline>
<codeline lineno="1255"><highlight class="comment"><sp/><sp/><sp/>gzwrite<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>uncompressed<sp/>bytes<sp/>written<sp/>or<sp/>0<sp/>in<sp/>case<sp/>of</highlight></codeline>
<codeline lineno="1256"><highlight class="comment"><sp/><sp/><sp/>error.</highlight></codeline>
<codeline lineno="1257"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1af38d1853df635eee27f1a02f96457b22" kindref="member">ZEXPORTVA</ref><sp/><ref refid="zlib_8h_1a4a2a9186c4a21cf2032e813f40466ad0" kindref="member">gzprintf</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file,<sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespace_poco_1aa5bbd43e7c73e8189d7b156493fa7f46" kindref="member">format</ref>,<sp/>...));</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Converts,<sp/>formats,<sp/>and<sp/>writes<sp/>the<sp/>arguments<sp/>to<sp/>the<sp/>compressed<sp/>file<sp/>under</highlight></codeline>
<codeline lineno="1262"><highlight class="comment"><sp/><sp/><sp/>control<sp/>of<sp/>the<sp/>format<sp/>string,<sp/>as<sp/>in<sp/>fprintf.<sp/><sp/>gzprintf<sp/>returns<sp/>the<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="1263"><highlight class="comment"><sp/><sp/><sp/>uncompressed<sp/>bytes<sp/>actually<sp/>written,<sp/>or<sp/>0<sp/>in<sp/>case<sp/>of<sp/>error.<sp/><sp/>The<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="1264"><highlight class="comment"><sp/><sp/><sp/>uncompressed<sp/>bytes<sp/>written<sp/>is<sp/>limited<sp/>to<sp/>8191,<sp/>or<sp/>one<sp/>less<sp/>than<sp/>the<sp/>buffer</highlight></codeline>
<codeline lineno="1265"><highlight class="comment"><sp/><sp/><sp/>size<sp/>given<sp/>to<sp/>gzbuffer().<sp/><sp/>The<sp/>caller<sp/>should<sp/>assure<sp/>that<sp/>this<sp/>limit<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="1266"><highlight class="comment"><sp/><sp/><sp/>exceeded.<sp/><sp/>If<sp/>it<sp/>is<sp/>exceeded,<sp/>then<sp/>gzprintf()<sp/>will<sp/>return<sp/>an<sp/>error<sp/>(0)<sp/>with</highlight></codeline>
<codeline lineno="1267"><highlight class="comment"><sp/><sp/><sp/>nothing<sp/>written.<sp/><sp/>In<sp/>this<sp/>case,<sp/>there<sp/>may<sp/>also<sp/>be<sp/>a<sp/>buffer<sp/>overflow<sp/>with</highlight></codeline>
<codeline lineno="1268"><highlight class="comment"><sp/><sp/><sp/>unpredictable<sp/>consequences,<sp/>which<sp/>is<sp/>possible<sp/>only<sp/>if<sp/>zlib<sp/>was<sp/>compiled<sp/>with</highlight></codeline>
<codeline lineno="1269"><highlight class="comment"><sp/><sp/><sp/>the<sp/>insecure<sp/>functions<sp/>sprintf()<sp/>or<sp/>vsprintf()<sp/>because<sp/>the<sp/>secure<sp/>snprintf()</highlight></codeline>
<codeline lineno="1270"><highlight class="comment"><sp/><sp/><sp/>or<sp/>vsnprintf()<sp/>functions<sp/>were<sp/>not<sp/>available.<sp/><sp/>This<sp/>can<sp/>be<sp/>determined<sp/>using</highlight></codeline>
<codeline lineno="1271"><highlight class="comment"><sp/><sp/><sp/>zlibCompileFlags().</highlight></codeline>
<codeline lineno="1272"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1ac41c37d4e14b0e87d43866e7395d7683" kindref="member">gzputs</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file,<sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s));</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1276"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Writes<sp/>the<sp/>given<sp/>null-terminated<sp/>string<sp/>to<sp/>the<sp/>compressed<sp/>file,<sp/>excluding</highlight></codeline>
<codeline lineno="1277"><highlight class="comment"><sp/><sp/><sp/>the<sp/>terminating<sp/>null<sp/>character.</highlight></codeline>
<codeline lineno="1278"><highlight class="comment"></highlight></codeline>
<codeline lineno="1279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzputs<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>characters<sp/>written,<sp/>or<sp/>-1<sp/>in<sp/>case<sp/>of<sp/>error.</highlight></codeline>
<codeline lineno="1280"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1a2278a94d5999c8a939476a915ee6c924" kindref="member">gzgets</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len));</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Reads<sp/>bytes<sp/>from<sp/>the<sp/>compressed<sp/>file<sp/>until<sp/>len-1<sp/>characters<sp/>are<sp/>read,<sp/>or<sp/>a</highlight></codeline>
<codeline lineno="1285"><highlight class="comment"><sp/><sp/><sp/>newline<sp/>character<sp/>is<sp/>read<sp/>and<sp/>transferred<sp/>to<sp/>buf,<sp/>or<sp/>an<sp/>end-of-file</highlight></codeline>
<codeline lineno="1286"><highlight class="comment"><sp/><sp/><sp/>condition<sp/>is<sp/>encountered.<sp/><sp/>If<sp/>any<sp/>characters<sp/>are<sp/>read<sp/>or<sp/>if<sp/>len<sp/>==<sp/>1,<sp/>the</highlight></codeline>
<codeline lineno="1287"><highlight class="comment"><sp/><sp/><sp/>string<sp/>is<sp/>terminated<sp/>with<sp/>a<sp/>null<sp/>character.<sp/><sp/>If<sp/>no<sp/>characters<sp/>are<sp/>read<sp/>due</highlight></codeline>
<codeline lineno="1288"><highlight class="comment"><sp/><sp/><sp/>to<sp/>an<sp/>end-of-file<sp/>or<sp/>len<sp/>&lt;<sp/>1,<sp/>then<sp/>the<sp/>buffer<sp/>is<sp/>left<sp/>untouched.</highlight></codeline>
<codeline lineno="1289"><highlight class="comment"></highlight></codeline>
<codeline lineno="1290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzgets<sp/>returns<sp/>buf<sp/>which<sp/>is<sp/>a<sp/>null-terminated<sp/>string,<sp/>or<sp/>it<sp/>returns<sp/>NULL</highlight></codeline>
<codeline lineno="1291"><highlight class="comment"><sp/><sp/><sp/>for<sp/>end-of-file<sp/>or<sp/>in<sp/>case<sp/>of<sp/>error.<sp/><sp/>If<sp/>there<sp/>was<sp/>an<sp/>error,<sp/>the<sp/>contents<sp/>at</highlight></codeline>
<codeline lineno="1292"><highlight class="comment"><sp/><sp/><sp/>buf<sp/>are<sp/>indeterminate.</highlight></codeline>
<codeline lineno="1293"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1ad58e376fd354414421c2b10f395d37b0" kindref="member">gzputc</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c));</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Writes<sp/>c,<sp/>converted<sp/>to<sp/>an<sp/>unsigned<sp/>char,<sp/>into<sp/>the<sp/>compressed<sp/>file.<sp/><sp/>gzputc</highlight></codeline>
<codeline lineno="1298"><highlight class="comment"><sp/><sp/><sp/>returns<sp/>the<sp/>value<sp/>that<sp/>was<sp/>written,<sp/>or<sp/>-1<sp/>in<sp/>case<sp/>of<sp/>error.</highlight></codeline>
<codeline lineno="1299"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1a322014ec15696f3650eedf4b30eb703d" kindref="member">gzgetc</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file));</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Reads<sp/>one<sp/>byte<sp/>from<sp/>the<sp/>compressed<sp/>file.<sp/><sp/>gzgetc<sp/>returns<sp/>this<sp/>byte<sp/>or<sp/>-1</highlight></codeline>
<codeline lineno="1304"><highlight class="comment"><sp/><sp/><sp/>in<sp/>case<sp/>of<sp/>end<sp/>of<sp/>file<sp/>or<sp/>error.</highlight></codeline>
<codeline lineno="1305"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1a0916bed0b751310ef2e79ba07d382884" kindref="member">gzungetc</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/>gzFile<sp/>file));</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1309"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Push<sp/>one<sp/>character<sp/>back<sp/>onto<sp/>the<sp/>stream<sp/>to<sp/>be<sp/>read<sp/>as<sp/>the<sp/>first<sp/>character</highlight></codeline>
<codeline lineno="1310"><highlight class="comment"><sp/><sp/><sp/>on<sp/>the<sp/>next<sp/>read.<sp/><sp/>At<sp/>least<sp/>one<sp/>character<sp/>of<sp/>push-back<sp/>is<sp/>allowed.</highlight></codeline>
<codeline lineno="1311"><highlight class="comment"><sp/><sp/><sp/>gzungetc()<sp/>returns<sp/>the<sp/>character<sp/>pushed,<sp/>or<sp/>-1<sp/>on<sp/>failure.<sp/><sp/>gzungetc()<sp/>will</highlight></codeline>
<codeline lineno="1312"><highlight class="comment"><sp/><sp/><sp/>fail<sp/>if<sp/>c<sp/>is<sp/>-1,<sp/>and<sp/>may<sp/>fail<sp/>if<sp/>a<sp/>character<sp/>has<sp/>been<sp/>pushed<sp/>but<sp/>not<sp/>read</highlight></codeline>
<codeline lineno="1313"><highlight class="comment"><sp/><sp/><sp/>yet.<sp/><sp/>If<sp/>gzungetc<sp/>is<sp/>used<sp/>immediately<sp/>after<sp/>gzopen<sp/>or<sp/>gzdopen,<sp/>at<sp/>least<sp/>the</highlight></codeline>
<codeline lineno="1314"><highlight class="comment"><sp/><sp/><sp/>output<sp/>buffer<sp/>size<sp/>of<sp/>pushed<sp/>characters<sp/>is<sp/>allowed.<sp/><sp/>(See<sp/>gzbuffer<sp/>above.)</highlight></codeline>
<codeline lineno="1315"><highlight class="comment"><sp/><sp/><sp/>The<sp/>pushed<sp/>character<sp/>will<sp/>be<sp/>discarded<sp/>if<sp/>the<sp/>stream<sp/>is<sp/>repositioned<sp/>with</highlight></codeline>
<codeline lineno="1316"><highlight class="comment"><sp/><sp/><sp/>gzseek()<sp/>or<sp/>gzrewind().</highlight></codeline>
<codeline lineno="1317"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1a040367f4d07aa1fb4efebc76f8096deb" kindref="member">gzflush</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush));</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Flushes<sp/>all<sp/>pending<sp/>output<sp/>into<sp/>the<sp/>compressed<sp/>file.<sp/><sp/>The<sp/>parameter<sp/>flush</highlight></codeline>
<codeline lineno="1322"><highlight class="comment"><sp/><sp/><sp/>is<sp/>as<sp/>in<sp/>the<sp/>deflate()<sp/>function.<sp/><sp/>The<sp/>return<sp/>value<sp/>is<sp/>the<sp/>zlib<sp/>error<sp/>number</highlight></codeline>
<codeline lineno="1323"><highlight class="comment"><sp/><sp/><sp/>(see<sp/>function<sp/>gzerror<sp/>below).<sp/><sp/>gzflush<sp/>is<sp/>only<sp/>permitted<sp/>when<sp/>writing.</highlight></codeline>
<codeline lineno="1324"><highlight class="comment"></highlight></codeline>
<codeline lineno="1325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>flush<sp/>parameter<sp/>is<sp/>Z_FINISH,<sp/>the<sp/>remaining<sp/>data<sp/>is<sp/>written<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="1326"><highlight class="comment"><sp/><sp/><sp/>gzip<sp/>stream<sp/>is<sp/>completed<sp/>in<sp/>the<sp/>output.<sp/><sp/>If<sp/>gzwrite()<sp/>is<sp/>called<sp/>again,<sp/>a<sp/>new</highlight></codeline>
<codeline lineno="1327"><highlight class="comment"><sp/><sp/><sp/>gzip<sp/>stream<sp/>will<sp/>be<sp/>started<sp/>in<sp/>the<sp/>output.<sp/><sp/>gzread()<sp/>is<sp/>able<sp/>to<sp/>read<sp/>such</highlight></codeline>
<codeline lineno="1328"><highlight class="comment"><sp/><sp/><sp/>concatented<sp/>gzip<sp/>streams.</highlight></codeline>
<codeline lineno="1329"><highlight class="comment"></highlight></codeline>
<codeline lineno="1330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzflush<sp/>should<sp/>be<sp/>called<sp/>only<sp/>when<sp/>strictly<sp/>necessary<sp/>because<sp/>it<sp/>will</highlight></codeline>
<codeline lineno="1331"><highlight class="comment"><sp/><sp/><sp/>degrade<sp/>compression<sp/>if<sp/>called<sp/>too<sp/>often.</highlight></codeline>
<codeline lineno="1332"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1335"><highlight class="comment">ZEXTERN<sp/>z_off_t<sp/>ZEXPORT<sp/>gzseek<sp/>OF((gzFile<sp/>file,</highlight></codeline>
<codeline lineno="1336"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_off_t<sp/>offset,<sp/>int<sp/>whence));</highlight></codeline>
<codeline lineno="1337"><highlight class="comment"></highlight></codeline>
<codeline lineno="1338"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Sets<sp/>the<sp/>starting<sp/>position<sp/>for<sp/>the<sp/>next<sp/>gzread<sp/>or<sp/>gzwrite<sp/>on<sp/>the<sp/>given</highlight></codeline>
<codeline lineno="1339"><highlight class="comment"><sp/><sp/><sp/>compressed<sp/>file.<sp/><sp/>The<sp/>offset<sp/>represents<sp/>a<sp/>number<sp/>of<sp/>bytes<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="1340"><highlight class="comment"><sp/><sp/><sp/>uncompressed<sp/>data<sp/>stream.<sp/><sp/>The<sp/>whence<sp/>parameter<sp/>is<sp/>defined<sp/>as<sp/>in<sp/>lseek(2);</highlight></codeline>
<codeline lineno="1341"><highlight class="comment"><sp/><sp/><sp/>the<sp/>value<sp/>SEEK_END<sp/>is<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="1342"><highlight class="comment"></highlight></codeline>
<codeline lineno="1343"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>file<sp/>is<sp/>opened<sp/>for<sp/>reading,<sp/>this<sp/>function<sp/>is<sp/>emulated<sp/>but<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="1344"><highlight class="comment"><sp/><sp/><sp/>extremely<sp/>slow.<sp/><sp/>If<sp/>the<sp/>file<sp/>is<sp/>opened<sp/>for<sp/>writing,<sp/>only<sp/>forward<sp/>seeks<sp/>are</highlight></codeline>
<codeline lineno="1345"><highlight class="comment"><sp/><sp/><sp/>supported;<sp/>gzseek<sp/>then<sp/>compresses<sp/>a<sp/>sequence<sp/>of<sp/>zeroes<sp/>up<sp/>to<sp/>the<sp/>new</highlight></codeline>
<codeline lineno="1346"><highlight class="comment"><sp/><sp/><sp/>starting<sp/>position.</highlight></codeline>
<codeline lineno="1347"><highlight class="comment"></highlight></codeline>
<codeline lineno="1348"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzseek<sp/>returns<sp/>the<sp/>resulting<sp/>offset<sp/>location<sp/>as<sp/>measured<sp/>in<sp/>bytes<sp/>from</highlight></codeline>
<codeline lineno="1349"><highlight class="comment"><sp/><sp/><sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>uncompressed<sp/>stream,<sp/>or<sp/>-1<sp/>in<sp/>case<sp/>of<sp/>error,<sp/>in</highlight></codeline>
<codeline lineno="1350"><highlight class="comment"><sp/><sp/><sp/>particular<sp/>if<sp/>the<sp/>file<sp/>is<sp/>opened<sp/>for<sp/>writing<sp/>and<sp/>the<sp/>new<sp/>starting<sp/>position</highlight></codeline>
<codeline lineno="1351"><highlight class="comment"><sp/><sp/><sp/>would<sp/>be<sp/>before<sp/>the<sp/>current<sp/>position.</highlight></codeline>
<codeline lineno="1352"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><sp/><sp/><sp/><ref refid="zlib_8h_1a74851e4e30c2d078bff8fa5fb24771fb" kindref="member">gzrewind</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file));</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Rewinds<sp/>the<sp/>given<sp/>file.<sp/>This<sp/>function<sp/>is<sp/>supported<sp/>only<sp/>for<sp/>reading.</highlight></codeline>
<codeline lineno="1357"><highlight class="comment"></highlight></codeline>
<codeline lineno="1358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzrewind(file)<sp/>is<sp/>equivalent<sp/>to<sp/>(int)gzseek(file,<sp/>0L,<sp/>SEEK_SET)</highlight></codeline>
<codeline lineno="1359"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1362"><highlight class="comment">ZEXTERN<sp/>z_off_t<sp/>ZEXPORT<sp/><sp/><sp/><sp/>gztell<sp/>OF((gzFile<sp/>file));</highlight></codeline>
<codeline lineno="1363"><highlight class="comment"></highlight></codeline>
<codeline lineno="1364"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>starting<sp/>position<sp/>for<sp/>the<sp/>next<sp/>gzread<sp/>or<sp/>gzwrite<sp/>on<sp/>the<sp/>given</highlight></codeline>
<codeline lineno="1365"><highlight class="comment"><sp/><sp/><sp/>compressed<sp/>file.<sp/><sp/>This<sp/>position<sp/>represents<sp/>a<sp/>number<sp/>of<sp/>bytes<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="1366"><highlight class="comment"><sp/><sp/><sp/>uncompressed<sp/>data<sp/>stream,<sp/>and<sp/>is<sp/>zero<sp/>when<sp/>starting,<sp/>even<sp/>if<sp/>appending<sp/>or</highlight></codeline>
<codeline lineno="1367"><highlight class="comment"><sp/><sp/><sp/>reading<sp/>a<sp/>gzip<sp/>stream<sp/>from<sp/>the<sp/>middle<sp/>of<sp/>a<sp/>file<sp/>using<sp/>gzdopen().</highlight></codeline>
<codeline lineno="1368"><highlight class="comment"></highlight></codeline>
<codeline lineno="1369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gztell(file)<sp/>is<sp/>equivalent<sp/>to<sp/>gzseek(file,<sp/>0L,<sp/>SEEK_CUR)</highlight></codeline>
<codeline lineno="1370"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1373"><highlight class="comment">ZEXTERN<sp/>z_off_t<sp/>ZEXPORT<sp/>gzoffset<sp/>OF((gzFile<sp/>file));</highlight></codeline>
<codeline lineno="1374"><highlight class="comment"></highlight></codeline>
<codeline lineno="1375"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>current<sp/>offset<sp/>in<sp/>the<sp/>file<sp/>being<sp/>read<sp/>or<sp/>written.<sp/><sp/>This<sp/>offset</highlight></codeline>
<codeline lineno="1376"><highlight class="comment"><sp/><sp/><sp/>includes<sp/>the<sp/>count<sp/>of<sp/>bytes<sp/>that<sp/>precede<sp/>the<sp/>gzip<sp/>stream,<sp/>for<sp/>example<sp/>when</highlight></codeline>
<codeline lineno="1377"><highlight class="comment"><sp/><sp/><sp/>appending<sp/>or<sp/>when<sp/>using<sp/>gzdopen()<sp/>for<sp/>reading.<sp/><sp/>When<sp/>reading,<sp/>the<sp/>offset</highlight></codeline>
<codeline lineno="1378"><highlight class="comment"><sp/><sp/><sp/>does<sp/>not<sp/>include<sp/>as<sp/>yet<sp/>unused<sp/>buffered<sp/>input.<sp/><sp/>This<sp/>information<sp/>can<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="1379"><highlight class="comment"><sp/><sp/><sp/>for<sp/>a<sp/>progress<sp/>indicator.<sp/><sp/>On<sp/>error,<sp/>gzoffset()<sp/>returns<sp/>-1.</highlight></codeline>
<codeline lineno="1380"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1a64c8b210e7230c74417a3f6dd07d3119" kindref="member">gzeof</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file));</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1384"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>true<sp/>(1)<sp/>if<sp/>the<sp/>end-of-file<sp/>indicator<sp/>has<sp/>been<sp/>set<sp/>while<sp/>reading,</highlight></codeline>
<codeline lineno="1385"><highlight class="comment"><sp/><sp/><sp/>false<sp/>(0)<sp/>otherwise.<sp/><sp/>Note<sp/>that<sp/>the<sp/>end-of-file<sp/>indicator<sp/>is<sp/>set<sp/>only<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="1386"><highlight class="comment"><sp/><sp/><sp/>read<sp/>tried<sp/>to<sp/>go<sp/>past<sp/>the<sp/>end<sp/>of<sp/>the<sp/>input,<sp/>but<sp/>came<sp/>up<sp/>short.<sp/><sp/>Therefore,</highlight></codeline>
<codeline lineno="1387"><highlight class="comment"><sp/><sp/><sp/>just<sp/>like<sp/>feof(),<sp/>gzeof()<sp/>may<sp/>return<sp/>false<sp/>even<sp/>if<sp/>there<sp/>is<sp/>no<sp/>more<sp/>data<sp/>to</highlight></codeline>
<codeline lineno="1388"><highlight class="comment"><sp/><sp/><sp/>read,<sp/>in<sp/>the<sp/>event<sp/>that<sp/>the<sp/>last<sp/>read<sp/>request<sp/>was<sp/>for<sp/>the<sp/>exact<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="1389"><highlight class="comment"><sp/><sp/><sp/>bytes<sp/>remaining<sp/>in<sp/>the<sp/>input<sp/>file.<sp/><sp/>This<sp/>will<sp/>happen<sp/>if<sp/>the<sp/>input<sp/>file<sp/>size</highlight></codeline>
<codeline lineno="1390"><highlight class="comment"><sp/><sp/><sp/>is<sp/>an<sp/>exact<sp/>multiple<sp/>of<sp/>the<sp/>buffer<sp/>size.</highlight></codeline>
<codeline lineno="1391"><highlight class="comment"></highlight></codeline>
<codeline lineno="1392"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>gzeof()<sp/>returns<sp/>true,<sp/>then<sp/>the<sp/>read<sp/>functions<sp/>will<sp/>return<sp/>no<sp/>more<sp/>data,</highlight></codeline>
<codeline lineno="1393"><highlight class="comment"><sp/><sp/><sp/>unless<sp/>the<sp/>end-of-file<sp/>indicator<sp/>is<sp/>reset<sp/>by<sp/>gzclearerr()<sp/>and<sp/>the<sp/>input<sp/>file</highlight></codeline>
<codeline lineno="1394"><highlight class="comment"><sp/><sp/><sp/>has<sp/>grown<sp/>since<sp/>the<sp/>previous<sp/>end<sp/>of<sp/>file<sp/>was<sp/>detected.</highlight></codeline>
<codeline lineno="1395"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1ad54d9319d905186be81e14f939f2bb6a" kindref="member">gzdirect</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file));</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1399"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>true<sp/>(1)<sp/>if<sp/>file<sp/>is<sp/>being<sp/>copied<sp/>directly<sp/>while<sp/>reading,<sp/>or<sp/>false</highlight></codeline>
<codeline lineno="1400"><highlight class="comment"><sp/><sp/><sp/>(0)<sp/>if<sp/>file<sp/>is<sp/>a<sp/>gzip<sp/>stream<sp/>being<sp/>decompressed.<sp/><sp/>This<sp/>state<sp/>can<sp/>change<sp/>from</highlight></codeline>
<codeline lineno="1401"><highlight class="comment"><sp/><sp/><sp/>false<sp/>to<sp/>true<sp/>while<sp/>reading<sp/>the<sp/>input<sp/>file<sp/>if<sp/>the<sp/>end<sp/>of<sp/>a<sp/>gzip<sp/>stream<sp/>is</highlight></codeline>
<codeline lineno="1402"><highlight class="comment"><sp/><sp/><sp/>reached,<sp/>but<sp/>is<sp/>followed<sp/>by<sp/>data<sp/>that<sp/>is<sp/>not<sp/>another<sp/>gzip<sp/>stream.</highlight></codeline>
<codeline lineno="1403"><highlight class="comment"></highlight></codeline>
<codeline lineno="1404"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>input<sp/>file<sp/>is<sp/>empty,<sp/>gzdirect()<sp/>will<sp/>return<sp/>true,<sp/>since<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="1405"><highlight class="comment"><sp/><sp/><sp/>does<sp/>not<sp/>contain<sp/>a<sp/>gzip<sp/>stream.</highlight></codeline>
<codeline lineno="1406"><highlight class="comment"></highlight></codeline>
<codeline lineno="1407"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>gzdirect()<sp/>is<sp/>used<sp/>immediately<sp/>after<sp/>gzopen()<sp/>or<sp/>gzdopen()<sp/>it<sp/>will</highlight></codeline>
<codeline lineno="1408"><highlight class="comment"><sp/><sp/><sp/>cause<sp/>buffers<sp/>to<sp/>be<sp/>allocated<sp/>to<sp/>allow<sp/>reading<sp/>the<sp/>file<sp/>to<sp/>determine<sp/>if<sp/>it</highlight></codeline>
<codeline lineno="1409"><highlight class="comment"><sp/><sp/><sp/>is<sp/>a<sp/>gzip<sp/>file.<sp/><sp/>Therefore<sp/>if<sp/>gzbuffer()<sp/>is<sp/>used,<sp/>it<sp/>should<sp/>be<sp/>called<sp/>before</highlight></codeline>
<codeline lineno="1410"><highlight class="comment"><sp/><sp/><sp/>gzdirect().</highlight></codeline>
<codeline lineno="1411"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><sp/><sp/><sp/><ref refid="zlib_8h_1a6010d2f602a06d4c42eafdce2d252252" kindref="member">gzclose</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file));</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1415"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Flushes<sp/>all<sp/>pending<sp/>output<sp/>if<sp/>necessary,<sp/>closes<sp/>the<sp/>compressed<sp/>file<sp/>and</highlight></codeline>
<codeline lineno="1416"><highlight class="comment"><sp/><sp/><sp/>deallocates<sp/>the<sp/>(de)compression<sp/>state.<sp/><sp/>Note<sp/>that<sp/>once<sp/>file<sp/>is<sp/>closed,<sp/>you</highlight></codeline>
<codeline lineno="1417"><highlight class="comment"><sp/><sp/><sp/>cannot<sp/>call<sp/>gzerror<sp/>with<sp/>file,<sp/>since<sp/>its<sp/>structures<sp/>have<sp/>been<sp/>deallocated.</highlight></codeline>
<codeline lineno="1418"><highlight class="comment"><sp/><sp/><sp/>gzclose<sp/>must<sp/>not<sp/>be<sp/>called<sp/>more<sp/>than<sp/>once<sp/>on<sp/>the<sp/>same<sp/>file,<sp/>just<sp/>as<sp/>free</highlight></codeline>
<codeline lineno="1419"><highlight class="comment"><sp/><sp/><sp/>must<sp/>not<sp/>be<sp/>called<sp/>more<sp/>than<sp/>once<sp/>on<sp/>the<sp/>same<sp/>allocation.</highlight></codeline>
<codeline lineno="1420"><highlight class="comment"></highlight></codeline>
<codeline lineno="1421"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzclose<sp/>will<sp/>return<sp/>Z_STREAM_ERROR<sp/>if<sp/>file<sp/>is<sp/>not<sp/>valid,<sp/>Z_ERRNO<sp/>on<sp/>a</highlight></codeline>
<codeline lineno="1422"><highlight class="comment"><sp/><sp/><sp/>file<sp/>operation<sp/>error,<sp/>or<sp/>Z_OK<sp/>on<sp/>success.</highlight></codeline>
<codeline lineno="1423"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1add00d78cc9782490c582e8bf69e716de" kindref="member">gzclose_r</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file));</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1a9935a4758b0eb1662fa9710d331a0e79" kindref="member">gzclose_w</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file));</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1428"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Same<sp/>as<sp/>gzclose(),<sp/>but<sp/>gzclose_r()<sp/>is<sp/>only<sp/>for<sp/>use<sp/>when<sp/>reading,<sp/>and</highlight></codeline>
<codeline lineno="1429"><highlight class="comment"><sp/><sp/><sp/>gzclose_w()<sp/>is<sp/>only<sp/>for<sp/>use<sp/>when<sp/>writing<sp/>or<sp/>appending.<sp/><sp/>The<sp/>advantage<sp/>to</highlight></codeline>
<codeline lineno="1430"><highlight class="comment"><sp/><sp/><sp/>using<sp/>these<sp/>instead<sp/>of<sp/>gzclose()<sp/>is<sp/>that<sp/>they<sp/>avoid<sp/>linking<sp/>in<sp/>zlib</highlight></codeline>
<codeline lineno="1431"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>or<sp/>decompression<sp/>code<sp/>that<sp/>is<sp/>not<sp/>used<sp/>when<sp/>only<sp/>reading<sp/>or<sp/>only</highlight></codeline>
<codeline lineno="1432"><highlight class="comment"><sp/><sp/><sp/>writing<sp/>respectively.<sp/><sp/>If<sp/>gzclose()<sp/>is<sp/>used,<sp/>then<sp/>both<sp/>compression<sp/>and</highlight></codeline>
<codeline lineno="1433"><highlight class="comment"><sp/><sp/><sp/>decompression<sp/>code<sp/>will<sp/>be<sp/>included<sp/>the<sp/>application<sp/>when<sp/>linking<sp/>to<sp/>a<sp/>static</highlight></codeline>
<codeline lineno="1434"><highlight class="comment"><sp/><sp/><sp/>zlib<sp/>library.</highlight></codeline>
<codeline lineno="1435"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1acc4473baa9a30856df76a19f22e8316a" kindref="member">gzerror</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*errnum));</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1439"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>error<sp/>message<sp/>for<sp/>the<sp/>last<sp/>error<sp/>which<sp/>occurred<sp/>on<sp/>the<sp/>given</highlight></codeline>
<codeline lineno="1440"><highlight class="comment"><sp/><sp/><sp/>compressed<sp/>file.<sp/><sp/>errnum<sp/>is<sp/>set<sp/>to<sp/>zlib<sp/>error<sp/>number.<sp/><sp/>If<sp/>an<sp/>error<sp/>occurred</highlight></codeline>
<codeline lineno="1441"><highlight class="comment"><sp/><sp/><sp/>in<sp/>the<sp/>file<sp/>system<sp/>and<sp/>not<sp/>in<sp/>the<sp/>compression<sp/>library,<sp/>errnum<sp/>is<sp/>set<sp/>to</highlight></codeline>
<codeline lineno="1442"><highlight class="comment"><sp/><sp/><sp/>Z_ERRNO<sp/>and<sp/>the<sp/>application<sp/>may<sp/>consult<sp/>errno<sp/>to<sp/>get<sp/>the<sp/>exact<sp/>error<sp/>code.</highlight></codeline>
<codeline lineno="1443"><highlight class="comment"></highlight></codeline>
<codeline lineno="1444"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>application<sp/>must<sp/>not<sp/>modify<sp/>the<sp/>returned<sp/>string.<sp/><sp/>Future<sp/>calls<sp/>to</highlight></codeline>
<codeline lineno="1445"><highlight class="comment"><sp/><sp/><sp/>this<sp/>function<sp/>may<sp/>invalidate<sp/>the<sp/>previously<sp/>returned<sp/>string.<sp/><sp/>If<sp/>file<sp/>is</highlight></codeline>
<codeline lineno="1446"><highlight class="comment"><sp/><sp/><sp/>closed,<sp/>then<sp/>the<sp/>string<sp/>previously<sp/>returned<sp/>by<sp/>gzerror<sp/>will<sp/>no<sp/>longer<sp/>be</highlight></codeline>
<codeline lineno="1447"><highlight class="comment"><sp/><sp/><sp/>available.</highlight></codeline>
<codeline lineno="1448"><highlight class="comment"></highlight></codeline>
<codeline lineno="1449"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzerror()<sp/>should<sp/>be<sp/>used<sp/>to<sp/>distinguish<sp/>errors<sp/>from<sp/>end-of-file<sp/>for<sp/>those</highlight></codeline>
<codeline lineno="1450"><highlight class="comment"><sp/><sp/><sp/>functions<sp/>above<sp/>that<sp/>do<sp/>not<sp/>distinguish<sp/>those<sp/>cases<sp/>in<sp/>their<sp/>return<sp/>values.</highlight></codeline>
<codeline lineno="1451"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1aa3ae0c2a6612dbd04984e91eebc98b8b" kindref="member">gzclearerr</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile<sp/>file));</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1455"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Clears<sp/>the<sp/>error<sp/>and<sp/>end-of-file<sp/>flags<sp/>for<sp/>file.<sp/><sp/>This<sp/>is<sp/>analogous<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="1456"><highlight class="comment"><sp/><sp/><sp/>clearerr()<sp/>function<sp/>in<sp/>stdio.<sp/><sp/>This<sp/>is<sp/>useful<sp/>for<sp/>continuing<sp/>to<sp/>read<sp/>a<sp/>gzip</highlight></codeline>
<codeline lineno="1457"><highlight class="comment"><sp/><sp/><sp/>file<sp/>that<sp/>is<sp/>being<sp/>written<sp/>concurrently.</highlight></codeline>
<codeline lineno="1458"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>checksum<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1464"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>These<sp/>functions<sp/>are<sp/>not<sp/>related<sp/>to<sp/>compression<sp/>but<sp/>are<sp/>exported</highlight></codeline>
<codeline lineno="1465"><highlight class="comment"><sp/><sp/><sp/>anyway<sp/>because<sp/>they<sp/>might<sp/>be<sp/>useful<sp/>in<sp/>applications<sp/>using<sp/>the<sp/>compression</highlight></codeline>
<codeline lineno="1466"><highlight class="comment"><sp/><sp/><sp/>library.</highlight></codeline>
<codeline lineno="1467"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="adler32_8c_1a5a72291922586b323fa442b9fe8549ec" kindref="member">adler32</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/>adler,<sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*buf,<sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>len));</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1471"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Update<sp/>a<sp/>running<sp/>Adler-32<sp/>checksum<sp/>with<sp/>the<sp/>bytes<sp/>buf[0..len-1]<sp/>and</highlight></codeline>
<codeline lineno="1472"><highlight class="comment"><sp/><sp/><sp/>return<sp/>the<sp/>updated<sp/>checksum.<sp/><sp/>If<sp/>buf<sp/>is<sp/>Z_NULL,<sp/>this<sp/>function<sp/>returns<sp/>the</highlight></codeline>
<codeline lineno="1473"><highlight class="comment"><sp/><sp/><sp/>required<sp/>initial<sp/>value<sp/>for<sp/>the<sp/>checksum.</highlight></codeline>
<codeline lineno="1474"><highlight class="comment"></highlight></codeline>
<codeline lineno="1475"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>An<sp/>Adler-32<sp/>checksum<sp/>is<sp/>almost<sp/>as<sp/>reliable<sp/>as<sp/>a<sp/>CRC32<sp/>but<sp/>can<sp/>be<sp/>computed</highlight></codeline>
<codeline lineno="1476"><highlight class="comment"><sp/><sp/><sp/>much<sp/>faster.</highlight></codeline>
<codeline lineno="1477"><highlight class="comment"></highlight></codeline>
<codeline lineno="1478"><highlight class="comment"><sp/><sp/><sp/>Usage<sp/>example:</highlight></codeline>
<codeline lineno="1479"><highlight class="comment"></highlight></codeline>
<codeline lineno="1480"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>uLong<sp/>adler<sp/>=<sp/>adler32(0L,<sp/>Z_NULL,<sp/>0);</highlight></codeline>
<codeline lineno="1481"><highlight class="comment"></highlight></codeline>
<codeline lineno="1482"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>while<sp/>(read_buffer(buffer,<sp/>length)<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adler<sp/>=<sp/>adler32(adler,<sp/>buffer,<sp/>length);</highlight></codeline>
<codeline lineno="1484"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(adler<sp/>!=<sp/>original_adler)<sp/>error();</highlight></codeline>
<codeline lineno="1486"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1489"><highlight class="comment">ZEXTERN<sp/>uLong<sp/>ZEXPORT<sp/>adler32_combine<sp/>OF((uLong<sp/>adler1,<sp/>uLong<sp/>adler2,</highlight></codeline>
<codeline lineno="1490"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_off_t<sp/>len2));</highlight></codeline>
<codeline lineno="1491"><highlight class="comment"></highlight></codeline>
<codeline lineno="1492"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Combine<sp/>two<sp/>Adler-32<sp/>checksums<sp/>into<sp/>one.<sp/><sp/>For<sp/>two<sp/>sequences<sp/>of<sp/>bytes,<sp/>seq1</highlight></codeline>
<codeline lineno="1493"><highlight class="comment"><sp/><sp/><sp/>and<sp/>seq2<sp/>with<sp/>lengths<sp/>len1<sp/>and<sp/>len2,<sp/>Adler-32<sp/>checksums<sp/>were<sp/>calculated<sp/>for</highlight></codeline>
<codeline lineno="1494"><highlight class="comment"><sp/><sp/><sp/>each,<sp/>adler1<sp/>and<sp/>adler2.<sp/><sp/>adler32_combine()<sp/>returns<sp/>the<sp/>Adler-32<sp/>checksum<sp/>of</highlight></codeline>
<codeline lineno="1495"><highlight class="comment"><sp/><sp/><sp/>seq1<sp/>and<sp/>seq2<sp/>concatenated,<sp/>requiring<sp/>only<sp/>adler1,<sp/>adler2,<sp/>and<sp/>len2.</highlight></codeline>
<codeline lineno="1496"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="crc32_8c_1a68c725fbf3dc9f3fe41995b2b8ba250b" kindref="member">crc32</ref><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/>crc,<sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/><ref refid="zconf_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref><sp/>*buf,<sp/><ref refid="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref><sp/>len));</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1500"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Update<sp/>a<sp/>running<sp/>CRC-32<sp/>with<sp/>the<sp/>bytes<sp/>buf[0..len-1]<sp/>and<sp/>return<sp/>the</highlight></codeline>
<codeline lineno="1501"><highlight class="comment"><sp/><sp/><sp/>updated<sp/>CRC-32.<sp/><sp/>If<sp/>buf<sp/>is<sp/>Z_NULL,<sp/>this<sp/>function<sp/>returns<sp/>the<sp/>required</highlight></codeline>
<codeline lineno="1502"><highlight class="comment"><sp/><sp/><sp/>initial<sp/>value<sp/>for<sp/>the<sp/>for<sp/>the<sp/>crc.<sp/><sp/>Pre-<sp/>and<sp/>post-conditioning<sp/>(one&apos;s</highlight></codeline>
<codeline lineno="1503"><highlight class="comment"><sp/><sp/><sp/>complement)<sp/>is<sp/>performed<sp/>within<sp/>this<sp/>function<sp/>so<sp/>it<sp/>shouldn&apos;t<sp/>be<sp/>done<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="1504"><highlight class="comment"><sp/><sp/><sp/>application.</highlight></codeline>
<codeline lineno="1505"><highlight class="comment"></highlight></codeline>
<codeline lineno="1506"><highlight class="comment"><sp/><sp/><sp/>Usage<sp/>example:</highlight></codeline>
<codeline lineno="1507"><highlight class="comment"></highlight></codeline>
<codeline lineno="1508"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>uLong<sp/>crc<sp/>=<sp/>crc32(0L,<sp/>Z_NULL,<sp/>0);</highlight></codeline>
<codeline lineno="1509"><highlight class="comment"></highlight></codeline>
<codeline lineno="1510"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>while<sp/>(read_buffer(buffer,<sp/>length)<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>crc32(crc,<sp/>buffer,<sp/>length);</highlight></codeline>
<codeline lineno="1512"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1513"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(crc<sp/>!=<sp/>original_crc)<sp/>error();</highlight></codeline>
<codeline lineno="1514"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1517"><highlight class="comment">ZEXTERN<sp/>uLong<sp/>ZEXPORT<sp/>crc32_combine<sp/>OF((uLong<sp/>crc1,<sp/>uLong<sp/>crc2,<sp/>z_off_t<sp/>len2));</highlight></codeline>
<codeline lineno="1518"><highlight class="comment"></highlight></codeline>
<codeline lineno="1519"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Combine<sp/>two<sp/>CRC-32<sp/>check<sp/>values<sp/>into<sp/>one.<sp/><sp/>For<sp/>two<sp/>sequences<sp/>of<sp/>bytes,</highlight></codeline>
<codeline lineno="1520"><highlight class="comment"><sp/><sp/><sp/>seq1<sp/>and<sp/>seq2<sp/>with<sp/>lengths<sp/>len1<sp/>and<sp/>len2,<sp/>CRC-32<sp/>check<sp/>values<sp/>were</highlight></codeline>
<codeline lineno="1521"><highlight class="comment"><sp/><sp/><sp/>calculated<sp/>for<sp/>each,<sp/>crc1<sp/>and<sp/>crc2.<sp/><sp/>crc32_combine()<sp/>returns<sp/>the<sp/>CRC-32</highlight></codeline>
<codeline lineno="1522"><highlight class="comment"><sp/><sp/><sp/>check<sp/>value<sp/>of<sp/>seq1<sp/>and<sp/>seq2<sp/>concatenated,<sp/>requiring<sp/>only<sp/>crc1,<sp/>crc2,<sp/>and</highlight></codeline>
<codeline lineno="1523"><highlight class="comment"><sp/><sp/><sp/>len2.</highlight></codeline>
<codeline lineno="1524"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>various<sp/>hacks,<sp/>don&apos;t<sp/>look<sp/>:)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>deflateInit<sp/>and<sp/>inflateInit<sp/>are<sp/>macros<sp/>to<sp/>allow<sp/>checking<sp/>the<sp/>zlib<sp/>version</highlight></codeline>
<codeline lineno="1530"><highlight class="comment"><sp/>*<sp/>and<sp/>the<sp/>compiler&apos;s<sp/>view<sp/>of<sp/>z_stream:</highlight></codeline>
<codeline lineno="1531"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a507fdec6d37c8c3f6959a1f3aa4eaa58" kindref="member">deflateInit_</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_size));</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="inflate_8c_1acd49cc04c5deb7ff8999820b88e98557" kindref="member">inflateInit_</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_size));</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="deflate_8c_1a5083ff515d5c0686f24241391ff7db56" kindref="member">deflateInit2_</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>method,</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowBits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>memLevel,</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strategy,<sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version,</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_size));</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="inflate_8c_1a692308454849f272e9e508d3b917bb11" kindref="member">inflateInit2_</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>windowBits,</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_size));</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="infback_8c_1a77609869e696bfef6f1f781cf88decd8" kindref="member">inflateBackInit_</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp<sp/>strm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowBits,</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>FAR<sp/>*window,</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version,</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_size));</highlight></codeline>
<codeline lineno="1546" refid="zlib_8h_1ae7440c1c5a8becba6dbf410275dc0a5c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>deflateInit(strm,<sp/>level)<sp/>\</highlight></codeline>
<codeline lineno="1547"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deflateInit_((strm),<sp/>(level),<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZLIB_VERSION,<sp/>sizeof(z_stream))</highlight></codeline>
<codeline lineno="1548" refid="zlib_8h_1ad7c6797b618699f70f61323c5184f26e" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>inflateInit(strm)<sp/>\</highlight></codeline>
<codeline lineno="1549"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflateInit_((strm),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZLIB_VERSION,<sp/>sizeof(z_stream))</highlight></codeline>
<codeline lineno="1550" refid="zlib_8h_1a59b575a521efe7ea0d3b9dd3c8d315c1" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>deflateInit2(strm,<sp/>level,<sp/>method,<sp/>windowBits,<sp/>memLevel,<sp/>strategy)<sp/>\</highlight></codeline>
<codeline lineno="1551"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\</highlight></codeline>
<codeline lineno="1552"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strategy),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZLIB_VERSION,<sp/>sizeof(z_stream))</highlight></codeline>
<codeline lineno="1553" refid="zlib_8h_1a611fc206e69f34e812ca8b590982fdd5" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>inflateInit2(strm,<sp/>windowBits)<sp/>\</highlight></codeline>
<codeline lineno="1554"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflateInit2_((strm),<sp/>(windowBits),<sp/>ZLIB_VERSION,<sp/>sizeof(z_stream))</highlight></codeline>
<codeline lineno="1555" refid="zlib_8h_1a9253571ea0fc77cc53c330c0411b8c19" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>inflateBackInit(strm,<sp/>windowBits,<sp/>window)<sp/>\</highlight></codeline>
<codeline lineno="1556"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflateBackInit_((strm),<sp/>(windowBits),<sp/>(window),<sp/>\</highlight></codeline>
<codeline lineno="1557"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZLIB_VERSION,<sp/>sizeof(z_stream))</highlight></codeline>
<codeline lineno="1558"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>provide<sp/>64-bit<sp/>offset<sp/>functions<sp/>if<sp/>_LARGEFILE64_SOURCE<sp/>defined,<sp/>and/or</highlight></codeline>
<codeline lineno="1560"><highlight class="comment"><sp/>*<sp/>change<sp/>the<sp/>regular<sp/>functions<sp/>to<sp/>64<sp/>bits<sp/>if<sp/>_FILE_OFFSET_BITS<sp/>is<sp/>64<sp/>(if</highlight></codeline>
<codeline lineno="1561"><highlight class="comment"><sp/>*<sp/>both<sp/>are<sp/>true,<sp/>the<sp/>application<sp/>gets<sp/>the<sp/>*64<sp/>functions,<sp/>and<sp/>the<sp/>regular</highlight></codeline>
<codeline lineno="1562"><highlight class="comment"><sp/>*<sp/>functions<sp/>are<sp/>changed<sp/>to<sp/>64<sp/>bits)<sp/>--<sp/>in<sp/>case<sp/>these<sp/>are<sp/>set<sp/>on<sp/>systems</highlight></codeline>
<codeline lineno="1563"><highlight class="comment"><sp/>*<sp/>without<sp/>large<sp/>file<sp/>support,<sp/>_LFS64_LARGEFILE<sp/>must<sp/>also<sp/>be<sp/>true</highlight></codeline>
<codeline lineno="1564"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_LARGEFILE64_SOURCE)<sp/>&amp;&amp;<sp/>_LFS64_LARGEFILE-0</highlight></codeline>
<codeline lineno="1566"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/>gzFile<sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/>gzopen64<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1ab9923767082c7a76924b31493e60d42c" kindref="member">z_off64_t</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/>gzseek64<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile,<sp/><ref refid="zconf_8h_1ab9923767082c7a76924b31493e60d42c" kindref="member">z_off64_t</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1ab9923767082c7a76924b31493e60d42c" kindref="member">z_off64_t</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/>gztell64<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile));</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1ab9923767082c7a76924b31493e60d42c" kindref="member">z_off64_t</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/>gzoffset64<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile));</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="adler32_8c_1a98fd33ee7f4220ffab679979e6c27af9" kindref="member">adler32_combine64</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref>,<sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref>,<sp/><ref refid="zconf_8h_1ab9923767082c7a76924b31493e60d42c" kindref="member">z_off64_t</ref>));</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="crc32_8c_1a0b151bcdd4cac1276809115f33a66fe4" kindref="member">crc32_combine64</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref>,<sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref>,<sp/><ref refid="zconf_8h_1ab9923767082c7a76924b31493e60d42c" kindref="member">z_off64_t</ref>));</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1573"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(ZLIB_INTERNAL)<sp/>&amp;&amp;<sp/>_FILE_OFFSET_BITS-0<sp/>==<sp/>64<sp/>&amp;&amp;<sp/>_LFS64_LARGEFILE-0</highlight></codeline>
<codeline lineno="1575"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>gzopen<sp/>gzopen64</highlight></codeline>
<codeline lineno="1576"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>gzseek<sp/>gzseek64</highlight></codeline>
<codeline lineno="1577"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>gztell<sp/>gztell64</highlight></codeline>
<codeline lineno="1578"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>gzoffset<sp/>gzoffset64</highlight></codeline>
<codeline lineno="1579"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>adler32_combine<sp/>adler32_combine64</highlight></codeline>
<codeline lineno="1580"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>crc32_combine<sp/>crc32_combine64</highlight></codeline>
<codeline lineno="1581"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>_LARGEFILE64_SOURCE</highlight></codeline>
<codeline lineno="1582"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/>gzFile<sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/>gzopen64<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1a8cf4661a88ec12823d7cbdd3fa629eb0" kindref="member">z_off_t</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/>gzseek64<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile,<sp/><ref refid="zconf_8h_1a8cf4661a88ec12823d7cbdd3fa629eb0" kindref="member">z_off_t</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1a8cf4661a88ec12823d7cbdd3fa629eb0" kindref="member">z_off_t</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/>gztell64<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile));</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1a8cf4661a88ec12823d7cbdd3fa629eb0" kindref="member">z_off_t</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/>gzoffset64<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile));</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="adler32_8c_1a98fd33ee7f4220ffab679979e6c27af9" kindref="member">adler32_combine64</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref>,<sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref>,<sp/><ref refid="zconf_8h_1a8cf4661a88ec12823d7cbdd3fa629eb0" kindref="member">z_off_t</ref>));</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="crc32_8c_1a0b151bcdd4cac1276809115f33a66fe4" kindref="member">crc32_combine64</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref>,<sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref>,<sp/><ref refid="zconf_8h_1a8cf4661a88ec12823d7cbdd3fa629eb0" kindref="member">z_off_t</ref>));</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="1589"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1590"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/>gzFile<sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1a6e42c605021523b910f07ec4861d0089" kindref="member">gzopen</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1a8cf4661a88ec12823d7cbdd3fa629eb0" kindref="member">z_off_t</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1afaae5589204ce502339fe0b534e888c5" kindref="member">gzseek</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile,<sp/><ref refid="zconf_8h_1a8cf4661a88ec12823d7cbdd3fa629eb0" kindref="member">z_off_t</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1a8cf4661a88ec12823d7cbdd3fa629eb0" kindref="member">z_off_t</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1a12a766c517aea3ae3a59b22959049bb9" kindref="member">gztell</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile));</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1a8cf4661a88ec12823d7cbdd3fa629eb0" kindref="member">z_off_t</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1a0b005b487678b528628305685025760c" kindref="member">gzoffset</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((gzFile));</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="adler32_8c_1a1d2f0b036f2d719742b5abd234ca2115" kindref="member">adler32_combine</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref>,<sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref>,<sp/><ref refid="zconf_8h_1a8cf4661a88ec12823d7cbdd3fa629eb0" kindref="member">z_off_t</ref>));</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="crc32_8c_1a8ca2395ba789d3ab583b3b18d5fde350" kindref="member">crc32_combine</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((<ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref>,<sp/><ref refid="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" kindref="member">uLong</ref>,<sp/><ref refid="zconf_8h_1a8cf4661a88ec12823d7cbdd3fa629eb0" kindref="member">z_off_t</ref>));</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1597"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>hack<sp/>for<sp/>buggy<sp/>compilers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(ZUTIL_H)<sp/>&amp;&amp;<sp/>!defined(NO_DUMMY_DECL)</highlight></codeline>
<codeline lineno="1600" refid="structinternal__state_1ab000a3e3c901dd063859521988ad7e52" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinternal__state" kindref="compound">internal_state</ref><sp/>{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structinternal__state_1ab000a3e3c901dd063859521988ad7e52" kindref="member">dummy</ref>;};</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1602"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>undocumented<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>*<sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="zlib_8h_1a87ceacafbe5ce56c16c353ceea4019d5" kindref="member">zError</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="inflate_8c_1ad50808147db441fd9260150a218974bb" kindref="member">inflateSyncPoint</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp));</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1ace0e0570092c9eb6acd3c85f88cc97ec" kindref="member">uLongf</ref><sp/>*<sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="crc32_8c_1af2770e8c72cf497f1b3ba941696d5bb5" kindref="member">get_crc_table</ref><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><ref refid="zconf_8h_1a49b7f5eccfcc99e53178581632bc9589" kindref="member">ZEXTERN</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="inflate_8c_1afe000de8c61c3299468122d0475809b7" kindref="member">inflateUndermine</ref><sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((z_streamp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="1610"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1612"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZLIB_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/zlib.h"/>
  </compounddef>
</doxygen>
