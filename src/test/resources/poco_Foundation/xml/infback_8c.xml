<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="infback_8c" kind="file">
    <compoundname>infback.c</compoundname>
    <includes refid="zutil_8h" local="yes">zutil.h</includes>
    <includes refid="inftrees_8h" local="yes">inftrees.h</includes>
    <includes refid="inflate_8h" local="yes">inflate.h</includes>
    <includes refid="inffast_8h" local="yes">inffast.h</includes>
    <includes refid="inffixed_8h" local="yes">inffixed.h</includes>
    <incdepgraph>
      <node id="558">
        <label>inffast.h</label>
        <link refid="inffast_8h"/>
      </node>
      <node id="559">
        <label>inffixed.h</label>
        <link refid="inffixed_8h"/>
      </node>
      <node id="557">
        <label>inflate.h</label>
        <link refid="inflate_8h"/>
      </node>
      <node id="555">
        <label>zconf.h</label>
        <link refid="zconf_8h"/>
      </node>
      <node id="553">
        <label>zutil.h</label>
        <link refid="zutil_8h"/>
        <childnode refid="554" relation="include">
        </childnode>
      </node>
      <node id="554">
        <label>zlib.h</label>
        <link refid="zlib_8h"/>
        <childnode refid="555" relation="include">
        </childnode>
      </node>
      <node id="552">
        <label>src/infback.c</label>
        <link refid="infback.c"/>
        <childnode refid="553" relation="include">
        </childnode>
        <childnode refid="556" relation="include">
        </childnode>
        <childnode refid="557" relation="include">
        </childnode>
        <childnode refid="558" relation="include">
        </childnode>
        <childnode refid="559" relation="include">
        </childnode>
      </node>
      <node id="556">
        <label>inftrees.h</label>
        <link refid="inftrees_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="infback_8c_1a03dae42536f97b08183620a910f9b204" prot="public" static="no">
        <name>LOAD</name>
        <param></param>
        <initializer>do { \
        put = strm-&gt;next_out; \
        left = strm-&gt;avail_out; \
        next = strm-&gt;next_in; \
        have = strm-&gt;avail_in; \
        hold = state-&gt;hold; \
        bits = state-&gt;bits; \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" line="119" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infback_8c_1af3b6db2fe8b54bb9edf88c2002e4bf34" prot="public" static="no">
        <name>RESTORE</name>
        <param></param>
        <initializer>do { \
        strm-&gt;next_out = put; \
        strm-&gt;avail_out = left; \
        strm-&gt;next_in = next; \
        strm-&gt;avail_in = have; \
        state-&gt;hold = hold; \
        state-&gt;bits = bits; \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" line="130" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infback_8c_1a3ffcbdd4824c339e07ea67dd412636fd" prot="public" static="no">
        <name>INITBITS</name>
        <param></param>
        <initializer>do { \
        hold = 0; \
        bits = 0; \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" line="141" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infback_8c_1a37e17e8237dadaefecf8b92ad2370561" prot="public" static="no">
        <name>PULL</name>
        <param></param>
        <initializer>do { \
        if (have == 0) { \
            have = in(in_desc, &amp;next); \
            if (have == 0) { \
                next = <ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>; \
                ret = <ref refid="zlib_8h_1a425e2f0664e1b1f75bf2bffab88d353d" kindref="member">Z_BUF_ERROR</ref>; \
                goto inf_leave; \
            } \
        } \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" line="149" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infback_8c_1add54302c739466e0e4a204fa1015694b" prot="public" static="no">
        <name>PULLBYTE</name>
        <param></param>
        <initializer>do { \
        <ref refid="infback_8c_1a37e17e8237dadaefecf8b92ad2370561" kindref="member">PULL</ref>(); \
        have--; \
        hold += (unsigned long)(*next++) &lt;&lt; bits; \
        bits += 8; \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" line="163" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infback_8c_1ab3731a4aa4bb04481dc95069bbfb7156" prot="public" static="no">
        <name>NEEDBITS</name>
        <param><defname>n</defname></param>
        <initializer>do { \
        while (bits &lt; (unsigned)(n)) \
            <ref refid="inflate_8c_1add54302c739466e0e4a204fa1015694b" kindref="member">PULLBYTE</ref>(); \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" line="174" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infback_8c_1a5967693540f086cfa357f68978bf0be7" prot="public" static="no">
        <name>BITS</name>
        <param><defname>n</defname></param>
        <initializer>((unsigned)hold &amp; ((1U &lt;&lt; (n)) - 1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" line="181" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infback_8c_1a65312e68bdf918e606b0deaf69793523" prot="public" static="no">
        <name>DROPBITS</name>
        <param><defname>n</defname></param>
        <initializer>do { \
        hold &gt;&gt;= (n); \
        bits -= (unsigned)(n); \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" line="185" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infback_8c_1aa1e478b107abaccc428d6266ea5ca595" prot="public" static="no">
        <name>BYTEBITS</name>
        <param></param>
        <initializer>do { \
        hold &gt;&gt;= bits &amp; 7; \
        bits -= bits &amp; 7; \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" line="192" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infback_8c_1aa86fac2e845f337d5369513dea1759b0" prot="public" static="no">
        <name>ROOM</name>
        <param></param>
        <initializer>do { \
        if (left == 0) { \
            put = state-&gt;window; \
            left = state-&gt;wsize; \
            state-&gt;whave = left; \
            if (out(out_desc, put, left)) { \
                ret = <ref refid="zlib_8h_1a425e2f0664e1b1f75bf2bffab88d353d" kindref="member">Z_BUF_ERROR</ref>; \
                goto inf_leave; \
            } \
        } \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" line="201" column="9" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" bodystart="201" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="infback_8c_1a1bfdb3bca411c35baa0c71f69372cee9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fixedtables</definition>
        <argsstring>()</argsstring>
        <name>fixedtables</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" line="19" column="1"/>
      </memberdef>
      <memberdef kind="function" id="infback_8c_1a77609869e696bfef6f1f781cf88decd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateBackInit_</definition>
        <argsstring>(z_streamp strm, int windowBits, unsigned char *window, char *version, int stream_size)</argsstring>
        <name>inflateBackInit_</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>windowBits</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>version</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stream_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" line="28" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" bodystart="28" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="infback_8c_1a9750e174dc6a3c705ee260a36510f0d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fixedtables</definition>
        <argsstring>(struct inflate_state *state)</argsstring>
        <name>fixedtables</name>
        <param>
          <type>struct <ref refid="structinflate__state" kindref="compound">inflate_state</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" line="73" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" bodystart="73" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="infback_8c_1a71700074020b4a3ad5bee6be0bd42b30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateBack</definition>
        <argsstring>(z_streamp strm, in_func in, void *in_desc, out_func out, void *out_desc)</argsstring>
        <name>inflateBack</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type><ref refid="zlib_8h_1a9cd6b998d9f92d367ff716541f2d9ece" kindref="member">in_func</ref></type>
          <declname>in</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>in_desc</declname>
        </param>
        <param>
          <type><ref refid="zlib_8h_1aeb8cd045bf118bb18980dc7c03481b8f" kindref="member">out_func</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out_desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" line="241" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" bodystart="241" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="infback_8c_1ad1240e7eb9af97f01186d6f0d25286ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateBackEnd</definition>
        <argsstring>(z_streamp strm)</argsstring>
        <name>inflateBackEnd</name>
        <param>
          <type><ref refid="zlib_8h_1a0073ee5c5eb2aa018825a6a760f93fb9" kindref="member">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" line="623" column="1" bodyfile="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c" bodystart="623" bodyend="632"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>infback.c<sp/>--<sp/>inflate<sp/>using<sp/>a<sp/>call-back<sp/>interface</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-2009<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>This<sp/>code<sp/>is<sp/>largely<sp/>copied<sp/>from<sp/>inflate.c.<sp/><sp/>Normally<sp/>either<sp/>infback.o<sp/>or</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/>inflate.o<sp/>would<sp/>be<sp/>linked<sp/>into<sp/>an<sp/>application--not<sp/>both.<sp/><sp/>The<sp/>interface</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/>with<sp/>inffast.c<sp/>is<sp/>retained<sp/>so<sp/>that<sp/>optimized<sp/>assembler-coded<sp/>versions<sp/>of</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/>inflate_fast()<sp/>can<sp/>be<sp/>used<sp/>with<sp/>either<sp/>inflate.c<sp/>or<sp/>infback.c.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="zutil_8h" kindref="compound">zutil.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="inftrees_8h" kindref="compound">inftrees.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="inflate_8h" kindref="compound">inflate.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="inffast_8h" kindref="compound">inffast.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>function<sp/>prototypes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fixedtables<sp/><ref refid="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" kindref="member">OF</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinflate__state" kindref="compound">inflate_state</ref><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*state));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/>strm<sp/>provides<sp/>memory<sp/>allocation<sp/>functions<sp/>in<sp/>zalloc<sp/>and<sp/>zfree,<sp/>or</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/>Z_NULL<sp/>to<sp/>use<sp/>the<sp/>library<sp/>memory<sp/>allocation<sp/>functions.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/>windowBits<sp/>is<sp/>in<sp/>the<sp/>range<sp/>8..15,<sp/>and<sp/>window<sp/>is<sp/>a<sp/>user-supplied</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/>window<sp/>and<sp/>output<sp/>buffer<sp/>that<sp/>is<sp/>2**windowBits<sp/>bytes.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="infback_8c_1a77609869e696bfef6f1f781cf88decd8" kindref="member">inflateBackInit_</ref>(strm,<sp/>windowBits,<sp/>window,<sp/>version,<sp/>stream_size)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="structz__stream" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowBits;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*window;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_size;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__state" kindref="compound">inflate_state</ref><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*state;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(version<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>version[0]<sp/>!=<sp/><ref refid="zlib_8h_1a51dc9dc65e483b3222c1f0f6a87eb76e" kindref="member">ZLIB_VERSION</ref>[0]<sp/>||</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream_size<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structz__stream" kindref="compound">z_stream</ref>)))</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a7634cdd55f955ee1be99c065c6977371" kindref="member">Z_VERSION_ERROR</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>window<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowBits<sp/>&lt;<sp/>8<sp/>||<sp/>windowBits<sp/>&gt;<sp/>15)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>in<sp/>case<sp/>we<sp/>return<sp/>an<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm-&gt;zalloc<sp/>==<sp/>(<ref refid="zlib_8h_1af90139b484e48372e0e6db52bb9f6733" kindref="member">alloc_func</ref>)0)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;zalloc<sp/>=<sp/><ref refid="zutil_8c_1acd6de6ee77b7c44353e61511b6eb1d90" kindref="member">zcalloc</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;opaque<sp/>=<sp/>(<ref refid="zconf_8h_1aa93554e72bde12c322c25c3c1e8675a5" kindref="member">voidpf</ref>)0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm-&gt;zfree<sp/>==<sp/>(<ref refid="zlib_8h_1af07471bf3f37f2c29078ed11ac59fc7f" kindref="member">free_func</ref>)0)<sp/>strm-&gt;zfree<sp/>=<sp/><ref refid="zutil_8c_1ac5167b77f4a79cb68ba27c598b52485e" kindref="member">zcfree</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>=<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinflate__state" kindref="compound">inflate_state</ref><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*)<ref refid="zutil_8h_1a39679d03501d691bdfc62a3324cb9548" kindref="member">ZALLOC</ref>(strm,<sp/>1,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinflate__state" kindref="compound">inflate_state</ref>));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1ae2be6be871e377c6e2c25a7296ce320c" kindref="member">Z_MEM_ERROR</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/>allocated\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;state<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinternal__state" kindref="compound">internal_state</ref><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*)state;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1ae3d433011714e673b22e82156acc4416" kindref="member">dmax</ref><sp/>=<sp/>32768U;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a71f844b589ac450f17d69f3692a8c5cc" kindref="member">wbits</ref><sp/>=<sp/>windowBits;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1acca16ca86216760eaf307bf71e15e470" kindref="member">wsize</ref><sp/>=<sp/>1U<sp/>&lt;&lt;<sp/>windowBits;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9cc4c0bde426383731394dcf91c40673" kindref="member">window</ref><sp/>=<sp/>window;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a1c3ec583646b68713e5c92151064a6dd" kindref="member">wnext</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a6b56aabe80412784eadc1068981c9d00" kindref="member">whave</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>state<sp/>with<sp/>length<sp/>and<sp/>distance<sp/>decoding<sp/>tables<sp/>and<sp/>index<sp/>sizes<sp/>set<sp/>to</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/>fixed<sp/>code<sp/>decoding.<sp/><sp/>Normally<sp/>this<sp/>returns<sp/>fixed<sp/>tables<sp/>from<sp/>inffixed.h.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/>If<sp/>BUILDFIXED<sp/>is<sp/>defined,<sp/>then<sp/>instead<sp/>this<sp/>routine<sp/>builds<sp/>the<sp/>tables<sp/>the</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/>first<sp/>time<sp/>it&apos;s<sp/>called,<sp/>and<sp/>returns<sp/>those<sp/>tables<sp/>the<sp/>first<sp/>time<sp/>and</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>thereafter.<sp/><sp/>This<sp/>reduces<sp/>the<sp/>size<sp/>of<sp/>the<sp/>code<sp/>by<sp/>about<sp/>2K<sp/>bytes,<sp/>in</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/>exchange<sp/>for<sp/>a<sp/>little<sp/>execution<sp/>time.<sp/><sp/>However,<sp/>BUILDFIXED<sp/>should<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/>used<sp/>for<sp/>threaded<sp/>applications,<sp/>since<sp/>the<sp/>rewriting<sp/>of<sp/>the<sp/>tables<sp/>and<sp/>virgin</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/>may<sp/>not<sp/>be<sp/>thread-safe.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="adler32_8c_1a08023ea6765c99d60a6a3840cd07156e" kindref="member">local</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fixedtables(state)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">struct<sp/><ref refid="structinflate__state" kindref="compound">inflate_state</ref><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*state;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BUILDFIXED</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>virgin<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structcode" kindref="compound">code</ref><sp/>*lenfix,<sp/>*distfix;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structcode" kindref="compound">code</ref><sp/>fixed[544];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>build<sp/>fixed<sp/>huffman<sp/>tables<sp/>if<sp/>first<sp/>call<sp/>(may<sp/>not<sp/>be<sp/>thread<sp/>safe)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(virgin)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sym,<sp/>bits;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structcode" kindref="compound">code</ref><sp/>*next;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>literal/length<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sym<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sym<sp/>&lt;<sp/>144)<sp/>state-&gt;lens[sym++]<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sym<sp/>&lt;<sp/>256)<sp/>state-&gt;lens[sym++]<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sym<sp/>&lt;<sp/>280)<sp/>state-&gt;lens[sym++]<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sym<sp/>&lt;<sp/>288)<sp/>state-&gt;lens[sym++]<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>fixed;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lenfix<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="inftrees_8c_1abdadeebf4630332213acd06c8612654b" kindref="member">inflate_table</ref>(<ref refid="inftrees_8h_1a0f33f5acf9079ff1f054fa235df2443ba86b0f8050ddd8ae0b99e2f9323ad00a1" kindref="member">LENS</ref>,<sp/>state-&gt;lens,<sp/>288,<sp/>&amp;(next),<sp/>&amp;(bits),<sp/>state-&gt;work);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sym<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sym<sp/>&lt;<sp/>32)<sp/>state-&gt;lens[sym++]<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distfix<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="inftrees_8c_1abdadeebf4630332213acd06c8612654b" kindref="member">inflate_table</ref>(<ref refid="inftrees_8h_1a0f33f5acf9079ff1f054fa235df2443bafd7fbb659c736b26e79316ef09a2a9a1" kindref="member">DISTS</ref>,<sp/>state-&gt;lens,<sp/>32,<sp/>&amp;(next),<sp/>&amp;(bits),<sp/>state-&gt;work);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>this<sp/>just<sp/>once<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virgin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!BUILDFIXED<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&quot;<ref refid="inffixed_8h" kindref="compound">inffixed.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>BUILDFIXED<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lencode<sp/>=<sp/>lenfix;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lenbits<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;distcode<sp/>=<sp/>distfix;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;distbits<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macros<sp/>for<sp/>inflateBack():<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Load<sp/>returned<sp/>state<sp/>from<sp/>inflate_fast()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOAD()<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>put<sp/>=<sp/>strm-&gt;next_out;<sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>strm-&gt;avail_out;<sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>strm-&gt;next_in;<sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have<sp/>=<sp/>strm-&gt;avail_in;<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hold<sp/>=<sp/>state-&gt;hold;<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>state-&gt;bits;<sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>state<sp/>from<sp/>registers<sp/>for<sp/>inflate_fast()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RESTORE()<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;next_out<sp/>=<sp/>put;<sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;avail_out<sp/>=<sp/>left;<sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;next_in<sp/>=<sp/>next;<sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;avail_in<sp/>=<sp/>have;<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;hold<sp/>=<sp/>hold;<sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;bits<sp/>=<sp/>bits;<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>input<sp/>bit<sp/>accumulator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INITBITS()<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hold<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Assure<sp/>that<sp/>some<sp/>input<sp/>is<sp/>available.<sp/><sp/>If<sp/>input<sp/>is<sp/>requested,<sp/>but<sp/>denied,</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/>then<sp/>return<sp/>a<sp/>Z_BUF_ERROR<sp/>from<sp/>inflateBack().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PULL()<sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(have<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have<sp/>=<sp/>in(in_desc,<sp/>&amp;next);<sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(have<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>Z_NULL;<sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>Z_BUF_ERROR;<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>inf_leave;<sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>a<sp/>byte<sp/>of<sp/>input<sp/>into<sp/>the<sp/>bit<sp/>accumulator,<sp/>or<sp/>return<sp/>from<sp/>inflateBack()</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/>with<sp/>an<sp/>error<sp/>if<sp/>there<sp/>is<sp/>no<sp/>input<sp/>available.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PULLBYTE()<sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PULL();<sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have--;<sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hold<sp/>+=<sp/>(unsigned<sp/>long)(*next++)<sp/>&lt;&lt;<sp/>bits;<sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>+=<sp/>8;<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Assure<sp/>that<sp/>there<sp/>are<sp/>at<sp/>least<sp/>n<sp/>bits<sp/>in<sp/>the<sp/>bit<sp/>accumulator.<sp/><sp/>If<sp/>there<sp/>is</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/>not<sp/>enough<sp/>available<sp/>input<sp/>to<sp/>do<sp/>that,<sp/>then<sp/>return<sp/>from<sp/>inflateBack()<sp/>with</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/>an<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NEEDBITS(n)<sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(bits<sp/>&lt;<sp/>(unsigned)(n))<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PULLBYTE();<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>low<sp/>n<sp/>bits<sp/>of<sp/>the<sp/>bit<sp/>accumulator<sp/>(n<sp/>&lt;<sp/>16)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BITS(n)<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((unsigned)hold<sp/>&amp;<sp/>((1U<sp/>&lt;&lt;<sp/>(n))<sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Remove<sp/>n<sp/>bits<sp/>from<sp/>the<sp/>bit<sp/>accumulator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DROPBITS(n)<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hold<sp/>&gt;&gt;=<sp/>(n);<sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>-=<sp/>(unsigned)(n);<sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Remove<sp/>zero<sp/>to<sp/>seven<sp/>bits<sp/>as<sp/>needed<sp/>to<sp/>go<sp/>to<sp/>a<sp/>byte<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BYTEBITS()<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hold<sp/>&gt;&gt;=<sp/>bits<sp/>&amp;<sp/>7;<sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>-=<sp/>bits<sp/>&amp;<sp/>7;<sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Assure<sp/>that<sp/>some<sp/>output<sp/>space<sp/>is<sp/>available,<sp/>by<sp/>writing<sp/>out<sp/>the<sp/>window</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/>if<sp/>it&apos;s<sp/>full.<sp/><sp/>If<sp/>the<sp/>write<sp/>fails,<sp/>return<sp/>from<sp/>inflateBack()<sp/>with<sp/>a</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/>Z_BUF_ERROR.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ROOM()<sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(left<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>put<sp/>=<sp/>state-&gt;window;<sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>state-&gt;wsize;<sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;whave<sp/>=<sp/>left;<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(out(out_desc,<sp/>put,<sp/>left))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>Z_BUF_ERROR;<sp/>\</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>inf_leave;<sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/>strm<sp/>provides<sp/>the<sp/>memory<sp/>allocation<sp/>functions<sp/>and<sp/>window<sp/>buffer<sp/>on<sp/>input,</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/>and<sp/>provides<sp/>information<sp/>on<sp/>the<sp/>unused<sp/>input<sp/>on<sp/>return.<sp/><sp/>For<sp/>Z_DATA_ERROR</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/>returns,<sp/>strm<sp/>will<sp/>also<sp/>provide<sp/>an<sp/>error<sp/>message.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"></highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/>in()<sp/>and<sp/>out()<sp/>are<sp/>the<sp/>call-back<sp/>input<sp/>and<sp/>output<sp/>functions.<sp/><sp/>When</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/>inflateBack()<sp/>needs<sp/>more<sp/>input,<sp/>it<sp/>calls<sp/>in().<sp/><sp/>When<sp/>inflateBack()<sp/>has</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/>filled<sp/>the<sp/>window<sp/>with<sp/>output,<sp/>or<sp/>when<sp/>it<sp/>completes<sp/>with<sp/>data<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/>window,<sp/>it<sp/>calls<sp/>out()<sp/>to<sp/>write<sp/>out<sp/>the<sp/>data.<sp/><sp/>The<sp/>application<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/>change<sp/>the<sp/>provided<sp/>input<sp/>until<sp/>in()<sp/>is<sp/>called<sp/>again<sp/>or<sp/>inflateBack()</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/>returns.<sp/><sp/>The<sp/>application<sp/>must<sp/>not<sp/>change<sp/>the<sp/>window/output<sp/>buffer<sp/>until</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/>inflateBack()<sp/>returns.</highlight></codeline>
<codeline lineno="226"><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/>in()<sp/>and<sp/>out()<sp/>are<sp/>called<sp/>with<sp/>a<sp/>descriptor<sp/>parameter<sp/>provided<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/>inflateBack()<sp/>call.<sp/><sp/>This<sp/>parameter<sp/>can<sp/>be<sp/>a<sp/>structure<sp/>that<sp/>provides<sp/>the</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/>information<sp/>required<sp/>to<sp/>do<sp/>the<sp/>read<sp/>or<sp/>write,<sp/>as<sp/>well<sp/>as<sp/>accumulated</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/>information<sp/>on<sp/>the<sp/>input<sp/>and<sp/>output<sp/>such<sp/>as<sp/>totals<sp/>and<sp/>check<sp/>values.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"></highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/>in()<sp/>should<sp/>return<sp/>zero<sp/>on<sp/>failure.<sp/><sp/>out()<sp/>should<sp/>return<sp/>non-zero<sp/>on</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/>failure.<sp/><sp/>If<sp/>either<sp/>in()<sp/>or<sp/>out()<sp/>fails,<sp/>than<sp/>inflateBack()<sp/>returns<sp/>a</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/>Z_BUF_ERROR.<sp/><sp/>strm-&gt;next_in<sp/>can<sp/>be<sp/>checked<sp/>for<sp/>Z_NULL<sp/>to<sp/>see<sp/>whether<sp/>it</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/>was<sp/>in()<sp/>or<sp/>out()<sp/>that<sp/>caused<sp/>in<sp/>the<sp/>error.<sp/><sp/>Otherwise,<sp/><sp/>inflateBack()</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/>returns<sp/>Z_STREAM_END<sp/>on<sp/>success,<sp/>Z_DATA_ERROR<sp/>for<sp/>an<sp/>deflate<sp/>format</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/>error,<sp/>or<sp/>Z_MEM_ERROR<sp/>if<sp/>it<sp/>could<sp/>not<sp/>allocate<sp/>memory<sp/>for<sp/>the<sp/>state.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/>inflateBack()<sp/>can<sp/>also<sp/>return<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>input<sp/>parameters</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/>are<sp/>not<sp/>correct,<sp/>i.e.<sp/>strm<sp/>is<sp/>Z_NULL<sp/>or<sp/>the<sp/>state<sp/>was<sp/>not<sp/>initialized.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="infback_8c_1a71700074020b4a3ad5bee6be0bd42b30" kindref="member">inflateBack</ref>(strm,<sp/>in,<sp/>in_desc,<sp/>out,<sp/>out_desc)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><ref refid="structz__stream" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><ref refid="zlib_8h_1a9cd6b998d9f92d367ff716541f2d9ece" kindref="member">in_func</ref><sp/>in;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*in_desc;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><ref refid="zlib_8h_1aeb8cd045bf118bb18980dc7c03481b8f" kindref="member">out_func</ref><sp/>out;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*out_desc;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__state" kindref="compound">inflate_state</ref><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*state;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*<ref refid="structinflate__state_1a872bf267d91efb4143e9cfb812e670bb" kindref="member">next</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*put;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structinflate__state_1a4a2b15912256bcf7b39980e15095ba58" kindref="member">have</ref>,<sp/>left;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>available<sp/>input<sp/>and<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="structinflate__state_1a5a91b1c59e52f1aa7eda75b86b05b843" kindref="member">hold</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structinflate__state_1ab37c3563f306f29e6ded8e933af14365" kindref="member">bits</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>in<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>copy;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>stored<sp/>or<sp/>match<sp/>bytes<sp/>to<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*from;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>where<sp/>to<sp/>copy<sp/>match<sp/>bytes<sp/>from<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcode" kindref="compound">code</ref><sp/>here;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>decoding<sp/>table<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcode" kindref="compound">code</ref><sp/><ref refid="structinflate__state_1ab3cbcd2c5ff3b0b8b34ef402a13afdf7" kindref="member">last</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>parent<sp/>table<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>to<sp/>copy<sp/>for<sp/>repeats,<sp/>bits<sp/>to<sp/>drop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>order[19]<sp/>=<sp/></highlight><highlight class="comment">/*<sp/>permutation<sp/>of<sp/>code<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{16,<sp/>17,<sp/>18,<sp/>0,<sp/>8,<sp/>7,<sp/>9,<sp/>6,<sp/>10,<sp/>5,<sp/>11,<sp/>4,<sp/>12,<sp/>3,<sp/>13,<sp/>2,<sp/>14,<sp/>1,<sp/>15};</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>that<sp/>the<sp/>strm<sp/>exists<sp/>and<sp/>that<sp/>the<sp/>state<sp/>was<sp/>initialized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>strm-&gt;state<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__state" kindref="compound">inflate_state</ref><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*)strm-&gt;state;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>the<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaab47ea8bb955afd0adc0ef98517dd6084" kindref="member">TYPE</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1ab3cbcd2c5ff3b0b8b34ef402a13afdf7" kindref="member">last</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a6b56aabe80412784eadc1068981c9d00" kindref="member">whave</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/>strm-&gt;next_in;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>have<sp/>=<sp/>next<sp/>!=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>?<sp/>strm-&gt;avail_in<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>hold<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>put<sp/>=<sp/>state-&gt;<ref refid="structinflate__state_1a9cc4c0bde426383731394dcf91c40673" kindref="member">window</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>state-&gt;<ref refid="structinflate__state_1acca16ca86216760eaf307bf71e15e470" kindref="member">wsize</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Inflate<sp/>until<sp/>end<sp/>of<sp/>block<sp/>marked<sp/>as<sp/>last<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(;;)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaab47ea8bb955afd0adc0ef98517dd6084" kindref="member">TYPE</ref>:</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>determine<sp/>and<sp/>dispatch<sp/>block<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1ab3cbcd2c5ff3b0b8b34ef402a13afdf7" kindref="member">last</ref>)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1aa1e478b107abaccc428d6266ea5ca595" kindref="member">BYTEBITS</ref>();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaa9c954bcf443428c80b0f107b3bc48749" kindref="member">DONE</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1ab3731a4aa4bb04481dc95069bbfb7156" kindref="member">NEEDBITS</ref>(3);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1ab3cbcd2c5ff3b0b8b34ef402a13afdf7" kindref="member">last</ref><sp/>=<sp/><ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(1);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(1);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(2))<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>stored<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/>stored<sp/>block%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1ab3cbcd2c5ff3b0b8b34ef402a13afdf7" kindref="member">last</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(last)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaa77647f28a49007bb2c1f10fa36f33b55" kindref="member">STORED</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fixed<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixedtables(state);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/>fixed<sp/>codes<sp/>block%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1ab3cbcd2c5ff3b0b8b34ef402a13afdf7" kindref="member">last</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(last)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaaff15d001decc8890fb72cc6065a1abba" kindref="member">LEN</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>decode<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dynamic<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/>dynamic<sp/>codes<sp/>block%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1ab3cbcd2c5ff3b0b8b34ef402a13afdf7" kindref="member">last</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(last)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaa2e160f29fc076de5496a2b9968be9cc1" kindref="member">TABLE</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>block<sp/>type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaafe29bdbfb6e2165eec29bf28af429856" kindref="member">BAD</ref>;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(2);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaa77647f28a49007bb2c1f10fa36f33b55" kindref="member">STORED</ref>:</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>and<sp/>verify<sp/>stored<sp/>block<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1aa1e478b107abaccc428d6266ea5ca595" kindref="member">BYTEBITS</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>go<sp/>to<sp/>byte<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1ab3731a4aa4bb04481dc95069bbfb7156" kindref="member">NEEDBITS</ref>(32);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((hold<sp/>&amp;<sp/>0xffff)<sp/>!=<sp/>((hold<sp/>&gt;&gt;<sp/>16)<sp/>^<sp/>0xffff))<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>stored<sp/>block<sp/>lengths&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaafe29bdbfb6e2165eec29bf28af429856" kindref="member">BAD</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a5179d4c9b332d976cce7c6cce6bdf3c1" kindref="member">length</ref><sp/>=<sp/>(unsigned)hold<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>stored<sp/>length<sp/>%u\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a5179d4c9b332d976cce7c6cce6bdf3c1" kindref="member">length</ref>));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a3ffcbdd4824c339e07ea67dd412636fd" kindref="member">INITBITS</ref>();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>stored<sp/>block<sp/>from<sp/>input<sp/>to<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1a5179d4c9b332d976cce7c6cce6bdf3c1" kindref="member">length</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy<sp/>=<sp/>state-&gt;<ref refid="structinflate__state_1a5179d4c9b332d976cce7c6cce6bdf3c1" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a37e17e8237dadaefecf8b92ad2370561" kindref="member">PULL</ref>();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1aa86fac2e845f337d5369513dea1759b0" kindref="member">ROOM</ref>();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copy<sp/>&gt;<sp/>have)<sp/>copy<sp/>=<sp/><ref refid="structinflate__state_1a4a2b15912256bcf7b39980e15095ba58" kindref="member">have</ref>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copy<sp/>&gt;<sp/>left)<sp/>copy<sp/>=<sp/>left;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8c_1a20971e15496f76249b852c9764cf38ef" kindref="member">zmemcpy</ref>(put,<sp/>next,<sp/>copy);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have<sp/>-=<sp/>copy;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>+=<sp/>copy;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>-=<sp/>copy;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>put<sp/>+=<sp/>copy;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a5179d4c9b332d976cce7c6cce6bdf3c1" kindref="member">length</ref><sp/>-=<sp/>copy;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>stored<sp/>end\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaab47ea8bb955afd0adc0ef98517dd6084" kindref="member">TYPE</ref>;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaa2e160f29fc076de5496a2b9968be9cc1" kindref="member">TABLE</ref>:</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>dynamic<sp/>table<sp/>entries<sp/>descriptor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1ab3731a4aa4bb04481dc95069bbfb7156" kindref="member">NEEDBITS</ref>(14);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a489b005f4fe214353cd80b77b4f23194" kindref="member">nlen</ref><sp/>=<sp/><ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(5)<sp/>+<sp/>257;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(5);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a4415e5e51efdd0c8672e4c601caa4762" kindref="member">ndist</ref><sp/>=<sp/><ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(5)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(5);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a62b5ea8559856b315b6c89d9114c2109" kindref="member">ncode</ref><sp/>=<sp/><ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(4)<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(4);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PKZIP_BUG_WORKAROUND</highlight></codeline>
<codeline lineno="359"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1a489b005f4fe214353cd80b77b4f23194" kindref="member">nlen</ref><sp/>&gt;<sp/>286<sp/>||<sp/>state-&gt;<ref refid="structinflate__state_1a4415e5e51efdd0c8672e4c601caa4762" kindref="member">ndist</ref><sp/>&gt;<sp/>30)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;too<sp/>many<sp/>length<sp/>or<sp/>distance<sp/>symbols&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaafe29bdbfb6e2165eec29bf28af429856" kindref="member">BAD</ref>;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>table<sp/>sizes<sp/>ok\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>code<sp/>length<sp/>code<sp/>lengths<sp/>(not<sp/>a<sp/>typo)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a4a2b15912256bcf7b39980e15095ba58" kindref="member">have</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1a4a2b15912256bcf7b39980e15095ba58" kindref="member">have</ref><sp/>&lt;<sp/>state-&gt;<ref refid="structinflate__state_1a62b5ea8559856b315b6c89d9114c2109" kindref="member">ncode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1ab3731a4aa4bb04481dc95069bbfb7156" kindref="member">NEEDBITS</ref>(3);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1aa0620e64487c48635f6c3a11a0aeb99d" kindref="member">lens</ref>[order[state-&gt;<ref refid="structinflate__state_1a4a2b15912256bcf7b39980e15095ba58" kindref="member">have</ref>++]]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)<ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(3);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(3);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1a4a2b15912256bcf7b39980e15095ba58" kindref="member">have</ref><sp/>&lt;<sp/>19)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1aa0620e64487c48635f6c3a11a0aeb99d" kindref="member">lens</ref>[order[state-&gt;<ref refid="structinflate__state_1a4a2b15912256bcf7b39980e15095ba58" kindref="member">have</ref>++]]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a872bf267d91efb4143e9cfb812e670bb" kindref="member">next</ref><sp/>=<sp/>state-&gt;<ref refid="structinflate__state_1af9581f523a7d8d47fba6cdd73eaf1edc" kindref="member">codes</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a4560e1eb3318f7ea41896be84de0679a" kindref="member">lencode</ref><sp/>=<sp/>(<ref refid="structcode" kindref="compound">code</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*)(state-&gt;<ref refid="structinflate__state_1a872bf267d91efb4143e9cfb812e670bb" kindref="member">next</ref>);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a3ff97e6b230d7551fc848ff9de0236e9" kindref="member">lenbits</ref><sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="inftrees_8c_1abdadeebf4630332213acd06c8612654b" kindref="member">inflate_table</ref>(<ref refid="inftrees_8h_1a0f33f5acf9079ff1f054fa235df2443ba4f2ec4135d8cf82c6c35780e470cac28" kindref="member">CODES</ref>,<sp/>state-&gt;<ref refid="structinflate__state_1aa0620e64487c48635f6c3a11a0aeb99d" kindref="member">lens</ref>,<sp/>19,<sp/>&amp;(state-&gt;<ref refid="structinflate__state_1a872bf267d91efb4143e9cfb812e670bb" kindref="member">next</ref>),</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(state-&gt;<ref refid="structinflate__state_1a3ff97e6b230d7551fc848ff9de0236e9" kindref="member">lenbits</ref>),<sp/>state-&gt;<ref refid="structinflate__state_1a85403907f7f5b9d355821ffa2591456c" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>code<sp/>lengths<sp/>set&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaafe29bdbfb6e2165eec29bf28af429856" kindref="member">BAD</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>lengths<sp/>ok\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>length<sp/>and<sp/>distance<sp/>code<sp/>code<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a4a2b15912256bcf7b39980e15095ba58" kindref="member">have</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1a4a2b15912256bcf7b39980e15095ba58" kindref="member">have</ref><sp/>&lt;<sp/>state-&gt;<ref refid="structinflate__state_1a489b005f4fe214353cd80b77b4f23194" kindref="member">nlen</ref><sp/>+<sp/>state-&gt;<ref refid="structinflate__state_1a4415e5e51efdd0c8672e4c601caa4762" kindref="member">ndist</ref>)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here<sp/>=<sp/>state-&gt;<ref refid="structinflate__state_1a4560e1eb3318f7ea41896be84de0679a" kindref="member">lencode</ref>[<ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(state-&gt;<ref refid="structinflate__state_1a3ff97e6b230d7551fc848ff9de0236e9" kindref="member">lenbits</ref>)];</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>)<sp/>&lt;=<sp/>bits)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1add54302c739466e0e4a204fa1015694b" kindref="member">PULLBYTE</ref>();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(here.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref><sp/>&lt;<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1ab3731a4aa4bb04481dc95069bbfb7156" kindref="member">NEEDBITS</ref>(here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1aa0620e64487c48635f6c3a11a0aeb99d" kindref="member">lens</ref>[state-&gt;<ref refid="structinflate__state_1a4a2b15912256bcf7b39980e15095ba58" kindref="member">have</ref>++]<sp/>=<sp/>here.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(here.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref><sp/>==<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1ab3731a4aa4bb04481dc95069bbfb7156" kindref="member">NEEDBITS</ref>(here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref><sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1a4a2b15912256bcf7b39980e15095ba58" kindref="member">have</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>bit<sp/>length<sp/>repeat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaafe29bdbfb6e2165eec29bf28af429856" kindref="member">BAD</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>(unsigned)(state-&gt;<ref refid="structinflate__state_1aa0620e64487c48635f6c3a11a0aeb99d" kindref="member">lens</ref>[state-&gt;<ref refid="structinflate__state_1a4a2b15912256bcf7b39980e15095ba58" kindref="member">have</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy<sp/>=<sp/>3<sp/>+<sp/><ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(2);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(2);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(here.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref><sp/>==<sp/>17)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1ab3731a4aa4bb04481dc95069bbfb7156" kindref="member">NEEDBITS</ref>(here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref><sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy<sp/>=<sp/>3<sp/>+<sp/><ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(3);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(3);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1ab3731a4aa4bb04481dc95069bbfb7156" kindref="member">NEEDBITS</ref>(here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref><sp/>+<sp/>7);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy<sp/>=<sp/>11<sp/>+<sp/><ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(7);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(7);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1a4a2b15912256bcf7b39980e15095ba58" kindref="member">have</ref><sp/>+<sp/>copy<sp/>&gt;<sp/>state-&gt;<ref refid="structinflate__state_1a489b005f4fe214353cd80b77b4f23194" kindref="member">nlen</ref><sp/>+<sp/>state-&gt;<ref refid="structinflate__state_1a4415e5e51efdd0c8672e4c601caa4762" kindref="member">ndist</ref>)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>bit<sp/>length<sp/>repeat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaafe29bdbfb6e2165eec29bf28af429856" kindref="member">BAD</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(copy--)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1aa0620e64487c48635f6c3a11a0aeb99d" kindref="member">lens</ref>[state-&gt;<ref refid="structinflate__state_1a4a2b15912256bcf7b39980e15095ba58" kindref="member">have</ref>++]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)len;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>handle<sp/>error<sp/>breaks<sp/>in<sp/>while<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>==<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaafe29bdbfb6e2165eec29bf28af429856" kindref="member">BAD</ref>)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>for<sp/>end-of-block<sp/>code<sp/>(better<sp/>have<sp/>one)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1aa0620e64487c48635f6c3a11a0aeb99d" kindref="member">lens</ref>[256]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>code<sp/>--<sp/>missing<sp/>end-of-block&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaafe29bdbfb6e2165eec29bf28af429856" kindref="member">BAD</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>build<sp/>code<sp/>tables<sp/>--<sp/>note:<sp/>do<sp/>not<sp/>change<sp/>the<sp/>lenbits<sp/>or<sp/>distbits</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/>here<sp/>(9<sp/>and<sp/>6)<sp/>without<sp/>reading<sp/>the<sp/>comments<sp/>in<sp/>inftrees.h</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>concerning<sp/>the<sp/>ENOUGH<sp/>constants,<sp/>which<sp/>depend<sp/>on<sp/>those<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a872bf267d91efb4143e9cfb812e670bb" kindref="member">next</ref><sp/>=<sp/>state-&gt;<ref refid="structinflate__state_1af9581f523a7d8d47fba6cdd73eaf1edc" kindref="member">codes</ref>;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a4560e1eb3318f7ea41896be84de0679a" kindref="member">lencode</ref><sp/>=<sp/>(<ref refid="structcode" kindref="compound">code</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*)(state-&gt;<ref refid="structinflate__state_1a872bf267d91efb4143e9cfb812e670bb" kindref="member">next</ref>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a3ff97e6b230d7551fc848ff9de0236e9" kindref="member">lenbits</ref><sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="inftrees_8c_1abdadeebf4630332213acd06c8612654b" kindref="member">inflate_table</ref>(<ref refid="inftrees_8h_1a0f33f5acf9079ff1f054fa235df2443ba86b0f8050ddd8ae0b99e2f9323ad00a1" kindref="member">LENS</ref>,<sp/>state-&gt;<ref refid="structinflate__state_1aa0620e64487c48635f6c3a11a0aeb99d" kindref="member">lens</ref>,<sp/>state-&gt;<ref refid="structinflate__state_1a489b005f4fe214353cd80b77b4f23194" kindref="member">nlen</ref>,<sp/>&amp;(state-&gt;<ref refid="structinflate__state_1a872bf267d91efb4143e9cfb812e670bb" kindref="member">next</ref>),</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(state-&gt;<ref refid="structinflate__state_1a3ff97e6b230d7551fc848ff9de0236e9" kindref="member">lenbits</ref>),<sp/>state-&gt;<ref refid="structinflate__state_1a85403907f7f5b9d355821ffa2591456c" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>literal/lengths<sp/>set&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaafe29bdbfb6e2165eec29bf28af429856" kindref="member">BAD</ref>;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a19f7ae2fe2682cb1163860f6991a107f" kindref="member">distcode</ref><sp/>=<sp/>(<ref refid="structcode" kindref="compound">code</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*)(state-&gt;<ref refid="structinflate__state_1a872bf267d91efb4143e9cfb812e670bb" kindref="member">next</ref>);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a98952f3f8f420a05b567f080aca0eb4b" kindref="member">distbits</ref><sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="inftrees_8c_1abdadeebf4630332213acd06c8612654b" kindref="member">inflate_table</ref>(<ref refid="inftrees_8h_1a0f33f5acf9079ff1f054fa235df2443bafd7fbb659c736b26e79316ef09a2a9a1" kindref="member">DISTS</ref>,<sp/>state-&gt;<ref refid="structinflate__state_1aa0620e64487c48635f6c3a11a0aeb99d" kindref="member">lens</ref><sp/>+<sp/>state-&gt;<ref refid="structinflate__state_1a489b005f4fe214353cd80b77b4f23194" kindref="member">nlen</ref>,<sp/>state-&gt;<ref refid="structinflate__state_1a4415e5e51efdd0c8672e4c601caa4762" kindref="member">ndist</ref>,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(state-&gt;<ref refid="structinflate__state_1a872bf267d91efb4143e9cfb812e670bb" kindref="member">next</ref>),<sp/>&amp;(state-&gt;<ref refid="structinflate__state_1a98952f3f8f420a05b567f080aca0eb4b" kindref="member">distbits</ref>),<sp/>state-&gt;<ref refid="structinflate__state_1a85403907f7f5b9d355821ffa2591456c" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>distances<sp/>set&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaafe29bdbfb6e2165eec29bf28af429856" kindref="member">BAD</ref>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>codes<sp/>ok\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaaff15d001decc8890fb72cc6065a1abba" kindref="member">LEN</ref>;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaaff15d001decc8890fb72cc6065a1abba" kindref="member">LEN</ref>:</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>inflate_fast()<sp/>if<sp/>we<sp/>have<sp/>enough<sp/>input<sp/>and<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(have<sp/>&gt;=<sp/>6<sp/>&amp;&amp;<sp/>left<sp/>&gt;=<sp/>258)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1af3b6db2fe8b54bb9edf88c2002e4bf34" kindref="member">RESTORE</ref>();</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1a6b56aabe80412784eadc1068981c9d00" kindref="member">whave</ref><sp/>&lt;<sp/>state-&gt;<ref refid="structinflate__state_1acca16ca86216760eaf307bf71e15e470" kindref="member">wsize</ref>)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a6b56aabe80412784eadc1068981c9d00" kindref="member">whave</ref><sp/>=<sp/>state-&gt;<ref refid="structinflate__state_1acca16ca86216760eaf307bf71e15e470" kindref="member">wsize</ref><sp/>-<sp/>left;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="inffast_8c_1a53a180584225f8b9e863a9ab03c16076" kindref="member">inflate_fast</ref>(strm,<sp/>state-&gt;<ref refid="structinflate__state_1acca16ca86216760eaf307bf71e15e470" kindref="member">wsize</ref>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a03dae42536f97b08183620a910f9b204" kindref="member">LOAD</ref>();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>a<sp/>literal,<sp/>length,<sp/>or<sp/>end-of-block<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here<sp/>=<sp/>state-&gt;<ref refid="structinflate__state_1a4560e1eb3318f7ea41896be84de0679a" kindref="member">lencode</ref>[<ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(state-&gt;<ref refid="structinflate__state_1a3ff97e6b230d7551fc848ff9de0236e9" kindref="member">lenbits</ref>)];</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>)<sp/>&lt;=<sp/>bits)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1add54302c739466e0e4a204fa1015694b" kindref="member">PULLBYTE</ref>();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(here.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref><sp/>&amp;&amp;<sp/>(here.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref><sp/>&amp;<sp/>0xf0)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>here;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here<sp/>=<sp/>state-&gt;<ref refid="structinflate__state_1a4560e1eb3318f7ea41896be84de0679a" kindref="member">lencode</ref>[last.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref><sp/>+</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(last.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref><sp/>+<sp/>last.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref>)<sp/>&gt;&gt;<sp/>last.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>)];</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(last.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref><sp/>+<sp/>here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>)<sp/>&lt;=<sp/>bits)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1add54302c739466e0e4a204fa1015694b" kindref="member">PULLBYTE</ref>();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(last.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a5179d4c9b332d976cce7c6cce6bdf3c1" kindref="member">length</ref><sp/>=<sp/>(unsigned)here.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>process<sp/>literal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(here.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1ae65182ff511f0b12345c20b6533f32d9" kindref="member">Tracevv</ref>((stderr,<sp/>here.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref><sp/>&gt;=<sp/>0x20<sp/>&amp;&amp;<sp/>here.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref><sp/>&lt;<sp/>0x7f<sp/>?</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>literal<sp/>&apos;%c&apos;\n&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>literal<sp/>0x%02x\n&quot;</highlight><highlight class="normal">,<sp/>here.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref>));</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1aa86fac2e845f337d5369513dea1759b0" kindref="member">ROOM</ref>();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*put++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(state-&gt;<ref refid="structinflate__state_1a5179d4c9b332d976cce7c6cce6bdf3c1" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left--;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaaff15d001decc8890fb72cc6065a1abba" kindref="member">LEN</ref>;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>process<sp/>end<sp/>of<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(here.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref><sp/>&amp;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1ae65182ff511f0b12345c20b6533f32d9" kindref="member">Tracevv</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>of<sp/>block\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaab47ea8bb955afd0adc0ef98517dd6084" kindref="member">TYPE</ref>;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>invalid<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(here.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref><sp/>&amp;<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>literal/length<sp/>code&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaafe29bdbfb6e2165eec29bf28af429856" kindref="member">BAD</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>code<sp/>--<sp/>get<sp/>extra<sp/>bits,<sp/>if<sp/>any<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a5b7b0be77d61e8468716c7f265dd0780" kindref="member">extra</ref><sp/>=<sp/>(unsigned)(here.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref>)<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1a5b7b0be77d61e8468716c7f265dd0780" kindref="member">extra</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1ab3731a4aa4bb04481dc95069bbfb7156" kindref="member">NEEDBITS</ref>(state-&gt;<ref refid="structinflate__state_1a5b7b0be77d61e8468716c7f265dd0780" kindref="member">extra</ref>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a5179d4c9b332d976cce7c6cce6bdf3c1" kindref="member">length</ref><sp/>+=<sp/><ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(state-&gt;<ref refid="structinflate__state_1a5b7b0be77d61e8468716c7f265dd0780" kindref="member">extra</ref>);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(state-&gt;<ref refid="structinflate__state_1a5b7b0be77d61e8468716c7f265dd0780" kindref="member">extra</ref>);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1ae65182ff511f0b12345c20b6533f32d9" kindref="member">Tracevv</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;<ref refid="structinflate__state_1a5179d4c9b332d976cce7c6cce6bdf3c1" kindref="member">length</ref>));</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>distance<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here<sp/>=<sp/>state-&gt;<ref refid="structinflate__state_1a19f7ae2fe2682cb1163860f6991a107f" kindref="member">distcode</ref>[<ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(state-&gt;<ref refid="structinflate__state_1a98952f3f8f420a05b567f080aca0eb4b" kindref="member">distbits</ref>)];</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>)<sp/>&lt;=<sp/>bits)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1add54302c739466e0e4a204fa1015694b" kindref="member">PULLBYTE</ref>();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((here.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref><sp/>&amp;<sp/>0xf0)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>here;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here<sp/>=<sp/>state-&gt;<ref refid="structinflate__state_1a19f7ae2fe2682cb1163860f6991a107f" kindref="member">distcode</ref>[last.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref><sp/>+</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(last.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref><sp/>+<sp/>last.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref>)<sp/>&gt;&gt;<sp/>last.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>)];</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(last.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref><sp/>+<sp/>here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>)<sp/>&lt;=<sp/>bits)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1add54302c739466e0e4a204fa1015694b" kindref="member">PULLBYTE</ref>();</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(last.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(here.<ref refid="structcode_1a5defcebb356dca1a5a8d39995f28d66b" kindref="member">bits</ref>);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(here.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref><sp/>&amp;<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>distance<sp/>code&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaafe29bdbfb6e2165eec29bf28af429856" kindref="member">BAD</ref>;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1af1e38258e8585b1a37854066ef9d939c" kindref="member">offset</ref><sp/>=<sp/>(unsigned)here.<ref refid="structcode_1a6f9c73627997e8fc6df02e620cf9a6f5" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>distance<sp/>extra<sp/>bits,<sp/>if<sp/>any<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a5b7b0be77d61e8468716c7f265dd0780" kindref="member">extra</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(here.<ref refid="structcode_1a4f075d73a9177d05cc7d332105295b83" kindref="member">op</ref>)<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1a5b7b0be77d61e8468716c7f265dd0780" kindref="member">extra</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1ab3731a4aa4bb04481dc95069bbfb7156" kindref="member">NEEDBITS</ref>(state-&gt;<ref refid="structinflate__state_1a5b7b0be77d61e8468716c7f265dd0780" kindref="member">extra</ref>);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1af1e38258e8585b1a37854066ef9d939c" kindref="member">offset</ref><sp/>+=<sp/><ref refid="infback_8c_1a5967693540f086cfa357f68978bf0be7" kindref="member">BITS</ref>(state-&gt;<ref refid="structinflate__state_1a5b7b0be77d61e8468716c7f265dd0780" kindref="member">extra</ref>);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1a65312e68bdf918e606b0deaf69793523" kindref="member">DROPBITS</ref>(state-&gt;<ref refid="structinflate__state_1a5b7b0be77d61e8468716c7f265dd0780" kindref="member">extra</ref>);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1af1e38258e8585b1a37854066ef9d939c" kindref="member">offset</ref><sp/>&gt;<sp/>state-&gt;<ref refid="structinflate__state_1acca16ca86216760eaf307bf71e15e470" kindref="member">wsize</ref><sp/>-<sp/>(state-&gt;<ref refid="structinflate__state_1a6b56aabe80412784eadc1068981c9d00" kindref="member">whave</ref><sp/>&lt;<sp/>state-&gt;<ref refid="structinflate__state_1acca16ca86216760eaf307bf71e15e470" kindref="member">wsize</ref><sp/>?</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>:<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strm-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>distance<sp/>too<sp/>far<sp/>back&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a9c7906fee7eeeb450b13576531ca639d" kindref="member">mode</ref><sp/>=<sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaafe29bdbfb6e2165eec29bf28af429856" kindref="member">BAD</ref>;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1ae65182ff511f0b12345c20b6533f32d9" kindref="member">Tracevv</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;<ref refid="structinflate__state_1af1e38258e8585b1a37854066ef9d939c" kindref="member">offset</ref>));</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>match<sp/>from<sp/>window<sp/>to<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="infback_8c_1aa86fac2e845f337d5369513dea1759b0" kindref="member">ROOM</ref>();</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy<sp/>=<sp/>state-&gt;<ref refid="structinflate__state_1acca16ca86216760eaf307bf71e15e470" kindref="member">wsize</ref><sp/>-<sp/>state-&gt;<ref refid="structinflate__state_1af1e38258e8585b1a37854066ef9d939c" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copy<sp/>&lt;<sp/>left)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>=<sp/>put<sp/>+<sp/>copy;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy<sp/>=<sp/>left<sp/>-<sp/>copy;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>=<sp/>put<sp/>-<sp/>state-&gt;<ref refid="structinflate__state_1af1e38258e8585b1a37854066ef9d939c" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy<sp/>=<sp/>left;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copy<sp/>&gt;<sp/>state-&gt;<ref refid="structinflate__state_1a5179d4c9b332d976cce7c6cce6bdf3c1" kindref="member">length</ref>)<sp/>copy<sp/>=<sp/>state-&gt;<ref refid="structinflate__state_1a5179d4c9b332d976cce7c6cce6bdf3c1" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structinflate__state_1a5179d4c9b332d976cce7c6cce6bdf3c1" kindref="member">length</ref><sp/>-=<sp/>copy;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>-=<sp/>copy;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*put++<sp/>=<sp/>*from++;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--copy);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="structinflate__state_1a5179d4c9b332d976cce7c6cce6bdf3c1" kindref="member">length</ref><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaa9c954bcf443428c80b0f107b3bc48749" kindref="member">DONE</ref>:</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>inflate<sp/>stream<sp/>terminated<sp/>properly<sp/>--<sp/>write<sp/>leftover<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="zlib_8h_1a7d94a4a852228a899864a0053162e7a8" kindref="member">Z_STREAM_END</ref>;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left<sp/>&lt;<sp/>state-&gt;<ref refid="structinflate__state_1acca16ca86216760eaf307bf71e15e470" kindref="member">wsize</ref>)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out(out_desc,<sp/>state-&gt;<ref refid="structinflate__state_1a9cc4c0bde426383731394dcf91c40673" kindref="member">window</ref>,<sp/>state-&gt;<ref refid="structinflate__state_1acca16ca86216760eaf307bf71e15e470" kindref="member">wsize</ref><sp/>-<sp/>left))</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="zlib_8h_1a425e2f0664e1b1f75bf2bffab88d353d" kindref="member">Z_BUF_ERROR</ref>;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>inf_leave;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="inflate_8h_1a164ea0159d5f0b5f12a646f25f99eceaafe29bdbfb6e2165eec29bf28af429856" kindref="member">BAD</ref>:</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="zlib_8h_1a9eda83d428a71752d148f38b5dbe04f2" kindref="member">Z_DATA_ERROR</ref>;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>inf_leave;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can&apos;t<sp/>happen,<sp/>but<sp/>makes<sp/>compilers<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>inf_leave;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>unused<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>inf_leave:</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;next_in<sp/>=<sp/><ref refid="structinflate__state_1a872bf267d91efb4143e9cfb812e670bb" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;avail_in<sp/>=<sp/><ref refid="structinflate__state_1a4a2b15912256bcf7b39980e15095ba58" kindref="member">have</ref>;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="zconf_8h_1a181415878f03b95a7094309d824a14b6" kindref="member">ZEXPORT</ref><sp/><ref refid="infback_8c_1ad1240e7eb9af97f01186d6f0d25286ce" kindref="member">inflateBackEnd</ref>(strm)</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><ref refid="structz__stream" kindref="compound">z_streamp</ref><sp/>strm;</highlight></codeline>
<codeline lineno="625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strm<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>strm-&gt;state<sp/>==<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref><sp/>||<sp/>strm-&gt;zfree<sp/>==<sp/>(<ref refid="zlib_8h_1af07471bf3f37f2c29078ed11ac59fc7f" kindref="member">free_func</ref>)0)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" kindref="member">Z_STREAM_ERROR</ref>;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a71d7c4f186ae3a055367c92db5a8ab18" kindref="member">ZFREE</ref>(strm,<sp/>strm-&gt;state);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>strm-&gt;state<sp/>=<sp/><ref refid="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" kindref="member">Z_NULL</ref>;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="zutil_8h_1a67eab10382e740297e8a59d69f85464e" kindref="member">Tracev</ref>((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/>end\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" kindref="member">Z_OK</ref>;</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/Cpp_Reverse/poco-1.4.6p1/Foundation/src/infback.c"/>
  </compounddef>
</doxygen>
