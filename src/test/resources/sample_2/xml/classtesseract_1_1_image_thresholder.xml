<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="classtesseract_1_1_image_thresholder" kind="class" prot="public">
    <compoundname>tesseract::ImageThresholder</compoundname>
    <includes refid="thresholder_8h" local="no">thresholder.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classtesseract_1_1_image_thresholder_1a8ffaca2b9b8f5c01df4959d043564e44" prot="protected" static="no" mutable="no">
        <type>Pix *</type>
        <definition>Pix* tesseract::ImageThresholder::pix_</definition>
        <argsstring></argsstring>
        <name>pix_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clone or other copy of the source Pix. The pix will always be PixDestroy()ed on destruction of the class. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="171" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_image_thresholder_1a8aaf3664bd91cd3e5703f92d8d13566f" prot="protected" static="no" mutable="no">
        <type>const unsigned char *</type>
        <definition>const unsigned char* tesseract::ImageThresholder::image_data_</definition>
        <argsstring></argsstring>
        <name>image_data_</name>
        <briefdescription>
<para>Exactly one of pix_ and image_data_ is not NULL. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="173" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_image_thresholder_1ad19482689e862049210ed12506e3e430" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::ImageThresholder::image_width_</definition>
        <argsstring></argsstring>
        <name>image_width_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="175" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_image_thresholder_1af850057e6640359179bea0835254cc12" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::ImageThresholder::image_height_</definition>
        <argsstring></argsstring>
        <name>image_height_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="176" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_image_thresholder_1adf6d9b0922a0ecf3309ea2423bdcf369" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::ImageThresholder::image_bytespp_</definition>
        <argsstring></argsstring>
        <name>image_bytespp_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="177" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_image_thresholder_1a3d26f0b9a6f00eb771276769cfc08268" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::ImageThresholder::image_bytespl_</definition>
        <argsstring></argsstring>
        <name>image_bytespl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="178" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_image_thresholder_1abf0aec155d23b51c245c4163582cd82c" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::ImageThresholder::scale_</definition>
        <argsstring></argsstring>
        <name>scale_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="180" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_image_thresholder_1ac80aad234efc5a4102805a05d5825aa4" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::ImageThresholder::yres_</definition>
        <argsstring></argsstring>
        <name>yres_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="181" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_image_thresholder_1a7f6c21281f37d495ed2272e931e990ac" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::ImageThresholder::estimated_res_</definition>
        <argsstring></argsstring>
        <name>estimated_res_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="182" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_image_thresholder_1abf7d4771ff09f7a3e6e45f20ed3bd531" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::ImageThresholder::rect_left_</definition>
        <argsstring></argsstring>
        <name>rect_left_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="183" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_image_thresholder_1a46518f2527c1198bfc524b93aad56e72" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::ImageThresholder::rect_top_</definition>
        <argsstring></argsstring>
        <name>rect_top_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="184" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_image_thresholder_1a450cd3577eebea0e372b059b6d4cac7e" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::ImageThresholder::rect_width_</definition>
        <argsstring></argsstring>
        <name>rect_width_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="185" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_image_thresholder_1a8455c5c0f05f987a19b9cd1a250f6b1d" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::ImageThresholder::rect_height_</definition>
        <argsstring></argsstring>
        <name>rect_height_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="186" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1abe08089c5e2087eac5e8a35c1725e8a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::ImageThresholder::ImageThresholder</definition>
        <argsstring>()</argsstring>
        <name>ImageThresholder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="36" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.cpp" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1ab1ceb90c081f9a37b40904167483a7ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>tesseract::ImageThresholder::~ImageThresholder</definition>
        <argsstring>()</argsstring>
        <name>~ImageThresholder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="37" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.cpp" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1afe5b51a09de405a0fc04b1d72c3c908d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void tesseract::ImageThresholder::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Destroy the Pix if there is one, freeing memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="40" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.cpp" bodystart="45" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1a4a643445e9ab0e22fabe45308c6d2548" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tesseract::ImageThresholder::IsEmpty</definition>
        <argsstring>() const </argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Return true if no image has been set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="43" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.cpp" bodystart="54" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1a6273ef2894757191288f857702fdd044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::ImageThresholder::SetImage</definition>
        <argsstring>(const unsigned char *imagedata, int width, int height, int bytes_per_pixel, int bytes_per_line)</argsstring>
        <name>SetImage</name>
        <param>
          <type>const unsigned char *</type>
          <declname>imagedata</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes_per_pixel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes_per_line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SetImage makes a copy of only the metadata, not the underlying image buffer. It promises to treat the source as read-only in either case, but in return assumes that the Pix or image buffer remain valid throughout the life of the <ref refid="classtesseract_1_1_image_thresholder" kindref="compound">ImageThresholder</ref>. Greyscale of 8 and color of 24 or 32 bits per pixel may be given. Palette color images will not work properly and must be converted to 24 bit. Binary images of 1 bit per pixel may also be given but they must be byte packed with the MSB of the first byte being the first pixel, and a one pixel is WHITE. For binary images set bytes_per_pixel=0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="55" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.cpp" bodystart="70" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1ab230142a51f5ed6347f1a9221e52d264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::ImageThresholder::SetRectangle</definition>
        <argsstring>(int left, int top, int width, int height)</argsstring>
        <name>SetRectangle</name>
        <param>
          <type>int</type>
          <declname>left</declname>
        </param>
        <param>
          <type>int</type>
          <declname>top</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Store the coordinates of the rectangle to process for later use. Doesn&apos;t actually do any thresholding. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="60" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.cpp" bodystart="88" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1a4e7f450e7c88d85a3e8dd8fa2baa3776" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void tesseract::ImageThresholder::GetImageSizes</definition>
        <argsstring>(int *left, int *top, int *width, int *height, int *imagewidth, int *imageheight)</argsstring>
        <name>GetImageSizes</name>
        <param>
          <type>int *</type>
          <declname>left</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>top</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>imagewidth</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>imageheight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get enough parameters to be able to rebuild bounding boxes in the original image (not just within the rectangle). Left and top are enough with top-down coordinates, but the height of the rectangle and the image are needed for bottom-up. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="66" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.cpp" bodystart="99" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1a57d21a0b70abfd3d5957386d116b6bde" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tesseract::ImageThresholder::IsColor</definition>
        <argsstring>() const </argsstring>
        <name>IsColor</name>
        <briefdescription>
<para>Return true if the source image is color. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="70" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1a3399e9237569c4b2a5fd5268db593363" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tesseract::ImageThresholder::IsBinary</definition>
        <argsstring>() const </argsstring>
        <name>IsBinary</name>
        <briefdescription>
<para>Returns true if the source image is binary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="75" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1a7d8c733e8624ebc10e74ec2afd517398" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tesseract::ImageThresholder::GetScaleFactor</definition>
        <argsstring>() const </argsstring>
        <name>GetScaleFactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="79" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1af96fa2b6f4d1271640d5c8842f4fa9d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::ImageThresholder::SetSourceYResolution</definition>
        <argsstring>(int ppi)</argsstring>
        <name>SetSourceYResolution</name>
        <param>
          <type>int</type>
          <declname>ppi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="86" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1abb962b7a1fc65945d08112f7496acce2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tesseract::ImageThresholder::GetSourceYResolution</definition>
        <argsstring>() const </argsstring>
        <name>GetSourceYResolution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="90" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1a2fb94a4d1697c06bff68e33269297c59" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tesseract::ImageThresholder::GetScaledYResolution</definition>
        <argsstring>() const </argsstring>
        <name>GetScaledYResolution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="93" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1a395de01694f9b1034d7349b736a4dac0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::ImageThresholder::SetEstimatedResolution</definition>
        <argsstring>(int ppi)</argsstring>
        <name>SetEstimatedResolution</name>
        <param>
          <type>int</type>
          <declname>ppi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="101" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1ac132bc7502f0e9d2f71f34afd6d2eb83" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tesseract::ImageThresholder::GetScaledEstimatedResolution</definition>
        <argsstring>() const </argsstring>
        <name>GetScaledEstimatedResolution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="106" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1a8497b408fd199c7e3233d1734ee388ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::ImageThresholder::SetImage</definition>
        <argsstring>(const Pix *pix)</argsstring>
        <name>SetImage</name>
        <param>
          <type>const Pix *</type>
          <declname>pix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pix vs raw, which to use? Implementations should provide the ability to source and target Pix where possible. A future version of <ref refid="classtesseract_1_1_tesseract" kindref="compound">Tesseract</ref> may choose to use Pix as its internal representation and discard <ref refid="class_i_m_a_g_e" kindref="compound">IMAGE</ref> altogether. Because of that, an implementation that sources and targets Pix may end up with less copies than an implementation that does not. NOTE: Opposite to SetImage for raw images, SetImage for Pix clones its input, so the source pix may be pixDestroyed immediately after. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="118" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.cpp" bodystart="112" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1a8240c360cff397784e7e9f635d9ed7a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void tesseract::ImageThresholder::ThresholdToPix</definition>
        <argsstring>(Pix **pix)</argsstring>
        <name>ThresholdToPix</name>
        <param>
          <type>Pix **</type>
          <declname>pix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Threshold the source image as efficiently as possible to the output Pix. Creates a Pix and sets pix to point to the resulting pointer. Caller must use pixDestroy to free the created Pix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="123" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.cpp" bodystart="139" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1a0b855cc35144b84f150bf39d5342d7f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Pix *</type>
        <definition>Pix * tesseract::ImageThresholder::GetPixRect</definition>
        <argsstring>()</argsstring>
        <name>GetPixRect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a clone/copy of the source image rectangle. The returned Pix must be pixDestroyed. This function will be used in the future by the page layout analysis, and the layout analysis that uses it will only be available with Leptonica, so there is no raw equivalent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="130" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.cpp" bodystart="182" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1a0a01ac88f9d1193ebb80c96a09a9b01f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Pix *</type>
        <definition>Pix * tesseract::ImageThresholder::GetPixRectGrey</definition>
        <argsstring>()</argsstring>
        <name>GetPixRectGrey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a clone/copy of the source image rectangle, reduced to greyscale. The returned Pix must be pixDestroyed. This function will be used in the future by the page layout analysis, and the layout analysis that uses it will only be available with Leptonica, so there is no raw equivalent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="137" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.cpp" bodystart="206" bodyend="216"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1ab77c363f4f31edf539e83d28896959c5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void tesseract::ImageThresholder::Init</definition>
        <argsstring>()</argsstring>
        <name>Init</name>
        <briefdescription>
<para>Common initialization shared between SetImage methods. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="144" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.cpp" bodystart="173" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1a475c44a55463d3b50293152023a1b9f4" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tesseract::ImageThresholder::IsFullImage</definition>
        <argsstring>() const </argsstring>
        <name>IsFullImage</name>
        <briefdescription>
<para>Return true if we are processing the full image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="147" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1a9bbeac96aad481ce652816d8780b6e00" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::ImageThresholder::OtsuThresholdRectToPix</definition>
        <argsstring>(const unsigned char *imagedata, int bytes_per_pixel, int bytes_per_line, Pix **pix) const </argsstring>
        <name>OtsuThresholdRectToPix</name>
        <param>
          <type>const unsigned char *</type>
          <declname>imagedata</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes_per_pixel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes_per_line</declname>
        </param>
        <param>
          <type>Pix **</type>
          <declname>pix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Otsu threshold the rectangle, taking everything except the image buffer pointer from the class, to the output Pix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="154" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.cpp" bodystart="220" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1a2db93f0f736f8a555358f9e0c7a4356f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::ImageThresholder::ThresholdRectToPix</definition>
        <argsstring>(const unsigned char *imagedata, int bytes_per_pixel, int bytes_per_line, const int *thresholds, const int *hi_values, Pix **pix) const </argsstring>
        <name>ThresholdRectToPix</name>
        <param>
          <type>const unsigned char *</type>
          <declname>imagedata</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes_per_pixel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes_per_line</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>thresholds</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>hi_values</declname>
        </param>
        <param>
          <type>Pix **</type>
          <declname>pix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Threshold the rectangle, taking everything except the image buffer pointer from the class, using thresholds/hi_values to the output <ref refid="class_i_m_a_g_e" kindref="compound">IMAGE</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="160" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.cpp" bodystart="239" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_image_thresholder_1af1f40fc739f878beed7941a83c82a967" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::ImageThresholder::RawRectToPix</definition>
        <argsstring>(Pix **pix) const </argsstring>
        <name>RawRectToPix</name>
        <param>
          <type>Pix **</type>
          <declname>pix</declname>
        </param>
        <briefdescription>
<para>Copy the raw image rectangle, taking all data from the class, to the Pix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="166" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.cpp" bodystart="272" bodyend="311"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class for all tesseract image thresholding classes. Specific classes can add new thresholding methods by overriding ThresholdToPix. Each instance deals with a single image, but the design is intended to be useful for multiple calls to SetRectangle and ThresholdTo* if desired. </para>    </detaileddescription>
    <location file="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" line="34" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccmain/thresholder.h" bodystart="34" bodyend="187"/>
    <listofallmembers>
      <member refid="classtesseract_1_1_image_thresholder_1afe5b51a09de405a0fc04b1d72c3c908d" prot="public" virt="virtual"><scope>tesseract::ImageThresholder</scope><name>Clear</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a7f6c21281f37d495ed2272e931e990ac" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>estimated_res_</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a4e7f450e7c88d85a3e8dd8fa2baa3776" prot="public" virt="virtual"><scope>tesseract::ImageThresholder</scope><name>GetImageSizes</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a0b855cc35144b84f150bf39d5342d7f1" prot="public" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>GetPixRect</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a0a01ac88f9d1193ebb80c96a09a9b01f" prot="public" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>GetPixRectGrey</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1ac132bc7502f0e9d2f71f34afd6d2eb83" prot="public" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>GetScaledEstimatedResolution</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a2fb94a4d1697c06bff68e33269297c59" prot="public" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>GetScaledYResolution</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a7d8c733e8624ebc10e74ec2afd517398" prot="public" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>GetScaleFactor</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1abb962b7a1fc65945d08112f7496acce2" prot="public" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>GetSourceYResolution</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a3d26f0b9a6f00eb771276769cfc08268" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>image_bytespl_</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1adf6d9b0922a0ecf3309ea2423bdcf369" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>image_bytespp_</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a8aaf3664bd91cd3e5703f92d8d13566f" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>image_data_</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1af850057e6640359179bea0835254cc12" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>image_height_</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1ad19482689e862049210ed12506e3e430" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>image_width_</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1abe08089c5e2087eac5e8a35c1725e8a2" prot="public" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>ImageThresholder</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1ab77c363f4f31edf539e83d28896959c5" prot="protected" virt="virtual"><scope>tesseract::ImageThresholder</scope><name>Init</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a3399e9237569c4b2a5fd5268db593363" prot="public" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>IsBinary</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a57d21a0b70abfd3d5957386d116b6bde" prot="public" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>IsColor</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a4a643445e9ab0e22fabe45308c6d2548" prot="public" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>IsEmpty</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a475c44a55463d3b50293152023a1b9f4" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>IsFullImage</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a9bbeac96aad481ce652816d8780b6e00" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>OtsuThresholdRectToPix</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a8ffaca2b9b8f5c01df4959d043564e44" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>pix_</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1af1f40fc739f878beed7941a83c82a967" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>RawRectToPix</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a8455c5c0f05f987a19b9cd1a250f6b1d" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>rect_height_</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1abf7d4771ff09f7a3e6e45f20ed3bd531" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>rect_left_</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a46518f2527c1198bfc524b93aad56e72" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>rect_top_</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a450cd3577eebea0e372b059b6d4cac7e" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>rect_width_</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1abf0aec155d23b51c245c4163582cd82c" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>scale_</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a395de01694f9b1034d7349b736a4dac0" prot="public" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>SetEstimatedResolution</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a6273ef2894757191288f857702fdd044" prot="public" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>SetImage</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a8497b408fd199c7e3233d1734ee388ea" prot="public" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>SetImage</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1ab230142a51f5ed6347f1a9221e52d264" prot="public" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>SetRectangle</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1af96fa2b6f4d1271640d5c8842f4fa9d6" prot="public" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>SetSourceYResolution</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a2db93f0f736f8a555358f9e0c7a4356f" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>ThresholdRectToPix</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1a8240c360cff397784e7e9f635d9ed7a3" prot="public" virt="virtual"><scope>tesseract::ImageThresholder</scope><name>ThresholdToPix</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1ac80aad234efc5a4102805a05d5825aa4" prot="protected" virt="non-virtual"><scope>tesseract::ImageThresholder</scope><name>yres_</name></member>
      <member refid="classtesseract_1_1_image_thresholder_1ab1ceb90c081f9a37b40904167483a7ef" prot="public" virt="virtual"><scope>tesseract::ImageThresholder</scope><name>~ImageThresholder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
