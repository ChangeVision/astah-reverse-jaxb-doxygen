<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="basedir_8cpp" kind="file">
    <compoundname>basedir.cpp</compoundname>
    <includes refid="basedir_8h" local="yes">basedir.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="mfcpch_8h" local="yes">mfcpch.h</includes>
    <incdepgraph>
      <node id="13530">
        <label>mfcpch.h</label>
        <link refid="mfcpch_8h"/>
      </node>
      <node id="13529">
        <label>stdlib.h</label>
      </node>
      <node id="13520">
        <label>basedir.h</label>
        <link refid="basedir_8h"/>
        <childnode refid="13521" relation="include">
        </childnode>
        <childnode refid="13523" relation="include">
        </childnode>
      </node>
      <node id="13521">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="13522" relation="include">
        </childnode>
      </node>
      <node id="13519">
        <label>ccutil/basedir.cpp</label>
        <link refid="basedir.cpp"/>
        <childnode refid="13520" relation="include">
        </childnode>
        <childnode refid="13529" relation="include">
        </childnode>
        <childnode refid="13530" relation="include">
        </childnode>
      </node>
      <node id="13527">
        <label>stddef.h</label>
      </node>
      <node id="13522">
        <label>limits.h</label>
      </node>
      <node id="13525">
        <label>string.h</label>
      </node>
      <node id="13526">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="13527" relation="include">
        </childnode>
        <childnode refid="13528" relation="include">
        </childnode>
      </node>
      <node id="13528">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="13521" relation="include">
        </childnode>
      </node>
      <node id="13524">
        <label>stdio.h</label>
      </node>
      <node id="13523">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="13524" relation="include">
        </childnode>
        <childnode refid="13525" relation="include">
        </childnode>
        <childnode refid="13521" relation="include">
        </childnode>
        <childnode refid="13526" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="basedir_8cpp_1a7cf3a953ccf5f593c57b2e711cc43bf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void truncate_path</definition>
        <argsstring>(const char *code_path, STRING *trunc_path)</argsstring>
        <name>truncate_path</name>
        <param>
          <type>const char *</type>
          <declname>code_path</declname>
        </param>
        <param>
          <type><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref> *</type>
          <declname>trunc_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccutil/basedir.cpp" line="32" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccutil/basedir.cpp" bodystart="32" bodyend="47"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basedir.c<sp/><sp/>(Formerly<sp/>getpath.c)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Description:<sp/>Find<sp/>the<sp/>directory<sp/>location<sp/>of<sp/>the<sp/>current<sp/>executable<sp/>using<sp/>PATH.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/>Ray<sp/>Smith</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Created:<sp/><sp/><sp/><sp/><sp/>Mon<sp/>Jul<sp/>09<sp/>09:06:39<sp/>BST<sp/>1990</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>(C)<sp/>Copyright<sp/>1990,<sp/>Hewlett-Packard<sp/>Ltd.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>**<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>**<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>**<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>**<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>**<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>**<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>**<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>**<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>**<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<ref refid="basedir_8h" kindref="compound">basedir.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<ref refid="mfcpch_8h" kindref="compound">mfcpch.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Precompiled<sp/>headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assuming<sp/>that<sp/>code_path<sp/>is<sp/>the<sp/>name<sp/>of<sp/>some<sp/>file<sp/>in<sp/>a<sp/>desired<sp/>directory,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>given<sp/>code_path<sp/>stripped<sp/>back<sp/>to<sp/>the<sp/>last<sp/>slash,<sp/>leaving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>slash<sp/>in<sp/>place.<sp/>If<sp/>there<sp/>is<sp/>no<sp/>slash,<sp/>returns<sp/>./<sp/>assuming<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>input<sp/>was<sp/>the<sp/>name<sp/>of<sp/>something<sp/>in<sp/>the<sp/>current<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Useful<sp/>for<sp/>getting<sp/>to<sp/>the<sp/>directory<sp/>of<sp/>argv[0],<sp/>but<sp/>does<sp/>not<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>any<sp/>paths.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="platform_8h_1a86e51270628c53ce7e2c23b1c2b4490e" kindref="member">TESS_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="basedir_8cpp_1a7cf3a953ccf5f593c57b2e711cc43bf2" kindref="member">truncate_path</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*code_path,<sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>*<sp/>trunc_path)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trunc_index<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_path<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>last_slash<sp/>=<sp/>strrchr(code_path,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_slash<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>last_slash<sp/>+<sp/>1<sp/>-<sp/>code_path<sp/>&gt;<sp/>trunc_index)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trunc_index<sp/>=<sp/>last_slash<sp/>+<sp/>1<sp/>-<sp/>code_path;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>last_slash<sp/>=<sp/>strrchr(code_path,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_slash<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>last_slash<sp/>+<sp/>1<sp/>-<sp/>code_path<sp/>&gt;<sp/>trunc_index)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trunc_index<sp/>=<sp/>last_slash<sp/>+<sp/>1<sp/>-<sp/>code_path;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>*trunc_path<sp/>=<sp/>code_path;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trunc_index<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>trunc_path-&gt;<ref refid="class_s_t_r_i_n_g_1a0d5a6c456f8e3ef4b4a5077031573df8" kindref="member">truncate_at</ref>(trunc_index);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>*trunc_path<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;./&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/ccutil/basedir.cpp"/>
  </compounddef>
</doxygen>
