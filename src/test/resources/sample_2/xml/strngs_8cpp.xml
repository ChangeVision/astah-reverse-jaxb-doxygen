<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="strngs_8cpp" kind="file">
    <compoundname>strngs.cpp</compoundname>
    <includes refid="mfcpch_8h" local="yes">mfcpch.h</includes>
    <includes refid="helpers_8h" local="yes">helpers.h</includes>
    <includes refid="tprintf_8h" local="yes">tprintf.h</includes>
    <includes refid="strngs_8h" local="yes">strngs.h</includes>
    <includes refid="genericvector_8h" local="yes">genericvector.h</includes>
    <includes local="no">assert.h</includes>
    <incdepgraph>
      <node id="20240">
        <label>assert.h</label>
      </node>
      <node id="20223">
        <label>mfcpch.h</label>
        <link refid="mfcpch_8h"/>
      </node>
      <node id="20236">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="20230">
        <label>stdlib.h</label>
      </node>
      <node id="20233">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="20234" relation="include">
        </childnode>
      </node>
      <node id="20239">
        <label>stddef.h</label>
      </node>
      <node id="20235">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="20232" relation="include">
        </childnode>
      </node>
      <node id="20234">
        <label>limits.h</label>
      </node>
      <node id="20226">
        <label>string.h</label>
      </node>
      <node id="20231">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="20232" relation="include">
        </childnode>
      </node>
      <node id="20228">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="20225" relation="include">
        </childnode>
        <childnode refid="20229" relation="include">
        </childnode>
        <childnode refid="20237" relation="include">
        </childnode>
      </node>
      <node id="20229">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="20225" relation="include">
        </childnode>
        <childnode refid="20230" relation="include">
        </childnode>
        <childnode refid="20231" relation="include">
        </childnode>
        <childnode refid="20235" relation="include">
        </childnode>
        <childnode refid="20224" relation="include">
        </childnode>
        <childnode refid="20236" relation="include">
        </childnode>
      </node>
      <node id="20238">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="20239" relation="include">
        </childnode>
        <childnode refid="20232" relation="include">
        </childnode>
      </node>
      <node id="20227">
        <label>tprintf.h</label>
        <link refid="tprintf_8h"/>
        <childnode refid="20228" relation="include">
        </childnode>
      </node>
      <node id="20232">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="20233" relation="include">
        </childnode>
      </node>
      <node id="20225">
        <label>stdio.h</label>
      </node>
      <node id="20222">
        <label>ccutil/strngs.cpp</label>
        <link refid="strngs.cpp"/>
        <childnode refid="20223" relation="include">
        </childnode>
        <childnode refid="20224" relation="include">
        </childnode>
        <childnode refid="20227" relation="include">
        </childnode>
        <childnode refid="20237" relation="include">
        </childnode>
        <childnode refid="20229" relation="include">
        </childnode>
        <childnode refid="20240" relation="include">
        </childnode>
      </node>
      <node id="20237">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="20225" relation="include">
        </childnode>
        <childnode refid="20226" relation="include">
        </childnode>
        <childnode refid="20233" relation="include">
        </childnode>
        <childnode refid="20238" relation="include">
        </childnode>
      </node>
      <node id="20224">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="20225" relation="include">
        </childnode>
        <childnode refid="20226" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="strngs_8cpp_1a98ff26a02a0502569b1676ed30fb1b40" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int kMaxIntSize</definition>
        <argsstring></argsstring>
        <name>kMaxIntSize</name>
        <initializer>= 22</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccutil/strngs.cpp" line="29" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccutil/strngs.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="strngs_8cpp_1a927f7d5b361de249344c06b29aa6ca27" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int kMinCapacity</definition>
        <argsstring></argsstring>
        <name>kMinCapacity</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccutil/strngs.cpp" line="45" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccutil/strngs.cpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strngs.c<sp/><sp/>(Formerly<sp/>strings.c)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Description:<sp/>STRING<sp/>class<sp/>functions.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ray<sp/>Smith</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Created:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fri<sp/>Feb<sp/>15<sp/>09:13:30<sp/>GMT<sp/>1991</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>(C)<sp/>Copyright<sp/>1991,<sp/>Hewlett-Packard<sp/>Ltd.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>**<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>**<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>**<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>**<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>**<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>**<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>**<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>**<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>**<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<ref refid="mfcpch_8h" kindref="compound">mfcpch.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Precompiled<sp/>headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<ref refid="helpers_8h" kindref="compound">helpers.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<ref refid="tprintf_8h" kindref="compound">tprintf.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<ref refid="strngs_8h" kindref="compound">strngs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<ref refid="genericvector_8h" kindref="compound">genericvector.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Size<sp/>of<sp/>buffer<sp/>needed<sp/>to<sp/>host<sp/>the<sp/>decimal<sp/>representation<sp/>of<sp/>the<sp/>maximum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>possible<sp/>length<sp/>of<sp/>an<sp/>int<sp/>(in<sp/>64<sp/>bits,<sp/>being<sp/>-&lt;20<sp/>digits&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="strngs_8cpp_1a98ff26a02a0502569b1676ed30fb1b40" kindref="member">kMaxIntSize</ref><sp/>=<sp/>22;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>STRING_HEADER<sp/>provides<sp/>metadata<sp/>about<sp/>the<sp/>allocated<sp/>buffer,</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>including<sp/>total<sp/>capacity<sp/>and<sp/>how<sp/>much<sp/>used<sp/>(strlen<sp/>with<sp/>&apos;\0&apos;).</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>The<sp/>implementation<sp/>hides<sp/>this<sp/>header<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>buffer<sp/>and<sp/>appends<sp/>the<sp/>string<sp/>on<sp/>the<sp/>end<sp/>to<sp/>keep<sp/>sizeof(STRING)</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>unchanged<sp/>from<sp/>earlier<sp/>versions<sp/>so<sp/>serialization<sp/>is<sp/>not<sp/>affected.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>The<sp/>collection<sp/>of<sp/>MACROS<sp/>provide<sp/>different<sp/>implementations<sp/>depending</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>on<sp/>whether<sp/>the<sp/>string<sp/>keeps<sp/>track<sp/>of<sp/>its<sp/>strlen<sp/>or<sp/>not<sp/>so<sp/>that<sp/>this</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>feature<sp/>can<sp/>be<sp/>added<sp/>in<sp/>later<sp/>when<sp/>consumers<sp/>dont<sp/>modifify<sp/>the<sp/>string</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Smallest<sp/>string<sp/>to<sp/>allocate<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="strngs_8cpp_1a927f7d5b361de249344c06b29aa6ca27" kindref="member">kMinCapacity</ref><sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>STRING::AllocData(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>used,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>capacity)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>data_<sp/>=<sp/>(STRING_HEADER<sp/>*)<ref refid="memry_8cpp_1a29cbb5255dbc65a22c2a47c21480f264" kindref="member">alloc_string</ref>(capacity<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(STRING_HEADER));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>header<sp/>is<sp/>the<sp/>metadata<sp/>for<sp/>this<sp/>memory<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>STRING_HEADER*<sp/>header<sp/>=<sp/>GetHeader();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>header-&gt;capacity_<sp/>=<sp/>capacity;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>header-&gt;used_<sp/>=<sp/>used;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetCStr();</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>STRING::DiscardData()<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="memry_8cpp_1aadab03126da19fefc98afefc9549d5c3" kindref="member">free_string</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data_);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>private<sp/>method;<sp/>ensure<sp/>FixHeader<sp/>is<sp/>called<sp/>(or<sp/>used_<sp/>is<sp/>well<sp/>defined)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>beforehand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>STRING::ensure_cstr(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>min_capacity)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>STRING_HEADER*<sp/>orig_header<sp/>=<sp/>GetHeader();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_capacity<sp/>&lt;=<sp/>orig_header-&gt;capacity_)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)this-&gt;data_)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(STRING_HEADER);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>are<sp/>going<sp/>to<sp/>grow<sp/>bigger,<sp/>than<sp/>double<sp/>our<sp/>existing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>size,<sp/>but<sp/>if<sp/>that<sp/>still<sp/>is<sp/>not<sp/>big<sp/>enough<sp/>then<sp/>keep<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>requested<sp/>capacity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_capacity<sp/>&lt;<sp/>2<sp/>*<sp/>orig_header-&gt;capacity_)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>min_capacity<sp/>=<sp/>2<sp/>*<sp/>orig_header-&gt;capacity_;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alloc<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(STRING_HEADER)<sp/>+<sp/>min_capacity;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>STRING_HEADER*<sp/>new_header<sp/>=<sp/>(STRING_HEADER*)(<ref refid="memry_8cpp_1a29cbb5255dbc65a22c2a47c21480f264" kindref="member">alloc_string</ref>(alloc));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>memcpy(&amp;new_header[1],<sp/>GetCStr(),<sp/>orig_header-&gt;used_);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>new_header-&gt;capacity_<sp/>=<sp/>min_capacity;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>new_header-&gt;used_<sp/>=<sp/>orig_header-&gt;used_;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>old<sp/>memory,<sp/>then<sp/>rebind<sp/>to<sp/>new<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>DiscardData();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>data_<sp/>=<sp/>new_header;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>assert(InvariantOk());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data_)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(STRING_HEADER);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>const,<sp/>but<sp/>is<sp/>modifying<sp/>a<sp/>mutable<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>way<sp/>it<sp/>can<sp/>be<sp/>used<sp/>on<sp/>const<sp/>or<sp/>non-const<sp/>instances.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>STRING::FixHeader()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>STRING_HEADER*<sp/>header<sp/>=<sp/>GetHeader();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header-&gt;used_<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>header-&gt;used_<sp/>=<sp/>strlen(GetCStr())<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><ref refid="class_s_t_r_i_n_g_1a1c63ec33ab6f6afeb82827be3d4e6ab0" kindref="member">STRING::STRING</ref>()<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>STRINGs<sp/>contain<sp/>just<sp/>the<sp/>&quot;\0&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>memcpy(AllocData(1,<sp/><ref refid="strngs_8cpp_1a927f7d5b361de249344c06b29aa6ca27" kindref="member">kMinCapacity</ref>),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><ref refid="class_s_t_r_i_n_g_1a1c63ec33ab6f6afeb82827be3d4e6ab0" kindref="member">STRING::STRING</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>str.FixHeader();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>STRING_HEADER*<sp/>str_header<sp/><sp/>=<sp/>str.GetHeader();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>str_used<sp/><sp/>=<sp/>str_header-&gt;used_;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*this_cstr<sp/>=<sp/>AllocData(str_used,<sp/>str_used);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>memcpy(this_cstr,<sp/>str.GetCStr(),<sp/>str_used);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>assert(InvariantOk());</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><ref refid="class_s_t_r_i_n_g_1a1c63ec33ab6f6afeb82827be3d4e6ab0" kindref="member">STRING::STRING</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cstr)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cstr<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>STRINGs<sp/>contain<sp/>just<sp/>the<sp/>&quot;\0&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(AllocData(1,<sp/><ref refid="strngs_8cpp_1a927f7d5b361de249344c06b29aa6ca27" kindref="member">kMinCapacity</ref>),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(cstr)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>this_cstr<sp/>=<sp/>AllocData(len,<sp/>len);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(this_cstr,<sp/>cstr,<sp/>len);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>assert(InvariantOk());</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><ref refid="class_s_t_r_i_n_g_1a21efec4fdaf6c7bc96be3c634b4f6b7f" kindref="member">STRING::~STRING</ref>()<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>DiscardData();</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>to<sp/>the<sp/>given<sp/>file.<sp/>Returns<sp/>false<sp/>in<sp/>case<sp/>of<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g_1ad2e7e107c5f78f7f716e7688b1cc2d4a" kindref="member">STRING::Serialize</ref>(FILE*<sp/>fp)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>len<sp/>=<sp/><ref refid="class_s_t_r_i_n_g_1a168505a533eda60219c93e25adf4cdc5" kindref="member">length</ref>();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite(&amp;len,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(len),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite(GetCStr(),<sp/>1,<sp/>len,<sp/>fp)<sp/>!=<sp/>len)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>from<sp/>the<sp/>given<sp/>file.<sp/>Returns<sp/>false<sp/>in<sp/>case<sp/>of<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>swap<sp/>is<sp/>true,<sp/>assumes<sp/>a<sp/>big/little-endian<sp/>swap<sp/>is<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g_1addf44387285a0498e500b934eb7825f8" kindref="member">STRING::DeSerialize</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>swap,<sp/>FILE*<sp/>fp)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>len;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;len,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(len),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swap)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="helpers_8h_1ae7eeeca49954d4b13d269729f2fecd5a" kindref="member">ReverseN</ref>(&amp;len,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(len));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><ref refid="class_s_t_r_i_n_g_1a0d5a6c456f8e3ef4b4a5077031573df8" kindref="member">truncate_at</ref>(len);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(GetCStr(),<sp/>1,<sp/>len,<sp/>fp)<sp/>!=<sp/>len)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><ref refid="host_8h_1a7712a7e28433d0ade59219a129549b6f" kindref="member">BOOL8</ref><sp/><ref refid="class_s_t_r_i_n_g_1ad4c1a804168d9442f125944e7eb5159d" kindref="member">STRING::contains</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(strchr<sp/>(GetCStr(),<sp/>c)<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/><ref refid="class_s_t_r_i_n_g_1a168505a533eda60219c93e25adf4cdc5" kindref="member">STRING::length</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>FixHeader();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetHeader()-&gt;used_<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="class_s_t_r_i_n_g_1a32beee43ecab1bed8bebc3466896ad6e" kindref="member">STRING::string</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>STRING_HEADER*<sp/>header<sp/>=<sp/>GetHeader();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header-&gt;used_<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mark<sp/>header<sp/>length<sp/>unreliable<sp/>because<sp/>tesseract<sp/>might</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cast<sp/>away<sp/>the<sp/>const<sp/>and<sp/>mutate<sp/>the<sp/>string<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>header-&gt;used_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetCStr();</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/******</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>The<sp/>STRING_IS_PROTECTED<sp/>interface<sp/>adds<sp/>additional<sp/>support<sp/>to<sp/>migrate</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>code<sp/>that<sp/>needs<sp/>to<sp/>modify<sp/>the<sp/>STRING<sp/>in<sp/>ways<sp/>not<sp/>otherwise<sp/>supported</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>without<sp/>violating<sp/>encapsulation.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>Also<sp/>makes<sp/>the<sp/>[]<sp/>operator<sp/>return<sp/>a<sp/>const<sp/>so<sp/>it<sp/>is<sp/>immutable</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>STRING_IS_PROTECTED</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&amp;<sp/><ref refid="class_s_t_r_i_n_g_1a936654344db4a72af300d466b88b7aa8" kindref="member">STRING::operator[]</ref>(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetCStr()[index];</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>STRING::insert_range(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>index<sp/>is<sp/>outside<sp/>current<sp/>range,<sp/>then<sp/>also<sp/>grow<sp/>size<sp/>of<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>accmodate<sp/>the<sp/>requested<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>STRING_HEADER*<sp/>this_header<sp/>=<sp/>GetHeader();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>used<sp/>=<sp/>this_header-&gt;used_;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>used)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>used<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>this_cstr<sp/>=<sp/>ensure_cstr(used<sp/>+<sp/>len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>used)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>existing<sp/>string<sp/>from<sp/>index<sp/>to<sp/>&apos;\0&apos;<sp/>inclusive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(this_cstr<sp/>+<sp/>index<sp/>+<sp/>len,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this_cstr<sp/>+<sp/>index,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this_header-&gt;used_<sp/>-<sp/>index);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>going<sp/>to<sp/>overwrite<sp/>previous<sp/>null<sp/>terminator,<sp/>so<sp/>write<sp/>the<sp/>new<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>this_cstr[this_header-&gt;used_<sp/>+<sp/>len<sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>old<sp/>header<sp/>did<sp/>not<sp/>have<sp/>the<sp/>terminator,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>we<sp/>need<sp/>to<sp/>account<sp/>for<sp/>it<sp/>now<sp/>that<sp/>we&apos;ve<sp/>added<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>it<sp/>was<sp/>already<sp/>accounted<sp/>for;<sp/>we<sp/>just<sp/>moved<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this_header-&gt;used_<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++this_header-&gt;used_;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>new<sp/>string<sp/>to<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>string<sp/>is<sp/>already<sp/>terminated<sp/>from<sp/>the<sp/>conditions<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>memcpy(this_cstr<sp/>+<sp/>index,<sp/>str,<sp/>len);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>this_header-&gt;used_<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>assert(InvariantOk());</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>STRING::erase_range(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>this_cstr<sp/>=<sp/>GetCStr();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>STRING_HEADER*<sp/>this_header<sp/>=<sp/>GetHeader();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>memcpy(this_cstr+index,<sp/>this_cstr+index+len,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this_header-&gt;used_<sp/>-<sp/>index<sp/>-<sp/>len);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>this_header-&gt;used_<sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>assert(InvariantOk());</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g_1a0d5a6c456f8e3ef4b4a5077031573df8" kindref="member">STRING::truncate_at</ref>(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>this_cstr<sp/>=<sp/>ensure_cstr(index<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>this_cstr[index]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>GetHeader()-&gt;used_<sp/>=<sp/>index<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>assert(InvariantOk());</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&amp;<sp/><ref refid="class_s_t_r_i_n_g_1a936654344db4a72af300d466b88b7aa8" kindref="member">STRING::operator[]</ref>(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Code<sp/>is<sp/>casting<sp/>away<sp/>this<sp/>const<sp/>and<sp/>mutating<sp/>the<sp/>string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>mark<sp/>used_<sp/>as<sp/>-1<sp/>to<sp/>flag<sp/>it<sp/>unreliable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>GetHeader()-&gt;used_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)GetCStr())[index];</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g_1a70cb880f818d4af4a4f4036032c3e9dc" kindref="member">STRING::split</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;STRING&gt;</ref><sp/>*splited)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_s_t_r_i_n_g_1a168505a533eda60219c93e25adf4cdc5" kindref="member">length</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i]<sp/>==<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>start_index)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>tmp<sp/>=<sp/>GetCStr()<sp/>+<sp/>start_index;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splited-&gt;<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(tmp);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start_index<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_t_r_i_n_g_1a168505a533eda60219c93e25adf4cdc5" kindref="member">length</ref>()<sp/>!=<sp/>start_index)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>tmp<sp/>=<sp/>GetCStr()<sp/>+<sp/>start_index;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>splited-&gt;<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(tmp);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><ref refid="host_8h_1a7712a7e28433d0ade59219a129549b6f" kindref="member">BOOL8</ref><sp/><ref refid="class_s_t_r_i_n_g_1a69fa65451960a21d0555da5ae2cad9b2" kindref="member">STRING::operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>&amp;<sp/>str)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>FixHeader();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>str.FixHeader();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>STRING_HEADER*<sp/>str_header<sp/>=<sp/>str.GetHeader();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>STRING_HEADER*<sp/>this_header<sp/>=<sp/>GetHeader();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>this_used<sp/>=<sp/>this_header-&gt;used_;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_used<sp/><sp/>=<sp/>str_header-&gt;used_;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this_used<sp/>==<sp/>str_used)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(memcmp(GetCStr(),<sp/>str.GetCStr(),<sp/>this_used)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><ref refid="host_8h_1a7712a7e28433d0ade59219a129549b6f" kindref="member">BOOL8</ref><sp/><ref refid="class_s_t_r_i_n_g_1a7de200e4b367759b370e9b610de05490" kindref="member">STRING::operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>&amp;<sp/>str)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>FixHeader();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>str.FixHeader();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>STRING_HEADER*<sp/>str_header<sp/>=<sp/>str.GetHeader();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>STRING_HEADER*<sp/>this_header<sp/>=<sp/>GetHeader();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>this_used<sp/>=<sp/>this_header-&gt;used_;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_used<sp/><sp/>=<sp/>str_header-&gt;used_;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this_used<sp/>!=<sp/>str_used)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(memcmp(GetCStr(),<sp/>str.GetCStr(),<sp/>this_used)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><ref refid="host_8h_1a7712a7e28433d0ade59219a129549b6f" kindref="member">BOOL8</ref><sp/><ref refid="class_s_t_r_i_n_g_1a7de200e4b367759b370e9b610de05490" kindref="member">STRING::operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cstr)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>FixHeader();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>STRING_HEADER*<sp/>this_header<sp/>=<sp/>GetHeader();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cstr<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this_header-&gt;used_<sp/>&gt;<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>either<sp/>&apos;\0&apos;<sp/>or<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/><ref refid="class_s_t_r_i_n_g_1a168505a533eda60219c93e25adf4cdc5" kindref="member">length</ref><sp/>=<sp/>strlen(cstr)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this_header-&gt;used_<sp/>!=<sp/>length)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(memcmp(GetCStr(),<sp/>cstr,<sp/>length)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>&amp;<sp/><ref refid="class_s_t_r_i_n_g_1a6db60c4e6e34865155a64e1b1fdca5cb" kindref="member">STRING::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>str.FixHeader();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>STRING_HEADER*<sp/>str_header<sp/>=<sp/>str.GetHeader();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>str_used<sp/>=<sp/>str_header-&gt;used_;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>GetHeader()-&gt;used_<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>since<sp/>ensure<sp/>doesnt<sp/>need<sp/>to<sp/>copy<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>this_cstr<sp/>=<sp/>ensure_cstr(str_used);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>STRING_HEADER*<sp/>this_header<sp/>=<sp/>GetHeader();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>memcpy(this_cstr,<sp/>str.GetCStr(),<sp/>str_used);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>this_header-&gt;used_<sp/>=<sp/>str_used;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>assert(InvariantOk());</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>&amp;<sp/><ref refid="class_s_t_r_i_n_g_1af223fab2ff1f3ff775308cd615705b3f" kindref="member">STRING::operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>FixHeader();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>str.FixHeader();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>STRING_HEADER*<sp/>str_header<sp/>=<sp/>str.GetHeader();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str_cstr<sp/>=<sp/>str.GetCStr();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>str_used<sp/><sp/>=<sp/>str_header-&gt;used_;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>this_used<sp/>=<sp/>GetHeader()-&gt;used_;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>this_cstr<sp/>=<sp/>ensure_cstr(this_used<sp/>+<sp/>str_used);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>STRING_HEADER*<sp/>this_header<sp/>=<sp/>GetHeader();<sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>ensure<sp/>for<sp/>realloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this_used<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(this_cstr<sp/>+<sp/>this_used<sp/>-<sp/>1,<sp/>str_cstr,<sp/>str_used);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>this_header-&gt;used_<sp/>+=<sp/>str_used<sp/>-<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>overwrite<sp/>&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(this_cstr,<sp/>str_cstr,<sp/>str_used);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>this_header-&gt;used_<sp/>=<sp/>str_used;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>assert(InvariantOk());</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g_1a779cd637dd42d58d5500a3a657077e84" kindref="member">STRING::add_str_int</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+=<sp/>str;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>space<sp/>for<sp/>the<sp/>maximum<sp/>possible<sp/>length<sp/>of<sp/>inT64.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>num_buffer[<ref refid="strngs_8cpp_1a98ff26a02a0502569b1676ed30fb1b40" kindref="member">kMaxIntSize</ref>];</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>snprintf(num_buffer,<sp/><ref refid="strngs_8cpp_1a98ff26a02a0502569b1676ed30fb1b40" kindref="member">kMaxIntSize</ref><sp/>-<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>number);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>num_buffer[<ref refid="strngs_8cpp_1a98ff26a02a0502569b1676ed30fb1b40" kindref="member">kMaxIntSize</ref><sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+=<sp/>num_buffer;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>&amp;<sp/><ref refid="class_s_t_r_i_n_g_1a6db60c4e6e34865155a64e1b1fdca5cb" kindref="member">STRING::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cstr)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>STRING_HEADER*<sp/>this_header<sp/>=<sp/>GetHeader();</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cstr)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(cstr)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>this_header-&gt;used_<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>dont<sp/>bother<sp/>copying<sp/>data<sp/>if<sp/>need<sp/>to<sp/>realloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>this_cstr<sp/>=<sp/>ensure_cstr(len);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>this_header<sp/>=<sp/>GetHeader();<sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>realloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(this_cstr,<sp/>cstr,<sp/>len);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>this_header-&gt;used_<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reallocate<sp/>to<sp/>same<sp/>state<sp/>as<sp/>default<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>DiscardData();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>STRINGs<sp/>contain<sp/>just<sp/>the<sp/>&quot;\0&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(AllocData(1,<sp/><ref refid="strngs_8cpp_1a927f7d5b361de249344c06b29aa6ca27" kindref="member">kMinCapacity</ref>),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>assert(InvariantOk());</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g_1a8cfe836a7f55f4761936ea2231b6b9d2" kindref="member">STRING::assign</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cstr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>STRING_HEADER*<sp/>this_header<sp/>=<sp/>GetHeader();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>this_header-&gt;used_<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>dont<sp/>bother<sp/>copying<sp/>data<sp/>if<sp/>need<sp/>to<sp/>realloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>this_cstr<sp/>=<sp/>ensure_cstr(len<sp/>+<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>+1<sp/>for<sp/>&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>this_header<sp/>=<sp/>GetHeader();<sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>realloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>memcpy(this_cstr,<sp/>cstr,<sp/>len);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>this_cstr[len]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>this_header-&gt;used_<sp/>=<sp/>len<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>assert(InvariantOk());</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/><ref refid="class_s_t_r_i_n_g_1a7072304f2deae96e520b93b44a37424b" kindref="member">STRING::operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>&amp;<sp/>str)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>result(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>result<sp/>+=<sp/>str;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>assert(InvariantOk());</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/><ref refid="class_s_t_r_i_n_g_1a7072304f2deae96e520b93b44a37424b" kindref="member">STRING::operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>result;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>FixHeader();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>STRING_HEADER*<sp/>this_header<sp/>=<sp/>GetHeader();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>this_used<sp/>=<sp/>this_header-&gt;used_;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>result_cstr<sp/>=<sp/>result.ensure_cstr(this_used<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>STRING_HEADER*<sp/>result_header<sp/>=<sp/>result.GetHeader();</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result_used<sp/>=<sp/>result_header-&gt;used_;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copies<sp/>&apos;\0&apos;<sp/>but<sp/>we&apos;ll<sp/>overwrite<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>memcpy(result_cstr,<sp/>GetCStr(),<sp/>this_used);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>result_cstr[result_used]<sp/>=<sp/>ch;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overwrite<sp/>old<sp/>&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>result_cstr[result_used<sp/>+<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>append<sp/>on<sp/>&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>++result_header-&gt;used_;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>assert(InvariantOk());</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>&amp;<sp/><sp/><ref refid="class_s_t_r_i_n_g_1af223fab2ff1f3ff775308cd615705b3f" kindref="member">STRING::operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!str<sp/>||<sp/>!*str)<sp/><sp/></highlight><highlight class="comment">//<sp/>empty<sp/>string<sp/>has<sp/>no<sp/>effect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>FixHeader();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(str)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>this_used<sp/>=<sp/>GetHeader()-&gt;used_;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>this_cstr<sp/>=<sp/>ensure_cstr(this_used<sp/>+<sp/>len);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>STRING_HEADER*<sp/>this_header<sp/>=<sp/>GetHeader();<sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>ensure<sp/>for<sp/>realloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>had<sp/>non-empty<sp/>string<sp/>then<sp/>append<sp/>overwriting<sp/>old<sp/>&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>replace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this_used<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(this_cstr<sp/>+<sp/>this_used<sp/>-<sp/>1,<sp/>str,<sp/>len);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>this_header-&gt;used_<sp/>+=<sp/>len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(this_cstr,<sp/>str,<sp/>len);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>this_header-&gt;used_<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>assert(InvariantOk());</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>&amp;<sp/><ref refid="class_s_t_r_i_n_g_1af223fab2ff1f3ff775308cd615705b3f" kindref="member">STRING::operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>FixHeader();</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>this_used<sp/>=<sp/>GetHeader()-&gt;used_;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>this_cstr<sp/>=<sp/>ensure_cstr(this_used<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>STRING_HEADER*<sp/>this_header<sp/>=<sp/>GetHeader();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this_used<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>--this_used;<sp/></highlight><highlight class="comment">//<sp/>undo<sp/>old<sp/>empty<sp/>null<sp/>if<sp/>there<sp/>was<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>this_cstr[this_used++]<sp/>=<sp/>ch;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>append<sp/>ch<sp/>to<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>this_cstr[this_used++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>append<sp/>&apos;\0&apos;<sp/>after<sp/>ch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>this_header-&gt;used_<sp/>=<sp/>this_used;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>assert(InvariantOk());</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/ccutil/strngs.cpp"/>
  </compounddef>
</doxygen>
