<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="cube__search__object_8cpp" kind="file">
    <compoundname>cube_search_object.cpp</compoundname>
    <includes refid="cube__search__object_8h" local="yes">cube_search_object.h</includes>
    <includes refid="cube__utils_8h" local="yes">cube_utils.h</includes>
    <includes refid="ndminx_8h" local="yes">ndminx.h</includes>
    <incdepgraph>
      <node id="30315">
        <label>cube_reco_context.h</label>
        <link refid="cube__reco__context_8h"/>
        <childnode refid="30282" relation="include">
        </childnode>
        <childnode refid="30316" relation="include">
        </childnode>
        <childnode refid="30319" relation="include">
        </childnode>
        <childnode refid="30323" relation="include">
        </childnode>
        <childnode refid="30324" relation="include">
        </childnode>
        <childnode refid="30285" relation="include">
        </childnode>
        <childnode refid="30325" relation="include">
        </childnode>
        <childnode refid="30326" relation="include">
        </childnode>
        <childnode refid="30327" relation="include">
        </childnode>
      </node>
      <node id="30301">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="30284">
        <label>const.h</label>
        <link refid="const_8h"/>
      </node>
      <node id="30297">
        <label>stdlib.h</label>
      </node>
      <node id="30319">
        <label>lang_model.h</label>
        <link refid="lang__model_8h"/>
        <childnode refid="30320" relation="include">
        </childnode>
        <childnode refid="30277" relation="include">
        </childnode>
        <childnode refid="30285" relation="include">
        </childnode>
        <childnode refid="30322" relation="include">
        </childnode>
      </node>
      <node id="30292">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="30293" relation="include">
        </childnode>
      </node>
      <node id="30317">
        <label>neuron.h</label>
        <link refid="neuron_8h"/>
        <childnode refid="30279" relation="include">
        </childnode>
        <childnode refid="30281" relation="include">
        </childnode>
      </node>
      <node id="30283">
        <label>allheaders.h</label>
      </node>
      <node id="30316">
        <label>neural_net.h</label>
        <link refid="neural__net_8h"/>
        <childnode refid="30282" relation="include">
        </childnode>
        <childnode refid="30281" relation="include">
        </childnode>
        <childnode refid="30317" relation="include">
        </childnode>
        <childnode refid="30318" relation="include">
        </childnode>
      </node>
      <node id="30282">
        <label>string</label>
      </node>
      <node id="30328">
        <label>conv_net_classifier.h</label>
        <link refid="conv__net__classifier_8h"/>
        <childnode refid="30282" relation="include">
        </childnode>
        <childnode refid="30310" relation="include">
        </childnode>
        <childnode refid="30277" relation="include">
        </childnode>
        <childnode refid="30285" relation="include">
        </childnode>
        <childnode refid="30324" relation="include">
        </childnode>
        <childnode refid="30323" relation="include">
        </childnode>
        <childnode refid="30316" relation="include">
        </childnode>
        <childnode refid="30319" relation="include">
        </childnode>
        <childnode refid="30322" relation="include">
        </childnode>
      </node>
      <node id="30304">
        <label>stddef.h</label>
      </node>
      <node id="30307">
        <label>memory.h</label>
      </node>
      <node id="30324">
        <label>feature_base.h</label>
        <link refid="feature__base_8h"/>
        <childnode refid="30310" relation="include">
        </childnode>
        <childnode refid="30322" relation="include">
        </childnode>
      </node>
      <node id="30322">
        <label>tuning_params.h</label>
        <link refid="tuning__params_8h"/>
        <childnode refid="30282" relation="include">
        </childnode>
      </node>
      <node id="30299">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="30291" relation="include">
        </childnode>
      </node>
      <node id="30326">
        <label>char_bigrams.h</label>
        <link refid="char__bigrams_8h"/>
        <childnode refid="30282" relation="include">
        </childnode>
        <childnode refid="30285" relation="include">
        </childnode>
      </node>
      <node id="30323">
        <label>classifier_base.h</label>
        <link refid="classifier__base_8h"/>
        <childnode refid="30282" relation="include">
        </childnode>
        <childnode refid="30310" relation="include">
        </childnode>
        <childnode refid="30277" relation="include">
        </childnode>
        <childnode refid="30285" relation="include">
        </childnode>
        <childnode refid="30324" relation="include">
        </childnode>
        <childnode refid="30319" relation="include">
        </childnode>
        <childnode refid="30322" relation="include">
        </childnode>
      </node>
      <node id="30293">
        <label>limits.h</label>
      </node>
      <node id="30310">
        <label>char_samp.h</label>
        <link refid="char__samp_8h"/>
        <childnode refid="30297" relation="include">
        </childnode>
        <childnode refid="30290" relation="include">
        </childnode>
        <childnode refid="30282" relation="include">
        </childnode>
        <childnode refid="30311" relation="include">
        </childnode>
        <childnode refid="30288" relation="include">
        </childnode>
      </node>
      <node id="30285">
        <label>char_set.h</label>
        <link refid="char__set_8h"/>
        <childnode refid="30286" relation="include">
        </childnode>
        <childnode refid="30282" relation="include">
        </childnode>
        <childnode refid="30287" relation="include">
        </childnode>
        <childnode refid="30288" relation="include">
        </childnode>
        <childnode refid="30289" relation="include">
        </childnode>
        <childnode refid="30305" relation="include">
        </childnode>
        <childnode refid="30309" relation="include">
        </childnode>
      </node>
      <node id="30286">
        <label>string.h</label>
      </node>
      <node id="30308">
        <label>unicharmap.h</label>
        <link refid="unicharmap_8h"/>
        <childnode refid="30306" relation="include">
        </childnode>
      </node>
      <node id="30306">
        <label>unichar.h</label>
        <link refid="unichar_8h"/>
        <childnode refid="30307" relation="include">
        </childnode>
        <childnode refid="30286" relation="include">
        </childnode>
      </node>
      <node id="30274">
        <label>cube/cube_search_object.cpp</label>
        <link refid="cube_search_object.cpp"/>
        <childnode refid="30275" relation="include">
        </childnode>
        <childnode refid="30280" relation="include">
        </childnode>
        <childnode refid="30301" relation="include">
        </childnode>
      </node>
      <node id="30280">
        <label>cube_utils.h</label>
        <link refid="cube__utils_8h"/>
        <childnode refid="30281" relation="include">
        </childnode>
        <childnode refid="30282" relation="include">
        </childnode>
        <childnode refid="30283" relation="include">
        </childnode>
        <childnode refid="30284" relation="include">
        </childnode>
        <childnode refid="30285" relation="include">
        </childnode>
        <childnode refid="30310" relation="include">
        </childnode>
        <childnode refid="30314" relation="include">
        </childnode>
      </node>
      <node id="30281">
        <label>vector</label>
      </node>
      <node id="30298">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="30291" relation="include">
        </childnode>
      </node>
      <node id="30279">
        <label>math.h</label>
      </node>
      <node id="30320">
        <label>lang_mod_edge.h</label>
        <link refid="lang__mod__edge_8h"/>
        <childnode refid="30321" relation="include">
        </childnode>
        <childnode refid="30285" relation="include">
        </childnode>
      </node>
      <node id="30295">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="30290" relation="include">
        </childnode>
        <childnode refid="30296" relation="include">
        </childnode>
        <childnode refid="30302" relation="include">
        </childnode>
      </node>
      <node id="30296">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="30290" relation="include">
        </childnode>
        <childnode refid="30297" relation="include">
        </childnode>
        <childnode refid="30298" relation="include">
        </childnode>
        <childnode refid="30299" relation="include">
        </childnode>
        <childnode refid="30300" relation="include">
        </childnode>
        <childnode refid="30301" relation="include">
        </childnode>
      </node>
      <node id="30303">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="30304" relation="include">
        </childnode>
        <childnode refid="30291" relation="include">
        </childnode>
      </node>
      <node id="30311">
        <label>bmp_8.h</label>
        <link refid="bmp__8_8h"/>
        <childnode refid="30297" relation="include">
        </childnode>
        <childnode refid="30290" relation="include">
        </childnode>
        <childnode refid="30312" relation="include">
        </childnode>
        <childnode refid="30313" relation="include">
        </childnode>
      </node>
      <node id="30312">
        <label>con_comp.h</label>
        <link refid="con__comp_8h"/>
      </node>
      <node id="30327">
        <label>word_unigrams.h</label>
        <link refid="word__unigrams_8h"/>
        <childnode refid="30282" relation="include">
        </childnode>
        <childnode refid="30285" relation="include">
        </childnode>
        <childnode refid="30319" relation="include">
        </childnode>
      </node>
      <node id="30321">
        <label>cube_tuning_params.h</label>
        <link refid="cube__tuning__params_8h"/>
        <childnode refid="30282" relation="include">
        </childnode>
        <childnode refid="30322" relation="include">
        </childnode>
      </node>
      <node id="30305">
        <label>unicharset.h</label>
        <link refid="unicharset_8h"/>
        <childnode refid="30299" relation="include">
        </childnode>
        <childnode refid="30300" relation="include">
        </childnode>
        <childnode refid="30302" relation="include">
        </childnode>
        <childnode refid="30298" relation="include">
        </childnode>
        <childnode refid="30306" relation="include">
        </childnode>
        <childnode refid="30308" relation="include">
        </childnode>
      </node>
      <node id="30277">
        <label>char_altlist.h</label>
        <link refid="char__altlist_8h"/>
        <childnode refid="30278" relation="include">
        </childnode>
        <childnode refid="30285" relation="include">
        </childnode>
      </node>
      <node id="30309">
        <label>cube_const.h</label>
        <link refid="cube__const_8h"/>
      </node>
      <node id="30314">
        <label>img.h</label>
        <link refid="img_8h"/>
        <childnode refid="30303" relation="include">
        </childnode>
      </node>
      <node id="30294">
        <label>tprintf.h</label>
        <link refid="tprintf_8h"/>
        <childnode refid="30295" relation="include">
        </childnode>
      </node>
      <node id="30287">
        <label>algorithm</label>
      </node>
      <node id="30291">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="30292" relation="include">
        </childnode>
      </node>
      <node id="30275">
        <label>cube_search_object.h</label>
        <link refid="cube__search__object_8h"/>
        <childnode refid="30276" relation="include">
        </childnode>
        <childnode refid="30310" relation="include">
        </childnode>
        <childnode refid="30328" relation="include">
        </childnode>
        <childnode refid="30315" relation="include">
        </childnode>
        <childnode refid="30283" relation="include">
        </childnode>
      </node>
      <node id="30325">
        <label>word_size_model.h</label>
        <link refid="word__size__model_8h"/>
        <childnode refid="30282" relation="include">
        </childnode>
        <childnode refid="30310" relation="include">
        </childnode>
        <childnode refid="30285" relation="include">
        </childnode>
      </node>
      <node id="30313">
        <label>cached_file.h</label>
        <link refid="cached__file_8h"/>
        <childnode refid="30290" relation="include">
        </childnode>
        <childnode refid="30282" relation="include">
        </childnode>
      </node>
      <node id="30290">
        <label>stdio.h</label>
      </node>
      <node id="30318">
        <label>input_file_buffer.h</label>
        <link refid="input__file__buffer_8h"/>
        <childnode refid="30290" relation="include">
        </childnode>
        <childnode refid="30282" relation="include">
        </childnode>
      </node>
      <node id="30288">
        <label>string_32.h</label>
        <link refid="string__32_8h"/>
        <childnode refid="30286" relation="include">
        </childnode>
        <childnode refid="30282" relation="include">
        </childnode>
        <childnode refid="30287" relation="include">
        </childnode>
        <childnode refid="30281" relation="include">
        </childnode>
      </node>
      <node id="30276">
        <label>search_object.h</label>
        <link refid="search__object_8h"/>
        <childnode refid="30277" relation="include">
        </childnode>
        <childnode refid="30310" relation="include">
        </childnode>
        <childnode refid="30315" relation="include">
        </childnode>
      </node>
      <node id="30289">
        <label>tessdatamanager.h</label>
        <link refid="tessdatamanager_8h"/>
        <childnode refid="30290" relation="include">
        </childnode>
        <childnode refid="30291" relation="include">
        </childnode>
        <childnode refid="30294" relation="include">
        </childnode>
      </node>
      <node id="30302">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="30290" relation="include">
        </childnode>
        <childnode refid="30286" relation="include">
        </childnode>
        <childnode refid="30292" relation="include">
        </childnode>
        <childnode refid="30303" relation="include">
        </childnode>
      </node>
      <node id="30278">
        <label>altlist.h</label>
        <link refid="altlist_8h"/>
        <childnode refid="30279" relation="include">
        </childnode>
        <childnode refid="30280" relation="include">
        </childnode>
      </node>
      <node id="30300">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="30290" relation="include">
        </childnode>
        <childnode refid="30286" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetesseract">tesseract</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cube_search_object.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Description:<sp/>Implementation<sp/>of<sp/>the<sp/>Cube<sp/>Search<sp/>Object<sp/>Class</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Author:<sp/><sp/><sp/><sp/>Ahmad<sp/>Abdulkader</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Created:<sp/><sp/><sp/>2007</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>(C)<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>**<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>**<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>**<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>**<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>**<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>**<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>**<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>**<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>**<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cube__search__object_8h" kindref="compound">cube_search_object.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cube__utils_8h" kindref="compound">cube_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ndminx_8h" kindref="compound">ndminx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesseract-c__api-demo_1afed58feacb84df2de88bdd613cfdba6d" kindref="member">tesseract</ref><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CubeSearchObject::kUseCroppedChars<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="classtesseract_1_1_cube_search_object_1ab16ae0d7623e509af1f8cdf7bda6991e" kindref="member">CubeSearchObject::CubeSearchObject</ref>(CubeRecoContext<sp/>*cntxt,<sp/>CharSamp<sp/>*samp)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>SearchObject(cntxt)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>init_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>reco_cache_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>samp_cache_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>segments_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>segment_cnt_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>samp_<sp/>=<sp/>samp;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>left_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>itop_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>space_cost_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>no_space_cost_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>wid_<sp/>=<sp/>samp_-&gt;Width();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>hgt_<sp/>=<sp/>samp_-&gt;Height();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>max_seg_per_char_<sp/>=<sp/>cntxt_-&gt;<ref refid="classtesseract_1_1_cube_reco_context_1addac767dbdf8405f9026848a17561556" kindref="member">Params</ref>()-&gt;<ref refid="classtesseract_1_1_tuning_params_1a36e53deafe8e2cb34f550ec456346d1f" kindref="member">MaxSegPerChar</ref>();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>rtl_<sp/>=<sp/>(cntxt_-&gt;<ref refid="classtesseract_1_1_cube_reco_context_1a7785b21e1f34ad3a5ca6f3c9f7b7d721" kindref="member">ReadingOrder</ref>()<sp/>==<sp/><ref refid="classtesseract_1_1_cube_reco_context_1ab885faf434ff0ab68d81e98d09486789ad086d7c90c84e60ff11c1363865d82b6" kindref="member">CubeRecoContext::R2L</ref>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>min_spc_gap_<sp/>=</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(hgt_<sp/>*<sp/>cntxt_-&gt;<ref refid="classtesseract_1_1_cube_reco_context_1addac767dbdf8405f9026848a17561556" kindref="member">Params</ref>()-&gt;<ref refid="classtesseract_1_1_tuning_params_1a6c6cb66ce40b97c6eab87072863b825b" kindref="member">MinSpaceHeightRatio</ref>());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>max_spc_gap_<sp/>=</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(hgt_<sp/>*<sp/>cntxt_-&gt;<ref refid="classtesseract_1_1_cube_reco_context_1addac767dbdf8405f9026848a17561556" kindref="member">Params</ref>()-&gt;<ref refid="classtesseract_1_1_tuning_params_1a4f71f5b62a82b2d1a859750d7022e0f2" kindref="member">MaxSpaceHeightRatio</ref>());</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="classtesseract_1_1_cube_search_object_1ad498d79124341911fa7f4605e4311ae9" kindref="member">CubeSearchObject::~CubeSearchObject</ref>()<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>Cleanup();</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CubeSearchObject::Cleanup()<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>Recognition<sp/>Cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reco_cache_)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strt_seg<sp/>=<sp/>0;<sp/>strt_seg<sp/>&lt;<sp/>segment_cnt_;<sp/>strt_seg++)<sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reco_cache_[strt_seg])<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end_seg<sp/>=<sp/>0;<sp/>end_seg<sp/>&lt;<sp/>segment_cnt_;<sp/>end_seg++)<sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reco_cache_[strt_seg][end_seg])<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>reco_cache_[strt_seg][end_seg];</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]reco_cache_[strt_seg];</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]reco_cache_;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>reco_cache_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>CharSamp<sp/>Cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(samp_cache_)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strt_seg<sp/>=<sp/>0;<sp/>strt_seg<sp/>&lt;<sp/>segment_cnt_;<sp/>strt_seg++)<sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(samp_cache_[strt_seg])<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end_seg<sp/>=<sp/>0;<sp/>end_seg<sp/>&lt;<sp/>segment_cnt_;<sp/>end_seg++)<sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(samp_cache_[strt_seg][end_seg])<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>samp_cache_[strt_seg][end_seg];</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]samp_cache_[strt_seg];</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]samp_cache_;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>samp_cache_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>segment<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segments_)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seg<sp/>=<sp/>0;<sp/>seg<sp/>&lt;<sp/>segment_cnt_;<sp/>seg++)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segments_[seg])<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>segments_[seg];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]segments_;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>segments_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(space_cost_)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]space_cost_;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>space_cost_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(no_space_cost_)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]no_space_cost_;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>no_space_cost_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>segment_cnt_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>init_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#<sp/>of<sp/>segmentation<sp/>points.<sp/>One<sp/>less<sp/>than<sp/>the<sp/>count<sp/>of<sp/>segments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_cube_search_object_1a7d5fb530cd7cade3a6b8f02c7b660dea" kindref="member">CubeSearchObject::SegPtCnt</ref>()<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!init_<sp/>&amp;&amp;<sp/>!Init())</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>segment_cnt_<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>init<sp/>and<sp/>allocate<sp/>variables,<sp/>perform<sp/>segmentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CubeSearchObject::Init()<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init_)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Segment())<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>reco_cache_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CharAltList<sp/>**[segment_cnt_];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reco_cache_<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cube<sp/>ERROR<sp/>(CubeSearchObject::Init):<sp/>could<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;allocate<sp/>CharAltList<sp/>array\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>samp_cache_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CharSamp<sp/>**[segment_cnt_];</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(samp_cache_<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cube<sp/>ERROR<sp/>(CubeSearchObject::Init):<sp/>could<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;allocate<sp/>CharSamp<sp/>array\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seg<sp/>=<sp/>0;<sp/>seg<sp/>&lt;<sp/>segment_cnt_;<sp/>seg++)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>reco_cache_[seg]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CharAltList<sp/>*[segment_cnt_];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reco_cache_[seg]<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cube<sp/>ERROR<sp/>(CubeSearchObject::Init):<sp/>could<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;allocate<sp/>a<sp/>single<sp/>segment&apos;s<sp/>CharAltList<sp/>array\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(reco_cache_[seg],<sp/>0,<sp/>segment_cnt_<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*reco_cache_[seg]));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>samp_cache_[seg]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CharSamp<sp/>*[segment_cnt_];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(samp_cache_[seg]<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cube<sp/>ERROR<sp/>(CubeSearchObject::Init):<sp/>could<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;allocate<sp/>a<sp/>single<sp/>segment&apos;s<sp/>CharSamp<sp/>array\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(samp_cache_[seg],<sp/>0,<sp/>segment_cnt_<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*samp_cache_[seg]));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>init_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>a<sp/>char<sp/>sample<sp/>corresponding<sp/>to<sp/>the<sp/>bitmap<sp/>between<sp/>2<sp/>seg<sp/>pts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">CharSamp<sp/>*<ref refid="classtesseract_1_1_cube_search_object_1a01aff334f72aba105a0ad4f30877a302" kindref="member">CubeSearchObject::CharSample</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_pt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end_pt)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!init_<sp/>&amp;&amp;<sp/>!Init())</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>validate<sp/>segment<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsValidSegmentRange(start_pt,<sp/>end_pt))</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>the<sp/>samp<sp/>in<sp/>the<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(samp_cache_<sp/>&amp;&amp;<sp/>samp_cache_[start_pt<sp/>+<sp/>1]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samp_cache_[start_pt<sp/>+<sp/>1][end_pt])<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>samp_cache_[start_pt<sp/>+<sp/>1][end_pt];</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>char<sp/>samp<sp/>object<sp/>from<sp/>the<sp/>specified<sp/>range<sp/>of<sp/>segments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>left_most;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>right_most;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>CharSamp<sp/>*samp<sp/>=<sp/><ref refid="classtesseract_1_1_char_samp_1a9236e114544d03207eb3005e1602c68d" kindref="member">CharSamp::FromConComps</ref>(segments_,<sp/>start_pt<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_pt<sp/>-<sp/>start_pt,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;left_most,<sp/>&amp;right_most,<sp/>hgt_);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!samp)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kUseCroppedChars)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>CharSamp<sp/>*cropped_samp<sp/>=<sp/>samp-&gt;Crop();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>no<sp/>longer<sp/>need<sp/>the<sp/>orig<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>samp;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cropped_samp)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>samp<sp/>=<sp/>cropped_samp;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>dimensions<sp/>of<sp/>the<sp/>new<sp/>cropped<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>char_top<sp/>=<sp/>samp-&gt;Top();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>char_wid<sp/>=<sp/>samp-&gt;Width();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>char_hgt<sp/>=<sp/>samp-&gt;Height();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>cursive<sp/>languages,<sp/>these<sp/>features<sp/>correspond<sp/>to<sp/>whether</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>charsamp<sp/>is<sp/>at<sp/>the<sp/>beginning<sp/>or<sp/>end<sp/>of<sp/>conncomp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtesseract_1_1_search_object_1af59efea2206aba120d36feb377fb57ae" kindref="member">cntxt_</ref>-&gt;<ref refid="classtesseract_1_1_cube_reco_context_1a7869e1e5cfe65dbfa4ca22940182749b" kindref="member">Cursive</ref>()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>and<sp/>last<sp/>char<sp/>flags<sp/>depend<sp/>on<sp/>reading<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first_char<sp/>=<sp/>rtl_<sp/>?<sp/>right_most<sp/>:<sp/>left_most;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>last_char<sp/>=<sp/>rtl_<sp/>?<sp/>left_most<sp/>:<sp/>right_most;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>samp-&gt;SetFirstChar(first_char<sp/>?<sp/>255<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>samp-&gt;SetLastChar(last_char<sp/>?<sp/>255<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>non<sp/>cursive<sp/>languages,<sp/>these<sp/>features<sp/>correspond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>whether<sp/>the<sp/>charsamp<sp/>is<sp/>at<sp/>the<sp/>begining<sp/>or<sp/>end<sp/>of<sp/>the<sp/>word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>samp-&gt;SetFirstChar((start_pt<sp/>==<sp/>-1)<sp/>?<sp/>255<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>samp-&gt;SetLastChar((end_pt<sp/>==<sp/>(segment_cnt_<sp/>-<sp/>1))<sp/>?<sp/>255<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>samp-&gt;SetNormTop(255<sp/>*<sp/>char_top<sp/>/<sp/>hgt_);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>samp-&gt;SetNormBottom(255<sp/>*<sp/>(char_top<sp/>+<sp/>char_hgt)<sp/>/<sp/>hgt_);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>samp-&gt;SetNormAspectRatio(255<sp/>*<sp/>char_wid<sp/>/<sp/>(char_wid<sp/>+<sp/>char_hgt));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>to<sp/>cache<sp/>&amp;<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>samp_cache_[start_pt<sp/>+<sp/>1][end_pt]<sp/>=<sp/>samp;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>samp;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">Box<sp/>*<ref refid="classtesseract_1_1_cube_search_object_1a019e32a2982b452d4c9759a905c95d10" kindref="member">CubeSearchObject::CharBox</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_pt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end_pt)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!init_<sp/>&amp;&amp;<sp/>!Init())</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsValidSegmentRange(start_pt,<sp/>end_pt))<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cube<sp/>ERROR<sp/>(CubeSearchObject::CharBox):<sp/>invalid<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;segment<sp/>range<sp/>(%d,<sp/>%d)\n&quot;</highlight><highlight class="normal">,<sp/>start_pt,<sp/>end_pt);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>char<sp/>samp<sp/>object<sp/>from<sp/>the<sp/>specified<sp/>range<sp/>of<sp/>segments,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>its<sp/>dimensions<sp/>into<sp/>a<sp/>leptonica<sp/>box,<sp/>and<sp/>delete<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>left_most;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>right_most;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>CharSamp<sp/>*samp<sp/>=<sp/><ref refid="classtesseract_1_1_char_samp_1a9236e114544d03207eb3005e1602c68d" kindref="member">CharSamp::FromConComps</ref>(segments_,<sp/>start_pt<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_pt<sp/>-<sp/>start_pt,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;left_most,<sp/>&amp;right_most,<sp/>hgt_);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!samp)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kUseCroppedChars)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>CharSamp<sp/>*cropped_samp<sp/>=<sp/>samp-&gt;Crop();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>samp;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cropped_samp)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>samp<sp/>=<sp/>cropped_samp;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>Box<sp/>*box<sp/>=<sp/>boxCreate(samp-&gt;Left(),<sp/>samp-&gt;Top(),</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samp-&gt;Width(),<sp/>samp-&gt;Height());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>samp;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>box;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>call<sp/>from<sp/>Beam<sp/>Search<sp/>to<sp/>return<sp/>the<sp/>alt<sp/>list<sp/>corresponding<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recognizing<sp/>the<sp/>bitmap<sp/>between<sp/>two<sp/>segmentation<sp/>pts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">CharAltList<sp/>*<sp/><ref refid="classtesseract_1_1_cube_search_object_1a62bad8e701d9e1e3d5ab8ceb76bc9398" kindref="member">CubeSearchObject::RecognizeSegment</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_pt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end_pt)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!init_<sp/>&amp;&amp;<sp/>!Init())<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cube<sp/>ERROR<sp/>(CubeSearchObject::RecognizeSegment):<sp/>could<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;not<sp/>initialize<sp/>CubeSearchObject\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>validate<sp/>segment<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsValidSegmentRange(start_pt,<sp/>end_pt))<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cube<sp/>ERROR<sp/>(CubeSearchObject::RecognizeSegment):<sp/>invalid<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;segment<sp/>range<sp/>(%d,<sp/>%d)\n&quot;</highlight><highlight class="normal">,<sp/>start_pt,<sp/>end_pt);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>the<sp/>recognition<sp/>results<sp/>in<sp/>cache<sp/>in<sp/>the<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reco_cache_<sp/>&amp;&amp;<sp/>reco_cache_[start_pt<sp/>+<sp/>1]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reco_cache_[start_pt<sp/>+<sp/>1][end_pt])<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reco_cache_[start_pt<sp/>+<sp/>1][end_pt];</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>char<sp/>sample<sp/>corresponding<sp/>to<sp/>the<sp/>blob</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>CharSamp<sp/>*samp<sp/>=<sp/><ref refid="classtesseract_1_1_cube_search_object_1a01aff334f72aba105a0ad4f30877a302" kindref="member">CharSample</ref>(start_pt,<sp/>end_pt);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!samp)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cube<sp/>ERROR<sp/>(CubeSearchObject::RecognizeSegment):<sp/>could<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;not<sp/>construct<sp/>CharSamp\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>recognize<sp/>the<sp/>char<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>CharClassifier<sp/>*char_classifier<sp/>=<sp/><ref refid="classtesseract_1_1_search_object_1af59efea2206aba120d36feb377fb57ae" kindref="member">cntxt_</ref>-&gt;<ref refid="classtesseract_1_1_cube_reco_context_1a0082866480a9704fef561c90ceaf06e5" kindref="member">Classifier</ref>();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(char_classifier)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>reco_cache_[start_pt<sp/>+<sp/>1][end_pt]<sp/>=<sp/>char_classifier-&gt;Classify(samp);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>classifer:<sp/>all<sp/>characters<sp/>are<sp/>equally<sp/>probable;<sp/>add<sp/>a<sp/>penalty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>favors<sp/>2-segment<sp/>characters<sp/>and<sp/>aspect<sp/>ratios<sp/>(w/h)<sp/>&gt;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cube<sp/>WARNING<sp/>(CubeSearchObject::RecognizeSegment):<sp/>cube<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;context<sp/>has<sp/>no<sp/>character<sp/>classifier!!<sp/>Inventing<sp/>a<sp/>probability<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;distribution.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>class_cnt<sp/>=<sp/><ref refid="classtesseract_1_1_search_object_1af59efea2206aba120d36feb377fb57ae" kindref="member">cntxt_</ref>-&gt;<ref refid="classtesseract_1_1_cube_reco_context_1ab9c6b5f85ef4baa38ad8ef9c949b8dee" kindref="member">CharacterSet</ref>()-&gt;<ref refid="classtesseract_1_1_char_set_1abfcdf381a241c375ad4c0f77747afb6c" kindref="member">ClassCount</ref>();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>CharAltList<sp/>*alt_list<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CharAltList(<ref refid="classtesseract_1_1_search_object_1af59efea2206aba120d36feb377fb57ae" kindref="member">cntxt_</ref>-&gt;<ref refid="classtesseract_1_1_cube_reco_context_1ab9c6b5f85ef4baa38ad8ef9c949b8dee" kindref="member">CharacterSet</ref>(),<sp/>class_cnt);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seg_cnt<sp/>=<sp/>end_pt<sp/>-<sp/>start_pt;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prob_val<sp/>=<sp/>(1.0<sp/>/<sp/>class_cnt)<sp/>*</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp(-abs(seg_cnt<sp/>-<sp/>2.0))<sp/>*</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp(-samp-&gt;Width()<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(samp-&gt;Height()));</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alt_list)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>class_idx<sp/>=<sp/>0;<sp/>class_idx<sp/>&lt;<sp/>class_cnt;<sp/>class_idx++)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alt_list-&gt;Insert(class_idx,<sp/><ref refid="classtesseract_1_1_cube_utils_1a0983096f5ebcb35879a1e0e6038c32f8" kindref="member">CubeUtils::Prob2Cost</ref>(prob_val));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reco_cache_[start_pt<sp/>+<sp/>1][end_pt]<sp/>=<sp/>alt_list;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reco_cache_[start_pt<sp/>+<sp/>1][end_pt];</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Perform<sp/>segmentation<sp/>of<sp/>the<sp/>bitmap<sp/>by<sp/>detecting<sp/>connected<sp/>components,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>segmenting<sp/>each<sp/>connected<sp/>component<sp/>using<sp/>windowed<sp/>vertical<sp/>pixel<sp/>density</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>histogram<sp/>and<sp/>sorting<sp/>the<sp/>resulting<sp/>segments<sp/>in<sp/>reading<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CubeSearchObject::Segment()<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!samp_)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>segment_cnt_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>segments_<sp/>=<sp/>samp_-&gt;<ref refid="classtesseract_1_1_char_samp_1a66d6ef340dd9d174b6f966bde9972498" kindref="member">Segment</ref>(&amp;segment_cnt_,<sp/>rtl_,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_search_object_1af59efea2206aba120d36feb377fb57ae" kindref="member">cntxt_</ref>-&gt;<ref refid="classtesseract_1_1_cube_reco_context_1addac767dbdf8405f9026848a17561556" kindref="member">Params</ref>()-&gt;<ref refid="classtesseract_1_1_tuning_params_1aeb97e0caf80f7022b19bcab7f88e3ae5" kindref="member">HistWindWid</ref>(),</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_search_object_1af59efea2206aba120d36feb377fb57ae" kindref="member">cntxt_</ref>-&gt;<ref refid="classtesseract_1_1_cube_reco_context_1addac767dbdf8405f9026848a17561556" kindref="member">Params</ref>()-&gt;<ref refid="classtesseract_1_1_tuning_params_1aefdb8ecfc2d820c84acd46bba99d2d58" kindref="member">MinConCompSize</ref>());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!segments_<sp/>||<sp/>segment_cnt_<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segment_cnt_<sp/>&gt;=<sp/>kMaxSegmentCnt)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>computes<sp/>the<sp/>space<sp/>and<sp/>no<sp/>space<sp/>costs<sp/>at<sp/>gaps<sp/>between<sp/>segments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CubeSearchObject::ComputeSpaceCosts()<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!init_<sp/>&amp;&amp;<sp/>!Init())</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Already<sp/>computed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(space_cost_)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>segmentation<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segment_cnt_<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>maximum<sp/>x<sp/>to<sp/>the<sp/>left<sp/>of<sp/>and<sp/>minimum<sp/>x<sp/>to<sp/>the<sp/>right<sp/>of<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>segmentation<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*max_left_x<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[segment_cnt_<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*min_right_x<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[segment_cnt_<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!max_left_x<sp/>||<sp/>!min_right_x)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]min_right_x;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]max_left_x;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rtl_)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>min_right_x[0]<sp/>=<sp/>segments_[0]-&gt;<ref refid="classtesseract_1_1_con_comp_1a52d9ba9805fb4eea0d0866a8801d6175" kindref="member">Left</ref>();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>max_left_x[segment_cnt_<sp/>-<sp/>2]<sp/>=<sp/>segments_[segment_cnt_<sp/>-<sp/>1]-&gt;<ref refid="classtesseract_1_1_con_comp_1aed1472695ac78f7a9907de8668d6e112" kindref="member">Right</ref>();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pt_idx<sp/>=<sp/>1;<sp/>pt_idx<sp/>&lt;<sp/>(segment_cnt_<sp/>-<sp/>1);<sp/>pt_idx++)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_right_x[pt_idx]<sp/>=</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ndminx_8h_1a74e75242132eaabbc1c512488a135926" kindref="member">MIN</ref>(min_right_x[pt_idx<sp/>-<sp/>1],<sp/>segments_[pt_idx]-&gt;Left());</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_left_x[segment_cnt_<sp/>-<sp/>pt_idx<sp/>-<sp/>2]<sp/>=</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ndminx_8h_1aacc3ee1a7f283f8ef65cea31f4436a95" kindref="member">MAX</ref>(max_left_x[segment_cnt_<sp/>-<sp/>pt_idx<sp/>-<sp/>1],</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segments_[segment_cnt_<sp/>-<sp/>pt_idx<sp/>-<sp/>1]-&gt;Right());</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>min_right_x[segment_cnt_<sp/>-<sp/>2]<sp/>=<sp/>segments_[segment_cnt_<sp/>-<sp/>1]-&gt;<ref refid="classtesseract_1_1_con_comp_1a52d9ba9805fb4eea0d0866a8801d6175" kindref="member">Left</ref>();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>max_left_x[0]<sp/>=<sp/>segments_[0]-&gt;<ref refid="classtesseract_1_1_con_comp_1aed1472695ac78f7a9907de8668d6e112" kindref="member">Right</ref>();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pt_idx<sp/>=<sp/>1;<sp/>pt_idx<sp/>&lt;<sp/>(segment_cnt_<sp/>-<sp/>1);<sp/>pt_idx++)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_right_x[segment_cnt_<sp/>-<sp/>pt_idx<sp/>-<sp/>2]<sp/>=</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ndminx_8h_1a74e75242132eaabbc1c512488a135926" kindref="member">MIN</ref>(min_right_x[segment_cnt_<sp/>-<sp/>pt_idx<sp/>-<sp/>1],</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segments_[segment_cnt_<sp/>-<sp/>pt_idx<sp/>-<sp/>1]-&gt;Left());</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_left_x[pt_idx]<sp/>=</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ndminx_8h_1aacc3ee1a7f283f8ef65cea31f4436a95" kindref="member">MAX</ref>(max_left_x[pt_idx<sp/>-<sp/>1],<sp/>segments_[pt_idx]-&gt;Right());</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>space<sp/>and<sp/>no<sp/>space<sp/>costs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>trivial<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>space_cost_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[segment_cnt_<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>no_space_cost_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[segment_cnt_<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!space_cost_<sp/>||<sp/>!no_space_cost_)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]min_right_x;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]max_left_x;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>all<sp/>segmentation<sp/>points<sp/>determining<sp/>the<sp/>horizontal<sp/>gap<sp/>between</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>images<sp/>on<sp/>both<sp/>sides<sp/>of<sp/>each<sp/>break<sp/>points.<sp/>Use<sp/>the<sp/>gap<sp/>to<sp/>estimate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>probability<sp/>of<sp/>a<sp/>space.<sp/>The<sp/>probability<sp/>is<sp/>modeled<sp/>a<sp/>linear<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>gap<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pt_idx<sp/>=<sp/>0;<sp/>pt_idx<sp/>&lt;<sp/>(segment_cnt_<sp/>-<sp/>1);<sp/>pt_idx++)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>the<sp/>gap<sp/>at<sp/>the<sp/>segmentation<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gap<sp/>=<sp/>min_right_x[pt_idx]<sp/>-<sp/>max_left_x[pt_idx];</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>prob<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gap<sp/>is<sp/>too<sp/>small<sp/>=&gt;<sp/>no<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gap<sp/>&lt;<sp/>min_spc_gap_)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prob<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gap<sp/>&gt;<sp/>max_spc_gap_)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gap<sp/>is<sp/>too<sp/>big<sp/>=&gt;<sp/>definite<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prob<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gap<sp/>is<sp/>somewhere<sp/>in<sp/>between,<sp/>compute<sp/>probability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prob<sp/>=<sp/>(gap<sp/>-<sp/>min_spc_gap_)<sp/>/</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;double&gt;(max_spc_gap_<sp/>-<sp/>min_spc_gap_);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>cost<sp/>of<sp/>space<sp/>and<sp/>non-space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>space_cost_[pt_idx]<sp/>=<sp/><ref refid="classtesseract_1_1_cube_utils_1a0983096f5ebcb35879a1e0e6038c32f8" kindref="member">CubeUtils::Prob2Cost</ref>(prob)<sp/>+</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_cube_utils_1a0983096f5ebcb35879a1e0e6038c32f8" kindref="member">CubeUtils::Prob2Cost</ref>(0.1);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>no_space_cost_[pt_idx]<sp/>=<sp/><ref refid="classtesseract_1_1_cube_utils_1a0983096f5ebcb35879a1e0e6038c32f8" kindref="member">CubeUtils::Prob2Cost</ref>(1.0<sp/>-<sp/>prob);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]min_right_x;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]max_left_x;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>cost<sp/>of<sp/>having<sp/>a<sp/>space<sp/>before<sp/>the<sp/>specified<sp/>segmentation<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_cube_search_object_1aca7c17893eece064b5a67c5bac2ce5d5" kindref="member">CubeSearchObject::SpaceCost</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pt_idx)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!space_cost_<sp/>&amp;&amp;<sp/>!ComputeSpaceCosts())<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>to<sp/>compute<sp/>costs<sp/>return<sp/>a<sp/>zero<sp/>prob</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_cube_utils_1a0983096f5ebcb35879a1e0e6038c32f8" kindref="member">CubeUtils::Prob2Cost</ref>(0.0);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>space_cost_[pt_idx];</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>cost<sp/>of<sp/>not<sp/>having<sp/>a<sp/>space<sp/>before<sp/>the<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>segmentation<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_cube_search_object_1adc4581915d3dd311f0196100595878bc" kindref="member">CubeSearchObject::NoSpaceCost</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pt_idx)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>failed<sp/>to<sp/>compute<sp/>costs,<sp/>return<sp/>a<sp/>1.0<sp/>prob</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!space_cost_<sp/>&amp;&amp;<sp/>!ComputeSpaceCosts())</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_cube_utils_1a0983096f5ebcb35879a1e0e6038c32f8" kindref="member">CubeUtils::Prob2Cost</ref>(0.0);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>no_space_cost_[pt_idx];</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>cost<sp/>of<sp/>not<sp/>having<sp/>any<sp/>spaces<sp/>within<sp/>the<sp/>specified<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>segmentation<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_cube_search_object_1adc4581915d3dd311f0196100595878bc" kindref="member">CubeSearchObject::NoSpaceCost</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_pt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end_pt)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>fail<sp/>to<sp/>compute<sp/>costs,<sp/>return<sp/>a<sp/>1.0<sp/>prob</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!space_cost_<sp/>&amp;&amp;<sp/>!ComputeSpaceCosts())</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_cube_utils_1a0983096f5ebcb35879a1e0e6038c32f8" kindref="member">CubeUtils::Prob2Cost</ref>(1.0);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>no_spc_cost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pt_idx<sp/>=<sp/>st_pt<sp/>+<sp/>1;<sp/>pt_idx<sp/>&lt;<sp/>end_pt;<sp/>pt_idx++)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>no_spc_cost<sp/>+=<sp/><ref refid="classtesseract_1_1_cube_search_object_1adc4581915d3dd311f0196100595878bc" kindref="member">NoSpaceCost</ref>(pt_idx);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>no_spc_cost;</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/cube/cube_search_object.cpp"/>
  </compounddef>
</doxygen>
