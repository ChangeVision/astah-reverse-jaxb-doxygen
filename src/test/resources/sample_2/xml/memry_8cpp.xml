<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="memry_8cpp" kind="file">
    <compoundname>memry.cpp</compoundname>
    <includes refid="mfcpch_8h" local="yes">mfcpch.h</includes>
    <includes refid="memry_8h" local="yes">memry.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="17650">
        <label>mfcpch.h</label>
        <link refid="mfcpch_8h"/>
      </node>
      <node id="17656">
        <label>stdlib.h</label>
      </node>
      <node id="17654">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="17655" relation="include">
        </childnode>
      </node>
      <node id="17652">
        <label>stddef.h</label>
      </node>
      <node id="17655">
        <label>limits.h</label>
      </node>
      <node id="17651">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="17652" relation="include">
        </childnode>
        <childnode refid="17653" relation="include">
        </childnode>
      </node>
      <node id="17653">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="17654" relation="include">
        </childnode>
      </node>
      <node id="17649">
        <label>ccutil/memry.cpp</label>
        <link refid="memry.cpp"/>
        <childnode refid="17650" relation="include">
        </childnode>
        <childnode refid="17651" relation="include">
        </childnode>
        <childnode refid="17656" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="memry_8cpp_1a29cbb5255dbc65a22c2a47c21480f264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* alloc_string</definition>
        <argsstring>(inT32 count)</argsstring>
        <name>alloc_string</name>
        <param>
          <type><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref></type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" line="31" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="memry_8cpp_1aadab03126da19fefc98afefc9549d5c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_string</definition>
        <argsstring>(char *string)</argsstring>
        <name>free_string</name>
        <param>
          <type>char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" line="36" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" bodystart="36" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="memry_8cpp_1a4f4e6728de23eb0530f9bdc8b3a114d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* alloc_struct</definition>
        <argsstring>(inT32 count, const char *)</argsstring>
        <name>alloc_struct</name>
        <param>
          <type><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref></type>
          <declname>count</declname>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" line="40" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="memry_8cpp_1a204a6cd6de69d4bd7a73ca30e0a0f947" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_struct</definition>
        <argsstring>(void *deadstruct, inT32, const char *)</argsstring>
        <name>free_struct</name>
        <param>
          <type>void *</type>
          <declname>deadstruct</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref></type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" line="44" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="memry_8cpp_1a4c14b091498fb7866a1dd0af51a591fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* alloc_mem</definition>
        <argsstring>(inT32 count)</argsstring>
        <name>alloc_mem</name>
        <param>
          <type><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref></type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" line="48" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="memry_8cpp_1ac8c475a93760aa04525aa0b4d1216fda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* alloc_big_zeros</definition>
        <argsstring>(inT32 count)</argsstring>
        <name>alloc_big_zeros</name>
        <param>
          <type><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref></type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" line="52" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="memry_8cpp_1a9ef1862b8e026e23eef238af032858e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_mem</definition>
        <argsstring>(void *oldchunk)</argsstring>
        <name>free_mem</name>
        <param>
          <type>void *</type>
          <declname>oldchunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" line="56" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="memry_8cpp_1ab30c02896b354139efbfb8936dfe8b69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_big_mem</definition>
        <argsstring>(void *oldchunk)</argsstring>
        <name>free_big_mem</name>
        <param>
          <type>void *</type>
          <declname>oldchunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" line="60" column="1" bodyfile="/Users/makoto/Desktop/trunk/ccutil/memry.cpp" bodystart="60" bodyend="62"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memry.c<sp/><sp/>(Formerly<sp/>memory.c)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Description:<sp/>Memory<sp/>allocation<sp/>with<sp/>builtin<sp/>safety<sp/>checks.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ray<sp/>Smith</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Created:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Wed<sp/>Jan<sp/>22<sp/>09:43:33<sp/>GMT<sp/>1992</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>(C)<sp/>Copyright<sp/>1992,<sp/>Hewlett-Packard<sp/>Ltd.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>**<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>**<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>**<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>**<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>**<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>**<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>**<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>**<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>**<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<ref refid="mfcpch_8h" kindref="compound">mfcpch.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<ref refid="memry_8h" kindref="compound">memry.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>With<sp/>improvements<sp/>in<sp/>OS<sp/>memory<sp/>allocators,<sp/>internal<sp/>memory<sp/>management</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>no<sp/>longer<sp/>required,<sp/>so<sp/>all<sp/>these<sp/>functions<sp/>now<sp/>map<sp/>to<sp/>their<sp/>malloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>family<sp/>equivalents.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(rays)<sp/>further<sp/>cleanup<sp/>by<sp/>redirecting<sp/>calls<sp/>to<sp/>new<sp/>and<sp/>creating<sp/>proper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constructors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="memry_8cpp_1a29cbb5255dbc65a22c2a47c21480f264" kindref="member">alloc_string</ref>(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/><ref refid="oldlist_8cpp_1acd4ea858d7133e40518e0832ff9d94b2" kindref="member">count</ref>)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Round<sp/>up<sp/>the<sp/>amount<sp/>allocated<sp/>to<sp/>a<sp/>multiple<sp/>of<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc((count<sp/>+<sp/>3)<sp/>&amp;<sp/>~3));</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="memry_8cpp_1aadab03126da19fefc98afefc9549d5c3" kindref="member">free_string</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>free(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="memry_8cpp_1a4f4e6728de23eb0530f9bdc8b3a114d3" kindref="member">alloc_struct</ref>(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(count);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="memry_8cpp_1a204a6cd6de69d4bd7a73ca30e0a0f947" kindref="member">free_struct</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*deadstruct,<sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>free(deadstruct);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="memry_8cpp_1a4c14b091498fb7866a1dd0af51a591fe" kindref="member">alloc_mem</ref>(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(static_cast&lt;size_t&gt;(count));</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="memry_8cpp_1ac8c475a93760aa04525aa0b4d1216fda" kindref="member">alloc_big_zeros</ref>(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>calloc(static_cast&lt;size_t&gt;(count),<sp/>1);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="memry_8cpp_1a9ef1862b8e026e23eef238af032858e4" kindref="member">free_mem</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*oldchunk)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>free(oldchunk);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="memry_8cpp_1ab30c02896b354139efbfb8936dfe8b69" kindref="member">free_big_mem</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*oldchunk)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>free(oldchunk);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/ccutil/memry.cpp"/>
  </compounddef>
</doxygen>
