<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="classtesseract_1_1_classify" kind="class" prot="public">
    <compoundname>tesseract::Classify</compoundname>
    <basecompoundref refid="classtesseract_1_1_c_c_struct" prot="public" virt="non-virtual">tesseract::CCStruct</basecompoundref>
    <derivedcompoundref refid="classtesseract_1_1_wordrec" prot="public" virt="non-virtual">tesseract::Wordrec</derivedcompoundref>
    <includes refid="classify_8h" local="no">classify.h</includes>
      <sectiondef kind="user-defined">
      <header>ReadClassFile</header>
      <description><para>Read in the training data from a file. All of the classes are read in. The results are stored in the global variable, &apos;TrainingData&apos;. </para></description>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a3cc9d5fe19f6d641fdfb133179ea70a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::ReadClassFile</definition>
        <argsstring>()</argsstring>
        <name>ReadClassFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="104" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/protos.cpp" bodystart="293" bodyend="312"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a64383806f917e682c4a644efdd71d530" prot="public" static="no" mutable="no">
        <type><ref refid="intproto_8h_1ab59629800b7869803b0af0f2f5db1627" kindref="member">INT_TEMPLATES</ref></type>
        <definition>INT_TEMPLATES tesseract::Classify::PreTrainedTemplates</definition>
        <argsstring></argsstring>
        <name>PreTrainedTemplates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="429" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a49c2bec2694a12cb6518001d8193d58d" prot="public" static="no" mutable="no">
        <type><ref refid="adaptive_8h_1a41c6dcad3fe69d675809c177e5537812" kindref="member">ADAPT_TEMPLATES</ref></type>
        <definition>ADAPT_TEMPLATES tesseract::Classify::AdaptedTemplates</definition>
        <argsstring></argsstring>
        <name>AdaptedTemplates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="430" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a08295fdeacbf1d536337f542320e86e2" prot="public" static="no" mutable="no">
        <type><ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref></type>
        <definition>BIT_VECTOR tesseract::Classify::AllProtosOn</definition>
        <argsstring></argsstring>
        <name>AllProtosOn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="433" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a3306f7dc2f0df8c08a9933493262a2c9" prot="public" static="no" mutable="no">
        <type><ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref></type>
        <definition>BIT_VECTOR tesseract::Classify::PrunedProtos</definition>
        <argsstring></argsstring>
        <name>PrunedProtos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="434" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1ada1ef7ff613927daa2838ba41eaa055f" prot="public" static="no" mutable="no">
        <type><ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref></type>
        <definition>BIT_VECTOR tesseract::Classify::AllConfigsOn</definition>
        <argsstring></argsstring>
        <name>AllConfigsOn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="435" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a04608dab39f896c0358b42c228a7ef32" prot="public" static="no" mutable="no">
        <type><ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref></type>
        <definition>BIT_VECTOR tesseract::Classify::AllProtosOff</definition>
        <argsstring></argsstring>
        <name>AllProtosOff</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="436" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a974e5b3b4ee8b184a3af4ba782750dd7" prot="public" static="no" mutable="no">
        <type><ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref></type>
        <definition>BIT_VECTOR tesseract::Classify::AllConfigsOff</definition>
        <argsstring></argsstring>
        <name>AllConfigsOff</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="437" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a26b1c76382f418bf5a78bad15b23b8ad" prot="public" static="no" mutable="no">
        <type><ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref></type>
        <definition>BIT_VECTOR tesseract::Classify::TempProtoMask</definition>
        <argsstring></argsstring>
        <name>TempProtoMask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="438" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a7d0ccfd06421346d8cda0f1b76fd8516" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool tesseract::Classify::EnableLearning</definition>
        <argsstring></argsstring>
        <name>EnableLearning</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="439" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1ad4c94be5d5738afb4115a12cad2e3efa" prot="public" static="no" mutable="no">
        <type><ref refid="struct_n_o_r_m___p_r_o_t_o_s" kindref="compound">NORM_PROTOS</ref> *</type>
        <definition>NORM_PROTOS* tesseract::Classify::NormProtos</definition>
        <argsstring></argsstring>
        <name>NormProtos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="441" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1ae6dea981b2f591921d798ea83b0fa455" prot="public" static="no" mutable="no">
        <type><ref refid="class_unicity_table" kindref="compound">UnicityTable</ref>&lt; <ref refid="structtesseract_1_1_font_info" kindref="compound">FontInfo</ref> &gt;</type>
        <definition>UnicityTable&lt;FontInfo&gt; tesseract::Classify::fontinfo_table_</definition>
        <argsstring></argsstring>
        <name>fontinfo_table_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="443" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a74a007a46ac907d2c8f61e9885143465" prot="public" static="no" mutable="no">
        <type><ref refid="class_unicity_table" kindref="compound">UnicityTable</ref>&lt; <ref refid="structtesseract_1_1_font_set" kindref="compound">FontSet</ref> &gt;</type>
        <definition>UnicityTable&lt;FontSet&gt; tesseract::Classify::fontset_table_</definition>
        <argsstring></argsstring>
        <name>fontset_table_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="451" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a093af2c004819e86bfff80ad88f10c37" prot="protected" static="no" mutable="no">
        <type><ref refid="class_integer_matcher" kindref="compound">IntegerMatcher</ref></type>
        <definition>IntegerMatcher tesseract::Classify::im_</definition>
        <argsstring></argsstring>
        <name>im_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="458" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a6ebcfd2968c704f99efd40075ecdb138" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_f_e_a_t_u_r_e___d_e_f_s___s_t_r_u_c_t" kindref="compound">FEATURE_DEFS_STRUCT</ref></type>
        <definition>FEATURE_DEFS_STRUCT tesseract::Classify::feature_defs_</definition>
        <argsstring></argsstring>
        <name>feature_defs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="459" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a471b3e8f03ddc5281c167b37d8ddc5b5" prot="protected" static="no" mutable="no">
        <type><ref refid="classtesseract_1_1_shape_table" kindref="compound">ShapeTable</ref> *</type>
        <definition>ShapeTable* tesseract::Classify::shape_table_</definition>
        <argsstring></argsstring>
        <name>shape_table_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="464" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="464" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a03770409ac2660e52b68a201424fb570" prot="private" static="no" mutable="no">
        <type><ref refid="classtesseract_1_1_dict" kindref="compound">Dict</ref></type>
        <definition>Dict tesseract::Classify::dict_</definition>
        <argsstring></argsstring>
        <name>dict_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="468" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a9b819a65090a6e7245a76590b4ffe7c8" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::Classify::AdaptiveMatcherCalls</definition>
        <argsstring></argsstring>
        <name>AdaptiveMatcherCalls</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="471" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a2008d38ccb4e87e23934af2203e543c8" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::Classify::BaselineClassifierCalls</definition>
        <argsstring></argsstring>
        <name>BaselineClassifierCalls</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="472" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1afc650c5fca22244920573bbe1e99814c" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::Classify::CharNormClassifierCalls</definition>
        <argsstring></argsstring>
        <name>CharNormClassifierCalls</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="473" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a220049b80d7fe6ace87c13398d12b4ad" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::Classify::AmbigClassifierCalls</definition>
        <argsstring></argsstring>
        <name>AmbigClassifierCalls</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="474" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1ad2c4d12c7b2c5c7f9cf948dd2e3356d5" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::Classify::NumWordsAdaptedTo</definition>
        <argsstring></argsstring>
        <name>NumWordsAdaptedTo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="475" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1ac9759fe212f2507819fa719a8748a39a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::Classify::NumCharsAdaptedTo</definition>
        <argsstring></argsstring>
        <name>NumCharsAdaptedTo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="476" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1aaca82e8042cc5ea5785894e9220953ea" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::Classify::NumBaselineClassesTried</definition>
        <argsstring></argsstring>
        <name>NumBaselineClassesTried</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="477" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1adc31983a5443a28bf4ef7b324956119a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::Classify::NumCharNormClassesTried</definition>
        <argsstring></argsstring>
        <name>NumCharNormClassesTried</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="478" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a8b3ce4089c55b579d3b2937847d495c3" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::Classify::NumAmbigClassesTried</definition>
        <argsstring></argsstring>
        <name>NumAmbigClassesTried</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="479" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1ad3bd796e900a199bf8d44bf63dc32be4" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::Classify::NumClassesOutput</definition>
        <argsstring></argsstring>
        <name>NumClassesOutput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="480" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1ada37962f98d89f3521bba23789eda3c2" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int tesseract::Classify::NumAdaptationsFailed</definition>
        <argsstring></argsstring>
        <name>NumAdaptationsFailed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="481" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1afa243cbb0f9047949ee4c5d681277c5d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool tesseract::Classify::FeaturesHaveBeenExtracted</definition>
        <argsstring></argsstring>
        <name>FeaturesHaveBeenExtracted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="487" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1aa65f4ef0d2656059179a70c4b5e88e7b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool tesseract::Classify::FeaturesOK</definition>
        <argsstring></argsstring>
        <name>FeaturesOK</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="488" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1aa5cd822073b45555066c2c65afcc2e19" prot="private" static="no" mutable="no">
        <type><ref refid="intproto_8h_1afc188645dba6ff9f0eb7f056464fdd34" kindref="member">INT_FEATURE_ARRAY</ref></type>
        <definition>INT_FEATURE_ARRAY tesseract::Classify::BaselineFeatures</definition>
        <argsstring></argsstring>
        <name>BaselineFeatures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="489" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="489" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1aa90bed67f5d83ab31e1f76c8c49ad583" prot="private" static="no" mutable="no">
        <type><ref refid="intproto_8h_1afc188645dba6ff9f0eb7f056464fdd34" kindref="member">INT_FEATURE_ARRAY</ref></type>
        <definition>INT_FEATURE_ARRAY tesseract::Classify::CharNormFeatures</definition>
        <argsstring></argsstring>
        <name>CharNormFeatures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="490" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1ab4d961d6d3e11cba44f2f0f9cd1fa251" prot="private" static="no" mutable="no">
        <type><ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t" kindref="compound">INT_FX_RESULT_STRUCT</ref></type>
        <definition>INT_FX_RESULT_STRUCT tesseract::Classify::FXInfo</definition>
        <argsstring></argsstring>
        <name>FXInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="491" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="491" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a4cb3b34fb00526cc91d21025f53bda34" prot="private" static="no" mutable="no">
        <type><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref> *</type>
        <definition>uinT16* tesseract::Classify::CharNormCutoffs</definition>
        <argsstring></argsstring>
        <name>CharNormCutoffs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="501" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="501" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1ade7dfecc8b406fb51d5c305ada942248" prot="private" static="no" mutable="no">
        <type><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref> *</type>
        <definition>uinT16* tesseract::Classify::BaselineCutoffs</definition>
        <argsstring></argsstring>
        <name>BaselineCutoffs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="502" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1add2bdf76259dccbe139b2aa452e9cd05" prot="private" static="no" mutable="no">
        <type><ref refid="class_generic_vector" kindref="compound">GenericVector</ref>&lt; <ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref> &gt;</type>
        <definition>GenericVector&lt;uinT16&gt; tesseract::Classify::shapetable_cutoffs_</definition>
        <argsstring></argsstring>
        <name>shapetable_cutoffs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="503" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a162d7eb3e0774a7604121911f019b97a" prot="private" static="no" mutable="no">
        <type><ref refid="class_scroll_view" kindref="compound">ScrollView</ref> *</type>
        <definition>ScrollView* tesseract::Classify::learn_debug_win_</definition>
        <argsstring></argsstring>
        <name>learn_debug_win_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="504" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="504" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a820d7d03f34b05e254bb063fd44488e9" prot="private" static="no" mutable="no">
        <type><ref refid="class_scroll_view" kindref="compound">ScrollView</ref> *</type>
        <definition>ScrollView* tesseract::Classify::learn_fragmented_word_debug_win_</definition>
        <argsstring></argsstring>
        <name>learn_fragmented_word_debug_win_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="505" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesseract_1_1_classify_1a7c2ec17fc98632210d4a200f7194b2ad" prot="private" static="no" mutable="no">
        <type><ref refid="class_scroll_view" kindref="compound">ScrollView</ref> *</type>
        <definition>ScrollView* tesseract::Classify::learn_fragments_debug_win_</definition>
        <argsstring></argsstring>
        <name>learn_fragments_debug_win_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="506" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="506" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtesseract_1_1_classify_1ac4c2dfe9aa3c463964fdc61faec56a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::Classify</definition>
        <argsstring>()</argsstring>
        <name>Classify</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="60" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.cpp" bodystart="34" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a4a3fe30721c7f945fb4c5ebfe421639c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>tesseract::Classify::~Classify</definition>
        <argsstring>()</argsstring>
        <name>~Classify</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="61" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.cpp" bodystart="178" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a83e4207353a1bb07adfaa6a82a74c9ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesseract_1_1_dict" kindref="compound">Dict</ref> &amp;</type>
        <definition>Dict&amp; tesseract::Classify::getDict</definition>
        <argsstring>()</argsstring>
        <name>getDict</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="62" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a5d8e80f8bd4a5779921f543c6eef796c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtesseract_1_1_shape_table" kindref="compound">ShapeTable</ref> *</type>
        <definition>const ShapeTable* tesseract::Classify::shape_table</definition>
        <argsstring>() const </argsstring>
        <name>shape_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="66" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a28ddc270cb5d2613f5f0f24ad53a5a21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="adaptive_8h_1a41c6dcad3fe69d675809c177e5537812" kindref="member">ADAPT_TEMPLATES</ref></type>
        <definition>ADAPT_TEMPLATES tesseract::Classify::NewAdaptedTemplates</definition>
        <argsstring>(bool InitFromUnicharset)</argsstring>
        <name>NewAdaptedTemplates</name>
        <param>
          <type>bool</type>
          <declname>InitFromUnicharset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates memory for adapted tempates. each char in unicharset to the newly created templates</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>InitFromUnicharset</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, add an empty class for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ptr to new adapted templates.</para></simplesect>
<simplesect kind="note"><para>Globals: none </para><simplesectsep/><para>Exceptions: none </para><simplesectsep/><para>History: Fri Mar 8 10:15:28 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="71" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptive.cpp" bodystart="167" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1afae8a55c28ee68de92ab1b1dd37c6905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tesseract::Classify::GetFontinfoId</definition>
        <argsstring>(ADAPT_CLASS Class, uinT8 ConfigId)</argsstring>
        <name>GetFontinfoId</name>
        <param>
          <type><ref refid="adaptive_8h_1a1e42b7a7460500ee9e8b3d09a1f0330d" kindref="member">ADAPT_CLASS</ref></type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref></type>
          <declname>ConfigId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="72" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptive.cpp" bodystart="190" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1af60b52006bbea0cc1727d543c3fcd1ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tesseract::Classify::PruneClasses</definition>
        <argsstring>(const INT_TEMPLATES_STRUCT *int_templates, int num_features, const INT_FEATURE_STRUCT *features, const uinT8 *normalization_factors, const uinT16 *expected_num_features, CP_RESULT_STRUCT *results)</argsstring>
        <name>PruneClasses</name>
        <param>
          <type>const <ref refid="struct_i_n_t___t_e_m_p_l_a_t_e_s___s_t_r_u_c_t" kindref="compound">INT_TEMPLATES_STRUCT</ref> *</type>
          <declname>int_templates</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_features</declname>
        </param>
        <param>
          <type>const <ref refid="struct_i_n_t___f_e_a_t_u_r_e___s_t_r_u_c_t" kindref="compound">INT_FEATURE_STRUCT</ref> *</type>
          <declname>features</declname>
        </param>
        <param>
          <type>const <ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>normalization_factors</declname>
        </param>
        <param>
          <type>const <ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref> *</type>
          <declname>expected_num_features</declname>
        </param>
        <param>
          <type><ref refid="struct_c_p___r_e_s_u_l_t___s_t_r_u_c_t" kindref="compound">CP_RESULT_STRUCT</ref> *</type>
          <declname>results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="87" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intmatcher.cpp" bodystart="406" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a49a37c1ce02f5e114f0d57e49871b802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::ReadNewCutoffs</definition>
        <argsstring>(FILE *CutoffFile, bool swap, inT64 end_offset, CLASS_CUTOFF_ARRAY Cutoffs)</argsstring>
        <name>ReadNewCutoffs</name>
        <param>
          <type>FILE *</type>
          <declname>CutoffFile</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>swap</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1ac53c9cafaf7fe16f985994c49f6b0964" kindref="member">inT64</ref></type>
          <declname>end_offset</declname>
        </param>
        <param>
          <type><ref refid="cutoffs_8h_1a5f54131664d48951e46f5e4952350582" kindref="member">CLASS_CUTOFF_ARRAY</ref></type>
          <declname>Cutoffs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="93" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/cutoffs.cpp" bodystart="42" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a15d6951abc586793270de0825bdb7dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::PrintAdaptedTemplates</definition>
        <argsstring>(FILE *File, ADAPT_TEMPLATES Templates)</argsstring>
        <name>PrintAdaptedTemplates</name>
        <param>
          <type>FILE *</type>
          <declname>File</declname>
        </param>
        <param>
          <type><ref refid="adaptive_8h_1a41c6dcad3fe69d675809c177e5537812" kindref="member">ADAPT_TEMPLATES</ref></type>
          <declname>Templates</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine prints a summary of the adapted templates in Templates to File.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>File</parametername>
</parameternamelist>
<parameterdescription>
<para>open text file to print Templates to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Templates</parametername>
</parameternamelist>
<parameterdescription>
<para>adapted templates to print to File</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Globals: none </para><simplesectsep/><para>Exceptions: none </para><simplesectsep/><para>History: Wed Mar 20 13:35:29 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="95" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptive.cpp" bodystart="273" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a1718afe45a09c6631f11ae224e6d5db6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::WriteAdaptedTemplates</definition>
        <argsstring>(FILE *File, ADAPT_TEMPLATES Templates)</argsstring>
        <name>WriteAdaptedTemplates</name>
        <param>
          <type>FILE *</type>
          <declname>File</declname>
        </param>
        <param>
          <type><ref refid="adaptive_8h_1a41c6dcad3fe69d675809c177e5537812" kindref="member">ADAPT_TEMPLATES</ref></type>
          <declname>Templates</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine saves Templates to File in a binary format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>File</parametername>
</parameternamelist>
<parameterdescription>
<para>open text file to write Templates to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Templates</parametername>
</parameternamelist>
<parameterdescription>
<para>set of adapted templates to write to File</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Globals: none </para><simplesectsep/><para>Exceptions: none </para><simplesectsep/><para>History: Mon Mar 18 15:07:32 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="96" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptive.cpp" bodystart="507" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1aa74ebd96d85efc39d71c37985e50c8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="adaptive_8h_1a41c6dcad3fe69d675809c177e5537812" kindref="member">ADAPT_TEMPLATES</ref></type>
        <definition>ADAPT_TEMPLATES tesseract::Classify::ReadAdaptedTemplates</definition>
        <argsstring>(FILE *File)</argsstring>
        <name>ReadAdaptedTemplates</name>
        <param>
          <type>FILE *</type>
          <declname>File</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read a set of adapted templates from File and return a ptr to the templates.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>File</parametername>
</parameternamelist>
<parameterdescription>
<para>open text file to read adapted templates from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ptr to adapted templates read from File.</para></simplesect>
<simplesect kind="note"><para>Globals: none </para><simplesectsep/><para>Exceptions: none </para><simplesectsep/><para>History: Mon Mar 18 15:18:10 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="97" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptive.cpp" bodystart="371" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a3205427bd0f3abae31ab6c3092ca0662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
        <definition>FLOAT32 tesseract::Classify::ComputeNormMatch</definition>
        <argsstring>(CLASS_ID ClassId, const FEATURE_STRUCT &amp;feature, BOOL8 DebugMatch)</argsstring>
        <name>ComputeNormMatch</name>
        <param>
          <type><ref refid="matchdefs_8h_1afdabe64d68192a21409dd58c119709f8" kindref="member">CLASS_ID</ref></type>
          <declname>ClassId</declname>
        </param>
        <param>
          <type>const <ref refid="struct_f_e_a_t_u_r_e___s_t_r_u_c_t" kindref="compound">FEATURE_STRUCT</ref> &amp;</type>
          <declname>feature</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a7712a7e28433d0ade59219a129549b6f" kindref="member">BOOL8</ref></type>
          <declname>DebugMatch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="99" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/normmatch.cpp" bodystart="73" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ab6e270cecf7e7c62e1319e7889caf716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::FreeNormProtos</definition>
        <argsstring>()</argsstring>
        <name>FreeNormProtos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="101" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/normmatch.cpp" bodystart="161" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1aabd742c09ff530922005e015a9e8bc2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_n_o_r_m___p_r_o_t_o_s" kindref="compound">NORM_PROTOS</ref> *</type>
        <definition>NORM_PROTOS * tesseract::Classify::ReadNormProtos</definition>
        <argsstring>(FILE *File, inT64 end_offset)</argsstring>
        <name>ReadNormProtos</name>
        <param>
          <type>FILE *</type>
          <declname>File</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1ac53c9cafaf7fe16f985994c49f6b0964" kindref="member">inT64</ref></type>
          <declname>end_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="102" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/normmatch.cpp" bodystart="234" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1af27d604585502bd447d52bf5daf15d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::ConvertProto</definition>
        <argsstring>(PROTO Proto, int ProtoId, INT_CLASS Class)</argsstring>
        <name>ConvertProto</name>
        <param>
          <type><ref refid="protos_8h_1a04b1cd7341d318ccc4e679aec5cfad0e" kindref="member">PROTO</ref></type>
          <declname>Proto</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ProtoId</declname>
        </param>
        <param>
          <type><ref refid="intproto_8h_1a8c3e30dcc19d515ce47bc6db3b02cf84" kindref="member">INT_CLASS</ref></type>
          <declname>Class</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="105" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intproto.cpp" bodystart="528" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1af3d15c15c9f2dce72a400233d4bf366f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="intproto_8h_1ab59629800b7869803b0af0f2f5db1627" kindref="member">INT_TEMPLATES</ref></type>
        <definition>INT_TEMPLATES tesseract::Classify::CreateIntTemplates</definition>
        <argsstring>(CLASSES FloatProtos, const UNICHARSET &amp;target_unicharset)</argsstring>
        <name>CreateIntTemplates</name>
        <param>
          <type><ref refid="protos_8h_1ad299b5cb6e6ab5713fce00dbd6a787ed" kindref="member">CLASSES</ref></type>
          <declname>FloatProtos</declname>
        </param>
        <param>
          <type>const <ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref> &amp;</type>
          <declname>target_unicharset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="106" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intproto.cpp" bodystart="573" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1abbbd86871758c036d7ba2af682abb45f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::LearnWord</definition>
        <argsstring>(const char *filename, const char *rejmap, WERD_RES *word)</argsstring>
        <name>LearnWord</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rejmap</declname>
        </param>
        <param>
          <type><ref refid="class_w_e_r_d___r_e_s" kindref="compound">WERD_RES</ref> *</type>
          <declname>word</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="117" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="254" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a0a6455e61097b98b01d180cd0b2748c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::LearnPieces</definition>
        <argsstring>(const char *filename, int start, int length, float threshold, CharSegmentationType segmentation, const char *correct_text, WERD_RES *word)</argsstring>
        <name>LearnPieces</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>float</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type><ref refid="namespacetesseract_1afe12112c1ca56d41c919d0f18dfdf240" kindref="member">CharSegmentationType</ref></type>
          <declname>segmentation</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>correct_text</declname>
        </param>
        <param>
          <type><ref refid="class_w_e_r_d___r_e_s" kindref="compound">WERD_RES</ref> *</type>
          <declname>word</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="128" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="394" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a2f9389a2d855d2a59e7892d3ba884887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::InitAdaptiveClassifier</definition>
        <argsstring>(bool load_pre_trained_templates)</argsstring>
        <name>InitAdaptiveClassifier</name>
        <param>
          <type>bool</type>
          <declname>load_pre_trained_templates</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine reads in the training information needed by the adaptive classifier and saves it into global variables. Parameters: load_pre_trained_templates Indicates whether the pre-trained templates (inttemp, normproto and pffmtable components) should be lodaded. Should only be set to true if the necesary classifier components are present in the [lang].traineddata file. Globals: BuiltInTemplatesFile file to get built-in temps from BuiltInCutoffsFile file to get avg. feat per class from classify_use_pre_adapted_templates enables use of pre-adapted templates <simplesect kind="note"><para>History: Mon Mar 11 12:49:34 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="131" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="545" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1aee9e5bd336bf1a37a7a1f3b712eb045d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::InitAdaptedClass</definition>
        <argsstring>(TBLOB *Blob, const DENORM &amp;denorm, CLASS_ID ClassId, int FontinfoId, ADAPT_CLASS Class, ADAPT_TEMPLATES Templates)</argsstring>
        <name>InitAdaptedClass</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="matchdefs_8h_1afdabe64d68192a21409dd58c119709f8" kindref="member">CLASS_ID</ref></type>
          <declname>ClassId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>FontinfoId</declname>
        </param>
        <param>
          <type><ref refid="adaptive_8h_1a1e42b7a7460500ee9e8b3d09a1f0330d" kindref="member">ADAPT_CLASS</ref></type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="adaptive_8h_1a41c6dcad3fe69d675809c177e5537812" kindref="member">ADAPT_TEMPLATES</ref></type>
          <declname>Templates</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine creates a new adapted class and uses Blob as the model for the first config in that class.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Blob</parametername>
</parameternamelist>
<parameterdescription>
<para>blob to model new class after </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denorm</parametername>
</parameternamelist>
<parameterdescription>
<para>normalization/denormalization parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ClassId</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the class to be initialized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FontinfoId</parametername>
</parameternamelist>
<parameterdescription>
<para>font information inferred from pre-trained templates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Class</parametername>
</parameternamelist>
<parameterdescription>
<para>adapted class to be initialized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Templates</parametername>
</parameternamelist>
<parameterdescription>
<para>adapted templates to add new class to</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals:<itemizedlist>
<listitem><para><ref refid="classtesseract_1_1_classify_1a08295fdeacbf1d536337f542320e86e2" kindref="member">AllProtosOn</ref> dummy mask with all 1&apos;s</para></listitem><listitem><para>BaselineCutoffs kludge needed to get cutoffs</para></listitem><listitem><para><ref refid="classtesseract_1_1_classify_1a64383806f917e682c4a644efdd71d530" kindref="member">PreTrainedTemplates</ref> kludge needed to get cutoffs</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Thu Mar 14 12:49:39 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="132" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="758" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a7d9076164677e7e5a863a8a5d265b957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::AdaptToPunc</definition>
        <argsstring>(TBLOB *Blob, const DENORM &amp;denorm, CLASS_ID ClassId, int FontinfoId, FLOAT32 Threshold)</argsstring>
        <name>AdaptToPunc</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="matchdefs_8h_1afdabe64d68192a21409dd58c119709f8" kindref="member">CLASS_ID</ref></type>
          <declname>ClassId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>FontinfoId</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
          <declname>Threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Blob</parametername>
</parameternamelist>
<parameterdescription>
<para>blob to add to templates for ClassId </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denorm</parametername>
</parameternamelist>
<parameterdescription>
<para>normalization/denormalization parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ClassId</parametername>
</parameternamelist>
<parameterdescription>
<para>class to add blob to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FontinfoId</parametername>
</parameternamelist>
<parameterdescription>
<para>font information from pre-trained teamples </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum match rating to existing template</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals:<itemizedlist>
<listitem><para>PreTrainedTemplates current set of built-in templates</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Thu Mar 14 09:36:03 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="138" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1082" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ac7501f294525f6dd7fca4a3512ae0dcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::AmbigClassifier</definition>
        <argsstring>(TBLOB *Blob, const DENORM &amp;denorm, INT_TEMPLATES Templates, ADAPT_CLASS *Classes, UNICHAR_ID *Ambiguities, ADAPT_RESULTS *Results)</argsstring>
        <name>AmbigClassifier</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="intproto_8h_1ab59629800b7869803b0af0f2f5db1627" kindref="member">INT_TEMPLATES</ref></type>
          <declname>Templates</declname>
        </param>
        <param>
          <type><ref refid="adaptive_8h_1a1e42b7a7460500ee9e8b3d09a1f0330d" kindref="member">ADAPT_CLASS</ref> *</type>
          <declname>Classes</declname>
        </param>
        <param>
          <type><ref refid="unichar_8h_1a8578b19fa1ff5ca75080db1a18ecc32e" kindref="member">UNICHAR_ID</ref> *</type>
          <declname>Ambiguities</declname>
        </param>
        <param>
          <type><ref refid="struct_a_d_a_p_t___r_e_s_u_l_t_s" kindref="compound">ADAPT_RESULTS</ref> *</type>
          <declname>Results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine is identical to <ref refid="classtesseract_1_1_classify_1a0e552819a03cc6f169e18a58b16696a6" kindref="member">CharNormClassifier()</ref> except that it does no class pruning. It simply matches the unknown blob against the classes listed in Ambiguities.</para><para>Globals:<itemizedlist>
<listitem><para><ref refid="classtesseract_1_1_classify_1a08295fdeacbf1d536337f542320e86e2" kindref="member">AllProtosOn</ref> mask that enables all protos</para></listitem><listitem><para><ref refid="classtesseract_1_1_classify_1ada1ef7ff613927daa2838ba41eaa055f" kindref="member">AllConfigsOn</ref> mask that enables all configs</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Blob</parametername>
</parameternamelist>
<parameterdescription>
<para>blob to be classified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denorm</parametername>
</parameternamelist>
<parameterdescription>
<para>normalization/denormalization parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Templates</parametername>
</parameternamelist>
<parameterdescription>
<para>built-in templates to classify against </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Classes</parametername>
</parameternamelist>
<parameterdescription>
<para>adapted class templates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ambiguities</parametername>
</parameternamelist>
<parameterdescription>
<para>array of class id&apos;s to match against </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">Results</parametername>
</parameternamelist>
<parameterdescription>
<para>place to put match results</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Tue Mar 12 19:40:36 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="143" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1205" bodyend="1252"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a9df3ff8623acd0ab30286ace7362045c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::MasterMatcher</definition>
        <argsstring>(INT_TEMPLATES templates, inT16 num_features, const INT_FEATURE_STRUCT *features, const uinT8 *norm_factors, ADAPT_CLASS *classes, int debug, int num_classes, const TBOX &amp;blob_box, CLASS_PRUNER_RESULTS results, ADAPT_RESULTS *final_results)</argsstring>
        <name>MasterMatcher</name>
        <param>
          <type><ref refid="intproto_8h_1ab59629800b7869803b0af0f2f5db1627" kindref="member">INT_TEMPLATES</ref></type>
          <declname>templates</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref></type>
          <declname>num_features</declname>
        </param>
        <param>
          <type>const <ref refid="struct_i_n_t___f_e_a_t_u_r_e___s_t_r_u_c_t" kindref="compound">INT_FEATURE_STRUCT</ref> *</type>
          <declname>features</declname>
        </param>
        <param>
          <type>const <ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>norm_factors</declname>
        </param>
        <param>
          <type><ref refid="adaptive_8h_1a1e42b7a7460500ee9e8b3d09a1f0330d" kindref="member">ADAPT_CLASS</ref> *</type>
          <declname>classes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>debug</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
        </param>
        <param>
          <type>const <ref refid="class_t_b_o_x" kindref="compound">TBOX</ref> &amp;</type>
          <declname>blob_box</declname>
        </param>
        <param>
          <type><ref refid="intmatcher_8h_1aad58739a624ab51ab180aac3342c6efc" kindref="member">CLASS_PRUNER_RESULTS</ref></type>
          <declname>results</declname>
        </param>
        <param>
          <type><ref refid="struct_a_d_a_p_t___r_e_s_u_l_t_s" kindref="compound">ADAPT_RESULTS</ref> *</type>
          <declname>final_results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Factored-out calls to <ref refid="class_integer_matcher" kindref="compound">IntegerMatcher</ref> based on class pruner results. Returns integer matcher results inside CLASS_PRUNER_RESULTS structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="149" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1257" bodyend="1288"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a7d663f1e02d6e7b2d1783fdca6154a4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::ExpandShapesAndApplyCorrections</definition>
        <argsstring>(ADAPT_CLASS *classes, bool debug, int class_id, int bottom, int top, float cp_rating, int blob_length, const uinT8 *cn_factors, INT_RESULT_STRUCT &amp;int_result, ADAPT_RESULTS *final_results)</argsstring>
        <name>ExpandShapesAndApplyCorrections</name>
        <param>
          <type><ref refid="adaptive_8h_1a1e42b7a7460500ee9e8b3d09a1f0330d" kindref="member">ADAPT_CLASS</ref> *</type>
          <declname>classes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>debug</declname>
        </param>
        <param>
          <type>int</type>
          <declname>class_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>top</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cp_rating</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blob_length</declname>
        </param>
        <param>
          <type>const <ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>cn_factors</declname>
        </param>
        <param>
          <type><ref refid="struct_i_n_t___r_e_s_u_l_t___s_t_r_u_c_t" kindref="compound">INT_RESULT_STRUCT</ref> &amp;</type>
          <declname>int_result</declname>
        </param>
        <param>
          <type><ref refid="struct_a_d_a_p_t___r_e_s_u_l_t_s" kindref="compound">ADAPT_RESULTS</ref> *</type>
          <declname>final_results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="164" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1295" bodyend="1355"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a7c6031863d4dafb400551cc4f151f3b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tesseract::Classify::ComputeCorrectedRating</definition>
        <argsstring>(bool debug, int unichar_id, double cp_rating, double im_rating, int feature_misses, int bottom, int top, int blob_length, const uinT8 *cn_factors)</argsstring>
        <name>ComputeCorrectedRating</name>
        <param>
          <type>bool</type>
          <declname>debug</declname>
        </param>
        <param>
          <type>int</type>
          <declname>unichar_id</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cp_rating</declname>
        </param>
        <param>
          <type>double</type>
          <declname>im_rating</declname>
        </param>
        <param>
          <type>int</type>
          <declname>feature_misses</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>top</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blob_length</declname>
        </param>
        <param>
          <type>const <ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>cn_factors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="176" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1360" bodyend="1402"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1af1f1f794092ce44dff7c242822b6cf68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::ConvertMatchesToChoices</definition>
        <argsstring>(const DENORM &amp;denorm, const TBOX &amp;box, ADAPT_RESULTS *Results, BLOB_CHOICE_LIST *Choices)</argsstring>
        <name>ConvertMatchesToChoices</name>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type>const <ref refid="class_t_b_o_x" kindref="compound">TBOX</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="struct_a_d_a_p_t___r_e_s_u_l_t_s" kindref="compound">ADAPT_RESULTS</ref> *</type>
          <declname>Results</declname>
        </param>
        <param>
          <type>BLOB_CHOICE_LIST *</type>
          <declname>Choices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The function converts the given match ratings to the list of blob choices with ratings and certainties (used by the context checkers). If character fragments are present in the results, this function also makes sure that there is at least one non-fragmented classification included. For each classification result check the unicharset for &quot;definite&quot; ambiguities and modify the resulting Choices accordingly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="180" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1675" bodyend="1732"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a3681915077046082b4d99532a3f3da61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::AddNewResult</definition>
        <argsstring>(ADAPT_RESULTS *results, CLASS_ID class_id, int shape_id, FLOAT32 rating, bool adapted, int config, int fontinfo_id, int fontinfo_id2)</argsstring>
        <name>AddNewResult</name>
        <param>
          <type><ref refid="struct_a_d_a_p_t___r_e_s_u_l_t_s" kindref="compound">ADAPT_RESULTS</ref> *</type>
          <declname>results</declname>
        </param>
        <param>
          <type><ref refid="matchdefs_8h_1afdabe64d68192a21409dd58c119709f8" kindref="member">CLASS_ID</ref></type>
          <declname>class_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shape_id</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
          <declname>rating</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>adapted</declname>
        </param>
        <param>
          <type>int</type>
          <declname>config</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fontinfo_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fontinfo_id2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine adds the result of a classification into Results. If the new rating is much worse than the current best rating, it is not entered into results because it would end up being stripped later anyway. If the new rating is better than the old rating for the class, it replaces the old rating. If this is the first rating for the class, the class is added to the list of matched classes in Results. If the new rating is better than the best so far, it becomes the best so far.</para><para>Globals:<itemizedlist>
<listitem><para>#matcher_bad_match_pad defines limits of an acceptable match</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">results</parametername>
</parameternamelist>
<parameterdescription>
<para>results to add new result to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>class_id</parametername>
</parameternamelist>
<parameterdescription>
<para>class of new result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape_id</parametername>
</parameternamelist>
<parameterdescription>
<para>shape index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rating</parametername>
</parameternamelist>
<parameterdescription>
<para>rating of new result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adapted</parametername>
</parameternamelist>
<parameterdescription>
<para>adapted match or not </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>config id of new result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fontinfo_id</parametername>
</parameternamelist>
<parameterdescription>
<para>font information of the new result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fontinfo_id2</parametername>
</parameternamelist>
<parameterdescription>
<para>font information of the 2nd choice result</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Tue Mar 12 18:19:29 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="183" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1142" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a1f21b989c93ff1d297b5bde442fc430c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tesseract::Classify::GetAdaptiveFeatures</definition>
        <argsstring>(TBLOB *Blob, INT_FEATURE_ARRAY IntFeatures, FEATURE_SET *FloatFeatures)</argsstring>
        <name>GetAdaptiveFeatures</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <param>
          <type><ref refid="intproto_8h_1afc188645dba6ff9f0eb7f056464fdd34" kindref="member">INT_FEATURE_ARRAY</ref></type>
          <declname>IntFeatures</declname>
        </param>
        <param>
          <type><ref refid="ocrfeatures_8h_1ac0c2f756ba2c7f34a21efbe13a49ac39" kindref="member">FEATURE_SET</ref> *</type>
          <declname>FloatFeatures</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine sets up the feature extractor to extract baseline normalized pico-features.</para><para>The extracted pico-features are converted to integer form and placed in IntFeatures. The original floating-pt. features are returned in FloatFeatures.</para><para>Globals: none <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Blob</parametername>
</parameternamelist>
<parameterdescription>
<para>blob to extract features from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">IntFeatures</parametername>
</parameternamelist>
<parameterdescription>
<para>array to fill with integer features </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">FloatFeatures</parametername>
</parameternamelist>
<parameterdescription>
<para>place to return actual floating-pt features</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of pico-features returned (0 if an error occurred) </para></simplesect>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Tue Mar 12 17:55:18 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="191" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="854" bodyend="873"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1af9a9def4a6b3bb1a2e36bceff2976c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::DebugAdaptiveClassifier</definition>
        <argsstring>(TBLOB *Blob, const DENORM &amp;denorm, ADAPT_RESULTS *Results)</argsstring>
        <name>DebugAdaptiveClassifier</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="struct_a_d_a_p_t___r_e_s_u_l_t_s" kindref="compound">ADAPT_RESULTS</ref> *</type>
          <declname>Results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Blob</parametername>
</parameternamelist>
<parameterdescription>
<para>blob whose classification is being debugged </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denorm</parametername>
</parameternamelist>
<parameterdescription>
<para>normalization/denormalization parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Results</parametername>
</parameternamelist>
<parameterdescription>
<para>results of match being debugged</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals: none</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Wed Mar 13 16:44:41 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="196" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1748" bodyend="1781"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a57d34f380d093913f3c3e74f7a7a9840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::GetAdaptThresholds</definition>
        <argsstring>(TWERD *Word, const DENORM &amp;denorm, const WERD_CHOICE &amp;BestChoice, const WERD_CHOICE &amp;BestRawChoice, FLOAT32 Thresholds[])</argsstring>
        <name>GetAdaptThresholds</name>
        <param>
          <type><ref refid="struct_t_w_e_r_d" kindref="compound">TWERD</ref> *</type>
          <declname>Word</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type>const <ref refid="class_w_e_r_d___c_h_o_i_c_e" kindref="compound">WERD_CHOICE</ref> &amp;</type>
          <declname>BestChoice</declname>
        </param>
        <param>
          <type>const <ref refid="class_w_e_r_d___c_h_o_i_c_e" kindref="compound">WERD_CHOICE</ref> &amp;</type>
          <declname>BestRawChoice</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
          <declname>Thresholds</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine tries to estimate how tight the adaptation threshold should be set for each character in the current word. In general, the routine tries to set tighter thresholds for a character when the current set of templates would have made an error on that character. It tries to set a threshold tight enough to eliminate the error. Two different sets of rules can be used to determine the desired thresholds.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Word</parametername>
</parameternamelist>
<parameterdescription>
<para>current word </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denorm</parametername>
</parameternamelist>
<parameterdescription>
<para>normalization/denormalization parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BestChoice</parametername>
</parameternamelist>
<parameterdescription>
<para>best choice for current word with context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BestRawChoice</parametername>
</parameternamelist>
<parameterdescription>
<para>best choice for current word without context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>array of thresholds to be filled in</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals:<itemizedlist>
<listitem><para>matcher_good_threshold</para></listitem><listitem><para>matcher_perfect_threshold</para></listitem><listitem><para>matcher_rating_margin</para></listitem></itemizedlist>
</para><para><simplesect kind="return"><para>none (results are returned in Thresholds) </para></simplesect>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Fri May 31 09:22:08 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="200" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1869" bodyend="1878"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1adc0facdf672d23f65612b56b4a5f523a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="matchdefs_8h_1ac80a5d84c2805bfd10ac129d949f8b80" kindref="member">PROTO_ID</ref></type>
        <definition>PROTO_ID tesseract::Classify::MakeNewTempProtos</definition>
        <argsstring>(FEATURE_SET Features, int NumBadFeat, FEATURE_ID BadFeat[], INT_CLASS IClass, ADAPT_CLASS Class, BIT_VECTOR TempProtoMask)</argsstring>
        <name>MakeNewTempProtos</name>
        <param>
          <type><ref refid="ocrfeatures_8h_1ac0c2f756ba2c7f34a21efbe13a49ac39" kindref="member">FEATURE_SET</ref></type>
          <declname>Features</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NumBadFeat</declname>
        </param>
        <param>
          <type><ref refid="matchdefs_8h_1a2223404e7ad809dd36193cc195377f56" kindref="member">FEATURE_ID</ref></type>
          <declname>BadFeat</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="intproto_8h_1a8c3e30dcc19d515ce47bc6db3b02cf84" kindref="member">INT_CLASS</ref></type>
          <declname>IClass</declname>
        </param>
        <param>
          <type><ref refid="adaptive_8h_1a1e42b7a7460500ee9e8b3d09a1f0330d" kindref="member">ADAPT_CLASS</ref></type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref></type>
          <declname>TempProtoMask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine finds sets of sequential bad features that all have the same angle and converts each set into a new temporary proto. The temp proto is added to the proto pruner for IClass, pushed onto the list of temp protos in Class, and added to TempProtoMask.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Features</parametername>
</parameternamelist>
<parameterdescription>
<para>floating-pt features describing new character </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NumBadFeat</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bad features to turn into protos </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BadFeat</parametername>
</parameternamelist>
<parameterdescription>
<para>feature id&apos;s of bad features </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IClass</parametername>
</parameternamelist>
<parameterdescription>
<para>integer class templates to add new protos to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Class</parametername>
</parameternamelist>
<parameterdescription>
<para>adapted class templates to add new protos to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TempProtoMask</parametername>
</parameternamelist>
<parameterdescription>
<para>proto mask to add new protos to</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals: none</para><para><simplesect kind="return"><para>Max proto id in class after all protos have been added. Exceptions: none History: Fri Mar 15 11:39:38 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="206" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="2233" bodyend="2307"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a59900939784eac1e2e6ebfec1f82bb58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tesseract::Classify::MakeNewTemporaryConfig</definition>
        <argsstring>(ADAPT_TEMPLATES Templates, CLASS_ID ClassId, int FontinfoId, int NumFeatures, INT_FEATURE_ARRAY Features, FEATURE_SET FloatFeatures)</argsstring>
        <name>MakeNewTemporaryConfig</name>
        <param>
          <type><ref refid="adaptive_8h_1a41c6dcad3fe69d675809c177e5537812" kindref="member">ADAPT_TEMPLATES</ref></type>
          <declname>Templates</declname>
        </param>
        <param>
          <type><ref refid="matchdefs_8h_1afdabe64d68192a21409dd58c119709f8" kindref="member">CLASS_ID</ref></type>
          <declname>ClassId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>FontinfoId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NumFeatures</declname>
        </param>
        <param>
          <type><ref refid="intproto_8h_1afc188645dba6ff9f0eb7f056464fdd34" kindref="member">INT_FEATURE_ARRAY</ref></type>
          <declname>Features</declname>
        </param>
        <param>
          <type><ref refid="ocrfeatures_8h_1ac0c2f756ba2c7f34a21efbe13a49ac39" kindref="member">FEATURE_SET</ref></type>
          <declname>FloatFeatures</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Templates</parametername>
</parameternamelist>
<parameterdescription>
<para>adapted templates to add new config to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ClassId</parametername>
</parameternamelist>
<parameterdescription>
<para>class id to associate with new config </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FontinfoId</parametername>
</parameternamelist>
<parameterdescription>
<para>font information inferred from pre-trained templates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NumFeatures</parametername>
</parameternamelist>
<parameterdescription>
<para>number of features in IntFeatures </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Features</parametername>
</parameternamelist>
<parameterdescription>
<para>features describing model for new config </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FloatFeatures</parametername>
</parameternamelist>
<parameterdescription>
<para>floating-pt representation of features</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The id of the new config created, a negative integer in case of error. </para></simplesect>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Fri Mar 15 08:49:46 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="212" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="2136" bodyend="2210"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1aefb0cfe284dd67601798f7ae510b787f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::MakePermanent</definition>
        <argsstring>(ADAPT_TEMPLATES Templates, CLASS_ID ClassId, int ConfigId, const DENORM &amp;denorm, TBLOB *Blob)</argsstring>
        <name>MakePermanent</name>
        <param>
          <type><ref refid="adaptive_8h_1a41c6dcad3fe69d675809c177e5537812" kindref="member">ADAPT_TEMPLATES</ref></type>
          <declname>Templates</declname>
        </param>
        <param>
          <type><ref refid="matchdefs_8h_1afdabe64d68192a21409dd58c119709f8" kindref="member">CLASS_ID</ref></type>
          <declname>ClassId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ConfigId</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Templates</parametername>
</parameternamelist>
<parameterdescription>
<para>current set of adaptive templates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ClassId</parametername>
</parameternamelist>
<parameterdescription>
<para>class containing config to be made permanent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ConfigId</parametername>
</parameternamelist>
<parameterdescription>
<para>config to be made permanent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denorm</parametername>
</parameternamelist>
<parameterdescription>
<para>normalization/denormalization parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Blob</parametername>
</parameternamelist>
<parameterdescription>
<para>current blob being adapted to</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals: none</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Thu Mar 14 15:54:08 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="218" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="2323" bodyend="2369"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1aad46f714847619694546e9ea2784402c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::PrintAdaptiveMatchResults</definition>
        <argsstring>(FILE *File, ADAPT_RESULTS *Results)</argsstring>
        <name>PrintAdaptiveMatchResults</name>
        <param>
          <type>FILE *</type>
          <declname>File</declname>
        </param>
        <param>
          <type><ref refid="struct_a_d_a_p_t___r_e_s_u_l_t_s" kindref="compound">ADAPT_RESULTS</ref> *</type>
          <declname>Results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine writes the matches in Results to File.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>File</parametername>
</parameternamelist>
<parameterdescription>
<para>open text file to write Results to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Results</parametername>
</parameternamelist>
<parameterdescription>
<para>match results to write to File</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals: none</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Mon Mar 18 09:24:53 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="223" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="2424" bodyend="2432"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1af15e83a02b369b820d40c8920b4275e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::RemoveExtraPuncs</definition>
        <argsstring>(ADAPT_RESULTS *Results)</argsstring>
        <name>RemoveExtraPuncs</name>
        <param>
          <type><ref refid="struct_a_d_a_p_t___r_e_s_u_l_t_s" kindref="compound">ADAPT_RESULTS</ref> *</type>
          <declname>Results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine discards extra digits or punctuation from the results. We keep only the top 2 punctuation answers and the top 1 digit answer if present.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Results</parametername>
</parameternamelist>
<parameterdescription>
<para>contains matches to be filtered</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>History: Tue Mar 12 13:51:03 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="224" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="2503" bodyend="2532"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a0e35029ac0c77ad18d35f08c27c99d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::RemoveBadMatches</definition>
        <argsstring>(ADAPT_RESULTS *Results)</argsstring>
        <name>RemoveBadMatches</name>
        <param>
          <type><ref refid="struct_a_d_a_p_t___r_e_s_u_l_t_s" kindref="compound">ADAPT_RESULTS</ref> *</type>
          <declname>Results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine steps thru each matching class in Results and removes it from the match list if its rating is worse than the BestRating plus a pad. In other words, all good matches get moved to the front of the classes array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Results</parametername>
</parameternamelist>
<parameterdescription>
<para>contains matches to be filtered</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals:<itemizedlist>
<listitem><para>matcher_bad_match_pad defines a &quot;bad match&quot;</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Tue Mar 12 13:51:03 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="225" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="2450" bodyend="2491"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a5a3045639a3db979a8d1eb6dc4343e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::SetAdaptiveThreshold</definition>
        <argsstring>(FLOAT32 Threshold)</argsstring>
        <name>SetAdaptiveThreshold</name>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
          <declname>Threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine resets the internal thresholds inside the integer matcher to correspond to the specified threshold.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>threshold for creating new templates</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals:<itemizedlist>
<listitem><para>matcher_good_threshold default good match rating</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Tue Apr 9 08:33:13 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="226" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="2548" bodyend="2554"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1abf81bc54d31591d9da5f95529583b99d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::ShowBestMatchFor</definition>
        <argsstring>(TBLOB *Blob, const DENORM &amp;denorm, CLASS_ID ClassId, int shape_id, BOOL8 AdaptiveOn, BOOL8 PreTrainedOn, ADAPT_RESULTS *Results)</argsstring>
        <name>ShowBestMatchFor</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="matchdefs_8h_1afdabe64d68192a21409dd58c119709f8" kindref="member">CLASS_ID</ref></type>
          <declname>ClassId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shape_id</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a7712a7e28433d0ade59219a129549b6f" kindref="member">BOOL8</ref></type>
          <declname>AdaptiveOn</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a7712a7e28433d0ade59219a129549b6f" kindref="member">BOOL8</ref></type>
          <declname>PreTrainedOn</declname>
        </param>
        <param>
          <type><ref refid="struct_a_d_a_p_t___r_e_s_u_l_t_s" kindref="compound">ADAPT_RESULTS</ref> *</type>
          <declname>Results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine compares Blob to both sets of templates (adaptive and pre-trained) and then displays debug information for the config which matched best.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Blob</parametername>
</parameternamelist>
<parameterdescription>
<para>blob to show best matching config for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denorm</parametername>
</parameternamelist>
<parameterdescription>
<para>normalization/denormalization parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ClassId</parametername>
</parameternamelist>
<parameterdescription>
<para>class whose configs are to be searched </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape_id</parametername>
</parameternamelist>
<parameterdescription>
<para>shape index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AdaptiveOn</parametername>
</parameternamelist>
<parameterdescription>
<para>TRUE if adaptive configs are enabled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PreTrainedOn</parametername>
</parameternamelist>
<parameterdescription>
<para>TRUE if pretrained configs are enabled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Results</parametername>
</parameternamelist>
<parameterdescription>
<para>results of match being debugged</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals:<itemizedlist>
<listitem><para>PreTrainedTemplates built-in training</para></listitem><listitem><para>AdaptedTemplates adaptive templates</para></listitem><listitem><para>AllProtosOn dummy proto mask</para></listitem><listitem><para>AllConfigsOn dummy config mask</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Fri Mar 22 08:43:52 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="227" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="2579" bodyend="2716"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a6fc9e3752efb2fe0d74920e082a59bd7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref></type>
        <definition>STRING tesseract::Classify::ClassIDToDebugStr</definition>
        <argsstring>(const INT_TEMPLATES_STRUCT *templates, int class_id, int config_id) const </argsstring>
        <name>ClassIDToDebugStr</name>
        <param>
          <type>const <ref refid="struct_i_n_t___t_e_m_p_l_a_t_e_s___s_t_r_u_c_t" kindref="compound">INT_TEMPLATES_STRUCT</ref> *</type>
          <declname>templates</declname>
        </param>
        <param>
          <type>int</type>
          <declname>class_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>config_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="236" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="2720" bodyend="2730"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a1002c7f80352c6ceac4af82ee35e5e06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tesseract::Classify::ClassAndConfigIDToFontOrShapeID</definition>
        <argsstring>(int class_id, int int_result_config) const </argsstring>
        <name>ClassAndConfigIDToFontOrShapeID</name>
        <param>
          <type>int</type>
          <declname>class_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>int_result_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="248" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="2733" bodyend="2742"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a319cfe59c8e82e697375a351e3c604b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tesseract::Classify::ShapeIDToClassID</definition>
        <argsstring>(int shape_id) const </argsstring>
        <name>ShapeIDToClassID</name>
        <param>
          <type>int</type>
          <declname>shape_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="252" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="2746" bodyend="2758"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ab7022031939236cac2fe6b661e6f657b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="unichar_8h_1a8578b19fa1ff5ca75080db1a18ecc32e" kindref="member">UNICHAR_ID</ref> *</type>
        <definition>UNICHAR_ID * tesseract::Classify::BaselineClassifier</definition>
        <argsstring>(TBLOB *Blob, const DENORM &amp;denorm, ADAPT_TEMPLATES Templates, ADAPT_RESULTS *Results)</argsstring>
        <name>BaselineClassifier</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="adaptive_8h_1a41c6dcad3fe69d675809c177e5537812" kindref="member">ADAPT_TEMPLATES</ref></type>
          <declname>Templates</declname>
        </param>
        <param>
          <type><ref refid="struct_a_d_a_p_t___r_e_s_u_l_t_s" kindref="compound">ADAPT_RESULTS</ref> *</type>
          <declname>Results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine extracts baseline normalized features from the unknown character and matches them against the specified set of templates. The classes which match are added to Results.</para><para>Globals:<itemizedlist>
<listitem><para>BaselineCutoffs expected num features for each class</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Blob</parametername>
</parameternamelist>
<parameterdescription>
<para>blob to be classified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denorm</parametername>
</parameternamelist>
<parameterdescription>
<para>normalization/denormalization parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Templates</parametername>
</parameternamelist>
<parameterdescription>
<para>current set of adapted templates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Results</parametername>
</parameternamelist>
<parameterdescription>
<para>place to put match results</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Array of possible ambiguous chars that should be checked. </para></simplesect>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Tue Mar 12 19:38:03 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="253" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1423" bodyend="1464"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a0e552819a03cc6f169e18a58b16696a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tesseract::Classify::CharNormClassifier</definition>
        <argsstring>(TBLOB *Blob, const DENORM &amp;denorm, INT_TEMPLATES Templates, ADAPT_RESULTS *Results)</argsstring>
        <name>CharNormClassifier</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="intproto_8h_1ab59629800b7869803b0af0f2f5db1627" kindref="member">INT_TEMPLATES</ref></type>
          <declname>Templates</declname>
        </param>
        <param>
          <type><ref refid="struct_a_d_a_p_t___r_e_s_u_l_t_s" kindref="compound">ADAPT_RESULTS</ref> *</type>
          <declname>Results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine extracts character normalized features from the unknown character and matches them against the specified set of templates. The classes which match are added to Results.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Blob</parametername>
</parameternamelist>
<parameterdescription>
<para>blob to be classified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denorm</parametername>
</parameternamelist>
<parameterdescription>
<para>normalization/denormalization parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Templates</parametername>
</parameternamelist>
<parameterdescription>
<para>templates to classify unknown against </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Results</parametername>
</parameternamelist>
<parameterdescription>
<para>place to put match results</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals:<itemizedlist>
<listitem><para>CharNormCutoffs expected num features for each class</para></listitem><listitem><para>AllProtosOn mask that enables all protos</para></listitem><listitem><para>AllConfigsOn mask that enables all configs</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Tue Mar 12 16:02:52 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="257" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1487" bodyend="1527"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1aa3907b770bdeb45e652e0ab122568cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tesseract::Classify::CharNormTrainingSample</definition>
        <argsstring>(bool pruner_only, const TrainingSample &amp;sample, GenericVector&lt; ShapeRating &gt; *results)</argsstring>
        <name>CharNormTrainingSample</name>
        <param>
          <type>bool</type>
          <declname>pruner_only</declname>
        </param>
        <param>
          <type>const <ref refid="classtesseract_1_1_training_sample" kindref="compound">TrainingSample</ref> &amp;</type>
          <declname>sample</declname>
        </param>
        <param>
          <type><ref refid="class_generic_vector" kindref="compound">GenericVector</ref>&lt; <ref refid="structtesseract_1_1_shape_rating" kindref="compound">ShapeRating</ref> &gt; *</type>
          <declname>results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="264" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1531" bodyend="1597"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1af4c186f6ec1019d17912d2cf36326f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="unichar_8h_1a8578b19fa1ff5ca75080db1a18ecc32e" kindref="member">UNICHAR_ID</ref> *</type>
        <definition>UNICHAR_ID * tesseract::Classify::GetAmbiguities</definition>
        <argsstring>(TBLOB *Blob, const DENORM &amp;denorm, CLASS_ID CorrectClass)</argsstring>
        <name>GetAmbiguities</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="matchdefs_8h_1afdabe64d68192a21409dd58c119709f8" kindref="member">CLASS_ID</ref></type>
          <declname>CorrectClass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine matches blob to the built-in templates to find out if there are any classes other than the correct class which are potential ambiguities.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Blob</parametername>
</parameternamelist>
<parameterdescription>
<para>blob to get classification ambiguities for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denorm</parametername>
</parameternamelist>
<parameterdescription>
<para>normalization/denormalization parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CorrectClass</parametername>
</parameternamelist>
<parameterdescription>
<para>correct class for Blob</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals:<itemizedlist>
<listitem><para>CurrentRatings used by qsort compare routine</para></listitem><listitem><para>PreTrainedTemplates built-in templates</para></listitem></itemizedlist>
</para><para><simplesect kind="return"><para>String containing all possible ambiguous classes. </para></simplesect>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Fri Mar 15 08:08:22 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="266" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1898" bodyend="1928"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a8575af5f97d4037d4fdd2e21b477dd38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::DoAdaptiveMatch</definition>
        <argsstring>(TBLOB *Blob, const DENORM &amp;denorm, ADAPT_RESULTS *Results)</argsstring>
        <name>DoAdaptiveMatch</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="struct_a_d_a_p_t___r_e_s_u_l_t_s" kindref="compound">ADAPT_RESULTS</ref> *</type>
          <declname>Results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine performs an adaptive classification. If we have not yet adapted to enough classes, a simple classification to the pre-trained templates is performed. Otherwise, we match the blob against the adapted templates. If the adapted templates do not match well, we try a match against the pre-trained templates. If an adapted template match is found, we do a match to any pre-trained templates which could be ambiguous. The results from all of these classifications are merged together into Results.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Blob</parametername>
</parameternamelist>
<parameterdescription>
<para>blob to be classified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denorm</parametername>
</parameternamelist>
<parameterdescription>
<para>normalization/denormalization parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Results</parametername>
</parameternamelist>
<parameterdescription>
<para>place to put match results</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals:<itemizedlist>
<listitem><para>PreTrainedTemplates built-in training templates</para></listitem><listitem><para>AdaptedTemplates templates adapted for this page</para></listitem><listitem><para>matcher_great_threshold rating limit for a great match</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Tue Mar 12 08:50:11 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="269" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1808" bodyend="1841"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a53629ef3f5562677ae096bbce864e5ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::AdaptToChar</definition>
        <argsstring>(TBLOB *Blob, const DENORM &amp;denorm, CLASS_ID ClassId, int FontinfoId, FLOAT32 Threshold)</argsstring>
        <name>AdaptToChar</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="matchdefs_8h_1afdabe64d68192a21409dd58c119709f8" kindref="member">CLASS_ID</ref></type>
          <declname>ClassId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>FontinfoId</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
          <declname>Threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Blob</parametername>
</parameternamelist>
<parameterdescription>
<para>blob to add to templates for ClassId </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denorm</parametername>
</parameternamelist>
<parameterdescription>
<para>normalization/denormalization parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ClassId</parametername>
</parameternamelist>
<parameterdescription>
<para>class to add blob to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FontinfoId</parametername>
</parameternamelist>
<parameterdescription>
<para>font information from pre-trained templates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum match rating to existing template</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals:<itemizedlist>
<listitem><para>AdaptedTemplates current set of adapted templates</para></listitem><listitem><para>AllProtosOn dummy mask to match against all protos</para></listitem><listitem><para>AllConfigsOn dummy mask to match against all configs</para></listitem></itemizedlist>
</para><para><simplesect kind="return"><para>none </para></simplesect>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Thu Mar 14 09:36:03 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="272" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="933" bodyend="1034"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1aaa7b4a01a6f9bd1f088982a4011274e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::DisplayAdaptedChar</definition>
        <argsstring>(TBLOB *blob, const DENORM &amp;denorm, INT_CLASS_STRUCT *int_class)</argsstring>
        <name>DisplayAdaptedChar</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="struct_i_n_t___c_l_a_s_s___s_t_r_u_c_t" kindref="compound">INT_CLASS_STRUCT</ref> *</type>
          <declname>int_class</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="277" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1036" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ac1f369f9a59739a588a4d84f60bac6c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tesseract::Classify::AdaptableWord</definition>
        <argsstring>(TWERD *Word, const WERD_CHOICE &amp;BestChoiceWord, const WERD_CHOICE &amp;RawChoiceWord)</argsstring>
        <name>AdaptableWord</name>
        <param>
          <type><ref refid="struct_t_w_e_r_d" kindref="compound">TWERD</ref> *</type>
          <declname>Word</declname>
        </param>
        <param>
          <type>const <ref refid="class_w_e_r_d___c_h_o_i_c_e" kindref="compound">WERD_CHOICE</ref> &amp;</type>
          <declname>BestChoiceWord</declname>
        </param>
        <param>
          <type>const <ref refid="class_w_e_r_d___c_h_o_i_c_e" kindref="compound">WERD_CHOICE</ref> &amp;</type>
          <declname>RawChoiceWord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return TRUE if the specified word is acceptable for adaptation.</para><para>Globals: none</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Word</parametername>
</parameternamelist>
<parameterdescription>
<para>current word </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BestChoiceWord</parametername>
</parameternamelist>
<parameterdescription>
<para>best overall choice for word with context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RawChoiceWord</parametername>
</parameternamelist>
<parameterdescription>
<para>best choice for word without context</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE or FALSE </para></simplesect>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Thu May 30 14:25:06 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="279" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="894" bodyend="914"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ae5e4880c5acc91b77308fbd6ab706b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::EndAdaptiveClassifier</definition>
        <argsstring>()</argsstring>
        <name>EndAdaptiveClassifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine performs cleanup operations on the adaptive classifier. It should be called before the program is terminated. Its main function is to save the adapted templates to a file.</para><para>Globals:<itemizedlist>
<listitem><para><ref refid="classtesseract_1_1_classify_1a49c2bec2694a12cb6518001d8193d58d" kindref="member">AdaptedTemplates</ref> current set of adapted templates</para></listitem><listitem><para>#classify_save_adapted_templates TRUE if templates should be saved</para></listitem><listitem><para>#classify_enable_adaptive_matcher TRUE if adaptive matcher is enabled</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Tue Mar 19 14:37:06 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="282" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="476" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a8c350afec3f633660d20eb98226a40d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::PrintAdaptiveStatistics</definition>
        <argsstring>(FILE *File)</argsstring>
        <name>PrintAdaptiveStatistics</name>
        <param>
          <type>FILE *</type>
          <declname>File</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print to File the statistics which have been gathered for the adaptive matcher.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>File</parametername>
</parameternamelist>
<parameterdescription>
<para>open text file to print adaptive statistics to</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals: none</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Thu Apr 18 14:37:37 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="283" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="659" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ae66827073cdeea6a59dd16fd7cf5d297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::SettupPass1</definition>
        <argsstring>()</argsstring>
        <name>SettupPass1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine prepares the adaptive matcher for the start of the first pass. Learning is enabled (unless it is disabled for the whole program).</para><para><simplesect kind="note"><para>this is somewhat redundant, it simply says that if learning is enabled then it will remain enabled on the first pass. If it is disabled, then it will remain disabled. This is only put here to make it very clear that learning is controlled directly by the global setting of EnableLearning.</para></simplesect>
Globals:<itemizedlist>
<listitem><para><ref refid="classtesseract_1_1_classify_1a7d0ccfd06421346d8cda0f1b76fd8516" kindref="member">EnableLearning</ref> set to TRUE by this routine</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Mon Apr 15 16:39:29 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="284" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="710" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a5ad207ab75e8a69c35c225313268788b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::SettupPass2</definition>
        <argsstring>()</argsstring>
        <name>SettupPass2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine prepares the adaptive matcher for the start of the second pass. Further learning is disabled.</para><para>Globals:<itemizedlist>
<listitem><para><ref refid="classtesseract_1_1_classify_1a7d0ccfd06421346d8cda0f1b76fd8516" kindref="member">EnableLearning</ref> set to FALSE by this routine</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Mon Apr 15 16:39:29 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="285" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="730" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a1f058451e32538b4dc2c853b82bc6600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::AdaptiveClassifier</definition>
        <argsstring>(TBLOB *Blob, const DENORM &amp;denorm, BLOB_CHOICE_LIST *Choices, CLASS_PRUNER_RESULTS cp_results)</argsstring>
        <name>AdaptiveClassifier</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type>BLOB_CHOICE_LIST *</type>
          <declname>Choices</declname>
        </param>
        <param>
          <type><ref refid="intmatcher_8h_1aad58739a624ab51ab180aac3342c6efc" kindref="member">CLASS_PRUNER_RESULTS</ref></type>
          <declname>cp_results</declname>
          <defname>CPResults</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine calls the adaptive matcher which returns (in an array) the class id of each class matched.</para><para>It also returns the number of classes matched. For each class matched it places the best rating found for that class into the Ratings array.</para><para>Bad matches are then removed so that they don&apos;t need to be sorted. The remaining good matches are then sorted and converted to choices.</para><para>This routine also performs some simple speckle filtering.</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Mon Mar 11 10:00:58 1991, DSJ, Created.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Blob</parametername>
</parameternamelist>
<parameterdescription>
<para>blob to be classified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denorm</parametername>
</parameternamelist>
<parameterdescription>
<para>normalization/denormalization parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">Choices</parametername>
</parameternamelist>
<parameterdescription>
<para>List of choices found by adaptive matcher. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">CPResults</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of CPResultStruct of size MAX_NUM_CLASSES is filled on return with the choices found by the class pruner and the ratings therefrom. Also contains the detailed results of the integer matcher. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="286" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="178" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a8a68035cfc5ee866f2d39360072ab77c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::ClassifyAsNoise</definition>
        <argsstring>(ADAPT_RESULTS *Results)</argsstring>
        <name>ClassifyAsNoise</name>
        <param>
          <type><ref refid="struct_a_d_a_p_t___r_e_s_u_l_t_s" kindref="compound">ADAPT_RESULTS</ref> *</type>
          <declname>Results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine computes a rating which reflects the likelihood that the blob being classified is a noise blob. NOTE: assumes that the blob length has already been computed and placed into Results.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Results</parametername>
</parameternamelist>
<parameterdescription>
<para>results to add noise classification to</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals:<itemizedlist>
<listitem><para>matcher_avg_noise_size avg. length of a noise blob</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Tue Mar 12 18:36:52 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="290" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1615" bodyend="1624"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a350f6cb6e7ce9f53ae468908a91c6148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::ResetAdaptiveClassifierInternal</definition>
        <argsstring>()</argsstring>
        <name>ResetAdaptiveClassifierInternal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="291" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="636" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a4bf0e47e0ae00a0cec215a887cef8c65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tesseract::Classify::GetBaselineFeatures</definition>
        <argsstring>(TBLOB *Blob, const DENORM &amp;denorm, INT_TEMPLATES Templates, INT_FEATURE_ARRAY IntFeatures, uinT8 *CharNormArray, inT32 *BlobLength)</argsstring>
        <name>GetBaselineFeatures</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="intproto_8h_1ab59629800b7869803b0af0f2f5db1627" kindref="member">INT_TEMPLATES</ref></type>
          <declname>Templates</declname>
        </param>
        <param>
          <type><ref refid="intproto_8h_1afc188645dba6ff9f0eb7f056464fdd34" kindref="member">INT_FEATURE_ARRAY</ref></type>
          <declname>IntFeatures</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>CharNormArray</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref> *</type>
          <declname>BlobLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine calls the integer (Hardware) feature extractor if it has not been called before for this blob. The results from the feature extractor are placed into globals so that they can be used in other routines without re-extracting the features. It then copies the baseline features into the IntFeatures array provided by the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Blob</parametername>
</parameternamelist>
<parameterdescription>
<para>blob to extract features from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denorm</parametername>
</parameternamelist>
<parameterdescription>
<para>normalization/denormalization parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Templates</parametername>
</parameternamelist>
<parameterdescription>
<para>used to compute char norm adjustments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntFeatures</parametername>
</parameternamelist>
<parameterdescription>
<para>array to fill with integer features </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CharNormArray</parametername>
</parameternamelist>
<parameterdescription>
<para>array to fill with dummy char norm adjustments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BlobLength</parametername>
</parameternamelist>
<parameterdescription>
<para>length of blob in baseline-normalized units</para></parameterdescription>
</parameteritem>
</parameterlist>
Globals:<itemizedlist>
<listitem><para>FeaturesHaveBeenExtracted TRUE if fx has been done</para></listitem><listitem><para>BaselineFeatures holds extracted baseline feat</para></listitem><listitem><para>CharNormFeatures holds extracted char norm feat</para></listitem><listitem><para>FXInfo holds misc. FX info</para></listitem></itemizedlist>
</para><para><simplesect kind="return"><para>Number of features extracted or 0 if an error occured. </para></simplesect>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Tue May 28 10:40:52 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="293" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1957" bodyend="1983"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a1076d5d08686e48d39ef3eb07e711fb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tesseract::Classify::GetCharNormFeatures</definition>
        <argsstring>(TBLOB *Blob, const DENORM &amp;denorm, INT_TEMPLATES Templates, INT_FEATURE_ARRAY IntFeatures, uinT8 *PrunerNormArray, uinT8 *CharNormArray, inT32 *BlobLength, inT32 *FeatureOutlineIndex)</argsstring>
        <name>GetCharNormFeatures</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="intproto_8h_1ab59629800b7869803b0af0f2f5db1627" kindref="member">INT_TEMPLATES</ref></type>
          <declname>Templates</declname>
        </param>
        <param>
          <type><ref refid="intproto_8h_1afc188645dba6ff9f0eb7f056464fdd34" kindref="member">INT_FEATURE_ARRAY</ref></type>
          <declname>IntFeatures</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>PrunerNormArray</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>CharNormArray</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref> *</type>
          <declname>BlobLength</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref> *</type>
          <declname>FeatureOutlineIndex</declname>
          <defname>FeatureOutlineArray</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine calls the integer (Hardware) feature extractor if it has not been called before for this blob.</para><para>The results from the feature extractor are placed into globals so that they can be used in other routines without re-extracting the features.</para><para>It then copies the char norm features into the IntFeatures array provided by the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Blob</parametername>
</parameternamelist>
<parameterdescription>
<para>blob to extract features from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denorm</parametername>
</parameternamelist>
<parameterdescription>
<para>normalization/denormalization parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Templates</parametername>
</parameternamelist>
<parameterdescription>
<para>used to compute char norm adjustments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntFeatures</parametername>
</parameternamelist>
<parameterdescription>
<para>array to fill with integer features </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PrunerNormArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of factors from blob normalization process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CharNormArray</parametername>
</parameternamelist>
<parameterdescription>
<para>array to fill with dummy char norm adjustments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BlobLength</parametername>
</parameternamelist>
<parameterdescription>
<para>length of blob in baseline-normalized units </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FeatureOutlineArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Globals:<itemizedlist>
<listitem><para>FeaturesHaveBeenExtracted TRUE if fx has been done</para></listitem><listitem><para>BaselineFeatures holds extracted baseline feat</para></listitem><listitem><para>CharNormFeatures holds extracted char norm feat</para></listitem><listitem><para>FXInfo holds misc. FX info</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of features extracted or 0 if an error occured. </para></simplesect>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Tue May 28 10:40:52 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="299" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="2045" bodyend="2088"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a8f49de2f8da7b066bd8ece0641edcca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::ComputeCharNormArrays</definition>
        <argsstring>(FEATURE_STRUCT *norm_feature, INT_TEMPLATES_STRUCT *templates, uinT8 *char_norm_array, uinT8 *pruner_array)</argsstring>
        <name>ComputeCharNormArrays</name>
        <param>
          <type><ref refid="struct_f_e_a_t_u_r_e___s_t_r_u_c_t" kindref="compound">FEATURE_STRUCT</ref> *</type>
          <declname>norm_feature</declname>
        </param>
        <param>
          <type><ref refid="struct_i_n_t___t_e_m_p_l_a_t_e_s___s_t_r_u_c_t" kindref="compound">INT_TEMPLATES_STRUCT</ref> *</type>
          <declname>templates</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>char_norm_array</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>pruner_array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="310" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="2092" bodyend="2119"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a786c5f6e2a5cd8aac2ed4dd89af84fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tesseract::Classify::TempConfigReliable</definition>
        <argsstring>(CLASS_ID class_id, const TEMP_CONFIG &amp;config)</argsstring>
        <name>TempConfigReliable</name>
        <param>
          <type><ref refid="matchdefs_8h_1afdabe64d68192a21409dd58c119709f8" kindref="member">CLASS_ID</ref></type>
          <declname>class_id</declname>
        </param>
        <param>
          <type>const <ref refid="adaptive_8h_1a844d69e71035a4a60207cedab3521f9e" kindref="member">TEMP_CONFIG</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="315" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="2762" bodyend="2797"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a954c9085f840572567462c9e0ff3551a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::UpdateAmbigsGroup</definition>
        <argsstring>(CLASS_ID class_id, const DENORM &amp;denorm, TBLOB *Blob)</argsstring>
        <name>UpdateAmbigsGroup</name>
        <param>
          <type><ref refid="matchdefs_8h_1afdabe64d68192a21409dd58c119709f8" kindref="member">CLASS_ID</ref></type>
          <declname>class_id</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="316" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="2799" bodyend="2825"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a62ffff7932680b25784bfca5079ce347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::ResetFeaturesHaveBeenExtracted</definition>
        <argsstring>()</argsstring>
        <name>ResetFeaturesHaveBeenExtracted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="318" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1985" bodyend="1987"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1aa2f1ff296efea11aabd476cba49a39c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tesseract::Classify::AdaptiveClassifierIsFull</definition>
        <argsstring>()</argsstring>
        <name>AdaptiveClassifierIsFull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="319" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="319" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ab72f687048a2e1eba44b8ae2cfb07fa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tesseract::Classify::LooksLikeGarbage</definition>
        <argsstring>(const DENORM &amp;denorm, TBLOB *blob)</argsstring>
        <name>LooksLikeGarbage</name>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>blob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="320" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="1991" bodyend="2011"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a6e36e01c8147d95bbd64c6609e1b8f45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::RefreshDebugWindow</definition>
        <argsstring>(ScrollView **win, const char *msg, int y_offset, const TBOX &amp;wbox)</argsstring>
        <name>RefreshDebugWindow</name>
        <param>
          <type><ref refid="class_scroll_view" kindref="compound">ScrollView</ref> **</type>
          <declname>win</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y_offset</declname>
        </param>
        <param>
          <type>const <ref refid="class_t_b_o_x" kindref="compound">TBOX</ref> &amp;</type>
          <declname>wbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="321" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/adaptmatch.cpp" bodystart="228" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ac0de90c99552cdc286f934d344790085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::ClearCharNormArray</definition>
        <argsstring>(uinT8 *char_norm_array)</argsstring>
        <name>ClearCharNormArray</name>
        <param>
          <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>char_norm_array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For each class in the unicharset, clears the corresponding entry in char_norm_array. char_norm_array is indexed by unichar_id.</para><para>Globals:<itemizedlist>
<listitem><para>none</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>char_norm_array</parametername>
</parameternamelist>
<parameterdescription>
<para>array to be cleared</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Wed Feb 20 11:20:54 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="324" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/float2int.cpp" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a3abc0b280fe8a88d57a35d2d578ef47a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::ComputeIntCharNormArray</definition>
        <argsstring>(const FEATURE_STRUCT &amp;norm_feature, uinT8 *char_norm_array)</argsstring>
        <name>ComputeIntCharNormArray</name>
        <param>
          <type>const <ref refid="struct_f_e_a_t_u_r_e___s_t_r_u_c_t" kindref="compound">FEATURE_STRUCT</ref> &amp;</type>
          <declname>norm_feature</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>char_norm_array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For each class in unicharset, computes the match between norm_feature and the normalization protos for that class. Converts this number to the range from 0 - 255 and stores it into char_norm_array. CharNormArray is indexed by unichar_id.</para><para>Globals:<itemizedlist>
<listitem><para>PreTrainedTemplates current set of built-in templates</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>norm_feature</parametername>
</parameternamelist>
<parameterdescription>
<para>character normalization feature </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">char_norm_array</parametername>
</parameternamelist>
<parameterdescription>
<para>place to put results of size unicharset.size()</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Wed Feb 20 11:20:54 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="325" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/float2int.cpp" bodystart="69" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ae1f3fc88bf28a4a169273bcf2515610e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::ComputeIntFeatures</definition>
        <argsstring>(FEATURE_SET Features, INT_FEATURE_ARRAY IntFeatures)</argsstring>
        <name>ComputeIntFeatures</name>
        <param>
          <type><ref refid="ocrfeatures_8h_1ac0c2f756ba2c7f34a21efbe13a49ac39" kindref="member">FEATURE_SET</ref></type>
          <declname>Features</declname>
        </param>
        <param>
          <type><ref refid="intproto_8h_1afc188645dba6ff9f0eb7f056464fdd34" kindref="member">INT_FEATURE_ARRAY</ref></type>
          <declname>IntFeatures</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine converts each floating point pico-feature in Features into integer format and saves it into IntFeatures.</para><para>Globals:<itemizedlist>
<listitem><para>none</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Features</parametername>
</parameternamelist>
<parameterdescription>
<para>floating point pico-features to be converted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">IntFeatures</parametername>
</parameternamelist>
<parameterdescription>
<para>array to put converted features into</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Wed Feb 20 10:58:45 1991, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="327" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/float2int.cpp" bodystart="100" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a98459996e5e6ab1dc1de71411fd32b89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="intproto_8h_1ab59629800b7869803b0af0f2f5db1627" kindref="member">INT_TEMPLATES</ref></type>
        <definition>INT_TEMPLATES tesseract::Classify::ReadIntTemplates</definition>
        <argsstring>(FILE *File)</argsstring>
        <name>ReadIntTemplates</name>
        <param>
          <type>FILE *</type>
          <declname>File</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="329" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intproto.cpp" bodystart="786" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a81e8a5e5adfc60146ea3eb5b60936dd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::WriteIntTemplates</definition>
        <argsstring>(FILE *File, INT_TEMPLATES Templates, const UNICHARSET &amp;target_unicharset)</argsstring>
        <name>WriteIntTemplates</name>
        <param>
          <type>FILE *</type>
          <declname>File</declname>
        </param>
        <param>
          <type><ref refid="intproto_8h_1ab59629800b7869803b0af0f2f5db1627" kindref="member">INT_TEMPLATES</ref></type>
          <declname>Templates</declname>
        </param>
        <param>
          <type>const <ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref> &amp;</type>
          <declname>target_unicharset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="330" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intproto.cpp" bodystart="1155" bodyend="1225"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a76f4e180bcab3a7cd2da75d42b524eba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="matchdefs_8h_1afdabe64d68192a21409dd58c119709f8" kindref="member">CLASS_ID</ref></type>
        <definition>CLASS_ID tesseract::Classify::GetClassToDebug</definition>
        <argsstring>(const char *Prompt, bool *adaptive_on, bool *pretrained_on, int *shape_id)</argsstring>
        <name>GetClassToDebug</name>
        <param>
          <type>const char *</type>
          <declname>Prompt</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>adaptive_on</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>pretrained_on</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>shape_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="332" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intproto.cpp" bodystart="1432" bodyend="1502"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a44e1b8840fb841e621b902f3abdd8522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::ShowMatchDisplay</definition>
        <argsstring>()</argsstring>
        <name>ShowMatchDisplay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="334" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intproto.cpp" bodystart="1096" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a62597f182a5e23c3b8a030c06e699e99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_unicity_table" kindref="compound">UnicityTable</ref>&lt; <ref refid="structtesseract_1_1_font_info" kindref="compound">FontInfo</ref> &gt; &amp;</type>
        <definition>UnicityTable&lt;FontInfo&gt;&amp; tesseract::Classify::get_fontinfo_table</definition>
        <argsstring>()</argsstring>
        <name>get_fontinfo_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="336" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="336" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a84d0021ef7ddbc98196801f9808fa33d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_unicity_table" kindref="compound">UnicityTable</ref>&lt; <ref refid="structtesseract_1_1_font_set" kindref="compound">FontSet</ref> &gt; &amp;</type>
        <definition>UnicityTable&lt;FontSet&gt;&amp; tesseract::Classify::get_fontset_table</definition>
        <argsstring>()</argsstring>
        <name>get_fontset_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="339" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="339" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a8cbc3c255f888cc49c713c0a7408d2ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tesseract::Classify::NormalizeOutlines</definition>
        <argsstring>(LIST Outlines, FLOAT32 *XScale, FLOAT32 *YScale)</argsstring>
        <name>NormalizeOutlines</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>Outlines</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref> *</type>
          <declname>XScale</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref> *</type>
          <declname>YScale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="343" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/mfoutline.cpp" bodystart="346" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1af1ef43f77139dc879d27a510adcb4bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ocrfeatures_8h_1ac0c2f756ba2c7f34a21efbe13a49ac39" kindref="member">FEATURE_SET</ref></type>
        <definition>FEATURE_SET tesseract::Classify::ExtractOutlineFeatures</definition>
        <argsstring>(TBLOB *Blob)</argsstring>
        <name>ExtractOutlineFeatures</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="345" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/outfeat.cpp" bodystart="36" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ad6d1f9f29655ffe18fab3832b113e00b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ocrfeatures_8h_1ac0c2f756ba2c7f34a21efbe13a49ac39" kindref="member">FEATURE_SET</ref></type>
        <definition>FEATURE_SET tesseract::Classify::ExtractPicoFeatures</definition>
        <argsstring>(TBLOB *Blob)</argsstring>
        <name>ExtractPicoFeatures</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="347" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/picofeat.cpp" bodystart="57" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ac3a7992c4a976e8c13032f466bbd6325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::BOOL_VAR_H</definition>
        <argsstring>(prioritize_division, FALSE,&quot;Prioritize blob division over chopping&quot;)</argsstring>
        <name>BOOL_VAR_H</name>
        <param>
          <type>prioritize_division</type>
        </param>
        <param>
          <type><ref refid="cutil_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref></type>
        </param>
        <param>
          <type>&quot;Prioritize blob division over chopping&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a78237516883f141f0f2f2b81a88dc7d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(tessedit_single_match, FALSE,&quot;Top choice only from CP&quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>tessedit_single_match</type>
        </param>
        <param>
          <type><ref refid="cutil_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref></type>
        </param>
        <param>
          <type>&quot;Top choice only from CP&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a1ca4ac4e5ca91d747a014363b12038e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::BOOL_VAR_H</definition>
        <argsstring>(classify_enable_learning, true,&quot;Enable adaptive classifier&quot;)</argsstring>
        <name>BOOL_VAR_H</name>
        <param>
          <type>classify_enable_learning</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>&quot;Enable adaptive classifier&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1aa3ca8b987244da7eb2d651a1387838ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(classify_debug_level, 0,&quot;Classify debug level&quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>classify_debug_level</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>&quot;Classify debug level&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a4c31c41113fc3c808298c8d65143bc3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(classify_norm_method, character,&quot;Normalization Method   ...&quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>classify_norm_method</type>
        </param>
        <param>
          <type><ref refid="mfoutline_8h_1a2a4b69f9a2827dc98bc4cbc233118865afa40ef3af4fea0001b535318130960b2" kindref="member">character</ref></type>
        </param>
        <param>
          <type>&quot;Normalization Method ...&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a9b30d9e69cbab064bb64f308282253b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(classify_char_norm_range, 0.2,&quot;Character Normalization Range ...&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>classify_char_norm_range</type>
        </param>
        <param>
          <type>0.</type>
          <declname>2</declname>
        </param>
        <param>
          <type>&quot;Character Normalization Range ...&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ae7f051dd6f6a9c3c2796033fa44da205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(classify_min_norm_scale_x, 0.0,&quot;Min char x-norm scale ...&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>classify_min_norm_scale_x</type>
        </param>
        <param>
          <type>0.</type>
          <declname>0</declname>
        </param>
        <param>
          <type>&quot;Min char x-norm scale ...&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1aa4c5da7c638e833c1923d4ae0eb1d4b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(classify_max_norm_scale_x, 0.325,&quot;Max char x-norm scale ...&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>classify_max_norm_scale_x</type>
        </param>
        <param>
          <type>0.</type>
          <declname>325</declname>
        </param>
        <param>
          <type>&quot;Max char x-norm scale ...&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a29705fef02da95d5d1ca9e57b35117ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(classify_min_norm_scale_y, 0.0,&quot;Min char y-norm scale ...&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>classify_min_norm_scale_y</type>
        </param>
        <param>
          <type>0.</type>
          <declname>0</declname>
        </param>
        <param>
          <type>&quot;Min char y-norm scale ...&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a9a81245acd8b6e947e178ee4719b3e48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(classify_max_norm_scale_y, 0.325,&quot;Max char y-norm scale ...&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>classify_max_norm_scale_y</type>
        </param>
        <param>
          <type>0.</type>
          <declname>325</declname>
        </param>
        <param>
          <type>&quot;Max char y-norm scale ...&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1afb129415c0a278bf25af618ba6efb72c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::BOOL_VAR_H</definition>
        <argsstring>(tess_cn_matching, 0,&quot;Character Normalized Matching&quot;)</argsstring>
        <name>BOOL_VAR_H</name>
        <param>
          <type>tess_cn_matching</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>&quot;Character Normalized Matching&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ac5ee505129a57940d17fb26e21ae362f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::BOOL_VAR_H</definition>
        <argsstring>(tess_bn_matching, 0,&quot;Baseline Normalized Matching&quot;)</argsstring>
        <name>BOOL_VAR_H</name>
        <param>
          <type>tess_bn_matching</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>&quot;Baseline Normalized Matching&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="371" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1aac971def19a61264c26c895689f37789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::BOOL_VAR_H</definition>
        <argsstring>(classify_enable_adaptive_matcher, 1,&quot;Enable adaptive classifier&quot;)</argsstring>
        <name>BOOL_VAR_H</name>
        <param>
          <type>classify_enable_adaptive_matcher</type>
        </param>
        <param>
          <type>1</type>
        </param>
        <param>
          <type>&quot;Enable adaptive classifier&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a4c1592b0fcae11d219a8370894f113a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::BOOL_VAR_H</definition>
        <argsstring>(classify_use_pre_adapted_templates, 0,&quot;Use pre-adapted classifier templates&quot;)</argsstring>
        <name>BOOL_VAR_H</name>
        <param>
          <type>classify_use_pre_adapted_templates</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>&quot;Use pre-adapted classifier templates&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a2ea6c277addea769804cf2ec8584ae88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::BOOL_VAR_H</definition>
        <argsstring>(classify_save_adapted_templates, 0,&quot;Save adapted templates to a file&quot;)</argsstring>
        <name>BOOL_VAR_H</name>
        <param>
          <type>classify_save_adapted_templates</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>&quot;Save adapted templates to a file&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a00efcf64a1cd659755679db8c4e36079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::BOOL_VAR_H</definition>
        <argsstring>(classify_enable_adaptive_debugger, 0,&quot;Enable match debugger&quot;)</argsstring>
        <name>BOOL_VAR_H</name>
        <param>
          <type>classify_enable_adaptive_debugger</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>&quot;Enable match debugger&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a109361f3a013a7eb29ffdfcc5f859ff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(matcher_debug_level, 0,&quot;Matcher Debug Level&quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>matcher_debug_level</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>&quot;Matcher Debug Level&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a741ce5afa3897f6f5fedf3ca62fb57cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(matcher_debug_flags, 0,&quot;Matcher Debug Flags&quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>matcher_debug_flags</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>&quot;Matcher Debug Flags&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a64b171ab4872f933fc194c933da6fadc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(classify_learning_debug_level, 0,&quot;Learning Debug Level: &quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>classify_learning_debug_level</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>&quot;Learning Debug Level: &quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a11d6b1ede8e900798c1896be2c1ba7fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(matcher_good_threshold, 0.125,&quot;Good Match (0-1)&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>matcher_good_threshold</type>
        </param>
        <param>
          <type>0.</type>
          <declname>125</declname>
        </param>
        <param>
          <type>&quot;Good Match (0-1)&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a3299d357a0c2297940525200f7f2821d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(matcher_great_threshold, 0.0,&quot;Great Match (0-1)&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>matcher_great_threshold</type>
        </param>
        <param>
          <type>0.</type>
          <declname>0</declname>
        </param>
        <param>
          <type>&quot;Great Match (0-1)&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ab5fd085492771e8e797c4b5876659b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(matcher_perfect_threshold, 0.02,&quot;Perfect Match (0-1)&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>matcher_perfect_threshold</type>
        </param>
        <param>
          <type>0.</type>
          <declname>02</declname>
        </param>
        <param>
          <type>&quot;Perfect Match (0-1)&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a3af2d1779411f1c56c970ccded7cab0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(matcher_bad_match_pad, 0.15,&quot;Bad Match Pad (0-1)&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>matcher_bad_match_pad</type>
        </param>
        <param>
          <type>0.</type>
          <declname>15</declname>
        </param>
        <param>
          <type>&quot;Bad Match Pad (0-1)&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a21415c32ace975dedc862b46384315b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(matcher_rating_margin, 0.1,&quot;New template margin (0-1)&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>matcher_rating_margin</type>
        </param>
        <param>
          <type>0.</type>
          <declname>1</declname>
        </param>
        <param>
          <type>&quot;New template margin (0-1)&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a076648daf7965ebfc05aa9598ca7fdc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(matcher_avg_noise_size, 12.0,&quot;Avg. noise blob length: &quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>matcher_avg_noise_size</type>
        </param>
        <param>
          <type>12.</type>
          <declname>0</declname>
        </param>
        <param>
          <type>&quot;Avg. noise blob length: &quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a3085fb94b97512a6853c65913dadefef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(matcher_permanent_classes_min, 1,&quot;Min # of permanent classes&quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>matcher_permanent_classes_min</type>
        </param>
        <param>
          <type>1</type>
        </param>
        <param>
          <type>&quot;Min # of permanent classes&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a5b47d139528e39589358dbed7f3593b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(matcher_min_examples_for_prototyping, 3,&quot;Reliable Config Threshold&quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>matcher_min_examples_for_prototyping</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>&quot;Reliable <ref refid="commontraining_8h_1a1630a3dc82a9a7cef07bb6153df9eb9c" kindref="member">Config</ref> Threshold&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a70176fd471cc1a8099f8ded206525bea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(matcher_sufficient_examples_for_prototyping, 5,&quot;Enable adaption even if the ambiguities have not been seen&quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>matcher_sufficient_examples_for_prototyping</type>
        </param>
        <param>
          <type>5</type>
        </param>
        <param>
          <type>&quot;Enable adaption even if the ambiguities have not been seen&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a36b92a3b67b1d5a663ae2d2bc10951d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(matcher_clustering_max_angle_delta, 0.015,&quot;Maximum angle delta for prototype clustering&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>matcher_clustering_max_angle_delta</type>
        </param>
        <param>
          <type>0.</type>
          <declname>015</declname>
        </param>
        <param>
          <type>&quot;Maximum angle delta for prototype clustering&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1aa48244c93b730889fbfd7cfe44b54e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(classify_misfit_junk_penalty, 0.0,&quot;Penalty to apply when a non-alnum is vertically out of &quot;&quot;its expected textline position&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>classify_misfit_junk_penalty</type>
        </param>
        <param>
          <type>0.</type>
          <declname>0</declname>
        </param>
        <param>
          <type>&quot;Penalty to apply when a non-alnum is vertically out of &quot;&quot;its expected textline position&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a5daa351779bf9aaa770c5a3061afacb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(rating_scale, 1.5,&quot;Rating scaling factor&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>rating_scale</type>
        </param>
        <param>
          <type>1.</type>
          <declname>5</declname>
        </param>
        <param>
          <type>&quot;Rating scaling factor&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1acf92ee50de869b39649d113a841e0edf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(certainty_scale, 20.0,&quot;Certainty scaling factor&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>certainty_scale</type>
        </param>
        <param>
          <type>20.</type>
          <declname>0</declname>
        </param>
        <param>
          <type>&quot;Certainty scaling factor&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="398" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a78017208c388e4de73a7639ad5690039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(tessedit_class_miss_scale, 0.00390625,&quot;Scale factor for features not used&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>tessedit_class_miss_scale</type>
        </param>
        <param>
          <type>0.</type>
          <declname>00390625</declname>
        </param>
        <param>
          <type>&quot;Scale factor for features not used&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="399" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a74e61ea0e3da0c2a99204aa09d7db71b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(classify_adapt_proto_threshold, 230,&quot;Threshold for good protos during adaptive 0-255&quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>classify_adapt_proto_threshold</type>
        </param>
        <param>
          <type>230</type>
        </param>
        <param>
          <type>&quot;Threshold for good protos during adaptive 0-255&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ab1e8bd80e90a2ac5386dcbfc036c3531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(classify_adapt_feature_threshold, 230,&quot;Threshold for good features during adaptive 0-255&quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>classify_adapt_feature_threshold</type>
        </param>
        <param>
          <type>230</type>
        </param>
        <param>
          <type>&quot;Threshold for good features during adaptive 0-255&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="403" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1ae5311d7dd3ec374de10dc73bd8ff352c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::BOOL_VAR_H</definition>
        <argsstring>(disable_character_fragments, TRUE,&quot;Do not include character fragments in the&quot;&quot; results of the classifier&quot;)</argsstring>
        <name>BOOL_VAR_H</name>
        <param>
          <type>disable_character_fragments</type>
        </param>
        <param>
          <type><ref refid="cutil_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref></type>
        </param>
        <param>
          <type>&quot;Do not include <ref refid="mfoutline_8h_1a2a4b69f9a2827dc98bc4cbc233118865afa40ef3af4fea0001b535318130960b2" kindref="member">character</ref> fragments in the&quot;&quot; results of the classifier&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="405" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1aa418c315637e7d0c635ccf34663eddb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::double_VAR_H</definition>
        <argsstring>(classify_character_fragments_garbage_certainty_threshold,-3.0,&quot;Exclude fragments that do not match any whole character&quot;&quot; with at least this certainty&quot;)</argsstring>
        <name>double_VAR_H</name>
        <param>
          <type>classify_character_fragments_garbage_certainty_threshold</type>
        </param>
        <param>
          <type>-3.</type>
          <declname>0</declname>
        </param>
        <param>
          <type>&quot;Exclude fragments that do not match any whole <ref refid="mfoutline_8h_1a2a4b69f9a2827dc98bc4cbc233118865afa40ef3af4fea0001b535318130960b2" kindref="member">character</ref>&quot;&quot; with at least this certainty&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a36aa6b12cb8f85dab9e61ab974be97c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::BOOL_VAR_H</definition>
        <argsstring>(classify_debug_character_fragments, FALSE,&quot;Bring up graphical debugging windows for fragments training&quot;)</argsstring>
        <name>BOOL_VAR_H</name>
        <param>
          <type>classify_debug_character_fragments</type>
        </param>
        <param>
          <type><ref refid="cutil_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref></type>
        </param>
        <param>
          <type>&quot;Bring up graphical debugging windows for fragments training&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a690f4b25f132503e84acffb1ee2d6b25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::BOOL_VAR_H</definition>
        <argsstring>(matcher_debug_separate_windows, FALSE,&quot;Use two different windows for debugging the matching: &quot;&quot;One for the protos and one for the features.&quot;)</argsstring>
        <name>BOOL_VAR_H</name>
        <param>
          <type>matcher_debug_separate_windows</type>
        </param>
        <param>
          <type><ref refid="cutil_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref></type>
        </param>
        <param>
          <type>&quot;Use two different windows for debugging the matching: &quot;&quot;One for the protos and one for the features.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a7b7aea0c954a1511d50142036bc4511f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::STRING_VAR_H</definition>
        <argsstring>(classify_learn_debug_str,&quot;&quot;,&quot;Class str to debug learning&quot;)</argsstring>
        <name>STRING_VAR_H</name>
        <param>
          <type>classify_learn_debug_str</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
        </param>
        <param>
          <type>&quot;Class str to debug learning&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a22d58d61c508eb299d408f34f4c48809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(classify_class_pruner_threshold, 229,&quot;Class Pruner Threshold 0-255&quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>classify_class_pruner_threshold</type>
        </param>
        <param>
          <type>229</type>
        </param>
        <param>
          <type>&quot;Class Pruner Threshold 0-255&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a78bd071af735e55b9ac020edfba60557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(classify_class_pruner_multiplier, 30,&quot;Class Pruner Multiplier 0-255:       &quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>classify_class_pruner_multiplier</type>
        </param>
        <param>
          <type>30</type>
        </param>
        <param>
          <type>&quot;Class Pruner Multiplier 0-255: &quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="421" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a17d8071dfd17e0e1ba98df86930603f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(classify_cp_cutoff_strength, 7,&quot;Class Pruner CutoffStrength:         &quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>classify_cp_cutoff_strength</type>
        </param>
        <param>
          <type>7</type>
        </param>
        <param>
          <type>&quot;Class Pruner CutoffStrength: &quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a134344f0ecc505887441e1fba477b9c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(classify_integer_matcher_multiplier, 14,&quot;Integer Matcher Multiplier  0-255:   &quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>classify_integer_matcher_multiplier</type>
        </param>
        <param>
          <type>14</type>
        </param>
        <param>
          <type>&quot;Integer Matcher Multiplier 0-255: &quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="425" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a33d550f8acc5fb2d81b7a646cad21694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::INT_VAR_H</definition>
        <argsstring>(il1_adaption_test, 0,&quot;Dont adapt to i/I at beginning of word&quot;)</argsstring>
        <name>INT_VAR_H</name>
        <param>
          <type>il1_adaption_test</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>&quot;Dont adapt to i/I at beginning of word&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesseract_1_1_classify_1a15f078d14a7df04d9f8adad7750536af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tesseract::Classify::BOOL_VAR_H</definition>
        <argsstring>(classify_bln_numeric_mode, 0,&quot;Assume the input is numbers [0-9].&quot;)</argsstring>
        <name>BOOL_VAR_H</name>
        <param>
          <type>classify_bln_numeric_mode</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>&quot;Assume the input is numbers .&quot;</type>
          <array>[0-9]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="454" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="540">
        <label>tesseract::Wordrec</label>
        <link refid="classtesseract_1_1_wordrec"/>
        <childnode refid="536" relation="public-inheritance">
        </childnode>
      </node>
      <node id="539">
        <label>tesseract::CCUtil</label>
        <link refid="classtesseract_1_1_c_c_util"/>
      </node>
      <node id="537">
        <label>tesseract::CCStruct</label>
        <link refid="classtesseract_1_1_c_c_struct"/>
        <childnode refid="538" relation="public-inheritance">
        </childnode>
      </node>
      <node id="538">
        <label>tesseract::CUtil</label>
        <link refid="classtesseract_1_1_c_util"/>
        <childnode refid="539" relation="public-inheritance">
        </childnode>
      </node>
      <node id="536">
        <label>tesseract::Classify</label>
        <link refid="classtesseract_1_1_classify"/>
        <childnode refid="537" relation="public-inheritance">
        </childnode>
      </node>
      <node id="541">
        <label>tesseract::Tesseract</label>
        <link refid="classtesseract_1_1_tesseract"/>
        <childnode refid="540" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="560">
        <label>list_rec</label>
        <link refid="structlist__rec"/>
        <childnode refid="560" relation="usage">
          <edgelabel>node</edgelabel>
          <edgelabel>next</edgelabel>
        </childnode>
      </node>
      <node id="559">
        <label>TEMP_CONFIG_STRUCT</label>
        <link refid="struct_t_e_m_p___c_o_n_f_i_g___s_t_r_u_c_t"/>
        <childnode refid="560" relation="usage">
          <edgelabel>ContextsSeen</edgelabel>
        </childnode>
      </node>
      <node id="548">
        <label>STRING</label>
        <link refid="class_s_t_r_i_n_g"/>
      </node>
      <node id="566">
        <label>NORM_PROTOS</label>
        <link refid="struct_n_o_r_m___p_r_o_t_o_s"/>
        <childnode refid="560" relation="usage">
          <edgelabel>Protos</edgelabel>
        </childnode>
        <childnode refid="567" relation="usage">
          <edgelabel>ParamDesc</edgelabel>
        </childnode>
      </node>
      <node id="558">
        <label>PERM_CONFIG_STRUCT</label>
        <link refid="struct_p_e_r_m___c_o_n_f_i_g___s_t_r_u_c_t"/>
      </node>
      <node id="574">
        <label>FEATURE_STRUCT</label>
        <link refid="struct_f_e_a_t_u_r_e___s_t_r_u_c_t"/>
        <childnode refid="575" relation="usage">
          <edgelabel>Type</edgelabel>
        </childnode>
      </node>
      <node id="569">
        <label>tesseract::ShapeTable</label>
        <link refid="classtesseract_1_1_shape_table"/>
      </node>
      <node id="545">
        <label>tesseract::CCUtil</label>
        <link refid="classtesseract_1_1_c_c_util"/>
        <childnode refid="546" relation="usage">
          <edgelabel>use_definite_ambigs_for_classifier</edgelabel>
          <edgelabel>use_ambigs_for_adaption</edgelabel>
        </childnode>
        <childnode refid="548" relation="usage">
          <edgelabel>directory</edgelabel>
          <edgelabel>language_data_path_prefix</edgelabel>
          <edgelabel>imagebasename</edgelabel>
          <edgelabel>datadir</edgelabel>
          <edgelabel>imagefile</edgelabel>
          <edgelabel>lang</edgelabel>
        </childnode>
        <childnode refid="549" relation="usage">
          <edgelabel>unicharset</edgelabel>
        </childnode>
        <childnode refid="550" relation="usage">
          <edgelabel>tessdata_manager</edgelabel>
        </childnode>
        <childnode refid="551" relation="usage">
          <edgelabel>m_data_sub_dir</edgelabel>
        </childnode>
        <childnode refid="552" relation="usage">
          <edgelabel>unichar_ambigs</edgelabel>
        </childnode>
        <childnode refid="553" relation="usage">
          <edgelabel>ambigs_debug_level</edgelabel>
        </childnode>
      </node>
      <node id="575">
        <label>FEATURE_DESC_STRUCT</label>
        <link refid="struct_f_e_a_t_u_r_e___d_e_s_c___s_t_r_u_c_t"/>
        <childnode refid="567" relation="usage">
          <edgelabel>ParamDesc</edgelabel>
        </childnode>
      </node>
      <node id="550">
        <label>tesseract::TessdataManager</label>
        <link refid="classtesseract_1_1_tessdata_manager"/>
      </node>
      <node id="563">
        <label>PROTO_SET_STRUCT</label>
        <link refid="struct_p_r_o_t_o___s_e_t___s_t_r_u_c_t"/>
        <childnode refid="564" relation="usage">
          <edgelabel>Protos</edgelabel>
        </childnode>
      </node>
      <node id="573">
        <label>FEATURE_SET_STRUCT</label>
        <link refid="struct_f_e_a_t_u_r_e___s_e_t___s_t_r_u_c_t"/>
        <childnode refid="574" relation="usage">
          <edgelabel>Features</edgelabel>
        </childnode>
      </node>
      <node id="543">
        <label>tesseract::CCStruct</label>
        <link refid="classtesseract_1_1_c_c_struct"/>
        <childnode refid="544" relation="public-inheritance">
        </childnode>
        <childnode refid="554" relation="usage">
          <edgelabel>image_</edgelabel>
        </childnode>
      </node>
      <node id="572">
        <label>FEATURE_EXT_STRUCT</label>
        <link refid="struct_f_e_a_t_u_r_e___e_x_t___s_t_r_u_c_t"/>
        <childnode refid="573" relation="usage">
          <edgelabel>Extractor</edgelabel>
        </childnode>
      </node>
      <node id="571">
        <label>FEATURE_DEFS_STRUCT</label>
        <link refid="struct_f_e_a_t_u_r_e___d_e_f_s___s_t_r_u_c_t"/>
        <childnode refid="572" relation="usage">
          <edgelabel>FeatureExtractors</edgelabel>
        </childnode>
        <childnode refid="575" relation="usage">
          <edgelabel>FeatureDesc</edgelabel>
        </childnode>
      </node>
      <node id="547">
        <label>tesseract::Param</label>
        <link refid="classtesseract_1_1_param"/>
      </node>
      <node id="544">
        <label>tesseract::CUtil</label>
        <link refid="classtesseract_1_1_c_util"/>
        <childnode refid="545" relation="public-inheritance">
        </childnode>
      </node>
      <node id="542">
        <label>tesseract::Classify</label>
        <link refid="classtesseract_1_1_classify"/>
        <childnode refid="543" relation="public-inheritance">
        </childnode>
        <childnode refid="555" relation="usage">
          <edgelabel>AdaptedTemplates</edgelabel>
        </childnode>
        <childnode refid="561" relation="usage">
          <edgelabel>PreTrainedTemplates</edgelabel>
        </childnode>
        <childnode refid="566" relation="usage">
          <edgelabel>NormProtos</edgelabel>
        </childnode>
        <childnode refid="568" relation="usage">
          <edgelabel>fontset_table_</edgelabel>
        </childnode>
        <childnode refid="569" relation="usage">
          <edgelabel>shape_table_</edgelabel>
        </childnode>
        <childnode refid="570" relation="usage">
          <edgelabel>fontinfo_table_</edgelabel>
        </childnode>
        <childnode refid="571" relation="usage">
          <edgelabel>feature_defs_</edgelabel>
        </childnode>
        <childnode refid="576" relation="usage">
          <edgelabel>im_</edgelabel>
        </childnode>
      </node>
      <node id="567">
        <label>PARAM_DESC</label>
        <link refid="struct_p_a_r_a_m___d_e_s_c"/>
      </node>
      <node id="564">
        <label>INT_PROTO_STRUCT</label>
        <link refid="struct_i_n_t___p_r_o_t_o___s_t_r_u_c_t"/>
      </node>
      <node id="555">
        <label>ADAPT_TEMPLATES_STRUCT</label>
        <link refid="struct_a_d_a_p_t___t_e_m_p_l_a_t_e_s___s_t_r_u_c_t"/>
        <childnode refid="556" relation="usage">
          <edgelabel>Class</edgelabel>
        </childnode>
        <childnode refid="561" relation="usage">
          <edgelabel>Templates</edgelabel>
        </childnode>
      </node>
      <node id="552">
        <label>tesseract::UnicharAmbigs</label>
        <link refid="classtesseract_1_1_unichar_ambigs"/>
      </node>
      <node id="551">
        <label>tesseract::StringParam</label>
        <link refid="classtesseract_1_1_string_param"/>
        <childnode refid="547" relation="public-inheritance">
        </childnode>
      </node>
      <node id="561">
        <label>INT_TEMPLATES_STRUCT</label>
        <link refid="struct_i_n_t___t_e_m_p_l_a_t_e_s___s_t_r_u_c_t"/>
        <childnode refid="562" relation="usage">
          <edgelabel>Class</edgelabel>
        </childnode>
        <childnode refid="565" relation="usage">
          <edgelabel>ClassPruners</edgelabel>
        </childnode>
      </node>
      <node id="549">
        <label>UNICHARSET</label>
        <link refid="class_u_n_i_c_h_a_r_s_e_t"/>
      </node>
      <node id="546">
        <label>tesseract::BoolParam</label>
        <link refid="classtesseract_1_1_bool_param"/>
        <childnode refid="547" relation="public-inheritance">
        </childnode>
      </node>
      <node id="553">
        <label>tesseract::IntParam</label>
        <link refid="classtesseract_1_1_int_param"/>
        <childnode refid="547" relation="public-inheritance">
        </childnode>
      </node>
      <node id="556">
        <label>ADAPT_CLASS_STRUCT</label>
        <link refid="struct_a_d_a_p_t___c_l_a_s_s___s_t_r_u_c_t"/>
        <childnode refid="557" relation="usage">
          <edgelabel>Config</edgelabel>
        </childnode>
        <childnode refid="560" relation="usage">
          <edgelabel>TempProtos</edgelabel>
        </childnode>
      </node>
      <node id="557">
        <label>ADAPTED_CONFIG</label>
        <link refid="union_a_d_a_p_t_e_d___c_o_n_f_i_g"/>
        <childnode refid="558" relation="usage">
          <edgelabel>Perm</edgelabel>
        </childnode>
        <childnode refid="559" relation="usage">
          <edgelabel>Temp</edgelabel>
        </childnode>
      </node>
      <node id="554">
        <label>tesseract::Image</label>
        <link refid="classtesseract_1_1_image"/>
      </node>
      <node id="570">
        <label>UnicityTable&lt; tesseract::FontInfo &gt;</label>
        <link refid="class_unicity_table"/>
      </node>
      <node id="562">
        <label>INT_CLASS_STRUCT</label>
        <link refid="struct_i_n_t___c_l_a_s_s___s_t_r_u_c_t"/>
        <childnode refid="563" relation="usage">
          <edgelabel>ProtoSets</edgelabel>
        </childnode>
      </node>
      <node id="565">
        <label>CLASS_PRUNER_STRUCT</label>
        <link refid="struct_c_l_a_s_s___p_r_u_n_e_r___s_t_r_u_c_t"/>
      </node>
      <node id="576">
        <label>IntegerMatcher</label>
        <link refid="class_integer_matcher"/>
      </node>
      <node id="568">
        <label>UnicityTable&lt; tesseract::FontSet &gt;</label>
        <link refid="class_unicity_table"/>
      </node>
    </collaborationgraph>
    <location file="/Users/makoto/Desktop/trunk/classify/classify.h" line="58" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/classify.h" bodystart="58" bodyend="507"/>
    <listofallmembers>
      <member refid="classtesseract_1_1_classify_1ac1f369f9a59739a588a4d84f60bac6c1" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>AdaptableWord</name></member>
      <member refid="classtesseract_1_1_classify_1a49c2bec2694a12cb6518001d8193d58d" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>AdaptedTemplates</name></member>
      <member refid="classtesseract_1_1_classify_1a1f058451e32538b4dc2c853b82bc6600" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>AdaptiveClassifier</name></member>
      <member refid="classtesseract_1_1_classify_1aa2f1ff296efea11aabd476cba49a39c5" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>AdaptiveClassifierIsFull</name></member>
      <member refid="classtesseract_1_1_classify_1a9b819a65090a6e7245a76590b4ffe7c8" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>AdaptiveMatcherCalls</name></member>
      <member refid="classtesseract_1_1_classify_1a53629ef3f5562677ae096bbce864e5ab" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>AdaptToChar</name></member>
      <member refid="classtesseract_1_1_classify_1a7d9076164677e7e5a863a8a5d265b957" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>AdaptToPunc</name></member>
      <member refid="classtesseract_1_1_classify_1a3681915077046082b4d99532a3f3da61" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>AddNewResult</name></member>
      <member refid="classtesseract_1_1_classify_1a974e5b3b4ee8b184a3af4ba782750dd7" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>AllConfigsOff</name></member>
      <member refid="classtesseract_1_1_classify_1ada1ef7ff613927daa2838ba41eaa055f" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>AllConfigsOn</name></member>
      <member refid="classtesseract_1_1_classify_1a04608dab39f896c0358b42c228a7ef32" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>AllProtosOff</name></member>
      <member refid="classtesseract_1_1_classify_1a08295fdeacbf1d536337f542320e86e2" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>AllProtosOn</name></member>
      <member refid="classtesseract_1_1_classify_1ac7501f294525f6dd7fca4a3512ae0dcf" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>AmbigClassifier</name></member>
      <member refid="classtesseract_1_1_classify_1a220049b80d7fe6ace87c13398d12b4ad" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>AmbigClassifierCalls</name></member>
      <member refid="classtesseract_1_1_c_c_util_1afe4ad8fd6975657f7b931638862c1b9c" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ambigs_debug_level</name></member>
      <member refid="classtesseract_1_1_classify_1ab7022031939236cac2fe6b661e6f657b" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>BaselineClassifier</name></member>
      <member refid="classtesseract_1_1_classify_1a2008d38ccb4e87e23934af2203e543c8" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>BaselineClassifierCalls</name></member>
      <member refid="classtesseract_1_1_classify_1ade7dfecc8b406fb51d5c305ada942248" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>BaselineCutoffs</name></member>
      <member refid="classtesseract_1_1_classify_1aa5cd822073b45555066c2c65afcc2e19" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>BaselineFeatures</name></member>
      <member refid="classtesseract_1_1_classify_1ac3a7992c4a976e8c13032f466bbd6325" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>BOOL_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a1ca4ac4e5ca91d747a014363b12038e0" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>BOOL_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1afb129415c0a278bf25af618ba6efb72c" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>BOOL_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1ac5ee505129a57940d17fb26e21ae362f" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>BOOL_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1aac971def19a61264c26c895689f37789" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>BOOL_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a4c1592b0fcae11d219a8370894f113a0" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>BOOL_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a2ea6c277addea769804cf2ec8584ae88" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>BOOL_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a00efcf64a1cd659755679db8c4e36079" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>BOOL_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1ae5311d7dd3ec374de10dc73bd8ff352c" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>BOOL_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a36aa6b12cb8f85dab9e61ab974be97c9" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>BOOL_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a690f4b25f132503e84acffb1ee2d6b25" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>BOOL_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a15f078d14a7df04d9f8adad7750536af" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>BOOL_VAR_H</name></member>
      <member refid="classtesseract_1_1_c_c_struct_1a1623ce99161fc99916a04260cf25ccd8" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>CCStruct</name></member>
      <member refid="classtesseract_1_1_c_c_util_1af688e380af69364e79fddf43c3197e3c" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>CCUtil</name></member>
      <member refid="classtesseract_1_1_classify_1a0e552819a03cc6f169e18a58b16696a6" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>CharNormClassifier</name></member>
      <member refid="classtesseract_1_1_classify_1afc650c5fca22244920573bbe1e99814c" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>CharNormClassifierCalls</name></member>
      <member refid="classtesseract_1_1_classify_1a4cb3b34fb00526cc91d21025f53bda34" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>CharNormCutoffs</name></member>
      <member refid="classtesseract_1_1_classify_1aa90bed67f5d83ab31e1f76c8c49ad583" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>CharNormFeatures</name></member>
      <member refid="classtesseract_1_1_classify_1aa3907b770bdeb45e652e0ab122568cf4" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>CharNormTrainingSample</name></member>
      <member refid="classtesseract_1_1_classify_1a1002c7f80352c6ceac4af82ee35e5e06" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ClassAndConfigIDToFontOrShapeID</name></member>
      <member refid="classtesseract_1_1_classify_1a6fc9e3752efb2fe0d74920e082a59bd7" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ClassIDToDebugStr</name></member>
      <member refid="classtesseract_1_1_classify_1ac4c2dfe9aa3c463964fdc61faec56a67" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>Classify</name></member>
      <member refid="classtesseract_1_1_classify_1a8a68035cfc5ee866f2d39360072ab77c" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ClassifyAsNoise</name></member>
      <member refid="classtesseract_1_1_classify_1ac0de90c99552cdc286f934d344790085" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ClearCharNormArray</name></member>
      <member refid="classtesseract_1_1_classify_1a8f49de2f8da7b066bd8ece0641edcca1" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ComputeCharNormArrays</name></member>
      <member refid="classtesseract_1_1_classify_1a7c6031863d4dafb400551cc4f151f3b5" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ComputeCorrectedRating</name></member>
      <member refid="classtesseract_1_1_classify_1a3abc0b280fe8a88d57a35d2d578ef47a" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ComputeIntCharNormArray</name></member>
      <member refid="classtesseract_1_1_classify_1ae1f3fc88bf28a4a169273bcf2515610e" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ComputeIntFeatures</name></member>
      <member refid="classtesseract_1_1_classify_1a3205427bd0f3abae31ab6c3092ca0662" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ComputeNormMatch</name></member>
      <member refid="classtesseract_1_1_classify_1af1f1f794092ce44dff7c242822b6cf68" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ConvertMatchesToChoices</name></member>
      <member refid="classtesseract_1_1_classify_1af27d604585502bd447d52bf5daf15d0d" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ConvertProto</name></member>
      <member refid="classtesseract_1_1_classify_1af3d15c15c9f2dce72a400233d4bf366f" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>CreateIntTemplates</name></member>
      <member refid="classtesseract_1_1_c_util_1a2c90e0e7fb8ec596ecb98e096eb7c418" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>CUtil</name></member>
      <member refid="classtesseract_1_1_c_c_util_1a4932d2070d3b91264958078abc991b17" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>datadir</name></member>
      <member refid="classtesseract_1_1_classify_1af9a9def4a6b3bb1a2e36bceff2976c2c" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>DebugAdaptiveClassifier</name></member>
      <member refid="classtesseract_1_1_classify_1a03770409ac2660e52b68a201424fb570" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>dict_</name></member>
      <member refid="classtesseract_1_1_c_c_util_1abcd5aabcb868a669c468c8c3ddd0ca73" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>directory</name></member>
      <member refid="classtesseract_1_1_classify_1aaa7b4a01a6f9bd1f088982a4011274e5" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>DisplayAdaptedChar</name></member>
      <member refid="classtesseract_1_1_classify_1a8575af5f97d4037d4fdd2e21b477dd38" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>DoAdaptiveMatch</name></member>
      <member refid="classtesseract_1_1_classify_1a9b30d9e69cbab064bb64f308282253b1" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1ae7f051dd6f6a9c3c2796033fa44da205" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1aa4c5da7c638e833c1923d4ae0eb1d4b8" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a29705fef02da95d5d1ca9e57b35117ac" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a9a81245acd8b6e947e178ee4719b3e48" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a11d6b1ede8e900798c1896be2c1ba7fd" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a3299d357a0c2297940525200f7f2821d" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1ab5fd085492771e8e797c4b5876659b2e" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a3af2d1779411f1c56c970ccded7cab0c" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a21415c32ace975dedc862b46384315b2" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a076648daf7965ebfc05aa9598ca7fdc0" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a36b92a3b67b1d5a663ae2d2bc10951d6" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1aa48244c93b730889fbfd7cfe44b54e3e" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a5daa351779bf9aaa770c5a3061afacb5" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1acf92ee50de869b39649d113a841e0edf" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a78017208c388e4de73a7639ad5690039" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1aa418c315637e7d0c635ccf34663eddb0" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>double_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a7d0ccfd06421346d8cda0f1b76fd8516" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>EnableLearning</name></member>
      <member refid="classtesseract_1_1_classify_1ae5e4880c5acc91b77308fbd6ab706b13" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>EndAdaptiveClassifier</name></member>
      <member refid="classtesseract_1_1_classify_1a7d663f1e02d6e7b2d1783fdca6154a4d" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ExpandShapesAndApplyCorrections</name></member>
      <member refid="classtesseract_1_1_classify_1af1ef43f77139dc879d27a510adcb4bb3" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ExtractOutlineFeatures</name></member>
      <member refid="classtesseract_1_1_classify_1ad6d1f9f29655ffe18fab3832b113e00b" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ExtractPicoFeatures</name></member>
      <member refid="classtesseract_1_1_classify_1a6ebcfd2968c704f99efd40075ecdb138" prot="protected" virt="non-virtual"><scope>tesseract::Classify</scope><name>feature_defs_</name></member>
      <member refid="classtesseract_1_1_classify_1afa243cbb0f9047949ee4c5d681277c5d" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>FeaturesHaveBeenExtracted</name></member>
      <member refid="classtesseract_1_1_classify_1aa65f4ef0d2656059179a70c4b5e88e7b" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>FeaturesOK</name></member>
      <member refid="classtesseract_1_1_classify_1ae6dea981b2f591921d798ea83b0fa455" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>fontinfo_table_</name></member>
      <member refid="classtesseract_1_1_classify_1a74a007a46ac907d2c8f61e9885143465" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>fontset_table_</name></member>
      <member refid="classtesseract_1_1_classify_1ab6e270cecf7e7c62e1319e7889caf716" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>FreeNormProtos</name></member>
      <member refid="classtesseract_1_1_classify_1ab4d961d6d3e11cba44f2f0f9cd1fa251" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>FXInfo</name></member>
      <member refid="classtesseract_1_1_classify_1a62597f182a5e23c3b8a030c06e699e99" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>get_fontinfo_table</name></member>
      <member refid="classtesseract_1_1_classify_1a84d0021ef7ddbc98196801f9808fa33d" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>get_fontset_table</name></member>
      <member refid="classtesseract_1_1_classify_1a1f21b989c93ff1d297b5bde442fc430c" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>GetAdaptiveFeatures</name></member>
      <member refid="classtesseract_1_1_classify_1a57d34f380d093913f3c3e74f7a7a9840" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>GetAdaptThresholds</name></member>
      <member refid="classtesseract_1_1_classify_1af4c186f6ec1019d17912d2cf36326f1f" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>GetAmbiguities</name></member>
      <member refid="classtesseract_1_1_classify_1a4bf0e47e0ae00a0cec215a887cef8c65" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>GetBaselineFeatures</name></member>
      <member refid="classtesseract_1_1_classify_1a1076d5d08686e48d39ef3eb07e711fb6" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>GetCharNormFeatures</name></member>
      <member refid="classtesseract_1_1_classify_1a76f4e180bcab3a7cd2da75d42b524eba" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>GetClassToDebug</name></member>
      <member refid="classtesseract_1_1_classify_1a83e4207353a1bb07adfaa6a82a74c9ce" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>getDict</name></member>
      <member refid="classtesseract_1_1_classify_1afae8a55c28ee68de92ab1b1dd37c6905" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>GetFontinfoId</name></member>
      <member refid="classtesseract_1_1_classify_1a093af2c004819e86bfff80ad88f10c37" prot="protected" virt="non-virtual"><scope>tesseract::Classify</scope><name>im_</name></member>
      <member refid="classtesseract_1_1_c_c_struct_1af0134325da282ba2dacbb034cf59dde0" prot="protected" virt="non-virtual"><scope>tesseract::Classify</scope><name>image_</name></member>
      <member refid="classtesseract_1_1_c_c_util_1a83b53925c7f421533b5f382c9a36ab1d" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>imagebasename</name></member>
      <member refid="classtesseract_1_1_c_c_util_1a5eea0d996032e28207d801a1ee92d388" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>imagefile</name></member>
      <member refid="classtesseract_1_1_classify_1aee9e5bd336bf1a37a7a1f3b712eb045d" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>InitAdaptedClass</name></member>
      <member refid="classtesseract_1_1_classify_1a2f9389a2d855d2a59e7892d3ba884887" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>InitAdaptiveClassifier</name></member>
      <member refid="classtesseract_1_1_classify_1a78237516883f141f0f2f2b81a88dc7d5" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1aa3ca8b987244da7eb2d651a1387838ba" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a4c31c41113fc3c808298c8d65143bc3a" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a109361f3a013a7eb29ffdfcc5f859ff4" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a741ce5afa3897f6f5fedf3ca62fb57cc" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a64b171ab4872f933fc194c933da6fadc" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a3085fb94b97512a6853c65913dadefef" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a5b47d139528e39589358dbed7f3593b7" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a70176fd471cc1a8099f8ded206525bea" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a74e61ea0e3da0c2a99204aa09d7db71b" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1ab1e8bd80e90a2ac5386dcbfc036c3531" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a22d58d61c508eb299d408f34f4c48809" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a78bd071af735e55b9ac020edfba60557" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a17d8071dfd17e0e1ba98df86930603f9" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a134344f0ecc505887441e1fba477b9c7" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a33d550f8acc5fb2d81b7a646cad21694" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>INT_VAR_H</name></member>
      <member refid="classtesseract_1_1_c_c_struct_1a9d71fddad74d9418e106713cd643b919" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>kAscenderFraction</name></member>
      <member refid="classtesseract_1_1_c_c_struct_1a7e8a361df0831d295edf1c150c3ca3a3" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>kDescenderFraction</name></member>
      <member refid="classtesseract_1_1_c_c_struct_1a594719f667105487f0c3f78de6f85f77" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>kXHeightCapRatio</name></member>
      <member refid="classtesseract_1_1_c_c_struct_1a737fdb37b9401ad3d04371c1bd4a0b17" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>kXHeightFraction</name></member>
      <member refid="classtesseract_1_1_c_c_util_1ae453cbd7e4899ebfc5cc3831e5a8dd66" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>lang</name></member>
      <member refid="classtesseract_1_1_c_c_util_1a259fbb37f1e940892938c71496c4d6ba" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>language_data_path_prefix</name></member>
      <member refid="classtesseract_1_1_classify_1a162d7eb3e0774a7604121911f019b97a" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>learn_debug_win_</name></member>
      <member refid="classtesseract_1_1_classify_1a820d7d03f34b05e254bb063fd44488e9" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>learn_fragmented_word_debug_win_</name></member>
      <member refid="classtesseract_1_1_classify_1a7c2ec17fc98632210d4a200f7194b2ad" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>learn_fragments_debug_win_</name></member>
      <member refid="classtesseract_1_1_classify_1a0a6455e61097b98b01d180cd0b2748c9" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>LearnPieces</name></member>
      <member refid="classtesseract_1_1_classify_1abbbd86871758c036d7ba2af682abb45f" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>LearnWord</name></member>
      <member refid="classtesseract_1_1_classify_1ab72f687048a2e1eba44b8ae2cfb07fa9" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>LooksLikeGarbage</name></member>
      <member refid="classtesseract_1_1_c_c_util_1a16a50e3bd10d48993a0a5d23882c2b01" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>m_data_sub_dir</name></member>
      <member refid="classtesseract_1_1_c_c_util_1ac50cd898d98a54cec02689858f515728" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>main_setup</name></member>
      <member refid="classtesseract_1_1_classify_1a59900939784eac1e2e6ebfec1f82bb58" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>MakeNewTemporaryConfig</name></member>
      <member refid="classtesseract_1_1_classify_1adc0facdf672d23f65612b56b4a5f523a" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>MakeNewTempProtos</name></member>
      <member refid="classtesseract_1_1_classify_1aefb0cfe284dd67601798f7ae510b787f" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>MakePermanent</name></member>
      <member refid="classtesseract_1_1_classify_1a9df3ff8623acd0ab30286ace7362045c" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>MasterMatcher</name></member>
      <member refid="classtesseract_1_1_classify_1a28ddc270cb5d2613f5f0f24ad53a5a21" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>NewAdaptedTemplates</name></member>
      <member refid="classtesseract_1_1_classify_1a8cbc3c255f888cc49c713c0a7408d2ad" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>NormalizeOutlines</name></member>
      <member refid="classtesseract_1_1_classify_1ad4c94be5d5738afb4115a12cad2e3efa" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>NormProtos</name></member>
      <member refid="classtesseract_1_1_classify_1ada37962f98d89f3521bba23789eda3c2" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>NumAdaptationsFailed</name></member>
      <member refid="classtesseract_1_1_classify_1a8b3ce4089c55b579d3b2937847d495c3" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>NumAmbigClassesTried</name></member>
      <member refid="classtesseract_1_1_classify_1aaca82e8042cc5ea5785894e9220953ea" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>NumBaselineClassesTried</name></member>
      <member refid="classtesseract_1_1_classify_1adc31983a5443a28bf4ef7b324956119a" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>NumCharNormClassesTried</name></member>
      <member refid="classtesseract_1_1_classify_1ac9759fe212f2507819fa719a8748a39a" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>NumCharsAdaptedTo</name></member>
      <member refid="classtesseract_1_1_classify_1ad3bd796e900a199bf8d44bf63dc32be4" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>NumClassesOutput</name></member>
      <member refid="classtesseract_1_1_classify_1ad2c4d12c7b2c5c7f9cf948dd2e3356d5" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>NumWordsAdaptedTo</name></member>
      <member refid="classtesseract_1_1_c_c_util_1ac993425386ae1f73762107299ee8a114" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>params</name></member>
      <member refid="classtesseract_1_1_classify_1a64383806f917e682c4a644efdd71d530" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>PreTrainedTemplates</name></member>
      <member refid="classtesseract_1_1_classify_1a15d6951abc586793270de0825bdb7dd7" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>PrintAdaptedTemplates</name></member>
      <member refid="classtesseract_1_1_classify_1aad46f714847619694546e9ea2784402c" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>PrintAdaptiveMatchResults</name></member>
      <member refid="classtesseract_1_1_classify_1a8c350afec3f633660d20eb98226a40d1" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>PrintAdaptiveStatistics</name></member>
      <member refid="classtesseract_1_1_classify_1af60b52006bbea0cc1727d543c3fcd1ad" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>PruneClasses</name></member>
      <member refid="classtesseract_1_1_classify_1a3306f7dc2f0df8c08a9933493262a2c9" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>PrunedProtos</name></member>
      <member refid="classtesseract_1_1_c_util_1a4fc3c25333d98fa5d7d8b899724bb8ab" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>read_variables</name></member>
      <member refid="classtesseract_1_1_classify_1aa74ebd96d85efc39d71c37985e50c8aa" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ReadAdaptedTemplates</name></member>
      <member refid="classtesseract_1_1_classify_1a3cc9d5fe19f6d641fdfb133179ea70a4" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ReadClassFile</name></member>
      <member refid="classtesseract_1_1_classify_1a98459996e5e6ab1dc1de71411fd32b89" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ReadIntTemplates</name></member>
      <member refid="classtesseract_1_1_classify_1a49a37c1ce02f5e114f0d57e49871b802" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ReadNewCutoffs</name></member>
      <member refid="classtesseract_1_1_classify_1aabd742c09ff530922005e015a9e8bc2b" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ReadNormProtos</name></member>
      <member refid="classtesseract_1_1_classify_1a6e36e01c8147d95bbd64c6609e1b8f45" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>RefreshDebugWindow</name></member>
      <member refid="classtesseract_1_1_classify_1a0e35029ac0c77ad18d35f08c27c99d15" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>RemoveBadMatches</name></member>
      <member refid="classtesseract_1_1_classify_1af15e83a02b369b820d40c8920b4275e8" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>RemoveExtraPuncs</name></member>
      <member refid="classtesseract_1_1_classify_1a350f6cb6e7ce9f53ae468908a91c6148" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ResetAdaptiveClassifierInternal</name></member>
      <member refid="classtesseract_1_1_classify_1a62ffff7932680b25784bfca5079ce347" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ResetFeaturesHaveBeenExtracted</name></member>
      <member refid="classtesseract_1_1_classify_1a5a3045639a3db979a8d1eb6dc4343e3b" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>SetAdaptiveThreshold</name></member>
      <member refid="classtesseract_1_1_classify_1ae66827073cdeea6a59dd16fd7cf5d297" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>SettupPass1</name></member>
      <member refid="classtesseract_1_1_classify_1a5ad207ab75e8a69c35c225313268788b" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>SettupPass2</name></member>
      <member refid="classtesseract_1_1_classify_1a5d8e80f8bd4a5779921f543c6eef796c" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>shape_table</name></member>
      <member refid="classtesseract_1_1_classify_1a471b3e8f03ddc5281c167b37d8ddc5b5" prot="protected" virt="non-virtual"><scope>tesseract::Classify</scope><name>shape_table_</name></member>
      <member refid="classtesseract_1_1_classify_1a319cfe59c8e82e697375a351e3c604b3" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ShapeIDToClassID</name></member>
      <member refid="classtesseract_1_1_classify_1add2bdf76259dccbe139b2aa452e9cd05" prot="private" virt="non-virtual"><scope>tesseract::Classify</scope><name>shapetable_cutoffs_</name></member>
      <member refid="classtesseract_1_1_classify_1abf81bc54d31591d9da5f95529583b99d" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ShowBestMatchFor</name></member>
      <member refid="classtesseract_1_1_classify_1a44e1b8840fb841e621b902f3abdd8522" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>ShowMatchDisplay</name></member>
      <member refid="classtesseract_1_1_classify_1a7b7aea0c954a1511d50142036bc4511f" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>STRING_VAR_H</name></member>
      <member refid="classtesseract_1_1_classify_1a786c5f6e2a5cd8aac2ed4dd89af84fea" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>TempConfigReliable</name></member>
      <member refid="classtesseract_1_1_classify_1a26b1c76382f418bf5a78bad15b23b8ad" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>TempProtoMask</name></member>
      <member refid="classtesseract_1_1_c_c_util_1a4a585cb38d5b19b5caedb7aded4a679a" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>tessdata_manager</name></member>
      <member refid="classtesseract_1_1_c_c_util_1aea55f12febe34f7fec0f2300ef5ab418" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>unichar_ambigs</name></member>
      <member refid="classtesseract_1_1_c_c_util_1a69c5179ac5f10a24f3f97e16ca09460f" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>unicharset</name></member>
      <member refid="classtesseract_1_1_classify_1a954c9085f840572567462c9e0ff3551a" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>UpdateAmbigsGroup</name></member>
      <member refid="classtesseract_1_1_c_c_util_1a108356fffcf862f73e0851bc4aea3e6f" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>use_ambigs_for_adaption</name></member>
      <member refid="classtesseract_1_1_c_c_util_1a80674e812635d43aede79974e34d37d0" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>use_definite_ambigs_for_classifier</name></member>
      <member refid="classtesseract_1_1_classify_1a1718afe45a09c6631f11ae224e6d5db6" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>WriteAdaptedTemplates</name></member>
      <member refid="classtesseract_1_1_classify_1a81e8a5e5adfc60146ea3eb5b60936dd9" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>WriteIntTemplates</name></member>
      <member refid="classtesseract_1_1_c_c_struct_1aee94dd326def50877bc7fb76ba5277c9" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>~CCStruct</name></member>
      <member refid="classtesseract_1_1_c_c_util_1adeaf195d61d6a5eaab4bcbb27a6f1af5" prot="public" virt="virtual"><scope>tesseract::Classify</scope><name>~CCUtil</name></member>
      <member refid="classtesseract_1_1_classify_1a4a3fe30721c7f945fb4c5ebfe421639c" prot="public" virt="virtual"><scope>tesseract::Classify</scope><name>~Classify</name></member>
      <member refid="classtesseract_1_1_c_util_1af7acf39fa169851db30363d8b06a77b6" prot="public" virt="non-virtual"><scope>tesseract::Classify</scope><name>~CUtil</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
