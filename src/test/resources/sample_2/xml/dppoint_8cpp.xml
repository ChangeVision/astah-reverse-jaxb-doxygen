<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="dppoint_8cpp" kind="file">
    <compoundname>dppoint.cpp</compoundname>
    <includes refid="dppoint_8h" local="yes">dppoint.h</includes>
    <includes refid="tprintf_8h" local="yes">tprintf.h</includes>
    <incdepgraph>
      <node id="7444">
        <label>ccstruct/dppoint.cpp</label>
        <link refid="dppoint.cpp"/>
        <childnode refid="7445" relation="include">
        </childnode>
        <childnode refid="7449" relation="include">
        </childnode>
      </node>
      <node id="7458">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="7453">
        <label>stdlib.h</label>
      </node>
      <node id="7447">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="7448" relation="include">
        </childnode>
      </node>
      <node id="7461">
        <label>stddef.h</label>
      </node>
      <node id="7455">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="7446" relation="include">
        </childnode>
      </node>
      <node id="7448">
        <label>limits.h</label>
      </node>
      <node id="7457">
        <label>string.h</label>
      </node>
      <node id="7454">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="7446" relation="include">
        </childnode>
      </node>
      <node id="7445">
        <label>dppoint.h</label>
        <link refid="dppoint_8h"/>
        <childnode refid="7446" relation="include">
        </childnode>
      </node>
      <node id="7450">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="7451" relation="include">
        </childnode>
        <childnode refid="7452" relation="include">
        </childnode>
        <childnode refid="7459" relation="include">
        </childnode>
      </node>
      <node id="7452">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="7451" relation="include">
        </childnode>
        <childnode refid="7453" relation="include">
        </childnode>
        <childnode refid="7454" relation="include">
        </childnode>
        <childnode refid="7455" relation="include">
        </childnode>
        <childnode refid="7456" relation="include">
        </childnode>
        <childnode refid="7458" relation="include">
        </childnode>
      </node>
      <node id="7460">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="7461" relation="include">
        </childnode>
        <childnode refid="7446" relation="include">
        </childnode>
      </node>
      <node id="7449">
        <label>tprintf.h</label>
        <link refid="tprintf_8h"/>
        <childnode refid="7450" relation="include">
        </childnode>
      </node>
      <node id="7446">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="7447" relation="include">
        </childnode>
      </node>
      <node id="7451">
        <label>stdio.h</label>
      </node>
      <node id="7459">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="7451" relation="include">
        </childnode>
        <childnode refid="7457" relation="include">
        </childnode>
        <childnode refid="7447" relation="include">
        </childnode>
        <childnode refid="7460" relation="include">
        </childnode>
      </node>
      <node id="7456">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="7451" relation="include">
        </childnode>
        <childnode refid="7457" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetesseract">tesseract</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dppoint.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Description:<sp/>Simple<sp/>generic<sp/>dynamic<sp/>programming<sp/>class.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/>Ray<sp/>Smith</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Created:<sp/><sp/><sp/><sp/><sp/>Wed<sp/>Mar<sp/>25<sp/>19:08:01<sp/>PDT<sp/>2009</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>(C)<sp/>Copyright<sp/>2009,<sp/>Google<sp/>Inc.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>**<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>**<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>**<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>**<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>**<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>**<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>**<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>**<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>**<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dppoint_8h" kindref="compound">dppoint.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tprintf_8h" kindref="compound">tprintf.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesseract-c__api-demo_1afed58feacb84df2de88bdd613cfdba6d" kindref="member">tesseract</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Solve<sp/>the<sp/>dynamic<sp/>programming<sp/>problem<sp/>for<sp/>the<sp/>given<sp/>array<sp/>of<sp/>points,<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>size<sp/>and<sp/>cost<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Steps<sp/>backwards<sp/>are<sp/>limited<sp/>to<sp/>being<sp/>between<sp/>min_step<sp/>and<sp/>max_step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inclusive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>the<sp/>tail<sp/>of<sp/>the<sp/>best<sp/>path.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">DPPoint*<sp/><ref refid="classtesseract_1_1_d_p_point_1a9d0050679afe827f7e0434c70916a07a" kindref="member">DPPoint::Solve</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_step,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_step,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debug,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CostFunc<sp/>cost_func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/>DPPoint*<sp/>points)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;=<sp/>0<sp/>||<sp/>max_step<sp/>&lt;<sp/>min_step<sp/>||<sp/>min_step<sp/>&gt;=<sp/>size)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Degenerate,<sp/>but<sp/>not<sp/>necessarily<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="errcode_8h_1a93a603f4063a6b9403d81caa245a583b" kindref="member">ASSERT_HOST</ref>(min_step<sp/>&gt;<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Infinite<sp/>loop<sp/>possible<sp/>if<sp/>this<sp/>is<sp/>not<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;min<sp/>=<sp/>%d,<sp/>max=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_step,<sp/>max_step);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Evaluate<sp/>the<sp/>total<sp/>cost<sp/>at<sp/>each<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>min_step;<sp/>offset<sp/>&lt;=<sp/>max_step;<sp/>++offset)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_d_p_point_1accb15b0c3db492fa4813a606feabcf59" kindref="member">DPPoint</ref>*<sp/>prev<sp/>=<sp/>offset<sp/>&lt;=<sp/>i<sp/>?<sp/>points<sp/>+<sp/>i<sp/>-<sp/>offset<sp/>:<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1ac53c9cafaf7fe16f985994c49f6b0964" kindref="member">inT64</ref><sp/>new_cost<sp/>=<sp/>(points[i].*cost_func)(prev);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(points[i].best_prev_<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>offset<sp/>&gt;<sp/>min_step<sp/>*<sp/>2<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_cost<sp/>&gt;<sp/>points[i].total_cost_)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>only<sp/>the<sp/>first<sp/>minimum<sp/>if<sp/>going<sp/>over<sp/>twice<sp/>the<sp/>min.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>points[i].total_cost_<sp/>+=<sp/>points[i].local_cost_;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;At<sp/>point<sp/>%d,<sp/>local<sp/>cost=%d,<sp/>total_cost=%d,<sp/>steps=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>points[i].local_cost_,<sp/>points[i].total_cost_,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points[i].total_steps_);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>find<sp/>the<sp/>end<sp/>of<sp/>the<sp/>best<sp/>path<sp/>and<sp/>return<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best_cost<sp/>=<sp/>points[size<sp/>-<sp/>1].total_cost_;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best_end<sp/>=<sp/>size<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>best_end<sp/>-<sp/>1;<sp/>end<sp/>&gt;=<sp/>size<sp/>-<sp/>min_step;<sp/>--end)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cost<sp/>=<sp/>points[end].total_cost_;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cost<sp/>&lt;<sp/>best_cost)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>best_cost<sp/>=<sp/>cost;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>best_end<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>points<sp/>+<sp/>best_end;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>CostFunc<sp/>that<sp/>takes<sp/>the<sp/>variance<sp/>of<sp/>step<sp/>into<sp/>account<sp/>in<sp/>the<sp/>cost.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="host_8h_1ac53c9cafaf7fe16f985994c49f6b0964" kindref="member">inT64</ref><sp/><ref refid="classtesseract_1_1_d_p_point_1a4d01fa4702020ea2e3cbd89f754fc9e5" kindref="member">DPPoint::CostWithVariance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DPPoint*<sp/>prev)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>prev<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateIfBetter(0,<sp/>1,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-<sp/>prev;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>n<sp/>=<sp/>prev-&gt;n_<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>sig_x<sp/>=<sp/>prev-&gt;sig_x_<sp/>+<sp/>delta;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1ac53c9cafaf7fe16f985994c49f6b0964" kindref="member">inT64</ref><sp/>sig_xsq<sp/>=<sp/>prev-&gt;sig_xsq_<sp/>+<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1ac53c9cafaf7fe16f985994c49f6b0964" kindref="member">inT64</ref><sp/>cost<sp/>=<sp/>(sig_xsq<sp/>-<sp/>sig_x<sp/>*<sp/>sig_x<sp/>/<sp/>n)<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>cost<sp/>+=<sp/>prev-&gt;total_cost_;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>UpdateIfBetter(cost,<sp/>prev-&gt;total_steps_<sp/>+<sp/>1,<sp/>prev,<sp/>n,<sp/>sig_x,<sp/>sig_xsq);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cost;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>other<sp/>members<sp/>if<sp/>the<sp/>cost<sp/>is<sp/>lower.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DPPoint::UpdateIfBetter(<ref refid="host_8h_1ac53c9cafaf7fe16f985994c49f6b0964" kindref="member">inT64</ref><sp/>cost,<sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>steps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DPPoint*<sp/>prev,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>n,<sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>sig_x,<sp/><ref refid="host_8h_1ac53c9cafaf7fe16f985994c49f6b0964" kindref="member">inT64</ref><sp/>sig_xsq)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cost<sp/>&lt;<sp/>total_cost_)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>total_cost_<sp/>=<sp/>cost;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>total_steps_<sp/>=<sp/>steps;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>best_prev_<sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>n_<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>sig_x_<sp/>=<sp/>sig_x;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>sig_xsq_<sp/>=<sp/>sig_xsq;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tesseract.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/ccstruct/dppoint.cpp"/>
  </compounddef>
</doxygen>
