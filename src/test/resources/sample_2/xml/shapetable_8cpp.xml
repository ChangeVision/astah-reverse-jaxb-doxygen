<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="shapetable_8cpp" kind="file">
    <compoundname>shapetable.cpp</compoundname>
    <includes refid="shapetable_8h" local="yes">shapetable.h</includes>
    <includes refid="intfeaturespace_8h" local="yes">intfeaturespace.h</includes>
    <includes refid="strngs_8h" local="yes">strngs.h</includes>
    <includes refid="unicharset_8h" local="yes">unicharset.h</includes>
    <incdepgraph>
      <node id="27577">
        <label>cutil_class.h</label>
        <link refid="cutil__class_8h"/>
        <childnode refid="27578" relation="include">
        </childnode>
        <childnode refid="27589" relation="include">
        </childnode>
        <childnode refid="27566" relation="include">
        </childnode>
      </node>
      <node id="27563">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="27589">
        <label>const.h</label>
        <link refid="const_8h"/>
      </node>
      <node id="27555">
        <label>stdlib.h</label>
      </node>
      <node id="27558">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="27559" relation="include">
        </childnode>
      </node>
      <node id="27601">
        <label>bitvec.h</label>
        <link refid="bitvec_8h"/>
        <childnode refid="27557" relation="include">
        </childnode>
      </node>
      <node id="27578">
        <label>ccutil.h</label>
        <link refid="ccutil_8h"/>
        <childnode refid="27579" relation="include">
        </childnode>
        <childnode refid="27560" relation="include">
        </childnode>
        <childnode refid="27566" relation="include">
        </childnode>
        <childnode refid="27586" relation="include">
        </childnode>
        <childnode refid="27565" relation="include">
        </childnode>
        <childnode refid="27584" relation="include">
        </childnode>
        <childnode refid="27587" relation="include">
        </childnode>
        <childnode refid="27588" relation="include">
        </childnode>
      </node>
      <node id="27598">
        <label>scrollview.h</label>
        <link refid="scrollview_8h"/>
        <childnode refid="27554" relation="include">
        </childnode>
      </node>
      <node id="27581">
        <label>serialis.h</label>
        <link refid="serialis_8h"/>
        <childnode refid="27555" relation="include">
        </childnode>
        <childnode refid="27562" relation="include">
        </childnode>
        <childnode refid="27554" relation="include">
        </childnode>
        <childnode refid="27567" relation="include">
        </childnode>
        <childnode refid="27560" relation="include">
        </childnode>
        <childnode refid="27582" relation="include">
        </childnode>
      </node>
      <node id="27594">
        <label>clst.h</label>
        <link refid="clst_8h"/>
        <childnode refid="27554" relation="include">
        </childnode>
        <childnode refid="27557" relation="include">
        </childnode>
        <childnode refid="27581" relation="include">
        </childnode>
        <childnode refid="27583" relation="include">
        </childnode>
      </node>
      <node id="27592">
        <label>baseline.h</label>
        <link refid="baseline_8h"/>
        <childnode refid="27557" relation="include">
        </childnode>
        <childnode refid="27593" relation="include">
        </childnode>
        <childnode refid="27565" relation="include">
        </childnode>
      </node>
      <node id="27551">
        <label>classify/shapetable.cpp</label>
        <link refid="shapetable.cpp"/>
        <childnode refid="27552" relation="include">
        </childnode>
        <childnode refid="27604" relation="include">
        </childnode>
        <childnode refid="27566" relation="include">
        </childnode>
        <childnode refid="27584" relation="include">
        </childnode>
      </node>
      <node id="27604">
        <label>intfeaturespace.h</label>
        <link refid="intfeaturespace_8h"/>
        <childnode refid="27553" relation="include">
        </childnode>
        <childnode refid="27569" relation="include">
        </childnode>
      </node>
      <node id="27568">
        <label>stddef.h</label>
      </node>
      <node id="27572">
        <label>memory.h</label>
      </node>
      <node id="27603">
        <label>cutoffs.h</label>
        <link refid="cutoffs_8h"/>
        <childnode refid="27570" relation="include">
        </childnode>
      </node>
      <node id="27590">
        <label>fpoint.h</label>
        <link refid="fpoint_8h"/>
        <childnode refid="27557" relation="include">
        </childnode>
        <childnode refid="27554" relation="include">
        </childnode>
        <childnode refid="27591" relation="include">
        </childnode>
      </node>
      <node id="27560">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="27557" relation="include">
        </childnode>
      </node>
      <node id="27570">
        <label>matchdefs.h</label>
        <link refid="matchdefs_8h"/>
        <childnode refid="27557" relation="include">
        </childnode>
        <childnode refid="27554" relation="include">
        </childnode>
        <childnode refid="27571" relation="include">
        </childnode>
      </node>
      <node id="27559">
        <label>limits.h</label>
      </node>
      <node id="27552">
        <label>shapetable.h</label>
        <link refid="shapetable_8h"/>
        <childnode refid="27553" relation="include">
        </childnode>
        <childnode refid="27564" relation="include">
        </childnode>
      </node>
      <node id="27597">
        <label>ipoints.h</label>
        <link refid="ipoints_8h"/>
        <childnode refid="27591" relation="include">
        </childnode>
      </node>
      <node id="27587">
        <label>pthread.h</label>
      </node>
      <node id="27562">
        <label>string.h</label>
      </node>
      <node id="27585">
        <label>unicharmap.h</label>
        <link refid="unicharmap_8h"/>
        <childnode refid="27571" relation="include">
        </childnode>
      </node>
      <node id="27571">
        <label>unichar.h</label>
        <link refid="unichar_8h"/>
        <childnode refid="27572" relation="include">
        </childnode>
        <childnode refid="27562" relation="include">
        </childnode>
      </node>
      <node id="27575">
        <label>cutil.h</label>
        <link refid="cutil_8h"/>
        <childnode refid="27554" relation="include">
        </childnode>
        <childnode refid="27562" relation="include">
        </childnode>
        <childnode refid="27555" relation="include">
        </childnode>
        <childnode refid="27557" relation="include">
        </childnode>
        <childnode refid="27576" relation="include">
        </childnode>
        <childnode refid="27577" relation="include">
        </childnode>
      </node>
      <node id="27595">
        <label>rect.h</label>
        <link refid="rect_8h"/>
        <childnode refid="27591" relation="include">
        </childnode>
        <childnode refid="27596" relation="include">
        </childnode>
        <childnode refid="27563" relation="include">
        </childnode>
        <childnode refid="27598" relation="include">
        </childnode>
        <childnode refid="27576" relation="include">
        </childnode>
      </node>
      <node id="27556">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="27557" relation="include">
        </childnode>
      </node>
      <node id="27588">
        <label>semaphore.h</label>
      </node>
      <node id="27582">
        <label>fileerr.h</label>
        <link refid="fileerr_8h"/>
        <childnode refid="27560" relation="include">
        </childnode>
      </node>
      <node id="27573">
        <label>mfoutline.h</label>
        <link refid="mfoutline_8h"/>
        <childnode refid="27557" relation="include">
        </childnode>
        <childnode refid="27574" relation="include">
        </childnode>
        <childnode refid="27590" relation="include">
        </childnode>
        <childnode refid="27592" relation="include">
        </childnode>
        <childnode refid="27565" relation="include">
        </childnode>
      </node>
      <node id="27579">
        <label>ambigs.h</label>
        <link refid="ambigs_8h"/>
        <childnode refid="27580" relation="include">
        </childnode>
        <childnode refid="27576" relation="include">
        </childnode>
        <childnode refid="27571" relation="include">
        </childnode>
        <childnode refid="27584" relation="include">
        </childnode>
        <childnode refid="27553" relation="include">
        </childnode>
      </node>
      <node id="27602">
        <label>unicity_table.h</label>
        <link refid="unicity__table_8h"/>
        <childnode refid="27556" relation="include">
        </childnode>
        <childnode refid="27560" relation="include">
        </childnode>
        <childnode refid="27553" relation="include">
        </childnode>
      </node>
      <node id="27591">
        <label>math.h</label>
      </node>
      <node id="27583">
        <label>lsterr.h</label>
        <link refid="lsterr_8h"/>
        <childnode refid="27560" relation="include">
        </childnode>
      </node>
      <node id="27599">
        <label>vecfuncs.h</label>
        <link refid="vecfuncs_8h"/>
        <childnode refid="27591" relation="include">
        </childnode>
        <childnode refid="27593" relation="include">
        </childnode>
      </node>
      <node id="27574">
        <label>oldlist.h</label>
        <link refid="oldlist_8h"/>
        <childnode refid="27575" relation="include">
        </childnode>
        <childnode refid="27556" relation="include">
        </childnode>
      </node>
      <node id="27565">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="27554" relation="include">
        </childnode>
        <childnode refid="27553" relation="include">
        </childnode>
        <childnode refid="27566" relation="include">
        </childnode>
      </node>
      <node id="27553">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="27554" relation="include">
        </childnode>
        <childnode refid="27555" relation="include">
        </childnode>
        <childnode refid="27556" relation="include">
        </childnode>
        <childnode refid="27560" relation="include">
        </childnode>
        <childnode refid="27561" relation="include">
        </childnode>
        <childnode refid="27563" relation="include">
        </childnode>
      </node>
      <node id="27567">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="27568" relation="include">
        </childnode>
        <childnode refid="27557" relation="include">
        </childnode>
      </node>
      <node id="27600">
        <label>protos.h</label>
        <link refid="protos_8h"/>
        <childnode refid="27601" relation="include">
        </childnode>
        <childnode refid="27575" relation="include">
        </childnode>
        <childnode refid="27571" relation="include">
        </childnode>
        <childnode refid="27602" relation="include">
        </childnode>
        <childnode refid="27565" relation="include">
        </childnode>
      </node>
      <node id="27580">
        <label>elst.h</label>
        <link refid="elst_8h"/>
        <childnode refid="27554" relation="include">
        </childnode>
        <childnode refid="27557" relation="include">
        </childnode>
        <childnode refid="27581" relation="include">
        </childnode>
        <childnode refid="27583" relation="include">
        </childnode>
      </node>
      <node id="27584">
        <label>unicharset.h</label>
        <link refid="unicharset_8h"/>
        <childnode refid="27560" relation="include">
        </childnode>
        <childnode refid="27561" relation="include">
        </childnode>
        <childnode refid="27566" relation="include">
        </childnode>
        <childnode refid="27556" relation="include">
        </childnode>
        <childnode refid="27571" relation="include">
        </childnode>
        <childnode refid="27585" relation="include">
        </childnode>
      </node>
      <node id="27596">
        <label>points.h</label>
        <link refid="points_8h"/>
        <childnode refid="27554" relation="include">
        </childnode>
        <childnode refid="27591" relation="include">
        </childnode>
        <childnode refid="27580" relation="include">
        </childnode>
        <childnode refid="27597" relation="include">
        </childnode>
      </node>
      <node id="27576">
        <label>tprintf.h</label>
        <link refid="tprintf_8h"/>
        <childnode refid="27565" relation="include">
        </childnode>
      </node>
      <node id="27564">
        <label>intmatcher.h</label>
        <link refid="intmatcher_8h"/>
        <childnode refid="27565" relation="include">
        </childnode>
        <childnode refid="27569" relation="include">
        </childnode>
        <childnode refid="27603" relation="include">
        </childnode>
      </node>
      <node id="27557">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="27558" relation="include">
        </childnode>
      </node>
      <node id="27554">
        <label>stdio.h</label>
      </node>
      <node id="27569">
        <label>intproto.h</label>
        <link refid="intproto_8h"/>
        <childnode refid="27553" relation="include">
        </childnode>
        <childnode refid="27570" relation="include">
        </childnode>
        <childnode refid="27573" relation="include">
        </childnode>
        <childnode refid="27600" relation="include">
        </childnode>
        <childnode refid="27598" relation="include">
        </childnode>
        <childnode refid="27584" relation="include">
        </childnode>
      </node>
      <node id="27586">
        <label>tessdatamanager.h</label>
        <link refid="tessdatamanager_8h"/>
        <childnode refid="27554" relation="include">
        </childnode>
        <childnode refid="27557" relation="include">
        </childnode>
        <childnode refid="27576" relation="include">
        </childnode>
      </node>
      <node id="27566">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="27554" relation="include">
        </childnode>
        <childnode refid="27562" relation="include">
        </childnode>
        <childnode refid="27558" relation="include">
        </childnode>
        <childnode refid="27567" relation="include">
        </childnode>
      </node>
      <node id="27593">
        <label>blobs.h</label>
        <link refid="blobs_8h"/>
        <childnode refid="27594" relation="include">
        </childnode>
        <childnode refid="27595" relation="include">
        </childnode>
        <childnode refid="27599" relation="include">
        </childnode>
      </node>
      <node id="27561">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="27554" relation="include">
        </childnode>
        <childnode refid="27562" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetesseract">tesseract</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2010<sp/>Google<sp/>Inc.<sp/>All<sp/>Rights<sp/>Reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>rays@google.com<sp/>(Ray<sp/>Smith)</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight><highlight class="comment">//<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapetable.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Class<sp/>to<sp/>map<sp/>a<sp/>classifier<sp/>shape<sp/>index<sp/>to<sp/>unicharset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices<sp/>and<sp/>font<sp/>indices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/>Ray<sp/>Smith</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created:<sp/><sp/><sp/><sp/><sp/>Tue<sp/>Nov<sp/>02<sp/>15:31:32<sp/>PDT<sp/>2010</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Copyright<sp/>2010,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shapetable_8h" kindref="compound">shapetable.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="intfeaturespace_8h" kindref="compound">intfeaturespace.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="strngs_8h" kindref="compound">strngs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="unicharset_8h" kindref="compound">unicharset.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesseract-c__api-demo_1afed58feacb84df2de88bdd613cfdba6d" kindref="member">tesseract</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>to<sp/>the<sp/>given<sp/>file.<sp/>Returns<sp/>false<sp/>in<sp/>case<sp/>of<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_unichar_and_fonts_1a9fc03f938c74c07debc8c5bd58e9c3d1" kindref="member">UnicharAndFonts::Serialize</ref>(FILE*<sp/>fp)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite(&amp;<ref refid="structtesseract_1_1_unichar_and_fonts_1a403559d5097fc81a0fa4afb823759ba9" kindref="member">unichar_id</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesseract_1_1_unichar_and_fonts_1a403559d5097fc81a0fa4afb823759ba9" kindref="member">unichar_id</ref>),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structtesseract_1_1_unichar_and_fonts_1a0e1a3d64d3276cf117efc983a02b38ba" kindref="member">font_ids</ref>.<ref refid="class_generic_vector_1a51aeec27092537323abc7174af1c16ef" kindref="member">Serialize</ref>(fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>from<sp/>the<sp/>given<sp/>file.<sp/>Returns<sp/>false<sp/>in<sp/>case<sp/>of<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>swap<sp/>is<sp/>true,<sp/>assumes<sp/>a<sp/>big/little-endian<sp/>swap<sp/>is<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_unichar_and_fonts_1a2e3240e66a31a30ec518493693149efa" kindref="member">UnicharAndFonts::DeSerialize</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>swap,<sp/>FILE*<sp/>fp)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;<ref refid="structtesseract_1_1_unichar_and_fonts_1a403559d5097fc81a0fa4afb823759ba9" kindref="member">unichar_id</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesseract_1_1_unichar_and_fonts_1a403559d5097fc81a0fa4afb823759ba9" kindref="member">unichar_id</ref>),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swap)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="helpers_8h_1ae7eeeca49954d4b13d269729f2fecd5a" kindref="member">ReverseN</ref>(&amp;<ref refid="structtesseract_1_1_unichar_and_fonts_1a403559d5097fc81a0fa4afb823759ba9" kindref="member">unichar_id</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesseract_1_1_unichar_and_fonts_1a403559d5097fc81a0fa4afb823759ba9" kindref="member">unichar_id</ref>));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structtesseract_1_1_unichar_and_fonts_1a0e1a3d64d3276cf117efc983a02b38ba" kindref="member">font_ids</ref>.<ref refid="class_generic_vector_1aa4f5b1bc0d044fbd1fc77363b798c39c" kindref="member">DeSerialize</ref>(swap,<sp/>fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sort<sp/>function<sp/>to<sp/>sort<sp/>a<sp/>pair<sp/>of<sp/>UnicharAndFonts<sp/>by<sp/>unichar_id.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_unichar_and_fonts_1a416f42c44c1bde4d7fdbc9c7ab8bf660" kindref="member">UnicharAndFonts::SortByUnicharId</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_unichar_and_fonts_1acb6e439f7efaaa2953b1239c67992b84" kindref="member">UnicharAndFonts</ref>*<sp/>p1<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structtesseract_1_1_unichar_and_fonts_1acb6e439f7efaaa2953b1239c67992b84" kindref="member">UnicharAndFonts</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_unichar_and_fonts_1acb6e439f7efaaa2953b1239c67992b84" kindref="member">UnicharAndFonts</ref>*<sp/>p2<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structtesseract_1_1_unichar_and_fonts_1acb6e439f7efaaa2953b1239c67992b84" kindref="member">UnicharAndFonts</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v2);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p1-&gt;unichar_id<sp/>-<sp/>p2-&gt;unichar_id;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>to<sp/>the<sp/>given<sp/>file.<sp/>Returns<sp/>false<sp/>in<sp/>case<sp/>of<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_1ae8e294fc321170b61d73ad989244b16a" kindref="member">Shape::Serialize</ref>(FILE*<sp/>fp)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>sorted<sp/>=<sp/>unichars_sorted_;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite(&amp;sorted,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sorted),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!unichars_.SerializeClasses(fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>from<sp/>the<sp/>given<sp/>file.<sp/>Returns<sp/>false<sp/>in<sp/>case<sp/>of<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>swap<sp/>is<sp/>true,<sp/>assumes<sp/>a<sp/>big/little-endian<sp/>swap<sp/>is<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_1a19655bb2ebbd46892099346c9902feec" kindref="member">Shape::DeSerialize</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>swap,<sp/>FILE*<sp/>fp)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>sorted;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;sorted,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sorted),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>unichars_sorted_<sp/>=<sp/>sorted<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!unichars_.DeSerializeClasses(swap,<sp/>fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>font_id<sp/>for<sp/>the<sp/>given<sp/>unichar_id.<sp/>If<sp/>the<sp/>unichar_id<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>shape,<sp/>it<sp/>is<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_1a8ba6275e93ed4704cf486e911f42f420" kindref="member">Shape::AddToShape</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unichar_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>font_id)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>unichars_.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unichars_[c].unichar_id<sp/>==<sp/>unichar_id)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>the<sp/>unichar<sp/>in<sp/>the<sp/>shape<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;int&gt;</ref>&amp;<sp/>font_list<sp/>=<sp/>unichars_[c].font_ids;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>=<sp/>0;<sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>&lt;<sp/>font_list.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font_list[<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>]<sp/>==<sp/>font_id)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Font<sp/>is<sp/>already<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>font_list.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(font_id);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unichar_id<sp/>is<sp/>not<sp/>in<sp/>shape,<sp/>so<sp/>add<sp/>it<sp/>to<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>unichars_.push_back(UnicharAndFonts(unichar_id,<sp/>font_id));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>unichars_sorted_<sp/>=<sp/><sp/>unichars_.size()<sp/>&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>everything<sp/>in<sp/>other<sp/>to<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_1ab958a107a2f7c2a665c54a749b8ff0f4" kindref="member">Shape::AddShape</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Shape&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>other.unichars_.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>=<sp/>0;<sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>&lt;<sp/>other.unichars_[c].font_ids.size();<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_shape_1a8ba6275e93ed4704cf486e911f42f420" kindref="member">AddToShape</ref>(other.unichars_[c].unichar_id,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.unichars_[c].font_ids[<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>]);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>unichars_sorted_<sp/>=<sp/><sp/>unichars_.size()<sp/>&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>shape<sp/>contains<sp/>the<sp/>given<sp/>unichar_id,<sp/>font_id<sp/>pair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_1aa6d5091ec6842cfa5c0622bc772ca26c" kindref="member">Shape::ContainsUnicharAndFont</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unichar_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>font_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>unichars_.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unichars_[c].unichar_id<sp/>==<sp/>unichar_id)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>the<sp/>unichar,<sp/>so<sp/>look<sp/>for<sp/>the<sp/>font.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;int&gt;</ref>&amp;<sp/>font_list<sp/>=<sp/>unichars_[c].font_ids;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>=<sp/>0;<sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>&lt;<sp/>font_list.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font_list[<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>]<sp/>==<sp/>font_id)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>shape<sp/>contains<sp/>the<sp/>given<sp/>unichar_id,<sp/>ignoring<sp/>font.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_1a736c652adf59c9e1bdc68756f7e1e7e6" kindref="member">Shape::ContainsUnichar</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unichar_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>unichars_.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unichars_[c].unichar_id<sp/>==<sp/>unichar_id)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>shape<sp/>contains<sp/>the<sp/>given<sp/>font,<sp/>ignoring<sp/>unichar_id.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_1a826ee7935903995239b27f1b4e68e1ba" kindref="member">Shape::ContainsFont</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>font_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>unichars_.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;int&gt;</ref>&amp;<sp/>font_list<sp/>=<sp/>unichars_[c].font_ids;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>=<sp/>0;<sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>&lt;<sp/>font_list.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font_list[<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>]<sp/>==<sp/>font_id)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>this<sp/>is<sp/>a<sp/>subset<sp/>(including<sp/>equal)<sp/>of<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_1a797653eeb0584320326b599f5653e2df" kindref="member">Shape::IsSubsetOf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Shape&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>unichars_.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unichar_id<sp/>=<sp/>unichars_[c].unichar_id;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;int&gt;</ref>&amp;<sp/>font_list<sp/>=<sp/>unichars_[c].font_ids;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>=<sp/>0;<sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>&lt;<sp/>font_list.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!other.ContainsUnicharAndFont(unichar_id,<sp/>font_list[<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>]))</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>lists<sp/>of<sp/>unichar<sp/>ids<sp/>are<sp/>the<sp/>same<sp/>in<sp/>this<sp/>and<sp/>other,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ignoring<sp/>fonts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOT<sp/>const,<sp/>as<sp/>it<sp/>will<sp/>sort<sp/>the<sp/>unichars<sp/>on<sp/>demand.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_1ac6bd7e4be5dc4755ad66b62ecb5f86e6" kindref="member">Shape::IsEqualUnichars</ref>(Shape*<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unichars_.size()<sp/>!=<sp/>other-&gt;unichars_.size())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!unichars_sorted_)<sp/>SortUnichars();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!other-&gt;unichars_sorted_)<sp/>other-&gt;SortUnichars();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>unichars_.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unichars_[c].unichar_id<sp/>!=<sp/>other-&gt;unichars_[c].unichar_id)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sorts<sp/>the<sp/>unichars_<sp/>vector<sp/>by<sp/>unichar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Shape::SortUnichars()<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>unichars_.sort(<ref refid="structtesseract_1_1_unichar_and_fonts_1a416f42c44c1bde4d7fdbc9c7ab8bf660" kindref="member">UnicharAndFonts::SortByUnicharId</ref>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>unichars_sorted_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><ref refid="classtesseract_1_1_shape_table_1a281dee38659ef559b59964bfb9f35582" kindref="member">ShapeTable::ShapeTable</ref>()<sp/>:<sp/>unicharset_(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><ref refid="classtesseract_1_1_shape_table_1a281dee38659ef559b59964bfb9f35582" kindref="member">ShapeTable::ShapeTable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref>&amp;<sp/>unicharset)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>:<sp/>unicharset_(&amp;unicharset)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>to<sp/>the<sp/>given<sp/>file.<sp/>Returns<sp/>false<sp/>in<sp/>case<sp/>of<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1afba3bb1970bb5e5fe626d3259955a8d3" kindref="member">ShapeTable::Serialize</ref>(FILE*<sp/>fp)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shape_table_.Serialize(fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>from<sp/>the<sp/>given<sp/>file.<sp/>Returns<sp/>false<sp/>in<sp/>case<sp/>of<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>swap<sp/>is<sp/>true,<sp/>assumes<sp/>a<sp/>big/little-endian<sp/>swap<sp/>is<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1adfba8cbf1c85a12b6b826d332614072f" kindref="member">ShapeTable::DeSerialize</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>swap,<sp/>FILE*<sp/>fp)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shape_table_.DeSerialize(swap,<sp/>fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>string<sp/>listing<sp/>the<sp/>classes/fonts<sp/>in<sp/>a<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/><ref refid="classtesseract_1_1_shape_table_1a87937c115d25036a961833c8b8ab79dd" kindref="member">ShapeTable::DebugStr</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape_id<sp/>&lt;<sp/>0<sp/>||<sp/>shape_id<sp/>&gt;=<sp/>shape_table_.size())</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>(</highlight><highlight class="stringliteral">&quot;INVALID_UNICHAR_ID&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Shape&amp;<sp/>shape<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a9334161c64756c591ff7d4fca22277f5" kindref="member">GetShape</ref>(shape_id);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>result;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>result.<ref refid="class_s_t_r_i_n_g_1a779cd637dd42d58d5500a3a657077e84" kindref="member">add_str_int</ref>(</highlight><highlight class="stringliteral">&quot;Shape&quot;</highlight><highlight class="normal">,<sp/>shape_id);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape.size()<sp/>&gt;<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="class_s_t_r_i_n_g_1a779cd637dd42d58d5500a3a657077e84" kindref="member">add_str_int</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>Num<sp/>unichars=&quot;</highlight><highlight class="normal">,<sp/>shape.size());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>shape.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="class_s_t_r_i_n_g_1a779cd637dd42d58d5500a3a657077e84" kindref="member">add_str_int</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>c_id=&quot;</highlight><highlight class="normal">,<sp/>shape[c].unichar_id);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>unicharset_-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a421c0b6ebcbbe7547490252fb688c961" kindref="member">id_to_unichar</ref>(shape[c].unichar_id);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape.size()<sp/>&lt;<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="class_s_t_r_i_n_g_1a779cd637dd42d58d5500a3a657077e84" kindref="member">add_str_int</ref>(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">,<sp/>shape[c].font_ids.size());</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>fonts<sp/>=&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_fonts<sp/>=<sp/>shape[c].font_ids.<ref refid="class_s_t_r_i_n_g_1a0c93665497f997cdd426cc8bfb1955e6" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_fonts<sp/>&gt;<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="class_s_t_r_i_n_g_1a779cd637dd42d58d5500a3a657077e84" kindref="member">add_str_int</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,<sp/>shape[c].font_ids[0]);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="class_s_t_r_i_n_g_1a779cd637dd42d58d5500a3a657077e84" kindref="member">add_str_int</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>...<sp/>&quot;</highlight><highlight class="normal">,<sp/>shape[c].font_ids[num_fonts<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>=<sp/>0;<sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>&lt;<sp/>num_fonts;<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="class_s_t_r_i_n_g_1a779cd637dd42d58d5500a3a657077e84" kindref="member">add_str_int</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,<sp/>shape[c].font_ids[<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>]);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>debug<sp/>string<sp/>summarizing<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/><ref refid="classtesseract_1_1_shape_table_1aeaa348185383beb3f14daf445919b30c" kindref="member">ShapeTable::SummaryStr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_unichars<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_multi_shapes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_master_shapes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>shape_table_.size();<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtesseract_1_1_shape_table_1a27ddf900a8b1463aeb5db4e3128e6636" kindref="member">MasterDestinationIndex</ref>(s)<sp/>!=<sp/>s)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>++num_master_shapes;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_size<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a9334161c64756c591ff7d4fca22277f5" kindref="member">GetShape</ref>(s).<ref refid="classtesseract_1_1_shape_1a0fca7f64992c74492787d00240a22913" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape_size<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++num_multi_shapes;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape_size<sp/>&gt;<sp/>max_unichars)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_unichars<sp/>=<sp/>shape_size;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>result;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>result.<ref refid="class_s_t_r_i_n_g_1a779cd637dd42d58d5500a3a657077e84" kindref="member">add_str_int</ref>(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>shapes<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>num_master_shapes);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>result.<ref refid="class_s_t_r_i_n_g_1a779cd637dd42d58d5500a3a657077e84" kindref="member">add_str_int</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>max<sp/>unichars<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>max_unichars);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>result.<ref refid="class_s_t_r_i_n_g_1a779cd637dd42d58d5500a3a657077e84" kindref="member">add_str_int</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>number<sp/>with<sp/>multiple<sp/>unichars<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>num_multi_shapes);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>new<sp/>shape<sp/>starting<sp/>with<sp/>the<sp/>given<sp/>unichar_id<sp/>and<sp/>font_id.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>assigned<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1a4560e30f0df9126da3462e4858e6a2db" kindref="member">ShapeTable::AddShape</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unichar_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>font_id)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>shape_table_.size();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>Shape*<sp/>shape<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Shape;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>shape-&gt;AddToShape(unichar_id,<sp/>font_id);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>shape_table_.push_back(shape);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>given<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>assigned<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1a4560e30f0df9126da3462e4858e6a2db" kindref="member">ShapeTable::AddShape</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Shape&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>shape_table_.size();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>Shape*<sp/>shape<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Shape(other);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>shape_table_.push_back(shape);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Removes<sp/>the<sp/>shape<sp/>given<sp/>by<sp/>the<sp/>shape<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1aa50746fbf2f1676290ab5e372b228167" kindref="member">ShapeTable::DeleteShape</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>shape_table_[shape_id];</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>shape_table_[shape_id]<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>shape_table_.remove(shape_id);</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>font_id<sp/>to<sp/>the<sp/>given<sp/>existing<sp/>shape<sp/>index<sp/>for<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unichar_id.<sp/>If<sp/>the<sp/>unichar_id<sp/>is<sp/>not<sp/>in<sp/>the<sp/>shape,<sp/>it<sp/>is<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1ac8c09a4d3aefed5026a4837f514a3c14" kindref="member">ShapeTable::AddToShape</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unichar_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>font_id)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>Shape&amp;<sp/>shape<sp/>=<sp/>*shape_table_[shape_id];</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>shape.AddToShape(unichar_id,<sp/>font_id);</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>the<sp/>given<sp/>shape<sp/>to<sp/>the<sp/>existing<sp/>shape<sp/>with<sp/>the<sp/>given<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1abf52fa86adb98bedc1e2677ec35b1a9c" kindref="member">ShapeTable::AddShapeToShape</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Shape&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>Shape&amp;<sp/>shape<sp/>=<sp/>*shape_table_[shape_id];</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>shape.AddShape(other);</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>id<sp/>of<sp/>the<sp/>shape<sp/>that<sp/>contains<sp/>the<sp/>given<sp/>unichar<sp/>and<sp/>font.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>not<sp/>found,<sp/>returns<sp/>-1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>font_id<sp/>&lt;<sp/>0,<sp/>the<sp/>font_id<sp/>is<sp/>ignored<sp/>and<sp/>the<sp/>first<sp/>shape<sp/>that<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>unichar_id<sp/>is<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1a6bd8104b89a7c7ffeb8c4bc8996fff6c" kindref="member">ShapeTable::FindShape</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unichar_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>font_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>shape_table_.size();<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Shape&amp;<sp/>shape<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a9334161c64756c591ff7d4fca22277f5" kindref="member">GetShape</ref>(s);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>shape.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape[c].unichar_id<sp/>==<sp/>unichar_id)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font_id<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>care<sp/>about<sp/>the<sp/>font.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>=<sp/>0;<sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>&lt;<sp/>shape[c].font_ids.size();<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape[c].font_ids[<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>]<sp/>==<sp/>font_id)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>first<sp/>unichar_id<sp/>and<sp/>font_id<sp/>in<sp/>the<sp/>given<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1ade3f46eb910d83302b04f9f530277290" kindref="member">ShapeTable::GetFirstUnicharAndFont</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>unichar_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>font_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnicharAndFonts&amp;<sp/>unichar_and_fonts<sp/>=<sp/>(*shape_table_[shape_id])[0];</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>*unichar_id<sp/>=<sp/>unichar_and_fonts.unichar_id;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>*font_id<sp/>=<sp/>unichar_and_fonts.font_ids[0];</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Expands<sp/>all<sp/>the<sp/>classes/fonts<sp/>in<sp/>the<sp/>shape<sp/>individually<sp/>to<sp/>build</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>ShapeTable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1ac2bd77883160f685122f6fa87f8e9c52" kindref="member">ShapeTable::BuildFromShape</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Shape&amp;<sp/>shape,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShapeTable&amp;<sp/>master_shapes)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_masters<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u_ind<sp/>=<sp/>0;<sp/>u_ind<sp/>&lt;<sp/>shape.size();<sp/>++u_ind)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f_ind<sp/>=<sp/>0;<sp/>f_ind<sp/>&lt;<sp/>shape[u_ind].font_ids.size();<sp/>++f_ind)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>shape[u_ind].unichar_id;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>=<sp/>shape[u_ind].font_ids[f_ind];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtesseract_1_1_shape_table_1a6bd8104b89a7c7ffeb8c4bc8996fff6c" kindref="member">FindShape</ref>(c,<sp/>f)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a4560e30f0df9126da3462e4858e6a2db" kindref="member">AddShape</ref>(c,<sp/>f);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>master_id<sp/>=<sp/>master_shapes.FindShape(c,<sp/>f);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master_id<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>shape.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Shape&amp;<sp/>master<sp/>=<sp/>master_shapes.GetShape(master_id);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master.IsSubsetOf(shape)<sp/>&amp;&amp;<sp/>!shape.IsSubsetOf(master))<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>everything<sp/>else<sp/>from<sp/>the<sp/>master<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_table_[shape_id]-&gt;AddShape(master);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++num_masters;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_masters;</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>shapes<sp/>are<sp/>already<sp/>merged.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1a08b63fc54885f62f112079c575c33ffb" kindref="member">ShapeTable::AlreadyMerged</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1a27ddf900a8b1463aeb5db4e3128e6636" kindref="member">MasterDestinationIndex</ref>(shape_id1)<sp/>==<sp/><ref refid="classtesseract_1_1_shape_table_1a27ddf900a8b1463aeb5db4e3128e6636" kindref="member">MasterDestinationIndex</ref>(shape_id2);</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>any<sp/>shape<sp/>contains<sp/>multiple<sp/>unichars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1a77fc3b88ce452fe84f66476ebd0567ff" kindref="member">ShapeTable::AnyMultipleUnichars</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_shapes<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a924919daeadb48539e3d68c65013c173" kindref="member">NumShapes</ref>();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>0;<sp/>s1<sp/>&lt;<sp/>num_shapes;<sp/>++s1)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtesseract_1_1_shape_table_1a27ddf900a8b1463aeb5db4e3128e6636" kindref="member">MasterDestinationIndex</ref>(s1)<sp/>!=<sp/>s1)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtesseract_1_1_shape_table_1a9334161c64756c591ff7d4fca22277f5" kindref="member">GetShape</ref>(s1).size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>unichars<sp/>over<sp/>all<sp/>shapes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1ad130bbb0f12679804c93bbaa10bec04e" kindref="member">ShapeTable::MaxNumUnichars</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_num_unichars<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_shapes<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a924919daeadb48539e3d68c65013c173" kindref="member">NumShapes</ref>();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>num_shapes;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtesseract_1_1_shape_table_1a9334161c64756c591ff7d4fca22277f5" kindref="member">GetShape</ref>(s).size()<sp/>&gt;<sp/>max_num_unichars)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_num_unichars<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a9334161c64756c591ff7d4fca22277f5" kindref="member">GetShape</ref>(s).<ref refid="classtesseract_1_1_shape_1a0fca7f64992c74492787d00240a22913" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_num_unichars;</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Merges<sp/>shapes<sp/>with<sp/>a<sp/>common<sp/>unichar<sp/>over<sp/>the<sp/>[start,<sp/>end)<sp/>interval.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assumes<sp/>single<sp/>unichar<sp/>per<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1ae6c7d40a14971256995d61405c899a0a" kindref="member">ShapeTable::ForceFontMerges</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>start;<sp/>s1<sp/>&lt;<sp/>end;<sp/>++s1)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtesseract_1_1_shape_table_1a27ddf900a8b1463aeb5db4e3128e6636" kindref="member">MasterDestinationIndex</ref>(s1)<sp/>==<sp/>s1<sp/>&amp;&amp;<sp/><ref refid="classtesseract_1_1_shape_table_1a9334161c64756c591ff7d4fca22277f5" kindref="member">GetShape</ref>(s1).size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unichar_id<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a9334161c64756c591ff7d4fca22277f5" kindref="member">GetShape</ref>(s1)[0].unichar_id;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s2<sp/>=<sp/>s1<sp/>+<sp/>1;<sp/>s2<sp/>&lt;<sp/>end;<sp/>++s2)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtesseract_1_1_shape_table_1a27ddf900a8b1463aeb5db4e3128e6636" kindref="member">MasterDestinationIndex</ref>(s2)<sp/>==<sp/>s2<sp/>&amp;&amp;<sp/><ref refid="classtesseract_1_1_shape_table_1a9334161c64756c591ff7d4fca22277f5" kindref="member">GetShape</ref>(s2).size()<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unichar_id<sp/>==<sp/><ref refid="classtesseract_1_1_shape_table_1a9334161c64756c591ff7d4fca22277f5" kindref="member">GetShape</ref>(s2)[0].unichar_id)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_shape_table_1a894d3a172873cbfb9def40cc2d02fbae" kindref="member">MergeShapes</ref>(s1,<sp/>s2);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_shape_table_1a281dee38659ef559b59964bfb9f35582" kindref="member">ShapeTable</ref><sp/>compacted(*unicharset_);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>compacted.AppendMasterShapes(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>compacted;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>unichars<sp/>in<sp/>the<sp/>master<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1a0d9f69c9ee9d5bcb6d8658925a881831" kindref="member">ShapeTable::MasterUnicharCount</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>master_id<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a27ddf900a8b1463aeb5db4e3128e6636" kindref="member">MasterDestinationIndex</ref>(shape_id);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1a9334161c64756c591ff7d4fca22277f5" kindref="member">GetShape</ref>(master_id).<ref refid="classtesseract_1_1_shape_1a0fca7f64992c74492787d00240a22913" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>font<sp/>counts<sp/>in<sp/>the<sp/>master<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1a25fa21bfc400b72a334e3e2fd474cb53" kindref="member">ShapeTable::MasterFontCount</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>master_id<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a27ddf900a8b1463aeb5db4e3128e6636" kindref="member">MasterDestinationIndex</ref>(shape_id);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Shape&amp;<sp/>shape<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a9334161c64756c591ff7d4fca22277f5" kindref="member">GetShape</ref>(master_id);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>font_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>shape.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>font_count<sp/>+=<sp/>shape[c].font_ids.size();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>font_count;</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>unichars<sp/>that<sp/>would<sp/>result<sp/>from<sp/>merging<sp/>the<sp/>shapes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1a7a76eef56cbc9fe1a959b8988faef0fb" kindref="member">ShapeTable::MergedUnicharCount</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>it<sp/>the<sp/>easy<sp/>way<sp/>for<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>master_id1<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a27ddf900a8b1463aeb5db4e3128e6636" kindref="member">MasterDestinationIndex</ref>(shape_id1);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>master_id2<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a27ddf900a8b1463aeb5db4e3128e6636" kindref="member">MasterDestinationIndex</ref>(shape_id2);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>Shape<sp/>combined_shape(*shape_table_[master_id1]);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>combined_shape.AddShape(*shape_table_[master_id2]);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>combined_shape.size();</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Merges<sp/>two<sp/>shape_ids,<sp/>leaving<sp/>shape_id2<sp/>marked<sp/>as<sp/>merged.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1a894d3a172873cbfb9def40cc2d02fbae" kindref="member">ShapeTable::MergeShapes</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id2)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>master_id1<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a27ddf900a8b1463aeb5db4e3128e6636" kindref="member">MasterDestinationIndex</ref>(shape_id1);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>master_id2<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a27ddf900a8b1463aeb5db4e3128e6636" kindref="member">MasterDestinationIndex</ref>(shape_id2);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Point<sp/>master_id2<sp/>(and<sp/>all<sp/>merged<sp/>shapes)<sp/>to<sp/>master_id1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>shape_table_[master_id2]-&gt;set_destination_index(master_id1);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>all<sp/>the<sp/>shapes<sp/>of<sp/>master_id2<sp/>to<sp/>master_id1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>shape_table_[master_id1]-&gt;AddShape(*shape_table_[master_id2]);</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>destination<sp/>of<sp/>this<sp/>shape,<sp/>(if<sp/>merged),<sp/>taking<sp/>into<sp/>account</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>fact<sp/>that<sp/>the<sp/>destination<sp/>may<sp/>itself<sp/>have<sp/>been<sp/>merged.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1a27ddf900a8b1463aeb5db4e3128e6636" kindref="member">ShapeTable::MasterDestinationIndex</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_id<sp/>=<sp/>shape_table_[shape_id]-&gt;destination_index();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dest_id<sp/>==<sp/>shape_id<sp/>||<sp/>dest_id<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape_id;<sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>master<sp/>already.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>master_id<sp/>=<sp/>shape_table_[dest_id]-&gt;destination_index();</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master_id<sp/>==<sp/>dest_id<sp/>||<sp/>master_id<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dest_id;<sp/><sp/></highlight><highlight class="comment">//<sp/>Dest<sp/>is<sp/>the<sp/>master<sp/>and<sp/>shape_id<sp/>points<sp/>to<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>master_id<sp/>=<sp/><ref refid="classtesseract_1_1_shape_table_1a27ddf900a8b1463aeb5db4e3128e6636" kindref="member">MasterDestinationIndex</ref>(master_id);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>master_id;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>the<sp/>master<sp/>shapes<sp/>from<sp/>other<sp/>to<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1ae8a8a15df8f549f59e729eab865d6e66" kindref="member">ShapeTable::AppendMasterShapes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShapeTable&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>other.shape_table_.size();<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.shape_table_[s]-&gt;destination_index()<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_shape_table_1a4560e30f0df9126da3462e4858e6a2db" kindref="member">AddShape</ref>(*other.shape_table_[s]);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>master<sp/>shapes<sp/>remaining<sp/>after<sp/>merging.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_shape_table_1a2c23ee547c7157870d3be58a431b7033" kindref="member">ShapeTable::NumMasterShapes</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_shapes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>shape_table_.size();<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape_table_[s]-&gt;destination_index()<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++num_shapes;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_shapes;</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tesseract</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/classify/shapetable.cpp"/>
  </compounddef>
</doxygen>
