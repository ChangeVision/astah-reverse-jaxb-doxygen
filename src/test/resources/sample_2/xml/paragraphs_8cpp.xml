<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="paragraphs_8cpp" kind="file">
    <compoundname>paragraphs.cpp</compoundname>
    <includes local="no">ctype.h</includes>
    <includes refid="genericvector_8h" local="yes">genericvector.h</includes>
    <includes refid="helpers_8h" local="yes">helpers.h</includes>
    <includes refid="mutableiterator_8h" local="yes">mutableiterator.h</includes>
    <includes refid="ocrpara_8h" local="yes">ocrpara.h</includes>
    <includes refid="pageres_8h" local="yes">pageres.h</includes>
    <includes refid="paragraphs_8h" local="yes">paragraphs.h</includes>
    <includes refid="paragraphs__internal_8h" local="yes">paragraphs_internal.h</includes>
    <includes refid="publictypes_8h" local="yes">publictypes.h</includes>
    <includes refid="ratngs_8h" local="yes">ratngs.h</includes>
    <includes refid="rect_8h" local="yes">rect.h</includes>
    <includes refid="statistc_8h" local="yes">statistc.h</includes>
    <includes refid="strngs_8h" local="yes">strngs.h</includes>
    <includes refid="tprintf_8h" local="yes">tprintf.h</includes>
    <includes refid="unicharset_8h" local="yes">unicharset.h</includes>
    <includes refid="unicodes_8h" local="yes">unicodes.h</includes>
    <incdepgraph>
      <node id="3075">
        <label>unicodes.h</label>
        <link refid="unicodes_8h"/>
      </node>
      <node id="3063">
        <label>cutil_class.h</label>
        <link refid="cutil__class_8h"/>
        <childnode refid="3064" relation="include">
        </childnode>
        <childnode refid="3069" relation="include">
        </childnode>
        <childnode refid="3014" relation="include">
        </childnode>
      </node>
      <node id="2995">
        <label>ccmain/paragraphs.cpp</label>
        <link refid="paragraphs.cpp"/>
        <childnode refid="2996" relation="include">
        </childnode>
        <childnode refid="2997" relation="include">
        </childnode>
        <childnode refid="3005" relation="include">
        </childnode>
        <childnode refid="3008" relation="include">
        </childnode>
        <childnode refid="3020" relation="include">
        </childnode>
        <childnode refid="3025" relation="include">
        </childnode>
        <childnode refid="3071" relation="include">
        </childnode>
        <childnode refid="3072" relation="include">
        </childnode>
        <childnode refid="3012" relation="include">
        </childnode>
        <childnode refid="3055" relation="include">
        </childnode>
        <childnode refid="3028" relation="include">
        </childnode>
        <childnode refid="3074" relation="include">
        </childnode>
        <childnode refid="3014" relation="include">
        </childnode>
        <childnode refid="3033" relation="include">
        </childnode>
        <childnode refid="3013" relation="include">
        </childnode>
        <childnode refid="3075" relation="include">
        </childnode>
      </node>
      <node id="3008">
        <label>mutableiterator.h</label>
        <link refid="mutableiterator_8h"/>
        <childnode refid="3009" relation="include">
        </childnode>
      </node>
      <node id="3056">
        <label>assert.h</label>
      </node>
      <node id="3007">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="3058">
        <label>rejctmap.h</label>
        <link refid="rejctmap_8h"/>
        <childnode refid="3015" relation="include">
        </childnode>
        <childnode refid="3044" relation="include">
        </childnode>
        <childnode refid="3034" relation="include">
        </childnode>
        <childnode refid="3057" relation="include">
        </childnode>
      </node>
      <node id="3074">
        <label>statistc.h</label>
        <link refid="statistc_8h"/>
        <childnode refid="2998" relation="include">
        </childnode>
        <childnode refid="3001" relation="include">
        </childnode>
        <childnode refid="3032" relation="include">
        </childnode>
      </node>
      <node id="3069">
        <label>const.h</label>
        <link refid="const_8h"/>
      </node>
      <node id="2999">
        <label>stdlib.h</label>
      </node>
      <node id="3002">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="3003" relation="include">
        </childnode>
      </node>
      <node id="3011">
        <label>pageiterator.h</label>
        <link refid="pageiterator_8h"/>
        <childnode refid="3012" relation="include">
        </childnode>
        <childnode refid="3002" relation="include">
        </childnode>
      </node>
      <node id="3046">
        <label>blckerr.h</label>
        <link refid="blckerr_8h"/>
        <childnode refid="3004" relation="include">
        </childnode>
      </node>
      <node id="3064">
        <label>ccutil.h</label>
        <link refid="ccutil_8h"/>
        <childnode refid="3065" relation="include">
        </childnode>
        <childnode refid="3004" relation="include">
        </childnode>
        <childnode refid="3014" relation="include">
        </childnode>
        <childnode refid="3066" relation="include">
        </childnode>
        <childnode refid="3034" relation="include">
        </childnode>
        <childnode refid="3013" relation="include">
        </childnode>
        <childnode refid="3067" relation="include">
        </childnode>
        <childnode refid="3068" relation="include">
        </childnode>
      </node>
      <node id="3032">
        <label>scrollview.h</label>
        <link refid="scrollview_8h"/>
        <childnode refid="2998" relation="include">
        </childnode>
      </node>
      <node id="3009">
        <label>resultiterator.h</label>
        <link refid="resultiterator_8h"/>
        <childnode refid="3002" relation="include">
        </childnode>
        <childnode refid="3010" relation="include">
        </childnode>
        <childnode refid="2997" relation="include">
        </childnode>
      </node>
      <node id="3022">
        <label>serialis.h</label>
        <link refid="serialis_8h"/>
        <childnode refid="2999" relation="include">
        </childnode>
        <childnode refid="3006" relation="include">
        </childnode>
        <childnode refid="2998" relation="include">
        </childnode>
        <childnode refid="3015" relation="include">
        </childnode>
        <childnode refid="3004" relation="include">
        </childnode>
        <childnode refid="3023" relation="include">
        </childnode>
      </node>
      <node id="3070">
        <label>tessarray.h</label>
        <link refid="tessarray_8h"/>
        <childnode refid="2998" relation="include">
        </childnode>
      </node>
      <node id="3027">
        <label>clst.h</label>
        <link refid="clst_8h"/>
        <childnode refid="2998" relation="include">
        </childnode>
        <childnode refid="3001" relation="include">
        </childnode>
        <childnode refid="3022" relation="include">
        </childnode>
        <childnode refid="3024" relation="include">
        </childnode>
      </node>
      <node id="3047">
        <label>stepblob.h</label>
        <link refid="stepblob_8h"/>
        <childnode refid="3048" relation="include">
        </childnode>
        <childnode refid="3028" relation="include">
        </childnode>
      </node>
      <node id="3055">
        <label>ratngs.h</label>
        <link refid="ratngs_8h"/>
        <childnode refid="3056" relation="include">
        </childnode>
        <childnode refid="3027" relation="include">
        </childnode>
        <childnode refid="2997" relation="include">
        </childnode>
        <childnode refid="3057" relation="include">
        </childnode>
        <childnode refid="3017" relation="include">
        </childnode>
        <childnode refid="3013" relation="include">
        </childnode>
        <childnode refid="3043" relation="include">
        </childnode>
      </node>
      <node id="3072">
        <label>paragraphs_internal.h</label>
        <link refid="paragraphs__internal_8h"/>
        <childnode refid="3071" relation="include">
        </childnode>
        <childnode refid="3073" relation="include">
        </childnode>
      </node>
      <node id="3016">
        <label>stddef.h</label>
      </node>
      <node id="3018">
        <label>memory.h</label>
      </node>
      <node id="3004">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="3001" relation="include">
        </childnode>
      </node>
      <node id="3052">
        <label>polyblk.h</label>
        <link refid="polyblk_8h"/>
        <childnode refid="3012" relation="include">
        </childnode>
        <childnode refid="3021" relation="include">
        </childnode>
        <childnode refid="3030" relation="include">
        </childnode>
        <childnode refid="3028" relation="include">
        </childnode>
        <childnode refid="3032" relation="include">
        </childnode>
        <childnode refid="3053" relation="include">
        </childnode>
      </node>
      <node id="3003">
        <label>limits.h</label>
      </node>
      <node id="3054">
        <label>params_training_featdef.h</label>
        <link refid="params__training__featdef_8h"/>
        <childnode refid="2997" relation="include">
        </childnode>
        <childnode refid="3014" relation="include">
        </childnode>
      </node>
      <node id="3031">
        <label>ipoints.h</label>
        <link refid="ipoints_8h"/>
        <childnode refid="3029" relation="include">
        </childnode>
      </node>
      <node id="3050">
        <label>mod128.h</label>
        <link refid="mod128_8h"/>
        <childnode refid="3030" relation="include">
        </childnode>
      </node>
      <node id="3045">
        <label>elst2.h</label>
        <link refid="elst2_8h"/>
        <childnode refid="2998" relation="include">
        </childnode>
        <childnode refid="3001" relation="include">
        </childnode>
        <childnode refid="3022" relation="include">
        </childnode>
        <childnode refid="3024" relation="include">
        </childnode>
      </node>
      <node id="3067">
        <label>pthread.h</label>
      </node>
      <node id="3006">
        <label>string.h</label>
      </node>
      <node id="3019">
        <label>unicharmap.h</label>
        <link refid="unicharmap_8h"/>
        <childnode refid="3017" relation="include">
        </childnode>
      </node>
      <node id="3036">
        <label>boxword.h</label>
        <link refid="boxword_8h"/>
        <childnode refid="2997" relation="include">
        </childnode>
        <childnode refid="3028" relation="include">
        </childnode>
      </node>
      <node id="3017">
        <label>unichar.h</label>
        <link refid="unichar_8h"/>
        <childnode refid="3018" relation="include">
        </childnode>
        <childnode refid="3006" relation="include">
        </childnode>
      </node>
      <node id="3062">
        <label>cutil.h</label>
        <link refid="cutil_8h"/>
        <childnode refid="2998" relation="include">
        </childnode>
        <childnode refid="3006" relation="include">
        </childnode>
        <childnode refid="2999" relation="include">
        </childnode>
        <childnode refid="3001" relation="include">
        </childnode>
        <childnode refid="3033" relation="include">
        </childnode>
        <childnode refid="3063" relation="include">
        </childnode>
      </node>
      <node id="3028">
        <label>rect.h</label>
        <link refid="rect_8h"/>
        <childnode refid="3029" relation="include">
        </childnode>
        <childnode refid="3030" relation="include">
        </childnode>
        <childnode refid="3007" relation="include">
        </childnode>
        <childnode refid="3032" relation="include">
        </childnode>
        <childnode refid="3033" relation="include">
        </childnode>
      </node>
      <node id="3044">
        <label>bits16.h</label>
        <link refid="bits16_8h"/>
        <childnode refid="3001" relation="include">
        </childnode>
      </node>
      <node id="3000">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="3001" relation="include">
        </childnode>
      </node>
      <node id="3068">
        <label>semaphore.h</label>
      </node>
      <node id="3048">
        <label>coutln.h</label>
        <link refid="coutln_8h"/>
        <childnode refid="3049" relation="include">
        </childnode>
        <childnode refid="3050" relation="include">
        </childnode>
        <childnode refid="3044" relation="include">
        </childnode>
        <childnode refid="3028" relation="include">
        </childnode>
        <childnode refid="3046" relation="include">
        </childnode>
        <childnode refid="3032" relation="include">
        </childnode>
      </node>
      <node id="3043">
        <label>werd.h</label>
        <link refid="werd_8h"/>
        <childnode refid="3034" relation="include">
        </childnode>
        <childnode refid="3044" relation="include">
        </childnode>
        <childnode refid="3045" relation="include">
        </childnode>
        <childnode refid="3014" relation="include">
        </childnode>
        <childnode refid="3046" relation="include">
        </childnode>
        <childnode refid="3047" relation="include">
        </childnode>
        <childnode refid="3040" relation="include">
        </childnode>
      </node>
      <node id="3040">
        <label>ocrrow.h</label>
        <link refid="ocrrow_8h"/>
        <childnode refid="2998" relation="include">
        </childnode>
        <childnode refid="3041" relation="include">
        </childnode>
        <childnode refid="3043" relation="include">
        </childnode>
      </node>
      <node id="3023">
        <label>fileerr.h</label>
        <link refid="fileerr_8h"/>
        <childnode refid="3004" relation="include">
        </childnode>
      </node>
      <node id="3065">
        <label>ambigs.h</label>
        <link refid="ambigs_8h"/>
        <childnode refid="3021" relation="include">
        </childnode>
        <childnode refid="3033" relation="include">
        </childnode>
        <childnode refid="3017" relation="include">
        </childnode>
        <childnode refid="3013" relation="include">
        </childnode>
        <childnode refid="2997" relation="include">
        </childnode>
      </node>
      <node id="3049">
        <label>crakedge.h</label>
        <link refid="crakedge_8h"/>
        <childnode refid="3030" relation="include">
        </childnode>
        <childnode refid="3050" relation="include">
        </childnode>
      </node>
      <node id="3029">
        <label>math.h</label>
      </node>
      <node id="3060">
        <label>split.h</label>
        <link refid="split_8h"/>
        <childnode refid="3026" relation="include">
        </childnode>
        <childnode refid="3061" relation="include">
        </childnode>
      </node>
      <node id="3024">
        <label>lsterr.h</label>
        <link refid="lsterr_8h"/>
        <childnode refid="3004" relation="include">
        </childnode>
      </node>
      <node id="3010">
        <label>ltrresultiterator.h</label>
        <link refid="ltrresultiterator_8h"/>
        <childnode refid="3002" relation="include">
        </childnode>
        <childnode refid="3011" relation="include">
        </childnode>
        <childnode refid="3013" relation="include">
        </childnode>
      </node>
      <node id="3042">
        <label>quadratc.h</label>
        <link refid="quadratc_8h"/>
        <childnode refid="3030" relation="include">
        </childnode>
      </node>
      <node id="3035">
        <label>vecfuncs.h</label>
        <link refid="vecfuncs_8h"/>
        <childnode refid="3029" relation="include">
        </childnode>
        <childnode refid="3026" relation="include">
        </childnode>
      </node>
      <node id="3073">
        <label>strings.h</label>
      </node>
      <node id="3012">
        <label>publictypes.h</label>
        <link refid="publictypes_8h"/>
      </node>
      <node id="3061">
        <label>oldlist.h</label>
        <link refid="oldlist_8h"/>
        <childnode refid="3062" relation="include">
        </childnode>
        <childnode refid="3000" relation="include">
        </childnode>
      </node>
      <node id="3071">
        <label>paragraphs.h</label>
        <link refid="paragraphs_8h"/>
        <childnode refid="3028" relation="include">
        </childnode>
        <childnode refid="3020" relation="include">
        </childnode>
        <childnode refid="2997" relation="include">
        </childnode>
        <childnode refid="3014" relation="include">
        </childnode>
      </node>
      <node id="2996">
        <label>ctype.h</label>
      </node>
      <node id="3038">
        <label>ocrblock.h</label>
        <link refid="ocrblock_8h"/>
        <childnode refid="3039" relation="include">
        </childnode>
        <childnode refid="3020" relation="include">
        </childnode>
        <childnode refid="3040" relation="include">
        </childnode>
        <childnode refid="3051" relation="include">
        </childnode>
      </node>
      <node id="3034">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="2998" relation="include">
        </childnode>
        <childnode refid="2997" relation="include">
        </childnode>
        <childnode refid="3014" relation="include">
        </childnode>
      </node>
      <node id="2997">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="2998" relation="include">
        </childnode>
        <childnode refid="2999" relation="include">
        </childnode>
        <childnode refid="3000" relation="include">
        </childnode>
        <childnode refid="3004" relation="include">
        </childnode>
        <childnode refid="3005" relation="include">
        </childnode>
        <childnode refid="3007" relation="include">
        </childnode>
      </node>
      <node id="3015">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="3016" relation="include">
        </childnode>
        <childnode refid="3001" relation="include">
        </childnode>
      </node>
      <node id="3025">
        <label>pageres.h</label>
        <link refid="pageres_8h"/>
        <childnode refid="3026" relation="include">
        </childnode>
        <childnode refid="3036" relation="include">
        </childnode>
        <childnode refid="3021" relation="include">
        </childnode>
        <childnode refid="2997" relation="include">
        </childnode>
        <childnode refid="3037" relation="include">
        </childnode>
        <childnode refid="3038" relation="include">
        </childnode>
        <childnode refid="3040" relation="include">
        </childnode>
        <childnode refid="3054" relation="include">
        </childnode>
        <childnode refid="3055" relation="include">
        </childnode>
        <childnode refid="3058" relation="include">
        </childnode>
        <childnode refid="3059" relation="include">
        </childnode>
        <childnode refid="3043" relation="include">
        </childnode>
      </node>
      <node id="3020">
        <label>ocrpara.h</label>
        <link refid="ocrpara_8h"/>
        <childnode refid="3012" relation="include">
        </childnode>
        <childnode refid="3021" relation="include">
        </childnode>
        <childnode refid="3014" relation="include">
        </childnode>
      </node>
      <node id="3021">
        <label>elst.h</label>
        <link refid="elst_8h"/>
        <childnode refid="2998" relation="include">
        </childnode>
        <childnode refid="3001" relation="include">
        </childnode>
        <childnode refid="3022" relation="include">
        </childnode>
        <childnode refid="3024" relation="include">
        </childnode>
      </node>
      <node id="3013">
        <label>unicharset.h</label>
        <link refid="unicharset_8h"/>
        <childnode refid="3004" relation="include">
        </childnode>
        <childnode refid="3005" relation="include">
        </childnode>
        <childnode refid="3014" relation="include">
        </childnode>
        <childnode refid="3000" relation="include">
        </childnode>
        <childnode refid="3017" relation="include">
        </childnode>
        <childnode refid="3019" relation="include">
        </childnode>
      </node>
      <node id="3059">
        <label>seam.h</label>
        <link refid="seam_8h"/>
        <childnode refid="3026" relation="include">
        </childnode>
        <childnode refid="3060" relation="include">
        </childnode>
        <childnode refid="3070" relation="include">
        </childnode>
      </node>
      <node id="3030">
        <label>points.h</label>
        <link refid="points_8h"/>
        <childnode refid="2998" relation="include">
        </childnode>
        <childnode refid="3029" relation="include">
        </childnode>
        <childnode refid="3021" relation="include">
        </childnode>
        <childnode refid="3031" relation="include">
        </childnode>
      </node>
      <node id="3057">
        <label>notdll.h</label>
        <link refid="notdll_8h"/>
      </node>
      <node id="3039">
        <label>img.h</label>
        <link refid="img_8h"/>
        <childnode refid="3015" relation="include">
        </childnode>
      </node>
      <node id="3033">
        <label>tprintf.h</label>
        <link refid="tprintf_8h"/>
        <childnode refid="3034" relation="include">
        </childnode>
      </node>
      <node id="3053">
        <label>hpddef.h</label>
        <link refid="hpddef_8h"/>
      </node>
      <node id="3001">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="3002" relation="include">
        </childnode>
      </node>
      <node id="3051">
        <label>pdblock.h</label>
        <link refid="pdblock_8h"/>
        <childnode refid="3027" relation="include">
        </childnode>
        <childnode refid="3039" relation="include">
        </childnode>
        <childnode refid="3014" relation="include">
        </childnode>
        <childnode refid="3052" relation="include">
        </childnode>
        <childnode refid="3053" relation="include">
        </childnode>
      </node>
      <node id="2998">
        <label>stdio.h</label>
      </node>
      <node id="3066">
        <label>tessdatamanager.h</label>
        <link refid="tessdatamanager_8h"/>
        <childnode refid="2998" relation="include">
        </childnode>
        <childnode refid="3001" relation="include">
        </childnode>
        <childnode refid="3033" relation="include">
        </childnode>
      </node>
      <node id="3037">
        <label>normalis.h</label>
        <link refid="normalis_8h"/>
        <childnode refid="2998" relation="include">
        </childnode>
        <childnode refid="3001" relation="include">
        </childnode>
      </node>
      <node id="3014">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="2998" relation="include">
        </childnode>
        <childnode refid="3006" relation="include">
        </childnode>
        <childnode refid="3002" relation="include">
        </childnode>
        <childnode refid="3015" relation="include">
        </childnode>
      </node>
      <node id="3026">
        <label>blobs.h</label>
        <link refid="blobs_8h"/>
        <childnode refid="3027" relation="include">
        </childnode>
        <childnode refid="3028" relation="include">
        </childnode>
        <childnode refid="3035" relation="include">
        </childnode>
      </node>
      <node id="3005">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="2998" relation="include">
        </childnode>
        <childnode refid="3006" relation="include">
        </childnode>
      </node>
      <node id="3041">
        <label>quspline.h</label>
        <link refid="quspline_8h"/>
        <childnode refid="3042" relation="include">
        </childnode>
        <childnode refid="3022" relation="include">
        </childnode>
        <childnode refid="3015" relation="include">
        </childnode>
        <childnode refid="3028" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classtesseract_1_1_unicode_span_skipper" prot="public">tesseract::UnicodeSpanSkipper</innerclass>
    <innerclass refid="structtesseract_1_1_cluster" prot="public">tesseract::Cluster</innerclass>
    <innerclass refid="classtesseract_1_1_simple_clusterer" prot="public">tesseract::SimpleClusterer</innerclass>
    <innerclass refid="structtesseract_1_1_geometric_classifier_state" prot="public">tesseract::GeometricClassifierState</innerclass>
    <innerclass refid="structtesseract_1_1_interval" prot="public">tesseract::Interval</innerclass>
    <innernamespace refid="namespacetesseract">tesseract</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paragraphs.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Description:<sp/>Paragraph<sp/>detection<sp/>for<sp/>tesseract.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/>David<sp/>Eger</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Created:<sp/><sp/><sp/><sp/><sp/>25<sp/>February<sp/>2011</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>(C)<sp/>Copyright<sp/>2011,<sp/>Google<sp/>Inc.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>**<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>**<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>**<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>**<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>**<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>**<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>**<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>**<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>**<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__func__<sp/>__FUNCTION__<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="genericvector_8h" kindref="compound">genericvector.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="helpers_8h" kindref="compound">helpers.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mutableiterator_8h" kindref="compound">mutableiterator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ocrpara_8h" kindref="compound">ocrpara.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pageres_8h" kindref="compound">pageres.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="paragraphs_8h" kindref="compound">paragraphs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="paragraphs__internal_8h" kindref="compound">paragraphs_internal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="publictypes_8h" kindref="compound">publictypes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ratngs_8h" kindref="compound">ratngs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rect_8h" kindref="compound">rect.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="statistc_8h" kindref="compound">statistc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="strngs_8h" kindref="compound">strngs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tprintf_8h" kindref="compound">tprintf.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="unicharset_8h" kindref="compound">unicharset.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="unicodes_8h" kindref="compound">unicodes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesseract-c__api-demo_1afed58feacb84df2de88bdd613cfdba6d" kindref="member">tesseract</ref><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>tab<sp/>vectors<sp/>for<sp/>a<sp/>given<sp/>line<sp/>should<sp/>be<sp/>ignored<sp/>if<sp/>both<sp/>its<sp/>tab<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>infrequent,<sp/>specifically,<sp/>if<sp/>both<sp/>tab<sp/>vectors<sp/>appear<sp/>at<sp/>most<sp/>once<sp/>per</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>kStrayLinePer<sp/>lines<sp/>in<sp/>a<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a2c0b1b1ae6730a690766ec71da2f908e" kindref="member">kStrayLinePer</ref><sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Special<sp/>&quot;weak&quot;<sp/>ParagraphModels.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*<ref refid="namespacetesseract_1a98233252a018dc9eb158c8223e2db208" kindref="member">kCrownLeft</ref></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xDEAD111F);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*<ref refid="namespacetesseract_1a9fec475017947c91c5cdb29b160f4453" kindref="member">kCrownRight</ref></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xDEAD888F);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>the<sp/>width<sp/>of<sp/>a<sp/>typical<sp/>space<sp/>between<sp/>words,<sp/>what<sp/>is<sp/>the<sp/>threshold</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>which<sp/>by<sp/>which<sp/>we<sp/>think<sp/>left<sp/>and<sp/>right<sp/>alignments<sp/>for<sp/>paragraphs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>vary<sp/>and<sp/>still<sp/>be<sp/>aligned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Epsilon(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>space_pix)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>space_pix<sp/>*<sp/>4<sp/>/<sp/>5;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a754167046052a8517b3f70466abbd9fc" kindref="member">SimpleSwap</ref>(T<sp/>&amp;a,<sp/>T<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>T<sp/>c<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AcceptableRowArgs(</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_num_rows,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*function_name,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_end)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row_start<sp/>&lt;<sp/>0<sp/>||<sp/>row_end<sp/>&gt;<sp/>rows-&gt;<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>()<sp/>||<sp/>row_start<sp/>&gt;<sp/>row_end)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>arguments<sp/>rows[%d,<sp/>%d)<sp/>while<sp/>rows<sp/>is<sp/>of<sp/>size<sp/>%d.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_start,<sp/>row_end,<sp/>rows-&gt;<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row_end<sp/>-<sp/>row_start<sp/>&lt;<sp/>min_num_rows)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;#<sp/>Too<sp/>few<sp/>rows[%d,<sp/>%d)<sp/>for<sp/>%s.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_start,<sp/>row_end,<sp/>function_name);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===============================<sp/>Debug<sp/>Code<sp/>================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convert<sp/>an<sp/>integer<sp/>to<sp/>a<sp/>decimal<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>StrOf(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[30];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>snprintf(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>num);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>(buffer);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>a<sp/>row-major<sp/>matrix<sp/>of<sp/>unicode<sp/>text<sp/>and<sp/>a<sp/>column<sp/>separator,<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>formatted<sp/>table.<sp/><sp/>For<sp/>ASCII,<sp/>we<sp/>get<sp/>good<sp/>column<sp/>alignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector</ref>&lt;<ref refid="class_generic_vector" kindref="compound">GenericVector&lt;STRING&gt;</ref><sp/>&gt;<sp/>&amp;rows,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>&amp;colsep)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;int&gt;</ref><sp/>max_col_widths;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>rows.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_columns<sp/>=<sp/>rows[r].<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>num_columns;<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_unicodes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rows[r][c].<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rows[r][c][i]<sp/>&amp;<sp/>0xC0)<sp/>!=<sp/>0x80)<sp/>num_unicodes++;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/>max_col_widths.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>())<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_col_widths.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(num_unicodes);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_unicodes<sp/>&gt;<sp/>max_col_widths[c])</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_col_widths[c]<sp/>=<sp/>num_unicodes;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;STRING&gt;</ref><sp/>col_width_patterns;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>max_col_widths.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>col_width_patterns.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>(</highlight><highlight class="stringliteral">&quot;%-&quot;</highlight><highlight class="normal">)<sp/>+<sp/>StrOf(max_col_widths[c])<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>rows.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>rows[r].<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>colsep.<ref refid="class_s_t_r_i_n_g_1a32beee43ecab1bed8bebc3466896ad6e" kindref="member">string</ref>());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(col_width_patterns[c].</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(),<sp/>rows[r][c].</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/><ref refid="namespacetesseract_1afdbc950f37a9d5101e659df02ed190ea" kindref="member">RtlEmbed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>&amp;word,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rtlify)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rtlify)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>(<ref refid="namespacetesseract_1a20de3eb1fcacc29addf5c6903e743cfe" kindref="member">kRLE</ref>)<sp/>+<sp/>word<sp/>+<sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>(<ref refid="namespacetesseract_1a94431ee0c0b62532a711669a890a6d9c" kindref="member">kPDF</ref>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>word;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>current<sp/>thoughts<sp/>of<sp/>the<sp/>paragraph<sp/>detector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintDetectorState(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParagraphTheory<sp/>&amp;theory,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>&amp;rows)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;GenericVector&lt;STRING&gt;</ref><sp/>&gt;<sp/>output;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>output.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(<ref refid="class_generic_vector" kindref="compound">GenericVector&lt;STRING&gt;</ref>());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>output.<ref refid="class_generic_vector_1a6e6d6497a6f7dd999b6d591c15354167" kindref="member">back</ref>().push_back(</highlight><highlight class="stringliteral">&quot;#row&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>output.<ref refid="class_generic_vector_1a6e6d6497a6f7dd999b6d591c15354167" kindref="member">back</ref>().push_back(</highlight><highlight class="stringliteral">&quot;space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>output.<ref refid="class_generic_vector_1a6e6d6497a6f7dd999b6d591c15354167" kindref="member">back</ref>().push_back(</highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>output.<ref refid="class_generic_vector_1a6e6d6497a6f7dd999b6d591c15354167" kindref="member">back</ref>().push_back(</highlight><highlight class="stringliteral">&quot;lword[widthSEL]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>output.<ref refid="class_generic_vector_1a6e6d6497a6f7dd999b6d591c15354167" kindref="member">back</ref>().push_back(</highlight><highlight class="stringliteral">&quot;rword[widthSEL]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a0d7b1cca6b735498a9286b1842e55f92" kindref="member">RowScratchRegisters::AppendDebugHeaderFields</ref>(&amp;output.<ref refid="class_generic_vector_1a6e6d6497a6f7dd999b6d591c15354167" kindref="member">back</ref>());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>output.<ref refid="class_generic_vector_1a6e6d6497a6f7dd999b6d591c15354167" kindref="member">back</ref>().push_back(</highlight><highlight class="stringliteral">&quot;text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rows.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>output.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(<ref refid="class_generic_vector" kindref="compound">GenericVector&lt;STRING&gt;</ref>());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;STRING&gt;</ref><sp/>&amp;row<sp/>=<sp/>output.<ref refid="class_generic_vector_1a6e6d6497a6f7dd999b6d591c15354167" kindref="member">back</ref>();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RowInfo&amp;<sp/>ri<sp/>=<sp/>*rows[i].ri_;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>row.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(StrOf(i));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>row.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(StrOf(ri.average_interword_space));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>row.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(ri.has_leaders<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>row.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(<ref refid="namespacetesseract_1afdbc950f37a9d5101e659df02ed190ea" kindref="member">RtlEmbed</ref>(ri.lword_text,<sp/>!ri.ltr)<sp/>+</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>StrOf(ri.lword_box.width())<sp/>+</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ri.lword_likely_starts_idea<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ri.lword_likely_ends_idea<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ri.lword_indicates_list_item<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>row.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(<ref refid="namespacetesseract_1afdbc950f37a9d5101e659df02ed190ea" kindref="member">RtlEmbed</ref>(ri.rword_text,<sp/>!ri.ltr)<sp/>+</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>StrOf(ri.rword_box.width())<sp/>+</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ri.rword_likely_starts_idea<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ri.rword_likely_ends_idea<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ri.rword_indicates_list_item<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>rows[i].AppendDebugInfo(theory,<sp/>&amp;row);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>row.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(<ref refid="namespacetesseract_1afdbc950f37a9d5101e659df02ed190ea" kindref="member">RtlEmbed</ref>(ri.text,<sp/>!ri.ltr));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>PrintTable(output,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Active<sp/>Paragraph<sp/>Models:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>theory.models().size();<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>%d:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>m<sp/>+<sp/>1,<sp/>theory.models()[m]-&gt;ToString().string());</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DebugDump(</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_print,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>&amp;phase,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParagraphTheory<sp/>&amp;theory,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>&amp;rows)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!should_print)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;#<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>phase.<ref refid="class_s_t_r_i_n_g_1a32beee43ecab1bed8bebc3466896ad6e" kindref="member">string</ref>());</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>PrintDetectorState(theory,<sp/>rows);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>out<sp/>the<sp/>text<sp/>for<sp/>rows[row_start,<sp/>row_end)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintRowRange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>&amp;rows,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_end)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;======================================\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>row_start;<sp/>row<sp/>&lt;<sp/>row_end;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>rows[row].ri_-&gt;text.string());</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;======================================\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=============<sp/>Brain<sp/>Dead<sp/>Language<sp/>Model<sp/>(ASCII<sp/>Version)<sp/>===================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a764dbdcb37bf14a8e87da5ce0050eb00" kindref="member">IsLatinLetter</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ch<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(ch<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af1c486bf46d22fdcb2df90a8ba84534f" kindref="member">IsDigitLike</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal"><sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;O&apos;</highlight><highlight class="normal"><sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal"><sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a9c7b0a9082fc78893d964bb78bde0a2c" kindref="member">IsOpeningPunct</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strchr(</highlight><highlight class="stringliteral">&quot;&apos;\&quot;({[&quot;</highlight><highlight class="normal">,<sp/>ch)<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a365f2c422d0d2608811f6c9328cc9f1d" kindref="member">IsTerminalPunct</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strchr(</highlight><highlight class="stringliteral">&quot;:&apos;\&quot;.?!]})&quot;</highlight><highlight class="normal">,<sp/>ch)<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>pointer<sp/>after<sp/>consuming<sp/>as<sp/>much<sp/>text<sp/>as<sp/>qualifies<sp/>as<sp/>roman<sp/>numeral.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespacetesseract_1aff50e7cdb437c3cf2d38b5701c5bd894" kindref="member">SkipChars</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*toskip)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*str<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>strchr(toskip,<sp/>*str))<sp/>{<sp/>str++;<sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespacetesseract_1aff50e7cdb437c3cf2d38b5701c5bd894" kindref="member">SkipChars</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(*skip)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*str<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>skip(*str))<sp/>{<sp/>str++;<sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespacetesseract_1a4165f0ede8e358d9e5e191bf45336888" kindref="member">SkipOne</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*toskip)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>strchr(toskip,<sp/>*str))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>whether<sp/>it<sp/>is<sp/>very<sp/>likely<sp/>that<sp/>this<sp/>is<sp/>a<sp/>numeral<sp/>marker<sp/>that<sp/>could</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>a<sp/>list<sp/>item.<sp/><sp/>Some<sp/>examples<sp/>include:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>A<sp/><sp/><sp/>I<sp/><sp/><sp/>iii.<sp/><sp/><sp/>VI<sp/><sp/><sp/>(2)<sp/><sp/><sp/>3.5.<sp/><sp/><sp/>[C-4]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a70accd766d7d382d35fbca275fb694d1" kindref="member">LikelyListNumeral</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>&amp;word)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kRomans<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ivxlmdIVXLMD&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kDigits<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;012345789&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kOpen<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[{(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kSep<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;:;-.,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kClose<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;]})&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_segments<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pos<sp/>=<sp/>word.<ref refid="class_s_t_r_i_n_g_1a32beee43ecab1bed8bebc3466896ad6e" kindref="member">string</ref>();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pos<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>num_segments<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>up<sp/>to<sp/>two<sp/>open<sp/>parens.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*numeral_start<sp/>=<sp/><ref refid="namespacetesseract_1a4165f0ede8e358d9e5e191bf45336888" kindref="member">SkipOne</ref>(<ref refid="namespacetesseract_1a4165f0ede8e358d9e5e191bf45336888" kindref="member">SkipOne</ref>(pos,<sp/>kOpen),<sp/>kOpen);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*numeral_end<sp/>=<sp/><ref refid="namespacetesseract_1aff50e7cdb437c3cf2d38b5701c5bd894" kindref="member">SkipChars</ref>(numeral_start,<sp/>kRomans);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numeral_end<sp/>!=<sp/>numeral_start)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Got<sp/>Roman<sp/>Numeral.<sp/>Great.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numeral_end<sp/>=<sp/><ref refid="namespacetesseract_1aff50e7cdb437c3cf2d38b5701c5bd894" kindref="member">SkipChars</ref>(numeral_start,<sp/>kDigits);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numeral_end<sp/>==<sp/>numeral_start)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there&apos;s<sp/>a<sp/>single<sp/>latin<sp/>letter,<sp/>we<sp/>can<sp/>use<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numeral_end<sp/>=<sp/><ref refid="namespacetesseract_1aff50e7cdb437c3cf2d38b5701c5bd894" kindref="member">SkipChars</ref>(numeral_start,<sp/><ref refid="namespacetesseract_1a764dbdcb37bf14a8e87da5ce0050eb00" kindref="member">IsLatinLetter</ref>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numeral_end<sp/>-<sp/>numeral_start<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>got<sp/>some<sp/>sort<sp/>of<sp/>numeral.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>num_segments++;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>any<sp/>trailing<sp/>parens<sp/>or<sp/>punctuation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/><ref refid="namespacetesseract_1aff50e7cdb437c3cf2d38b5701c5bd894" kindref="member">SkipChars</ref>(<ref refid="namespacetesseract_1aff50e7cdb437c3cf2d38b5701c5bd894" kindref="member">SkipChars</ref>(numeral_end,<sp/>kClose),<sp/>kSep);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>==<sp/>numeral_end)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*pos<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1ae34676564aa0eeb84e86a5855a9065df" kindref="member">LikelyListMark</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>&amp;word)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kListMarks<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0Oo*.,+.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>word.<ref refid="class_s_t_r_i_n_g_1a0c93665497f997cdd426cc8bfb1955e6" kindref="member">size</ref>()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>strchr(kListMarks,<sp/>word[0])<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a4b153a6c7f9116c12cffe35964cf6ba3" kindref="member">AsciiLikelyListItem</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>&amp;word)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1ae34676564aa0eeb84e86a5855a9065df" kindref="member">LikelyListMark</ref>(word)<sp/>||<sp/><ref refid="namespacetesseract_1a70accd766d7d382d35fbca275fb694d1" kindref="member">LikelyListNumeral</ref>(word);</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========<sp/>Brain<sp/>Dead<sp/>Language<sp/>Model<sp/>(Tesseract<sp/>Version)<sp/>================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>first<sp/>Unicode<sp/>Codepoint<sp/>from<sp/>werd[pos].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1abe22d992db19f44c79906b66dc846eaa" kindref="member">UnicodeFor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref><sp/>*u,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_w_e_r_d___c_h_o_i_c_e" kindref="compound">WERD_CHOICE</ref><sp/>*werd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!u<sp/>||<sp/>!werd<sp/>||<sp/>pos<sp/>&gt;<sp/>werd-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a7be59abe97b052dd3aaa324aea8c4a6c" kindref="member">length</ref>())</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_u_n_i_c_h_a_r" kindref="compound">UNICHAR</ref>(u-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a421c0b6ebcbbe7547490252fb688c961" kindref="member">id_to_unichar</ref>(werd-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a6b917b2e6157f7956ff53ca230425ed3" kindref="member">unichar_id</ref>(pos)),<sp/>-1).<ref refid="class_u_n_i_c_h_a_r_1a59ffb904d7e604da0fea3fad1c63ee64" kindref="member">first_uni</ref>();</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>useful<sp/>helper<sp/>class<sp/>for<sp/>finding<sp/>the<sp/>first<sp/>j<sp/>&gt;=<sp/>i<sp/>so<sp/>that<sp/>word[j]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>does<sp/>not<sp/>have<sp/>given<sp/>character<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294" refid="classtesseract_1_1_unicode_span_skipper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesseract_1_1_unicode_span_skipper" kindref="compound">UnicodeSpanSkipper</ref><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_unicode_span_skipper_1a1342601e52beb2d5018e0bd1f4b0c28c" kindref="member">UnicodeSpanSkipper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref><sp/>*unicharset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_w_e_r_d___c_h_o_i_c_e" kindref="compound">WERD_CHOICE</ref><sp/>*word)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>u_(unicharset),<sp/>word_(word)<sp/>{<sp/>wordlen_<sp/>=<sp/>word-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a7be59abe97b052dd3aaa324aea8c4a6c" kindref="member">length</ref>();<sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Given<sp/>an<sp/>input<sp/>position,<sp/>return<sp/>the<sp/>first<sp/>position<sp/>&gt;=<sp/>pos<sp/>not<sp/>punc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_unicode_span_skipper_1afaec83aa272a46917e5e00d68a4c518f" kindref="member">SkipPunc</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Given<sp/>an<sp/>input<sp/>position,<sp/>return<sp/>the<sp/>first<sp/>position<sp/>&gt;=<sp/>pos<sp/>not<sp/>digit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_unicode_span_skipper_1a2becefa1acbe81d057391ab54dd50967" kindref="member">SkipDigits</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Given<sp/>an<sp/>input<sp/>position,<sp/>return<sp/>the<sp/>first<sp/>position<sp/>&gt;=<sp/>pos<sp/>not<sp/>roman.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_unicode_span_skipper_1ab96aa75d6700290c5ec9993a5e02632d" kindref="member">SkipRomans</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Given<sp/>an<sp/>input<sp/>position,<sp/>return<sp/>the<sp/>first<sp/>position<sp/>&gt;=<sp/>pos<sp/>not<sp/>alpha.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_unicode_span_skipper_1a114859ff0e7213b5c5e65e04562b43d7" kindref="member">SkipAlpha</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref><sp/>*u_;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_w_e_r_d___c_h_o_i_c_e" kindref="compound">WERD_CHOICE</ref><sp/>*word_;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wordlen_;</highlight></codeline>
<codeline lineno="312"><highlight class="normal">};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_unicode_span_skipper_1afaec83aa272a46917e5e00d68a4c518f" kindref="member">UnicodeSpanSkipper::SkipPunc</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>wordlen_<sp/>&amp;&amp;<sp/>u_-&gt;get_ispunctuation(word_-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a6b917b2e6157f7956ff53ca230425ed3" kindref="member">unichar_id</ref>(pos)))<sp/>pos++;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_unicode_span_skipper_1a2becefa1acbe81d057391ab54dd50967" kindref="member">UnicodeSpanSkipper::SkipDigits</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>wordlen_<sp/>&amp;&amp;<sp/>(u_-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a5951dde3ab90c12c309d776570a10725" kindref="member">get_isdigit</ref>(word_-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a6b917b2e6157f7956ff53ca230425ed3" kindref="member">unichar_id</ref>(pos))<sp/>||</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1af1c486bf46d22fdcb2df90a8ba84534f" kindref="member">IsDigitLike</ref>(<ref refid="namespacetesseract_1abe22d992db19f44c79906b66dc846eaa" kindref="member">UnicodeFor</ref>(u_,<sp/>word_,<sp/>pos))))<sp/>pos++;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_unicode_span_skipper_1ab96aa75d6700290c5ec9993a5e02632d" kindref="member">UnicodeSpanSkipper::SkipRomans</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kRomans<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ivxlmdIVXLMD&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>wordlen_)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/><ref refid="namespacetesseract_1abe22d992db19f44c79906b66dc846eaa" kindref="member">UnicodeFor</ref>(u_,<sp/>word_,<sp/>pos);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&gt;=<sp/>0xF0<sp/>||<sp/>strchr(kRomans,<sp/>ch)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_unicode_span_skipper_1a114859ff0e7213b5c5e65e04562b43d7" kindref="member">UnicodeSpanSkipper::SkipAlpha</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>wordlen_<sp/>&amp;&amp;<sp/>u_-&gt;get_isalpha(word_-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a6b917b2e6157f7956ff53ca230425ed3" kindref="member">unichar_id</ref>(pos)))<sp/>pos++;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a4dfe7d50410afc3b609037cde09bc809" kindref="member">LikelyListMarkUnicode</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&lt;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>single_ch;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>single_ch<sp/>+=<sp/>ch;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1ae34676564aa0eeb84e86a5855a9065df" kindref="member">LikelyListMark</ref>(single_ch);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ch)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(eger)<sp/>expand<sp/>this<sp/>list<sp/>of<sp/>unicodes<sp/>as<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x00B0:<sp/><sp/></highlight><highlight class="comment">//<sp/>degree<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x2022:<sp/><sp/></highlight><highlight class="comment">//<sp/>bullet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x25E6:<sp/><sp/></highlight><highlight class="comment">//<sp/>white<sp/>bullet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x00B7:<sp/><sp/></highlight><highlight class="comment">//<sp/>middle<sp/>dot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x25A1:<sp/><sp/></highlight><highlight class="comment">//<sp/>white<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x25A0:<sp/><sp/></highlight><highlight class="comment">//<sp/>black<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x25AA:<sp/><sp/></highlight><highlight class="comment">//<sp/>black<sp/>small<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x2B1D:<sp/><sp/></highlight><highlight class="comment">//<sp/>black<sp/>very<sp/>small<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x25BA:<sp/><sp/></highlight><highlight class="comment">//<sp/>black<sp/>right-pointing<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x25CF:<sp/><sp/></highlight><highlight class="comment">//<sp/>black<sp/>circle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x25CB:<sp/><sp/></highlight><highlight class="comment">//<sp/>white<sp/>circle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>fall<sp/>through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>whether<sp/>it<sp/>is<sp/>very<sp/>likely<sp/>that<sp/>this<sp/>is<sp/>a<sp/>numeral<sp/>marker<sp/>that<sp/>could</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>a<sp/>list<sp/>item.<sp/><sp/>Some<sp/>examples<sp/>include:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>A<sp/><sp/><sp/>I<sp/><sp/><sp/>iii.<sp/><sp/><sp/>VI<sp/><sp/><sp/>(2)<sp/><sp/><sp/>3.5.<sp/><sp/><sp/>[C-4]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1aff02604454bbea69eee7715140eddff4" kindref="member">UniLikelyListItem</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref><sp/>*u,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_w_e_r_d___c_h_o_i_c_e" kindref="compound">WERD_CHOICE</ref><sp/>*werd)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(werd-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a7be59abe97b052dd3aaa324aea8c4a6c" kindref="member">length</ref>()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/><ref refid="namespacetesseract_1a4dfe7d50410afc3b609037cde09bc809" kindref="member">LikelyListMarkUnicode</ref>(<ref refid="namespacetesseract_1abe22d992db19f44c79906b66dc846eaa" kindref="member">UnicodeFor</ref>(u,<sp/>werd,<sp/>0)))</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>UnicodeSpanSkipper<sp/>m(u,<sp/>werd);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_segments<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>werd-&gt;length()<sp/>&amp;&amp;<sp/>num_segments<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numeral_start<sp/>=<sp/>m.SkipPunc(pos);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numeral_start<sp/>&gt;<sp/>pos<sp/>+<sp/>1)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numeral_end<sp/>=<sp/>m.SkipRomans(numeral_start);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numeral_end<sp/>==<sp/>numeral_start)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numeral_end<sp/>=<sp/>m.SkipDigits(numeral_start);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numeral_end<sp/>==<sp/>numeral_start)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there&apos;s<sp/>a<sp/>single<sp/>latin<sp/>letter,<sp/>we<sp/>can<sp/>use<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numeral_end<sp/>=<sp/>m.SkipAlpha(numeral_start);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numeral_end<sp/>-<sp/>numeral_start<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>got<sp/>some<sp/>sort<sp/>of<sp/>numeral.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>num_segments++;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>any<sp/>trailing<sp/>punctuation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>m.SkipPunc(numeral_end);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>==<sp/>numeral_end)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos<sp/>==<sp/>werd-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a7be59abe97b052dd3aaa324aea8c4a6c" kindref="member">length</ref>();</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=========<sp/>Brain<sp/>Dead<sp/>Language<sp/>Model<sp/>(combined<sp/>entry<sp/>points)<sp/>================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>the<sp/>leftmost<sp/>word<sp/>of<sp/>a<sp/>line<sp/>either<sp/>as<sp/>a<sp/>Tesseract<sp/>unicharset<sp/>+<sp/>werd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>a<sp/>utf8<sp/>string,<sp/>set<sp/>the<sp/>following<sp/>attributes<sp/>for<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>is_list<sp/>-<sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>word<sp/>might<sp/>be<sp/>a<sp/>list<sp/>number<sp/>or<sp/>bullet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>starts_idea<sp/>-<sp/><sp/>this<sp/>word<sp/>is<sp/>likely<sp/>to<sp/>start<sp/>a<sp/>sentence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ends_idea<sp/>-<sp/><sp/><sp/><sp/>this<sp/>word<sp/>is<sp/>likely<sp/>to<sp/>end<sp/>a<sp/>sentence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a04498cd763cc4a381f1b7c2d0e17f020" kindref="member">LeftWordAttributes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref><sp/>*unicharset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_w_e_r_d___c_h_o_i_c_e" kindref="compound">WERD_CHOICE</ref><sp/>*werd,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>&amp;utf8,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*is_list,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*starts_idea,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*ends_idea)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>*is_list<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>*starts_idea<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>*ends_idea<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(utf8.<ref refid="class_s_t_r_i_n_g_1a0c93665497f997cdd426cc8bfb1955e6" kindref="member">size</ref>()<sp/>==<sp/>0<sp/>||<sp/>(werd<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>werd-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a7be59abe97b052dd3aaa324aea8c4a6c" kindref="member">length</ref>()<sp/>==<sp/>0))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>*ends_idea<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unicharset<sp/>&amp;&amp;<sp/>werd)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>a<sp/>proper<sp/>werd<sp/>and<sp/>unicharset<sp/>so<sp/>use<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1aff02604454bbea69eee7715140eddff4" kindref="member">UniLikelyListItem</ref>(unicharset,<sp/>werd))<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*is_list<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*starts_idea<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ends_idea<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a482a94b3e6fcd4e5b9b9363bb9e0ee59" kindref="member">get_isupper</ref>(werd-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a6b917b2e6157f7956ff53ca230425ed3" kindref="member">unichar_id</ref>(0)))<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*starts_idea<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a57f82c4777d39c923cb9ec27cac9bcb6" kindref="member">get_ispunctuation</ref>(werd-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a6b917b2e6157f7956ff53ca230425ed3" kindref="member">unichar_id</ref>(0)))<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*starts_idea<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ends_idea<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>utf8<sp/>is<sp/>mostly<sp/>ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1a4b153a6c7f9116c12cffe35964cf6ba3" kindref="member">AsciiLikelyListItem</ref>(utf8))<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*is_list<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*starts_idea<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_letter<sp/>=<sp/>utf8[0];</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1a9c7b0a9082fc78893d964bb78bde0a2c" kindref="member">IsOpeningPunct</ref>(start_letter))<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*starts_idea<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1a365f2c422d0d2608811f6c9328cc9f1d" kindref="member">IsTerminalPunct</ref>(start_letter))<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ends_idea<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_letter<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>start_letter<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*starts_idea<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>the<sp/>rightmost<sp/>word<sp/>of<sp/>a<sp/>line<sp/>either<sp/>as<sp/>a<sp/>Tesseract<sp/>unicharset<sp/>+<sp/>werd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>a<sp/>utf8<sp/>string,<sp/>set<sp/>the<sp/>following<sp/>attributes<sp/>for<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>is_list<sp/>-<sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>word<sp/>might<sp/>be<sp/>a<sp/>list<sp/>number<sp/>or<sp/>bullet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>starts_idea<sp/>-<sp/><sp/>this<sp/>word<sp/>is<sp/>likely<sp/>to<sp/>start<sp/>a<sp/>sentence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ends_idea<sp/>-<sp/><sp/><sp/><sp/>this<sp/>word<sp/>is<sp/>likely<sp/>to<sp/>end<sp/>a<sp/>sentence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1aa0bc43fa3c52639420ed7eeb1093aa24" kindref="member">RightWordAttributes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref><sp/>*unicharset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_w_e_r_d___c_h_o_i_c_e" kindref="compound">WERD_CHOICE</ref><sp/>*werd,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>&amp;utf8,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*is_list,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*starts_idea,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*ends_idea)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>*is_list<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>*starts_idea<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>*ends_idea<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(utf8.<ref refid="class_s_t_r_i_n_g_1a0c93665497f997cdd426cc8bfb1955e6" kindref="member">size</ref>()<sp/>==<sp/>0<sp/>||<sp/>(werd<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>werd-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a7be59abe97b052dd3aaa324aea8c4a6c" kindref="member">length</ref>()<sp/>==<sp/>0))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>*ends_idea<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unicharset<sp/>&amp;&amp;<sp/>werd)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>a<sp/>proper<sp/>werd<sp/>and<sp/>unicharset<sp/>so<sp/>use<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1aff02604454bbea69eee7715140eddff4" kindref="member">UniLikelyListItem</ref>(unicharset,<sp/>werd))<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*is_list<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*starts_idea<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unichar_8h_1a8578b19fa1ff5ca75080db1a18ecc32e" kindref="member">UNICHAR_ID</ref><sp/>last_letter<sp/>=<sp/>werd-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a6b917b2e6157f7956ff53ca230425ed3" kindref="member">unichar_id</ref>(werd-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a7be59abe97b052dd3aaa324aea8c4a6c" kindref="member">length</ref>()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a57f82c4777d39c923cb9ec27cac9bcb6" kindref="member">get_ispunctuation</ref>(last_letter))<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ends_idea<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>utf8<sp/>is<sp/>mostly<sp/>ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1a4b153a6c7f9116c12cffe35964cf6ba3" kindref="member">AsciiLikelyListItem</ref>(utf8))<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*is_list<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*starts_idea<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_letter<sp/>=<sp/>utf8[utf8.<ref refid="class_s_t_r_i_n_g_1a0c93665497f997cdd426cc8bfb1955e6" kindref="member">size</ref>()<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1a9c7b0a9082fc78893d964bb78bde0a2c" kindref="member">IsOpeningPunct</ref>(last_letter)<sp/>||<sp/><ref refid="namespacetesseract_1a365f2c422d0d2608811f6c9328cc9f1d" kindref="member">IsTerminalPunct</ref>(last_letter))<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ends_idea<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===============<sp/>Implementation<sp/>of<sp/>RowScratchRegisters<sp/>=====================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>static<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a0d7b1cca6b735498a9286b1842e55f92" kindref="member">RowScratchRegisters::AppendDebugHeaderFields</ref>(</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;STRING&gt;</ref><sp/>*header)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>header-&gt;<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(</highlight><highlight class="stringliteral">&quot;[lmarg,lind;rind,rmarg]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>header-&gt;<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(</highlight><highlight class="stringliteral">&quot;model&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a57cc3690c4f6306a3af08421f8b7f006" kindref="member">RowScratchRegisters::AppendDebugInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParagraphTheory<sp/>&amp;theory,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;STRING&gt;</ref><sp/>*dbg)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s[30];</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>snprintf(s,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(s),<sp/></highlight><highlight class="stringliteral">&quot;[%3d,%3d;%3d,%3d]&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a5980c9d63c4c7fde05f13eade2356838" kindref="member">lmargin_</ref>,<sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a880a72675fbddb983dfd23b8c0dc6177" kindref="member">lindent_</ref>,<sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a03b35da914e3dffa0454959f2a642432" kindref="member">rindent_</ref>,<sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a36b06387969774ec5a66e496ade5561b" kindref="member">rmargin_</ref>);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>dbg-&gt;<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(s);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>model_string;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>model_string<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classtesseract_1_1_row_scratch_registers_1a799dffc5a36821b0751fec9de5bfe8c7" kindref="member">GetLineType</ref>());</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>model_string<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>model_numbers<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>0;<sp/>h<sp/>&lt;<sp/>hypotheses_.size();<sp/>h++)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hypotheses_[h].model<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model_numbers<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model_string<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1a2f0e8f8921e73010316eaf366ec45852" kindref="member">StrongModel</ref>(hypotheses_[h].model))<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model_string<sp/>+=<sp/>StrOf(1<sp/>+<sp/>theory.IndexOf(hypotheses_[h].model));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hypotheses_[h].model<sp/>==<sp/><ref refid="namespacetesseract_1a98233252a018dc9eb158c8223e2db208" kindref="member">kCrownLeft</ref>)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model_string<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;CrL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hypotheses_[h].model<sp/>==<sp/><ref refid="namespacetesseract_1a9fec475017947c91c5cdb29b160f4453" kindref="member">kCrownRight</ref>)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model_string<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;CrR&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>model_numbers++;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model_numbers<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>model_string<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>dbg-&gt;<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(model_string);</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1af7939bb6dda65342551cf0f958ffe285" kindref="member">RowScratchRegisters::Init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RowInfo<sp/>&amp;row)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a7a86a2a63937c6b9976d275bd42360fb" kindref="member">ri_</ref><sp/>=<sp/>&amp;row;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a5980c9d63c4c7fde05f13eade2356838" kindref="member">lmargin_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a880a72675fbddb983dfd23b8c0dc6177" kindref="member">lindent_</ref><sp/>=<sp/>row.pix_ldistance;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a36b06387969774ec5a66e496ade5561b" kindref="member">rmargin_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a03b35da914e3dffa0454959f2a642432" kindref="member">rindent_</ref><sp/>=<sp/>row.pix_rdistance;</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4" kindref="member">LineType</ref><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a799dffc5a36821b0751fec9de5bfe8c7" kindref="member">RowScratchRegisters::GetLineType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hypotheses_.empty())</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a5dc9805a3ad0a4c99b98ff282e36d204" kindref="member">LT_UNKNOWN</ref>;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_start<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_body<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>hypotheses_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(hypotheses_[i].ty)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref>:<sp/>has_start<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a92f4e011332f48d7de7ddef587dff012" kindref="member">LT_BODY</ref>:<sp/>has_body<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Encountered<sp/>bad<sp/>value<sp/>in<sp/>hypothesis<sp/>list:<sp/>%c\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hypotheses_[i].ty);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_start<sp/>&amp;&amp;<sp/>has_body)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a923acc0db591045108d7903821a8a594" kindref="member">LT_MULTIPLE</ref>;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_start<sp/>?<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref><sp/>:<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a92f4e011332f48d7de7ddef587dff012" kindref="member">LT_BODY</ref>;</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4" kindref="member">LineType</ref><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a799dffc5a36821b0751fec9de5bfe8c7" kindref="member">RowScratchRegisters::GetLineType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hypotheses_.empty())</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a5dc9805a3ad0a4c99b98ff282e36d204" kindref="member">LT_UNKNOWN</ref>;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_start<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_body<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>hypotheses_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hypotheses_[i].model<sp/>!=<sp/>model)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(hypotheses_[i].ty)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref>:<sp/>has_start<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a92f4e011332f48d7de7ddef587dff012" kindref="member">LT_BODY</ref>:<sp/>has_body<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Encountered<sp/>bad<sp/>value<sp/>in<sp/>hypothesis<sp/>list:<sp/>%c\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hypotheses_[i].ty);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_start<sp/>&amp;&amp;<sp/>has_body)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a923acc0db591045108d7903821a8a594" kindref="member">LT_MULTIPLE</ref>;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_start<sp/>?<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref><sp/>:<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a92f4e011332f48d7de7ddef587dff012" kindref="member">LT_BODY</ref>;</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a5ac1cfb79119ecac5dcc7f292714b58e" kindref="member">RowScratchRegisters::SetStartLine</ref>()<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4" kindref="member">LineType</ref><sp/>current_lt<sp/>=<sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a799dffc5a36821b0751fec9de5bfe8c7" kindref="member">GetLineType</ref>();</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_lt<sp/>!=<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a5dc9805a3ad0a4c99b98ff282e36d204" kindref="member">LT_UNKNOWN</ref><sp/>&amp;&amp;<sp/>current_lt<sp/>!=<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref>)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>set<sp/>a<sp/>line<sp/>to<sp/>be<sp/>START<sp/>when<sp/>it&apos;s<sp/>already<sp/>BODY.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_lt<sp/>==<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a5dc9805a3ad0a4c99b98ff282e36d204" kindref="member">LT_UNKNOWN</ref><sp/>||<sp/>current_lt<sp/>==<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a92f4e011332f48d7de7ddef587dff012" kindref="member">LT_BODY</ref>)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>hypotheses_.push_back_new(LineHypothesis(<ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref>,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>));</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a4444df7bef80fb2baa7f94dcc848eab3" kindref="member">RowScratchRegisters::SetBodyLine</ref>()<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4" kindref="member">LineType</ref><sp/>current_lt<sp/>=<sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a799dffc5a36821b0751fec9de5bfe8c7" kindref="member">GetLineType</ref>();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_lt<sp/>!=<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a5dc9805a3ad0a4c99b98ff282e36d204" kindref="member">LT_UNKNOWN</ref><sp/>&amp;&amp;<sp/>current_lt<sp/>!=<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a92f4e011332f48d7de7ddef587dff012" kindref="member">LT_BODY</ref>)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>set<sp/>a<sp/>line<sp/>to<sp/>be<sp/>BODY<sp/>when<sp/>it&apos;s<sp/>already<sp/>START.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_lt<sp/>==<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a5dc9805a3ad0a4c99b98ff282e36d204" kindref="member">LT_UNKNOWN</ref><sp/>||<sp/>current_lt<sp/>==<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref>)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>hypotheses_.push_back_new(LineHypothesis(<ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a92f4e011332f48d7de7ddef587dff012" kindref="member">LT_BODY</ref>,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>));</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1ac661ad034b57b7f5a2886c9976933b1b" kindref="member">RowScratchRegisters::AddStartLine</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>hypotheses_.push_back_new(LineHypothesis(<ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref>,<sp/>model));</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_idx<sp/>=<sp/>hypotheses_.get_index(LineHypothesis(<ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref>,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>));</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_idx<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>hypotheses_.remove(old_idx);</highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a6bd11d00c7e46e5546f5a3a9e8e80bb9" kindref="member">RowScratchRegisters::AddBodyLine</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>hypotheses_.push_back_new(LineHypothesis(<ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a92f4e011332f48d7de7ddef587dff012" kindref="member">LT_BODY</ref>,<sp/>model));</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_idx<sp/>=<sp/>hypotheses_.get_index(LineHypothesis(<ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a92f4e011332f48d7de7ddef587dff012" kindref="member">LT_BODY</ref>,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>));</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_idx<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>hypotheses_.remove(old_idx);</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1ae97c077ce2f7231d098ad4c36ed397bc" kindref="member">RowScratchRegisters::StartHypotheses</ref>(<ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>*models)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>0;<sp/>h<sp/>&lt;<sp/>hypotheses_.size();<sp/>h++)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hypotheses_[h].ty<sp/>==<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref><sp/>&amp;&amp;<sp/><ref refid="namespacetesseract_1a2f0e8f8921e73010316eaf366ec45852" kindref="member">StrongModel</ref>(hypotheses_[h].model))</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>models-&gt;push_back_new(hypotheses_[h].model);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a286be9e6a0dbff4773e63908e47128bd" kindref="member">RowScratchRegisters::StrongHypotheses</ref>(<ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>*models)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>0;<sp/>h<sp/>&lt;<sp/>hypotheses_.size();<sp/>h++)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1a2f0e8f8921e73010316eaf366ec45852" kindref="member">StrongModel</ref>(hypotheses_[h].model))</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>models-&gt;push_back_new(hypotheses_[h].model);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1a2734f261fcc7d1c69ce511dd0a57f818" kindref="member">RowScratchRegisters::NonNullHypotheses</ref>(<ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>*models)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>0;<sp/>h<sp/>&lt;<sp/>hypotheses_.size();<sp/>h++)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hypotheses_[h].model<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>models-&gt;push_back_new(hypotheses_[h].model);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*<ref refid="classtesseract_1_1_row_scratch_registers_1a6ff04cb924366a9448613f454b3543fe" kindref="member">RowScratchRegisters::UniqueStartHypothesis</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hypotheses_.size()<sp/>!=<sp/>1<sp/>||<sp/>hypotheses_[0].ty<sp/>!=<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref>)</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hypotheses_[0].model;</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*<ref refid="classtesseract_1_1_row_scratch_registers_1abca09d3b4538c40ba7da907dd41fff79" kindref="member">RowScratchRegisters::UniqueBodyHypothesis</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hypotheses_.size()<sp/>!=<sp/>1<sp/>||<sp/>hypotheses_[0].ty<sp/>!=<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a92f4e011332f48d7de7ddef587dff012" kindref="member">LT_BODY</ref>)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hypotheses_[0].model;</highlight></codeline>
<codeline lineno="639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Discard<sp/>any<sp/>hypotheses<sp/>whose<sp/>model<sp/>is<sp/>not<sp/>in<sp/>the<sp/>given<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_row_scratch_registers_1ab4b4ba0ceb0dc647802c7dfb45021797" kindref="member">RowScratchRegisters::DiscardNonMatchingHypotheses</ref>(</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>&amp;models)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(models.empty())</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>hypotheses_.size()<sp/>-<sp/>1;<sp/>h<sp/>&gt;=<sp/>0;<sp/>h--)<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!models.contains(hypotheses_[h].model))<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hypotheses_.remove(h);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============<sp/>Geometry<sp/>based<sp/>Paragraph<sp/>Detection<sp/>Algorithm<sp/>=================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655" refid="structtesseract_1_1_cluster" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesseract_1_1_cluster" kindref="compound">Cluster</ref><sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><ref refid="structtesseract_1_1_cluster_1a094e27c99aea4fd98cfae697e43fc7f5" kindref="member">Cluster</ref>()<sp/>:<sp/><ref refid="structtesseract_1_1_cluster_1ab6538077f8c9d81f6a7bca0b2024ae93" kindref="member">center</ref>(0),<sp/><ref refid="structtesseract_1_1_cluster_1a6669a8d705830c003fba98ade46c42f4" kindref="member">count</ref>(0)<sp/>{}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><ref refid="structtesseract_1_1_cluster_1a094e27c99aea4fd98cfae697e43fc7f5" kindref="member">Cluster</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cen,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)<sp/>:<sp/><ref refid="structtesseract_1_1_cluster_1ab6538077f8c9d81f6a7bca0b2024ae93" kindref="member">center</ref>(cen),<sp/><ref refid="structtesseract_1_1_cluster_1a6669a8d705830c003fba98ade46c42f4" kindref="member">count</ref>(num)<sp/>{}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_cluster_1ab6538077f8c9d81f6a7bca0b2024ae93" kindref="member">center</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>center<sp/>of<sp/>the<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_cluster_1a6669a8d705830c003fba98ade46c42f4" kindref="member">count</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>entries<sp/>within<sp/>the<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal">};</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663" refid="classtesseract_1_1_simple_clusterer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesseract_1_1_simple_clusterer" kindref="compound">SimpleClusterer</ref><sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_simple_clusterer_1afc5f3dd986096b36f59d2cc09972d1ea" kindref="member">SimpleClusterer</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_cluster_width)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>max_cluster_width_(max_cluster_width)<sp/>{}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_simple_clusterer_1ae36fdd8d4995529380462e7f9ce58caa" kindref="member">Add</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{<sp/>values_.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(value);<sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_simple_clusterer_1adc5a7f3cac5009aa69f2831b98a6e189" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_simple_clusterer_1afc17914736fbde1378a9bf9358100491" kindref="member">GetClusters</ref>(<ref refid="class_generic_vector" kindref="compound">GenericVector&lt;Cluster&gt;</ref><sp/>*clusters);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_cluster_width_;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector_eq_eq" kindref="compound">GenericVectorEqEq&lt;int&gt;</ref><sp/>values_;</highlight></codeline>
<codeline lineno="674"><highlight class="normal">};</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>cluster<sp/>closest<sp/>to<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a53eddb3d002b356e42971ce60959d3e3" kindref="member">ClosestCluster</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;Cluster&gt;</ref><sp/>&amp;clusters,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>clusters.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(value<sp/>-<sp/>clusters[i].center)<sp/>&lt;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(value<sp/>-<sp/>clusters[best_index].center))</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>best_index;</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_simple_clusterer_1afc17914736fbde1378a9bf9358100491" kindref="member">SimpleClusterer::GetClusters</ref>(<ref refid="class_generic_vector" kindref="compound">GenericVector&lt;Cluster&gt;</ref><sp/>*clusters)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>clusters-&gt;<ref refid="class_generic_vector_1a9cdbff49b186574b83e43afba606fdd9" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>values_.<ref refid="class_generic_vector_1a999bbd8ff336c81fe1198ea714c7936d" kindref="member">sort</ref>();</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>values_.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orig_i<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/>values_[i];</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/>lo;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++i<sp/>&lt;<sp/>values_.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>()<sp/>&amp;&amp;<sp/>values_[i]<sp/>&lt;=<sp/>lo<sp/>+<sp/>max_cluster_width_)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hi<sp/>=<sp/>values_[i];</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>clusters-&gt;<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(Cluster((hi<sp/>+<sp/>lo)<sp/>/<sp/>2,<sp/>i<sp/>-<sp/>orig_i));</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculate<sp/>left-<sp/>and<sp/>right-indent<sp/>tab<sp/>stop<sp/>values<sp/>seen<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rows[row_start,<sp/>row_end)<sp/>given<sp/>a<sp/>tolerance<sp/>of<sp/>tolerance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a238f021738264889994f28dbc63477b7" kindref="member">CalculateTabStops</ref>(<ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_end,</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tolerance,</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;Cluster&gt;</ref><sp/>*left_tabs,</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;Cluster&gt;</ref><sp/>*right_tabs)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!AcceptableRowArgs(0,<sp/>1,<sp/>__func__,<sp/>rows,<sp/>row_start,<sp/>row_end))</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>pass:<sp/>toss<sp/>all<sp/>left<sp/>and<sp/>right<sp/>indents<sp/>into<sp/>clusterers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>SimpleClusterer<sp/>initial_lefts(tolerance);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>SimpleClusterer<sp/>initial_rights(tolerance);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;Cluster&gt;</ref><sp/>initial_left_tabs;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;Cluster&gt;</ref><sp/>initial_right_tabs;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>row_start;<sp/>i<sp/>&lt;<sp/>row_end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>initial_lefts.Add((*rows)[i].lindent_);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>initial_rights.Add((*rows)[i].rindent_);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>initial_lefts.GetClusters(&amp;initial_left_tabs);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>initial_rights.GetClusters(&amp;initial_right_tabs);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Second<sp/>pass:<sp/>cluster<sp/>only<sp/>lines<sp/>that<sp/>are<sp/>not<sp/>&quot;stray&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>An<sp/>example<sp/>of<sp/>a<sp/>stray<sp/>line<sp/>is<sp/>a<sp/>page<sp/>number<sp/>--<sp/>a<sp/>line<sp/>whose<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>and<sp/>end<sp/>tab-stops<sp/>are<sp/>far<sp/>outside<sp/>the<sp/>typical<sp/>start<sp/>and<sp/>end<sp/>tab-stops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>the<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Put<sp/>another<sp/>way,<sp/>we<sp/>only<sp/>cluster<sp/>data<sp/>from<sp/>lines<sp/>whose<sp/>start<sp/>or<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>tab<sp/>stop<sp/>is<sp/>frequent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>SimpleClusterer<sp/>lefts(tolerance);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>SimpleClusterer<sp/>rights(tolerance);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>infrequent_enough_to_ignore<sp/>=<sp/>(row_end<sp/>-<sp/>row_start)<sp/>/<sp/><ref refid="namespacetesseract_1a2c0b1b1ae6730a690766ec71da2f908e" kindref="member">kStrayLinePer</ref>;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>row_start;<sp/>i<sp/>&lt;<sp/>row_end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lidx<sp/>=<sp/><ref refid="namespacetesseract_1a53eddb3d002b356e42971ce60959d3e3" kindref="member">ClosestCluster</ref>(initial_left_tabs,<sp/>(*rows)[i].lindent_);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ridx<sp/>=<sp/><ref refid="namespacetesseract_1a53eddb3d002b356e42971ce60959d3e3" kindref="member">ClosestCluster</ref>(initial_right_tabs,<sp/>(*rows)[i].rindent_);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initial_left_tabs[lidx].<ref refid="oldlist_8cpp_1acd4ea858d7133e40518e0832ff9d94b2" kindref="member">count</ref><sp/>&gt;<sp/>infrequent_enough_to_ignore<sp/>||</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_right_tabs[ridx].<ref refid="oldlist_8cpp_1acd4ea858d7133e40518e0832ff9d94b2" kindref="member">count</ref><sp/>&gt;<sp/>infrequent_enough_to_ignore)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lefts.Add((*rows)[i].lindent_);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rights.Add((*rows)[i].rindent_);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>lefts.GetClusters(left_tabs);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>rights.GetClusters(right_tabs);</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>a<sp/>paragraph<sp/>model<sp/>mark<sp/>rows[row_start,<sp/>row_end)<sp/>as<sp/>said<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>or<sp/>body<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Case<sp/>1:<sp/>model-&gt;first_indent_<sp/>!=<sp/>model-&gt;body_indent_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Differentiating<sp/>the<sp/>paragraph<sp/>start<sp/>lines<sp/>from<sp/>the<sp/>paragraph<sp/>body<sp/>lines<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>this<sp/>case<sp/>is<sp/>easy,<sp/>we<sp/>just<sp/>see<sp/>how<sp/>far<sp/>each<sp/>line<sp/>is<sp/>indented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Case<sp/>2:<sp/>model-&gt;first_indent_<sp/>==<sp/>model-&gt;body_indent_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Here,<sp/>we<sp/>find<sp/>end-of-paragraph<sp/>lines<sp/>by<sp/>looking<sp/>for<sp/>&quot;short<sp/>lines.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>What<sp/>constitutes<sp/>a<sp/>&quot;short<sp/>line&quot;<sp/>changes<sp/>depending<sp/>on<sp/>whether<sp/>the<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ragged-right[left]<sp/>or<sp/>fully<sp/>justified<sp/>(aligned<sp/>left<sp/>and<sp/>right).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Case<sp/>2a:<sp/>Ragged<sp/>Right<sp/>(or<sp/>Left)<sp/>text.<sp/><sp/>(eop_threshold<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>We<sp/>have<sp/>a<sp/>new<sp/>paragraph<sp/>it<sp/>the<sp/>first<sp/>word<sp/>would<sp/>have<sp/>at<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>previous<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Case<sp/>2b:<sp/>Fully<sp/>Justified.<sp/><sp/>(eop_threshold<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>We<sp/>mark<sp/>a<sp/>line<sp/>as<sp/>short<sp/>(end<sp/>of<sp/>paragraph)<sp/>if<sp/>the<sp/>offside<sp/>indent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>is<sp/>greater<sp/>than<sp/>eop_threshold.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a785f377507993ae13ab4cbc7ebc1004b" kindref="member">MarkRowsWithModel</ref>(<ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_end,</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model,</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ltr,</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eop_threshold)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!AcceptableRowArgs(0,<sp/>0,<sp/>__func__,<sp/>rows,<sp/>row_start,<sp/>row_end))</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>row_start;<sp/>row<sp/>&lt;<sp/>row_end;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid_first<sp/>=<sp/><ref refid="namespacetesseract_1a8f44dde2641dd1047debf38c4429dc2b" kindref="member">ValidFirstLine</ref>(rows,<sp/>row,<sp/>model);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid_body<sp/>=<sp/><ref refid="namespacetesseract_1a7933d5b144ff81c13320bfb6f32e0264" kindref="member">ValidBodyLine</ref>(rows,<sp/>row,<sp/>model);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid_first<sp/>&amp;&amp;<sp/>!valid_body)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[row].AddStartLine(model);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid_body<sp/>&amp;&amp;<sp/>!valid_first)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[row].AddBodyLine(model);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid_body<sp/>&amp;&amp;<sp/>valid_first)<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>after_eop<sp/>=<sp/>(row<sp/>==<sp/>row_start);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row<sp/>&gt;<sp/>row_start)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eop_threshold<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model-&gt;<ref refid="class_paragraph_model_1ad5c1367f22a798e616c64248ed50509e" kindref="member">justification</ref>()<sp/>==<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">JUSTIFICATION_LEFT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after_eop<sp/>=<sp/>(*rows)[row<sp/>-<sp/>1].rindent_<sp/>&gt;<sp/>eop_threshold;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after_eop<sp/>=<sp/>(*rows)[row<sp/>-<sp/>1].lindent_<sp/>&gt;<sp/>eop_threshold;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after_eop<sp/>=<sp/><ref refid="namespacetesseract_1a5d73136a6cc816e7f51fcfbfe99d52c1" kindref="member">FirstWordWouldHaveFit</ref>((*rows)[row<sp/>-<sp/>1],<sp/>(*rows)[row],</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;<ref refid="class_paragraph_model_1ad5c1367f22a798e616c64248ed50509e" kindref="member">justification</ref>());</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(after_eop)<sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[row].AddStartLine(model);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[row].AddBodyLine(model);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing.<sp/>Stray<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GeometricClassifierState<sp/>holds<sp/>all<sp/>of<sp/>the<sp/>information<sp/>we&apos;ll<sp/>use<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="comment">//<sp/>trying<sp/>to<sp/>determine<sp/>a<sp/>paragraph<sp/>model<sp/>for<sp/>the<sp/>text<sp/>lines<sp/>in<sp/>a<sp/>block<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="comment">//<sp/>text:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>+<sp/>the<sp/>rows<sp/>under<sp/>consideration<sp/>[row_start,<sp/>row_end)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>+<sp/>the<sp/>common<sp/>left-<sp/>and<sp/>right-indent<sp/>tab<sp/>stops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>+<sp/>does<sp/>the<sp/>block<sp/>start<sp/>out<sp/>left-to-right<sp/>or<sp/>right-to-left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Further,<sp/>this<sp/>struct<sp/>holds<sp/>the<sp/>data<sp/>we<sp/>amass<sp/>for<sp/>the<sp/>(single)<sp/>ParagraphModel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we&apos;ll<sp/>assign<sp/>to<sp/>the<sp/>text<sp/>lines<sp/>(assuming<sp/>we<sp/>get<sp/>that<sp/>far).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810" refid="structtesseract_1_1_geometric_classifier_state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesseract_1_1_geometric_classifier_state" kindref="compound">GeometricClassifierState</ref><sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a6362c19838d6051a71e57a19cb0450fa" kindref="member">GeometricClassifierState</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dbg_level,</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*r,</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r_end)</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a2cd606cf713a2e8f0a9daed13177ba52" kindref="member">debug_level</ref>(dbg_level),<sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a31dc86164f0ef5c9037980db4fe41267" kindref="member">rows</ref>(r),<sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ace3f5657f968b89fc814b332ae9ebd87" kindref="member">row_start</ref>(r_start),<sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a49b62c0453061939419be2927cb84be9" kindref="member">row_end</ref>(r_end),</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a7a29ce29a52233ef2edefb9e142f55ff" kindref="member">margin</ref>(0)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>tolerance<sp/>=<sp/><ref refid="namespacetesseract_1adf0128a0f8d13a8183820ce034d56122" kindref="member">InterwordSpace</ref>(*r,<sp/>r_start,<sp/>r_end);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a238f021738264889994f28dbc63477b7" kindref="member">CalculateTabStops</ref>(r,<sp/>r_start,<sp/>r_end,<sp/>tolerance,</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;left_tabs,<sp/>&amp;right_tabs);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>ltr<sp/>=<sp/>(*r)[r_start].ri_-&gt;ltr;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ab384ab0c3e05180db5e8ccc8b8c8f83f" kindref="member">AssumeLeftJustification</ref>()<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ab7915afff68c0d04fbc8dee07647f796" kindref="member">just</ref><sp/>=<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">tesseract::JUSTIFICATION_LEFT</ref>;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a7a29ce29a52233ef2edefb9e142f55ff" kindref="member">margin</ref><sp/>=<sp/>(*rows)[<ref refid="structtesseract_1_1_geometric_classifier_state_1ace3f5657f968b89fc814b332ae9ebd87" kindref="member">row_start</ref>].lmargin_;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ac94a889a0670d0765e79ae148d62669b" kindref="member">AssumeRightJustification</ref>()<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ab7915afff68c0d04fbc8dee07647f796" kindref="member">just</ref><sp/>=<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a93a23b19fec3ebdb587df6e0aa9e9fce" kindref="member">tesseract::JUSTIFICATION_RIGHT</ref>;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a7a29ce29a52233ef2edefb9e142f55ff" kindref="member">margin</ref><sp/>=<sp/>(*rows)[<ref refid="structtesseract_1_1_geometric_classifier_state_1ace3f5657f968b89fc814b332ae9ebd87" kindref="member">row_start</ref>].rmargin_;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Align<sp/>tabs<sp/>are<sp/>the<sp/>tab<sp/>stops<sp/>the<sp/>text<sp/>is<sp/>aligned<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;Cluster&gt;</ref><sp/>&amp;<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structtesseract_1_1_geometric_classifier_state_1ab7915afff68c0d04fbc8dee07647f796" kindref="member">just</ref><sp/>==<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a93a23b19fec3ebdb587df6e0aa9e9fce" kindref="member">tesseract::JUSTIFICATION_RIGHT</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ab23e626cc4fda21c71f54d937e374a53" kindref="member">right_tabs</ref>;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a7b21e6463a95a0049eb1fa530e283e9a" kindref="member">left_tabs</ref>;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Offside<sp/>tabs<sp/>are<sp/>the<sp/>tab<sp/>stops<sp/>opposite<sp/>the<sp/>tabs<sp/>used<sp/>to<sp/>align<sp/>the<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>for<sp/>a<sp/>left-to-right<sp/>text<sp/>which<sp/>is<sp/>aligned<sp/>to<sp/>the<sp/>right<sp/>such<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>this<sp/>function<sp/>comment,<sp/>the<sp/>offside<sp/>tabs<sp/>are<sp/>the<sp/>horizontal<sp/>tab<sp/>stops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marking<sp/>the<sp/>beginning<sp/>of<sp/>(&quot;Note&quot;,<sp/>&quot;this&quot;<sp/>and<sp/>&quot;marking&quot;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;Cluster&gt;</ref><sp/>&amp;<ref refid="structtesseract_1_1_geometric_classifier_state_1a8aaa38c20714b2582406139da97b14d8" kindref="member">OffsideTabs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structtesseract_1_1_geometric_classifier_state_1ab7915afff68c0d04fbc8dee07647f796" kindref="member">just</ref><sp/>==<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a93a23b19fec3ebdb587df6e0aa9e9fce" kindref="member">tesseract::JUSTIFICATION_RIGHT</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a7b21e6463a95a0049eb1fa530e283e9a" kindref="member">left_tabs</ref>;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ab23e626cc4fda21c71f54d937e374a53" kindref="member">right_tabs</ref>;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>whether<sp/>the<sp/>i&apos;th<sp/>row<sp/>extends<sp/>from<sp/>the<sp/>leftmost<sp/>left<sp/>tab<sp/>stop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>right<sp/>most<sp/>right<sp/>tab<sp/>stop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1aac20740d971953e353673fd8572e0ef6" kindref="member">IsFullRow</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a53eddb3d002b356e42971ce60959d3e3" kindref="member">ClosestCluster</ref>(left_tabs,<sp/>(*rows)[i].lindent_)<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a53eddb3d002b356e42971ce60959d3e3" kindref="member">ClosestCluster</ref>(right_tabs,<sp/>(*rows)[i].rindent_)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ae0f04aa051f3e9a3f9a6007f9b39a924" kindref="member">AlignsideTabIndex</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a53eddb3d002b356e42971ce60959d3e3" kindref="member">ClosestCluster</ref>(<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>(),<sp/>(*rows)[row_idx].AlignsideIndent(<ref refid="structtesseract_1_1_geometric_classifier_state_1ab7915afff68c0d04fbc8dee07647f796" kindref="member">just</ref>));</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Given<sp/>what<sp/>we<sp/>know<sp/>about<sp/>the<sp/>paragraph<sp/>justification<sp/>(just),<sp/>would<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>word<sp/>of<sp/>row_b<sp/>have<sp/>fit<sp/>at<sp/>the<sp/>end<sp/>of<sp/>row_a?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a2c21684defec28d7a98f07750f9cff6c" kindref="member">FirstWordWouldHaveFit</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_b)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a5d73136a6cc816e7f51fcfbfe99d52c1" kindref="member">return ::tesseract::FirstWordWouldHaveFit</ref>(</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[row_a],<sp/>(*rows)[row_b],<sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ab7915afff68c0d04fbc8dee07647f796" kindref="member">just</ref>);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a8090ee740b32b2d3572a167add70bc62" kindref="member">PrintRows</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>PrintRowRange(*rows,<sp/>row_start,<sp/>row_end);<sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a0d36086bc68c7284e44f38c9c3657796" kindref="member">Fail</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_debug_level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*why)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level<sp/>&lt;<sp/>min_debug_level)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;#<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>why);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a8090ee740b32b2d3572a167add70bc62" kindref="member">PrintRows</ref>();</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ab15577078421bc37b3d8b98dbd135a5f" kindref="member">Model</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>(<ref refid="structtesseract_1_1_geometric_classifier_state_1ab7915afff68c0d04fbc8dee07647f796" kindref="member">just</ref>,<sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a7a29ce29a52233ef2edefb9e142f55ff" kindref="member">margin</ref>,<sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a7f2cf31d1387ab2408f199a0cd3f5285" kindref="member">first_indent</ref>,<sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ad93fd7da400c47c8362bc98b889b6e0b" kindref="member">body_indent</ref>,<sp/>tolerance);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>print<sp/>out<sp/>messages<sp/>with<sp/>a<sp/>debug<sp/>level<sp/>at<sp/>least<sp/>as<sp/>great<sp/>as<sp/>debug_level.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a2cd606cf713a2e8f0a9daed13177ba52" kindref="member">debug_level</ref>;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>Geometric<sp/>Classifier<sp/>was<sp/>asked<sp/>to<sp/>find<sp/>a<sp/>single<sp/>paragraph<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>fit<sp/>the<sp/>text<sp/>rows<sp/>(*rows)[row_start,<sp/>row_end)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*<ref refid="structtesseract_1_1_geometric_classifier_state_1a31dc86164f0ef5c9037980db4fe41267" kindref="member">rows</ref>;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ace3f5657f968b89fc814b332ae9ebd87" kindref="member">row_start</ref>;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a49b62c0453061939419be2927cb84be9" kindref="member">row_end</ref>;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>amount<sp/>by<sp/>which<sp/>we<sp/>expect<sp/>the<sp/>text<sp/>edge<sp/>can<sp/>vary<sp/>and<sp/>still<sp/>be<sp/>aligned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ab9ce2a998929fb1df6fb1fb4db4610e9" kindref="member">tolerance</ref>;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>the<sp/>script<sp/>in<sp/>this<sp/>text<sp/>block<sp/>left-to-right?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>HORRIBLE<sp/>ROUGH<sp/>APPROXIMATION.<sp/><sp/>TODO(eger):<sp/>Improve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ae5a8011356995da6a524942c51d15ccc" kindref="member">ltr</ref>;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>left<sp/>and<sp/>right<sp/>tab<sp/>stops<sp/>were<sp/>determined<sp/>to<sp/>be<sp/>the<sp/>common<sp/>tab</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stops<sp/>for<sp/>the<sp/>given<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;Cluster&gt;</ref><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a7b21e6463a95a0049eb1fa530e283e9a" kindref="member">left_tabs</ref>;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;Cluster&gt;</ref><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ab23e626cc4fda21c71f54d937e374a53" kindref="member">right_tabs</ref>;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>parameters<sp/>we<sp/>must<sp/>determine<sp/>to<sp/>create<sp/>a<sp/>ParagraphModel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1" kindref="member">tesseract::ParagraphJustification</ref><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ab7915afff68c0d04fbc8dee07647f796" kindref="member">just</ref>;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a7a29ce29a52233ef2edefb9e142f55ff" kindref="member">margin</ref>;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a7f2cf31d1387ab2408f199a0cd3f5285" kindref="member">first_indent</ref>;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ad93fd7da400c47c8362bc98b889b6e0b" kindref="member">body_indent</ref>;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>eop_threshold<sp/>&gt;<sp/>0<sp/>if<sp/>the<sp/>text<sp/>is<sp/>fully<sp/>justified.<sp/><sp/>See<sp/>MarkRowsWithModel()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1ad50a58e800fae6e9ff18fb57cb658961" kindref="member">eop_threshold</ref>;</highlight></codeline>
<codeline lineno="907"><highlight class="normal">};</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>a<sp/>section<sp/>of<sp/>text<sp/>where<sp/>strong<sp/>textual<sp/>clues<sp/>did<sp/>not<sp/>help<sp/>identifying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="comment">//<sp/>paragraph<sp/>breaks,<sp/>and<sp/>for<sp/>which<sp/>the<sp/>left<sp/>and<sp/>right<sp/>indents<sp/>have<sp/>exactly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">//<sp/>three<sp/>tab<sp/>stops<sp/>between<sp/>them,<sp/>attempt<sp/>to<sp/>find<sp/>the<sp/>paragraph<sp/>breaks<sp/>based</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//<sp/>solely<sp/>on<sp/>the<sp/>outline<sp/>of<sp/>the<sp/>text<sp/>and<sp/>whether<sp/>the<sp/>script<sp/>is<sp/>left-to-right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Algorithm<sp/>Detail:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>The<sp/>selected<sp/>rows<sp/>are<sp/>in<sp/>the<sp/>form<sp/>of<sp/>a<sp/>rectangle<sp/>except</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>some<sp/>number<sp/>of<sp/>&quot;short<sp/>lines&quot;<sp/>of<sp/>the<sp/>same<sp/>length:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>(A1)<sp/><sp/>xxxxxxxxxxxxx<sp/><sp/>(B1)<sp/>xxxxxxxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxxxxx<sp/><sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxxxx<sp/><sp/><sp/><sp/>#<sp/>A<sp/>&quot;short&quot;<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxxxxxxx<sp/><sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxxxxxxx<sp/><sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>We<sp/>have<sp/>a<sp/>slightly<sp/>different<sp/>situation<sp/>if<sp/>the<sp/>only<sp/>short</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>line<sp/>is<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>excerpt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>(A2)<sp/>xxxxxxxxxxxxx<sp/><sp/>(B2)<sp/>xxxxxxxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxxxxxxx<sp/><sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxxxxxxx<sp/><sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxxxxx<sp/><sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxxxx<sp/><sp/><sp/><sp/><sp/>#<sp/>A<sp/>&quot;short&quot;<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>We&apos;ll<sp/>interpret<sp/>these<sp/>as<sp/>follows<sp/>based<sp/>on<sp/>the<sp/>reasoning<sp/>in<sp/>the<sp/>comment<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GeometricClassify():</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>[script<sp/>direction:<sp/>first<sp/>indent,<sp/>body<sp/>indent]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>(A1)<sp/>LtR:<sp/>2,0<sp/><sp/>RtL:<sp/>0,0<sp/><sp/><sp/>(B1)<sp/>LtR:<sp/>0,0<sp/><sp/>RtL:<sp/>2,0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>(A2)<sp/>LtR:<sp/>2,0<sp/><sp/>RtL:<sp/>CrR<sp/><sp/><sp/>(B2)<sp/>LtR:<sp/>CrL<sp/><sp/>RtL:<sp/>2,0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1ad5543edb48f0545cc79e6a0cc2f9d913" kindref="member">GeometricClassifyThreeTabStopTextBlock</ref>(</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_level,</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesseract_1_1_geometric_classifier_state" kindref="compound">GeometricClassifierState</ref><sp/>&amp;s,</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_paragraph_theory" kindref="compound">ParagraphTheory</ref><sp/>*theory)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_rows<sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a49b62c0453061939419be2927cb84be9" kindref="member">row_end</ref><sp/>-<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ace3f5657f968b89fc814b332ae9ebd87" kindref="member">row_start</ref>;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_full_rows<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_row_full<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ace3f5657f968b89fc814b332ae9ebd87" kindref="member">row_start</ref>;<sp/>i<sp/>&lt;<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a49b62c0453061939419be2927cb84be9" kindref="member">row_end</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1aac20740d971953e353673fd8572e0ef6" kindref="member">IsFullRow</ref>(i))<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_full_rows++;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a49b62c0453061939419be2927cb84be9" kindref="member">row_end</ref><sp/>-<sp/>1)<sp/>last_row_full++;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_full_rows<sp/>&lt;<sp/>0.7<sp/>*<sp/>num_rows)<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a0d36086bc68c7284e44f38c9c3657796" kindref="member">Fail</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>full<sp/>lines<sp/>to<sp/>know<sp/>which<sp/>lines<sp/>start<sp/>paras.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>eop_threshold<sp/>gets<sp/>set<sp/>if<sp/>we&apos;re<sp/>fully<sp/>justified;<sp/>see<sp/>MarkRowsWithModel()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ad50a58e800fae6e9ff18fb57cb658961" kindref="member">eop_threshold</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ae5a8011356995da6a524942c51d15ccc" kindref="member">ltr</ref>)<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ab384ab0c3e05180db5e8ccc8b8c8f83f" kindref="member">AssumeLeftJustification</ref>();</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ac94a889a0670d0765e79ae148d62669b" kindref="member">AssumeRightJustification</ref>();</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;#<sp/>Not<sp/>enough<sp/>variety<sp/>for<sp/>clear<sp/>outline<sp/>classification.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Guessing<sp/>these<sp/>are<sp/>%s<sp/>aligned<sp/>based<sp/>on<sp/>script.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ae5a8011356995da6a524942c51d15ccc" kindref="member">ltr</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;left&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;right&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a8090ee740b32b2d3572a167add70bc62" kindref="member">PrintRows</ref>();</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>().size()<sp/>==<sp/>2)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>A1<sp/>or<sp/>A2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a7f2cf31d1387ab2408f199a0cd3f5285" kindref="member">first_indent</ref><sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>()[1].center;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ad93fd7da400c47c8362bc98b889b6e0b" kindref="member">body_indent</ref><sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>()[0].center;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>B1<sp/>or<sp/>B2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_rows<sp/>-<sp/>1<sp/>==<sp/>num_full_rows<sp/>-<sp/>last_row_full)<sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>B2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model<sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ae5a8011356995da6a524942c51d15ccc" kindref="member">ltr</ref><sp/>?<sp/><ref refid="namespacetesseract_1a98233252a018dc9eb158c8223e2db208" kindref="member">kCrownLeft</ref><sp/>:<sp/><ref refid="namespacetesseract_1a9fec475017947c91c5cdb29b160f4453" kindref="member">kCrownRight</ref>;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a31dc86164f0ef5c9037980db4fe41267" kindref="member">rows</ref>)[s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ace3f5657f968b89fc814b332ae9ebd87" kindref="member">row_start</ref>].AddStartLine(model);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ace3f5657f968b89fc814b332ae9ebd87" kindref="member">row_start</ref><sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a49b62c0453061939419be2927cb84be9" kindref="member">row_end</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a31dc86164f0ef5c9037980db4fe41267" kindref="member">rows</ref>)[i].AddBodyLine(model);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>B1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a7f2cf31d1387ab2408f199a0cd3f5285" kindref="member">first_indent</ref><sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ad93fd7da400c47c8362bc98b889b6e0b" kindref="member">body_indent</ref><sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>()[0].center;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ad50a58e800fae6e9ff18fb57cb658961" kindref="member">eop_threshold</ref><sp/>=<sp/>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a8aaa38c20714b2582406139da97b14d8" kindref="member">OffsideTabs</ref>()[0].center<sp/>+</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a8aaa38c20714b2582406139da97b14d8" kindref="member">OffsideTabs</ref>()[1].center)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model<sp/>=<sp/>theory-&gt;<ref refid="classtesseract_1_1_paragraph_theory_1ae701beca9a73ff95107e82b6fa3aa1ff" kindref="member">AddModel</ref>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ab15577078421bc37b3d8b98dbd135a5f" kindref="member">Model</ref>());</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a785f377507993ae13ab4cbc7ebc1004b" kindref="member">MarkRowsWithModel</ref>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a31dc86164f0ef5c9037980db4fe41267" kindref="member">rows</ref>,<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ace3f5657f968b89fc814b332ae9ebd87" kindref="member">row_start</ref>,<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a49b62c0453061939419be2927cb84be9" kindref="member">row_end</ref>,<sp/>model,</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ae5a8011356995da6a524942c51d15ccc" kindref="member">ltr</ref>,<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ad50a58e800fae6e9ff18fb57cb658961" kindref="member">eop_threshold</ref>);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>called<sp/>if<sp/>strong<sp/>textual<sp/>clues<sp/>were<sp/>not<sp/>available,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>caller<sp/>hopes<sp/>that<sp/>the<sp/>paragraph<sp/>breaks<sp/>will<sp/>be<sp/>super<sp/>obvious<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>outline<sp/>of<sp/>the<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>particularly<sp/>difficult<sp/>case<sp/>is<sp/>figuring<sp/>out<sp/>what&apos;s<sp/>going<sp/>on<sp/>if<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>have<sp/>enough<sp/>short<sp/>paragraph<sp/>end<sp/>lines<sp/>to<sp/>tell<sp/>us<sp/>what&apos;s<sp/>going<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>instance,<sp/>let&apos;s<sp/>say<sp/>you<sp/>have<sp/>the<sp/>following<sp/>outline:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>(A1)<sp/><sp/>xxxxxxxxxxxxxxxxxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxxxxxxxxxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxxxxxxxxxxxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxxxxxxxxxxxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Even<sp/>if<sp/>we<sp/>know<sp/>that<sp/>the<sp/>text<sp/>is<sp/>left-to-right<sp/>and<sp/>so<sp/>will<sp/>probably<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment">//<sp/>left-aligned,<sp/>both<sp/>of<sp/>the<sp/>following<sp/>are<sp/>possible<sp/>texts:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(A1a)<sp/><sp/>1.<sp/>Here<sp/>our<sp/>list<sp/>item</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>two<sp/>full<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>Here<sp/>a<sp/>second<sp/>item.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.<sp/>Here<sp/>our<sp/>third<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(A1b)<sp/><sp/>so<sp/>ends<sp/>paragraph<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Here<sp/><sp/>starts<sp/>another</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paragraph<sp/><sp/>we<sp/>want<sp/><sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read.<sp/><sp/>This<sp/><sp/>continues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>examples<sp/>are<sp/>obvious<sp/>from<sp/>the<sp/>text<sp/>and<sp/>should<sp/>have<sp/>been<sp/>caught</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>StrongEvidenceClassify<sp/>pass.<sp/><sp/>However,<sp/>for<sp/>languages<sp/>where<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">//<sp/>have<sp/>capital<sp/>letters<sp/>to<sp/>go<sp/>on<sp/>(e.g.<sp/>Hebrew,<sp/>Arabic,<sp/>Hindi,<sp/>Chinese),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>worth<sp/>guessing<sp/>that<sp/>(A1b)<sp/>is<sp/>the<sp/>correct<sp/>interpretation<sp/>if<sp/>there<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="comment">//<sp/>far<sp/>more<sp/>&quot;full&quot;<sp/>lines<sp/>than<sp/>&quot;short&quot;<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a8d91a40c49289ead57042892913dd194" kindref="member">GeometricClassify</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_level,</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_end,</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParagraphTheory<sp/>*theory)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!AcceptableRowArgs(debug_level,<sp/>4,<sp/>__func__,<sp/>rows,<sp/>row_start,<sp/>row_end))</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;###############################################\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;#####<sp/>GeometricClassify(<sp/>rows[%d:%d)<sp/>)<sp/><sp/><sp/>####\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_start,<sp/>row_end);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;###############################################\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a8f083a56b3a7be7431cea88c86f49216" kindref="member">RecomputeMarginsAndClearHypotheses</ref>(rows,<sp/>row_start,<sp/>row_end,<sp/>10);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>GeometricClassifierState<sp/>s(debug_level,<sp/>rows,<sp/>row_start,<sp/>row_end);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a7b21e6463a95a0049eb1fa530e283e9a" kindref="member">left_tabs</ref>.size()<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ab23e626cc4fda21c71f54d937e374a53" kindref="member">right_tabs</ref>.size()<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a0d36086bc68c7284e44f38c9c3657796" kindref="member">Fail</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>much<sp/>variety<sp/>for<sp/>simple<sp/>outline<sp/>classification.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a7b21e6463a95a0049eb1fa530e283e9a" kindref="member">left_tabs</ref>.size()<sp/>&lt;=<sp/>1<sp/>&amp;&amp;<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ab23e626cc4fda21c71f54d937e374a53" kindref="member">right_tabs</ref>.size()<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a0d36086bc68c7284e44f38c9c3657796" kindref="member">Fail</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>variety<sp/>for<sp/>simple<sp/>outline<sp/>classification.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a7b21e6463a95a0049eb1fa530e283e9a" kindref="member">left_tabs</ref>.size()<sp/>+<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ab23e626cc4fda21c71f54d937e374a53" kindref="member">right_tabs</ref>.size()<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1ad5543edb48f0545cc79e6a0cc2f9d913" kindref="member">GeometricClassifyThreeTabStopTextBlock</ref>(debug_level,<sp/>s,<sp/>theory);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>this<sp/>point,<sp/>we<sp/>know<sp/>that<sp/>one<sp/>side<sp/>has<sp/>at<sp/>least<sp/>two<sp/>tab<sp/>stops,<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>side<sp/>has<sp/>one<sp/>or<sp/>two<sp/>tab<sp/>stops.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Left<sp/>to<sp/>determine:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>(1)<sp/>Which<sp/>is<sp/>the<sp/>body<sp/>indent<sp/>and<sp/>which<sp/>is<sp/>the<sp/>first<sp/>line<sp/>indent?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>(2)<sp/>Is<sp/>the<sp/>text<sp/>fully<sp/>justified?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>one<sp/>side<sp/>happens<sp/>to<sp/>have<sp/>three<sp/>or<sp/>more<sp/>tab<sp/>stops,<sp/>assume<sp/>that<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>opposite<sp/>of<sp/>the<sp/>aligned<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ab23e626cc4fda21c71f54d937e374a53" kindref="member">right_tabs</ref>.size()<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ab384ab0c3e05180db5e8ccc8b8c8f83f" kindref="member">AssumeLeftJustification</ref>();</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a7b21e6463a95a0049eb1fa530e283e9a" kindref="member">left_tabs</ref>.size()<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ac94a889a0670d0765e79ae148d62669b" kindref="member">AssumeRightJustification</ref>();</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ae5a8011356995da6a524942c51d15ccc" kindref="member">ltr</ref>)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>guess<sp/>based<sp/>on<sp/>script<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ab384ab0c3e05180db5e8ccc8b8c8f83f" kindref="member">AssumeLeftJustification</ref>();</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ac94a889a0670d0765e79ae148d62669b" kindref="member">AssumeRightJustification</ref>();</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>().size()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>tab<sp/>stop<sp/>on<sp/>the<sp/>aligned<sp/>side,<sp/>how<sp/>many<sp/>of<sp/>them<sp/>appear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>paragraph<sp/>start<sp/>lines?<sp/><sp/>[first<sp/>lines]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firsts[2]<sp/>=<sp/>{0,<sp/>0};</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>the<sp/>first<sp/>line<sp/>as<sp/>a<sp/>likely<sp/>paragraph<sp/>start<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>firsts[s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ae0f04aa051f3e9a3f9a6007f9b39a924" kindref="member">AlignsideTabIndex</ref>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ace3f5657f968b89fc814b332ae9ebd87" kindref="member">row_start</ref>)]++;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>line,<sp/>if<sp/>the<sp/>first<sp/>word<sp/>would<sp/>have<sp/>fit<sp/>on<sp/>the<sp/>previous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>line<sp/>count<sp/>it<sp/>as<sp/>a<sp/>likely<sp/>paragraph<sp/>start<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ace3f5657f968b89fc814b332ae9ebd87" kindref="member">row_start</ref><sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a49b62c0453061939419be2927cb84be9" kindref="member">row_end</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a2c21684defec28d7a98f07750f9cff6c" kindref="member">FirstWordWouldHaveFit</ref>(i<sp/>-<sp/>1,<sp/>i))<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firsts[s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ae0f04aa051f3e9a3f9a6007f9b39a924" kindref="member">AlignsideTabIndex</ref>(i)]++;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>an<sp/>extra<sp/>accounting<sp/>for<sp/>the<sp/>last<sp/>line<sp/>of<sp/>the<sp/>paragraph<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>it&apos;s<sp/>the<sp/>only<sp/>short<sp/>line<sp/>in<sp/>the<sp/>block.<sp/><sp/>That<sp/>is,<sp/>take<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>word<sp/>as<sp/>typical<sp/>and<sp/>see<sp/>if<sp/>this<sp/>looks<sp/>like<sp/>the<sp/>*last*<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>a<sp/>paragraph.<sp/><sp/>If<sp/>so,<sp/>mark<sp/>the<sp/>*other*<sp/>indent<sp/>as<sp/>probably<sp/>a<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a2c21684defec28d7a98f07750f9cff6c" kindref="member">FirstWordWouldHaveFit</ref>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a49b62c0453061939419be2927cb84be9" kindref="member">row_end</ref><sp/>-<sp/>1,<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a49b62c0453061939419be2927cb84be9" kindref="member">row_end</ref><sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>firsts[1<sp/>-<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ae0f04aa051f3e9a3f9a6007f9b39a924" kindref="member">AlignsideTabIndex</ref>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a49b62c0453061939419be2927cb84be9" kindref="member">row_end</ref><sp/>-<sp/>1)]++;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>percent0firsts,<sp/>percent1firsts;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>percent0firsts<sp/>=<sp/>(100<sp/>*<sp/>firsts[0])<sp/>/<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>()[0].count;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>percent1firsts<sp/>=<sp/>(100<sp/>*<sp/>firsts[1])<sp/>/<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>()[1].count;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(eger):<sp/>Tune<sp/>these<sp/>constants<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((percent0firsts<sp/>&lt;<sp/>20<sp/>&amp;&amp;<sp/>30<sp/>&lt;<sp/>percent1firsts)<sp/>||</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percent0firsts<sp/>+<sp/>30<sp/>&lt;<sp/>percent1firsts)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a7f2cf31d1387ab2408f199a0cd3f5285" kindref="member">first_indent</ref><sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>()[1].center;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ad93fd7da400c47c8362bc98b889b6e0b" kindref="member">body_indent</ref><sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>()[0].center;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((percent1firsts<sp/>&lt;<sp/>20<sp/>&amp;&amp;<sp/>30<sp/>&lt;<sp/>percent0firsts)<sp/>||</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percent1firsts<sp/>+<sp/>30<sp/>&lt;<sp/>percent0firsts)<sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a7f2cf31d1387ab2408f199a0cd3f5285" kindref="member">first_indent</ref><sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>()[0].center;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ad93fd7da400c47c8362bc98b889b6e0b" kindref="member">body_indent</ref><sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>()[1].center;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ambiguous!<sp/>Probably<sp/>lineated<sp/>(poetry)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;#<sp/>Cannot<sp/>determine<sp/>%s<sp/>indent<sp/>likely<sp/>to<sp/>start<sp/>paragraphs.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ab7915afff68c0d04fbc8dee07647f796" kindref="member">just</ref><sp/>==<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">tesseract::JUSTIFICATION_LEFT</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;left&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;right&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;#<sp/>Indent<sp/>of<sp/>%d<sp/>looks<sp/>like<sp/>a<sp/>first<sp/>line<sp/>%d%%<sp/>of<sp/>the<sp/>time.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>()[0].center,<sp/>percent0firsts);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;#<sp/>Indent<sp/>of<sp/>%d<sp/>looks<sp/>like<sp/>a<sp/>first<sp/>line<sp/>%d%%<sp/>of<sp/>the<sp/>time.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>()[1].center,<sp/>percent1firsts);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a8090ee740b32b2d3572a167add70bc62" kindref="member">PrintRows</ref>();</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There&apos;s<sp/>only<sp/>one<sp/>tab<sp/>stop<sp/>for<sp/>the<sp/>&quot;aligned<sp/>to&quot;<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a7f2cf31d1387ab2408f199a0cd3f5285" kindref="member">first_indent</ref><sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ad93fd7da400c47c8362bc98b889b6e0b" kindref="member">body_indent</ref><sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>()[0].center;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>this<sp/>point,<sp/>we<sp/>have<sp/>our<sp/>model.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model<sp/>=<sp/>theory-&gt;AddModel(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ab15577078421bc37b3d8b98dbd135a5f" kindref="member">Model</ref>());</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>all<sp/>we<sp/>have<sp/>to<sp/>do<sp/>is<sp/>figure<sp/>out<sp/>if<sp/>the<sp/>text<sp/>is<sp/>fully<sp/>justified<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>eop_threshold:<sp/>default<sp/>to<sp/>fully<sp/>justified<sp/>unless<sp/>we<sp/>see<sp/>evidence<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>See<sp/>description<sp/>on<sp/>MarkRowsWithModel()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ad50a58e800fae6e9ff18fb57cb658961" kindref="member">eop_threshold</ref><sp/>=</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a8aaa38c20714b2582406139da97b14d8" kindref="member">OffsideTabs</ref>()[0].center<sp/>+<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a8aaa38c20714b2582406139da97b14d8" kindref="member">OffsideTabs</ref>()[1].center)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>text<sp/>is<sp/>not<sp/>fully<sp/>justified,<sp/>re-set<sp/>the<sp/>eop_threshold<sp/>to<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a837da816fcc35a2f9adf32aaaf11f27e" kindref="member">AlignTabs</ref>().size()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Paragraphs<sp/>with<sp/>a<sp/>paragraph-start<sp/>indent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ace3f5657f968b89fc814b332ae9ebd87" kindref="member">row_start</ref>;<sp/>i<sp/>&lt;<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a49b62c0453061939419be2927cb84be9" kindref="member">row_end</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1a8f44dde2641dd1047debf38c4429dc2b" kindref="member">ValidFirstLine</ref>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a31dc86164f0ef5c9037980db4fe41267" kindref="member">rows</ref>,<sp/>i<sp/>+<sp/>1,<sp/>model)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="host_8h_1a80998b3d098c50b53b1f275adeafe267" kindref="member">NearlyEqual</ref>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a8aaa38c20714b2582406139da97b14d8" kindref="member">OffsideTabs</ref>()[0].center,</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a31dc86164f0ef5c9037980db4fe41267" kindref="member">rows</ref>)[i].OffsideIndent(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ab7915afff68c0d04fbc8dee07647f796" kindref="member">just</ref>),<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ab9ce2a998929fb1df6fb1fb4db4610e9" kindref="member">tolerance</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>found<sp/>a<sp/>non-end-of-paragraph<sp/>short<sp/>line:<sp/>not<sp/>fully<sp/>justified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ad50a58e800fae6e9ff18fb57cb658961" kindref="member">eop_threshold</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Paragraphs<sp/>with<sp/>no<sp/>paragraph-start<sp/>indent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ace3f5657f968b89fc814b332ae9ebd87" kindref="member">row_start</ref>;<sp/>i<sp/>&lt;<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a49b62c0453061939419be2927cb84be9" kindref="member">row_end</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a2c21684defec28d7a98f07750f9cff6c" kindref="member">FirstWordWouldHaveFit</ref>(i,<sp/>i<sp/>+<sp/>1)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="host_8h_1a80998b3d098c50b53b1f275adeafe267" kindref="member">NearlyEqual</ref>(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a8aaa38c20714b2582406139da97b14d8" kindref="member">OffsideTabs</ref>()[0].center,</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*s.<ref refid="structtesseract_1_1_geometric_classifier_state_1a31dc86164f0ef5c9037980db4fe41267" kindref="member">rows</ref>)[i].OffsideIndent(s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ab7915afff68c0d04fbc8dee07647f796" kindref="member">just</ref>),<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ab9ce2a998929fb1df6fb1fb4db4610e9" kindref="member">tolerance</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>found<sp/>a<sp/>non-end-of-paragraph<sp/>short<sp/>line:<sp/>not<sp/>fully<sp/>justified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ad50a58e800fae6e9ff18fb57cb658961" kindref="member">eop_threshold</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a785f377507993ae13ab4cbc7ebc1004b" kindref="member">MarkRowsWithModel</ref>(rows,<sp/>row_start,<sp/>row_end,<sp/>model,<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ae5a8011356995da6a524942c51d15ccc" kindref="member">ltr</ref>,<sp/>s.<ref refid="structtesseract_1_1_geometric_classifier_state_1ad50a58e800fae6e9ff18fb57cb658961" kindref="member">eop_threshold</ref>);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===============<sp/>Implementation<sp/>of<sp/>ParagraphTheory<sp/>=====================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*<ref refid="classtesseract_1_1_paragraph_theory_1ae701beca9a73ff95107e82b6fa3aa1ff" kindref="member">ParagraphTheory::AddModel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>&amp;model)<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>models_-&gt;<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*models_)[i]-&gt;Comparable(model))</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*models_)[i];</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*m<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>(model);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>models_-&gt;<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(m);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>models_we_added_.<ref refid="class_generic_vector_1a393f9f8dcc55ad759a5c7fbdc4840a89" kindref="member">push_back_new</ref>(m);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_paragraph_theory_1ac945b8be877a405dd556cf830e8d1c7e" kindref="member">ParagraphTheory::DiscardUnusedModels</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>&amp;used_models)<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>models_-&gt;<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*m<sp/>=<sp/>(*models_)[i];</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!used_models.contains(m)<sp/>&amp;&amp;<sp/>models_we_added_.<ref refid="class_generic_vector_1a135efb0c3d9bb58fa7538f137567c9c5" kindref="member">contains</ref>(m))<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>models_-&gt;<ref refid="class_generic_vector_1a3fd37a240a42f1c3052e8d28614d3702" kindref="member">remove</ref>(i);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>models_we_added_.<ref refid="class_generic_vector_1a3fd37a240a42f1c3052e8d28614d3702" kindref="member">remove</ref>(models_we_added_.<ref refid="class_generic_vector_1a0a62e2c80254bad72fb8aa37fed3af33" kindref="member">get_index</ref>(m));</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Examine<sp/>rows[start,<sp/>end)<sp/>and<sp/>try<sp/>to<sp/>determine<sp/>if<sp/>an<sp/>existing<sp/>non-centered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>paragraph<sp/>model<sp/>would<sp/>fit<sp/>them<sp/>perfectly.<sp/><sp/>If<sp/>so,<sp/>return<sp/>a<sp/>pointer<sp/>to<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>not,<sp/>return<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*<ref refid="classtesseract_1_1_paragraph_theory_1a6686340f77a669565d345995ac171a0d" kindref="member">ParagraphTheory::Fits</ref>(</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>models_-&gt;<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model<sp/>=<sp/>(*models_)[m];</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model-&gt;<ref refid="class_paragraph_model_1ad5c1367f22a798e616c64248ed50509e" kindref="member">justification</ref>()<sp/>!=<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1aa9a39d3bca308f650f8c75b0c14f6838" kindref="member">JUSTIFICATION_CENTER</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1ac1812316831faad241ffadb840e9a21e" kindref="member">RowsFitModel</ref>(rows,<sp/>start,<sp/>end,<sp/>model))</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>model;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_paragraph_theory_1a33e212251fa9eb84dd8270c7f238ff61" kindref="member">ParagraphTheory::NonCenteredModels</ref>(<ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>*models)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>models_-&gt;<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model<sp/>=<sp/>(*models_)[m];</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model-&gt;<ref refid="class_paragraph_model_1ad5c1367f22a798e616c64248ed50509e" kindref="member">justification</ref>()<sp/>!=<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1aa9a39d3bca308f650f8c75b0c14f6838" kindref="member">JUSTIFICATION_CENTER</ref>)</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>models-&gt;push_back_new(model);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_paragraph_theory_1a6824d3c12724d31d2eef0b514cbba192" kindref="member">ParagraphTheory::IndexOf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>models_-&gt;<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*models_)[i]<sp/>==<sp/>model)</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a8f44dde2641dd1047debf38c4429dc2b" kindref="member">ValidFirstLine</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model)<sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacetesseract_1a2f0e8f8921e73010316eaf366ec45852" kindref="member">StrongModel</ref>(model))<sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;ValidFirstLine()<sp/>should<sp/>only<sp/>be<sp/>called<sp/>with<sp/>strong<sp/>models!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a2f0e8f8921e73010316eaf366ec45852" kindref="member">StrongModel</ref>(model)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;<ref refid="class_paragraph_model_1aac83726f552a7058fc552bac776fffd5" kindref="member">ValidFirstLine</ref>(</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[row].lmargin_,<sp/>(*rows)[row].lindent_,</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[row].rindent_,<sp/>(*rows)[row].rmargin_);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a7933d5b144ff81c13320bfb6f32e0264" kindref="member">ValidBodyLine</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model)<sp/>{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacetesseract_1a2f0e8f8921e73010316eaf366ec45852" kindref="member">StrongModel</ref>(model))<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;ValidBodyLine()<sp/>should<sp/>only<sp/>be<sp/>called<sp/>with<sp/>strong<sp/>models!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a2f0e8f8921e73010316eaf366ec45852" kindref="member">StrongModel</ref>(model)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;<ref refid="class_paragraph_model_1af1711b2d86cc61b7913d01e7a383209b" kindref="member">ValidBodyLine</ref>(</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[row].lmargin_,<sp/>(*rows)[row].lindent_,</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[row].rindent_,<sp/>(*rows)[row].rmargin_);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a2327e0fae9f7527a805d6cb2ac9bfc16" kindref="member">CrownCompatible</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model<sp/>!=<sp/><ref refid="namespacetesseract_1a9fec475017947c91c5cdb29b160f4453" kindref="member">kCrownRight</ref><sp/>&amp;&amp;<sp/>model<sp/>!=<sp/><ref refid="namespacetesseract_1a98233252a018dc9eb158c8223e2db208" kindref="member">kCrownLeft</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;CrownCompatible()<sp/>should<sp/>only<sp/>be<sp/>called<sp/>with<sp/>crown<sp/>models!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/>RowScratchRegisters<sp/>&amp;row_a<sp/>=<sp/>(*rows)[a];</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/>RowScratchRegisters<sp/>&amp;row_b<sp/>=<sp/>(*rows)[b];</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model<sp/>==<sp/><ref refid="namespacetesseract_1a9fec475017947c91c5cdb29b160f4453" kindref="member">kCrownRight</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a80998b3d098c50b53b1f275adeafe267" kindref="member">NearlyEqual</ref>(row_a.rindent_<sp/>+<sp/>row_a.rmargin_,</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_b.rindent_<sp/>+<sp/>row_b.rmargin_,</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Epsilon(row_a.ri_-&gt;average_interword_space));</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a80998b3d098c50b53b1f275adeafe267" kindref="member">NearlyEqual</ref>(row_a.lindent_<sp/>+<sp/>row_a.lmargin_,</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_b.lindent_<sp/>+<sp/>row_b.lmargin_,</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Epsilon(row_a.ri_-&gt;average_interword_space));</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===============<sp/>Implementation<sp/>of<sp/>ParagraphModelSmearer<sp/>====================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><ref refid="classtesseract_1_1_paragraph_model_smearer_1a42b97ade9478b6198e94bae46b8de969" kindref="member">ParagraphModelSmearer::ParagraphModelSmearer</ref>(</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_end,<sp/>ParagraphTheory<sp/>*theory)</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>theory_(theory),<sp/>rows_(rows),<sp/>row_start_(row_start),</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_end_(row_end)<sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!AcceptableRowArgs(0,<sp/>0,<sp/>__func__,<sp/>rows,<sp/>row_start,<sp/>row_end))<sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>row_start_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>row_end_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>no_models;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>row_start<sp/>-<sp/>1;<sp/>row<sp/>&lt;=<sp/><ref refid="structtesseract_1_1_geometric_classifier_state_1a49b62c0453061939419be2927cb84be9" kindref="member">row_end</ref>;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>open_models_.push_back(no_models);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>paragraphs_internal.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ParagraphModelSmearer::CalculateOpenModels(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_end)<sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>no_models;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row_start<sp/>&lt;<sp/>row_start_)<sp/>row_start<sp/>=<sp/>row_start_;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row_end<sp/>&gt;<sp/>row_end_)<sp/>row_end<sp/>=<sp/>row_end_;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>(row_start<sp/>&gt;<sp/>0)<sp/>?<sp/>row_start<sp/>-<sp/>1<sp/>:<sp/>row_start;<sp/>row<sp/>&lt;<sp/>row_end;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*rows_)[row].ri_-&gt;num_words<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OpenModels(row<sp/>+<sp/>1)<sp/>=<sp/>no_models;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>&amp;opened<sp/>=<sp/>OpenModels(row);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*rows_)[row].StartHypotheses(&amp;opened);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Which<sp/>models<sp/>survive<sp/>the<sp/>transition<sp/>from<sp/>row<sp/>to<sp/>row<sp/>+<sp/>1?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>still_open;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>opened.size();<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1a8f44dde2641dd1047debf38c4429dc2b" kindref="member">ValidFirstLine</ref>(rows_,<sp/>row,<sp/>opened[m])<sp/>||</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a7933d5b144ff81c13320bfb6f32e0264" kindref="member">ValidBodyLine</ref>(rows_,<sp/>row,<sp/>opened[m]))<sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>basic<sp/>filtering;<sp/>we<sp/>check<sp/>likely<sp/>paragraph<sp/>starty-ness<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>below<sp/>in<sp/>Smear()<sp/>--<sp/>you<sp/>know,<sp/>whether<sp/>the<sp/>first<sp/>word<sp/>would<sp/>have<sp/>fit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>such.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>still_open.push_back_new(opened[m]);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OpenModels(row<sp/>+<sp/>1)<sp/>=<sp/>still_open;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>paragraphs_internal.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_paragraph_model_smearer_1ad5865041cc00c68c5cb2235e35c31b31" kindref="member">ParagraphModelSmearer::Smear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/>CalculateOpenModels(row_start_,<sp/>row_end_);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>row<sp/>which<sp/>we&apos;re<sp/>unsure<sp/>about<sp/>(that<sp/>is,<sp/>it<sp/>is<sp/>LT_UNKNOWN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>multiple<sp/>LT_START<sp/>hypotheses),<sp/>see<sp/>if<sp/>there&apos;s<sp/>a<sp/>model<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>was<sp/>recently<sp/>used<sp/>(an<sp/>&quot;open&quot;<sp/>model)<sp/>which<sp/>might<sp/>model<sp/>it<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>row_start_;<sp/>i<sp/>&lt;<sp/>row_end_;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>RowScratchRegisters<sp/>&amp;row<sp/>=<sp/>(*rows_)[i];</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row.ri_-&gt;num_words<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>One:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Figure<sp/>out<sp/>if<sp/>there<sp/>are<sp/>&quot;open&quot;<sp/>models<sp/>which<sp/>are<sp/>left-alined<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>right-aligned.<sp/><sp/>This<sp/>is<sp/>important<sp/>for<sp/>determining<sp/>whether<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>&quot;first&quot;<sp/>word<sp/>in<sp/>a<sp/>row<sp/>would<sp/>fit<sp/>at<sp/>the<sp/>&quot;end&quot;<sp/>of<sp/>the<sp/>previous<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>left_align_open<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>right_align_open<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>OpenModels(i).<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(OpenModels(i)[m]-&gt;justification())<sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">JUSTIFICATION_LEFT</ref>:<sp/>left_align_open<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a93a23b19fec3ebdb587df6e0aa9e9fce" kindref="member">JUSTIFICATION_RIGHT</ref>:<sp/>right_align_open<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>left_align_open<sp/>=<sp/>right_align_open<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>Two:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Use<sp/>that<sp/>knowledge<sp/>to<sp/>figure<sp/>out<sp/>if<sp/>this<sp/>row<sp/>is<sp/>likely<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>start<sp/>a<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>likely_start;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>likely_start<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((left_align_open<sp/>&amp;&amp;<sp/>right_align_open)<sp/>||</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!left_align_open<sp/>&amp;&amp;<sp/>!right_align_open))<sp/>{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>likely_start<sp/>=<sp/><ref refid="namespacetesseract_1ac154ce339833f35931ef5b2e57d47a2a" kindref="member">LikelyParagraphStart</ref>((*rows_)[i<sp/>-<sp/>1],<sp/>row,</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">JUSTIFICATION_LEFT</ref>)<sp/>||</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1ac154ce339833f35931ef5b2e57d47a2a" kindref="member">LikelyParagraphStart</ref>((*rows_)[i<sp/>-<sp/>1],<sp/>row,</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a93a23b19fec3ebdb587df6e0aa9e9fce" kindref="member">JUSTIFICATION_RIGHT</ref>);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left_align_open)<sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>likely_start<sp/>=<sp/><ref refid="namespacetesseract_1ac154ce339833f35931ef5b2e57d47a2a" kindref="member">LikelyParagraphStart</ref>((*rows_)[i<sp/>-<sp/>1],<sp/>row,</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">JUSTIFICATION_LEFT</ref>);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>likely_start<sp/>=<sp/><ref refid="namespacetesseract_1ac154ce339833f35931ef5b2e57d47a2a" kindref="member">LikelyParagraphStart</ref>((*rows_)[i<sp/>-<sp/>1],<sp/>row,</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a93a23b19fec3ebdb587df6e0aa9e9fce" kindref="member">JUSTIFICATION_RIGHT</ref>);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>Three:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>If<sp/>this<sp/>text<sp/>line<sp/>seems<sp/>like<sp/>an<sp/>obvious<sp/>first<sp/>line<sp/>of<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>open<sp/>model,<sp/>or<sp/>an<sp/>obvious<sp/>continuation<sp/>of<sp/>an<sp/>existing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>modelled<sp/>paragraph,<sp/>mark<sp/>it<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely_start)<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>Start<sp/>Hypotheses<sp/>for<sp/>all<sp/>Open<sp/>models<sp/>that<sp/>fit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>OpenModels(i).<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1a8f44dde2641dd1047debf38c4429dc2b" kindref="member">ValidFirstLine</ref>(rows_,<sp/>i,<sp/>OpenModels(i)[m]))<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row.AddStartLine(OpenModels(i)[m]);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>relevant<sp/>body<sp/>line<sp/>hypotheses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>last_line_models;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*rows_)[i<sp/>-<sp/>1].StrongHypotheses(&amp;last_line_models);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theory_-&gt;<ref refid="classtesseract_1_1_paragraph_theory_1a33e212251fa9eb84dd8270c7f238ff61" kindref="member">NonCenteredModels</ref>(&amp;last_line_models);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>last_line_models.size();<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model<sp/>=<sp/>last_line_models[m];</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1a7933d5b144ff81c13320bfb6f32e0264" kindref="member">ValidBodyLine</ref>(rows_,<sp/>i,<sp/>model))</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row.AddBodyLine(model);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>Four:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>If<sp/>we&apos;re<sp/>still<sp/>quite<sp/>unsure<sp/>about<sp/>this<sp/>line,<sp/>go<sp/>through<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>models<sp/>in<sp/>our<sp/>theory<sp/>and<sp/>see<sp/>if<sp/>this<sp/>row<sp/>could<sp/>be<sp/>the<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>of<sp/>any<sp/>of<sp/>our<sp/><sp/>models.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row.GetLineType()<sp/>==<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a5dc9805a3ad0a4c99b98ff282e36d204" kindref="member">LT_UNKNOWN</ref><sp/>||</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row.GetLineType()<sp/>==<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref><sp/>&amp;&amp;<sp/>!row.UniqueStartHypothesis()))<sp/>{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>all_models;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theory_-&gt;<ref refid="classtesseract_1_1_paragraph_theory_1a33e212251fa9eb84dd8270c7f238ff61" kindref="member">NonCenteredModels</ref>(&amp;all_models);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>all_models.size();<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1a8f44dde2641dd1047debf38c4429dc2b" kindref="member">ValidFirstLine</ref>(rows_,<sp/>i,<sp/>all_models[m]))<sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row.AddStartLine(all_models[m]);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>Five:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Since<sp/>we<sp/>may<sp/>have<sp/>updated<sp/>the<sp/>hypotheses<sp/>about<sp/>this<sp/>row,<sp/>we<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>to<sp/>recalculate<sp/>the<sp/>Open<sp/>models<sp/>for<sp/>the<sp/>rest<sp/>of<sp/>rows[i<sp/>+<sp/>1,<sp/>row_end)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row.GetLineType()<sp/>!=<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a5dc9805a3ad0a4c99b98ff282e36d204" kindref="member">LT_UNKNOWN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CalculateOpenModels(i<sp/>+<sp/>1,<sp/>row_end_);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================<sp/>Main<sp/>Paragraph<sp/>Detection<sp/>Algorithm<sp/>=======================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Find<sp/>out<sp/>what<sp/>ParagraphModels<sp/>are<sp/>actually<sp/>used,<sp/>and<sp/>discard<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>are<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1aeddb85e711cd9a3ae5665769f7219184" kindref="member">DiscardUnusedModels</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>&amp;rows,</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParagraphTheory<sp/>*theory)<sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>used_models;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rows.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>rows[i].StrongHypotheses(&amp;used_models);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/>theory-&gt;DiscardUnusedModels(used_models);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DowngradeWeakestToCrowns:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Forget<sp/>any<sp/>flush-{left,<sp/>right}<sp/>models<sp/>unless<sp/>we<sp/>see<sp/>two<sp/>or<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>of<sp/>them<sp/>in<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>pass<sp/>3,<sp/>we<sp/>start<sp/>to<sp/>classify<sp/>even<sp/>flush-left<sp/>paragraphs<sp/>(paragraphs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>the<sp/>first<sp/>line<sp/>and<sp/>body<sp/>indent<sp/>are<sp/>the<sp/>same)<sp/>as<sp/>having<sp/>proper<sp/>Models.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>generally<sp/>dangerous,<sp/>since<sp/>if<sp/>you<sp/>start<sp/>imagining<sp/>that<sp/>flush-left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>typical<sp/>paragraph<sp/>model<sp/>when<sp/>it<sp/>is<sp/>not,<sp/>it<sp/>will<sp/>lead<sp/>you<sp/>to<sp/>chop<sp/>normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>indented<sp/>paragraphs<sp/>in<sp/>the<sp/>middle<sp/>whenever<sp/>a<sp/>sentence<sp/>happens<sp/>to<sp/>start<sp/>on<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>new<sp/>line<sp/>(see<sp/>&quot;This&quot;<sp/>above).<sp/><sp/>What<sp/>to<sp/>do?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>What<sp/>we<sp/>do<sp/>is<sp/>to<sp/>take<sp/>any<sp/>paragraph<sp/>which<sp/>is<sp/>flush<sp/>left<sp/>and<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>preceded<sp/>by<sp/>another<sp/>paragraph<sp/>of<sp/>the<sp/>same<sp/>model<sp/>and<sp/>convert<sp/>it<sp/>to<sp/>a<sp/>&quot;Crown&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>paragraph.<sp/><sp/>This<sp/>is<sp/>a<sp/>weak<sp/>pseudo-ParagraphModel<sp/>which<sp/>is<sp/>a<sp/>placeholder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>later.<sp/><sp/>It<sp/>means<sp/>that<sp/>the<sp/>paragraph<sp/>is<sp/>flush,<sp/>but<sp/>it<sp/>would<sp/>be<sp/>desirable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>mark<sp/>it<sp/>as<sp/>the<sp/>same<sp/>model<sp/>as<sp/>following<sp/>text<sp/>if<sp/>it<sp/>fits.<sp/><sp/>This<sp/>downgrade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FlushLeft<sp/>-&gt;<sp/>CrownLeft<sp/>-&gt;<sp/>Model<sp/>of<sp/>following<sp/>paragraph.<sp/><sp/>Means<sp/>that<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>avoid<sp/>making<sp/>flush<sp/>left<sp/>Paragraph<sp/>Models<sp/>whenever<sp/>we<sp/>see<sp/>a<sp/>top-of-the-page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>half-of-a-paragraph.<sp/>and<sp/>instead<sp/>we<sp/>mark<sp/>it<sp/>the<sp/>same<sp/>as<sp/>normal<sp/>body<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Comb<sp/>backwards<sp/>through<sp/>the<sp/>row<sp/>scratch<sp/>registers,<sp/>and<sp/>turn<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>sequences<sp/>of<sp/>body<sp/>lines<sp/>of<sp/>equivalent<sp/>type<sp/>abutted<sp/>against<sp/>the<sp/>beginning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>or<sp/>a<sp/>body<sp/>or<sp/>start<sp/>line<sp/>of<sp/>a<sp/>different<sp/>type<sp/>into<sp/>a<sp/>crown<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af0e45d1ea104c74b336a6ecd6ae917e5" kindref="member">DowngradeWeakestToCrowns</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_level,</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParagraphTheory<sp/>*theory,</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows)<sp/>{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>rows-&gt;<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>end<sp/>&gt;<sp/>0;<sp/>end<sp/>=<sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Search<sp/>back<sp/>for<sp/>a<sp/>body<sp/>line<sp/>of<sp/>a<sp/>unique<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(model<sp/>=<sp/>(*rows)[end<sp/>-<sp/>1].UniqueBodyHypothesis())<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end--;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>end<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>(*rows)[start].UniqueBodyHypothesis()<sp/>==<sp/>model)<sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start--;<sp/><sp/></highlight><highlight class="comment">//<sp/>walk<sp/>back<sp/>to<sp/>the<sp/>first<sp/>line<sp/>that<sp/>is<sp/>not<sp/>the<sp/>same<sp/>body<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>(*rows)[start].UniqueStartHypothesis()<sp/>==<sp/>model<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a2f0e8f8921e73010316eaf366ec45852" kindref="member">StrongModel</ref>(model)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1a80998b3d098c50b53b1f275adeafe267" kindref="member">NearlyEqual</ref>(model-&gt;<ref refid="class_paragraph_model_1a2c03df657560f6dfcf2ef4305def8745" kindref="member">first_indent</ref>(),<sp/>model-&gt;<ref refid="class_paragraph_model_1a52304ed69b5fce47200c80cb81baeb92" kindref="member">body_indent</ref>(),</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;<ref refid="class_paragraph_model_1a5b8f05844a3320fb2a6ac0efd5b24045" kindref="member">tolerance</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start--;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>start++;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>rows[start,<sp/>end)<sp/>is<sp/>a<sp/>sequence<sp/>of<sp/>unique<sp/>body<sp/>hypotheses<sp/>of<sp/>model.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1a2f0e8f8921e73010316eaf366ec45852" kindref="member">StrongModel</ref>(model)<sp/>&amp;&amp;<sp/>model-&gt;<ref refid="class_paragraph_model_1ad5c1367f22a798e616c64248ed50509e" kindref="member">justification</ref>()<sp/>==<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1aa9a39d3bca308f650f8c75b0c14f6838" kindref="member">JUSTIFICATION_CENTER</ref>)</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacetesseract_1a2f0e8f8921e73010316eaf366ec45852" kindref="member">StrongModel</ref>(model))<sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a2327e0fae9f7527a805d6cb2ac9bfc16" kindref="member">CrownCompatible</ref>(rows,<sp/>start<sp/>-<sp/>1,<sp/>start,<sp/>model))</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start--;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!<ref refid="namespacetesseract_1a2f0e8f8921e73010316eaf366ec45852" kindref="member">StrongModel</ref>(model))<sp/>||</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespacetesseract_1a2f0e8f8921e73010316eaf366ec45852" kindref="member">StrongModel</ref>(model)<sp/>&amp;&amp;<sp/>!<ref refid="namespacetesseract_1a8f44dde2641dd1047debf38c4429dc2b" kindref="member">ValidFirstLine</ref>(rows,<sp/>start<sp/>-<sp/>1,<sp/>model)))<sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>crownify<sp/>rows[start,<sp/>end)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*crown_model<sp/>=<sp/>model;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesseract_1a2f0e8f8921e73010316eaf366ec45852" kindref="member">StrongModel</ref>(model))<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model-&gt;<ref refid="class_paragraph_model_1ad5c1367f22a798e616c64248ed50509e" kindref="member">justification</ref>()<sp/>==<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">JUSTIFICATION_LEFT</ref>)</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crown_model<sp/>=<sp/><ref refid="namespacetesseract_1a98233252a018dc9eb158c8223e2db208" kindref="member">kCrownLeft</ref>;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crown_model<sp/>=<sp/><ref refid="namespacetesseract_1a9fec475017947c91c5cdb29b160f4453" kindref="member">kCrownRight</ref>;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[start].SetUnknown();</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[start].AddStartLine(crown_model);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>start<sp/>+<sp/>1;<sp/>row<sp/>&lt;<sp/>end;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[row].SetUnknown();</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[row].AddBodyLine(crown_model);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1aeddb85e711cd9a3ae5665769f7219184" kindref="member">DiscardUnusedModels</ref>(*rows,<sp/>theory);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clear<sp/>all<sp/>hypotheses<sp/>about<sp/>lines<sp/>[start,<sp/>end)<sp/>and<sp/>reset<sp/>margins.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>empty<sp/>space<sp/>between<sp/>the<sp/>left<sp/>of<sp/>a<sp/>row<sp/>and<sp/>the<sp/>block<sp/>boundary<sp/>(and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="comment">//<sp/>similarly<sp/>for<sp/>the<sp/>right)<sp/>is<sp/>split<sp/>into<sp/>two<sp/>pieces:<sp/>margin<sp/>and<sp/>indent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>initial<sp/>processing,<sp/>we<sp/>assume<sp/>the<sp/>block<sp/>is<sp/>tight<sp/>and<sp/>the<sp/>margin<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>all<sp/>lines<sp/>is<sp/>set<sp/>to<sp/>zero.<sp/><sp/><sp/>However,<sp/>if<sp/>our<sp/>first<sp/>pass<sp/>does<sp/>not<sp/>yield</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>models<sp/>for<sp/><sp/>everything,<sp/><sp/>it<sp/>may<sp/>be<sp/><sp/>due<sp/>to<sp/>an<sp/><sp/>inset<sp/>paragraph<sp/>like<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>block-quote.<sp/><sp/><sp/>In<sp/>that<sp/>case,<sp/>we<sp/>make<sp/>a<sp/>second<sp/>pass<sp/>over<sp/>that<sp/>unmarked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>section<sp/>of<sp/>the<sp/>page<sp/>and<sp/>reset<sp/>the<sp/>&quot;margin&quot;<sp/>portion<sp/>of<sp/>the<sp/>empty<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>common<sp/>amount<sp/>of<sp/>space<sp/>at<sp/><sp/>the<sp/>ends<sp/>of<sp/>the<sp/>lines<sp/>under<sp/>consid-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>eration.<sp/><sp/><sp/><sp/>This<sp/>would<sp/>be<sp/>equivalent<sp/>to<sp/>percentile<sp/>set<sp/>to<sp/>0.<sp/>However,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sometimes<sp/>we<sp/>have<sp/>a<sp/>single<sp/>character<sp/>sticking<sp/>out<sp/>in<sp/>the<sp/>right<sp/>margin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>a<sp/>text<sp/>block<sp/><sp/>(like<sp/>the<sp/>&apos;r&apos;<sp/>in<sp/>&apos;for&apos;<sp/>on<sp/>line<sp/>3<sp/>above),<sp/><sp/>and<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>really<sp/><sp/>just<sp/>ignore<sp/>it<sp/>as<sp/>an<sp/>outlier.<sp/><sp/><sp/>To<sp/>express<sp/>this,<sp/>we<sp/>allow<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>user<sp/>to<sp/>specify<sp/><sp/>the<sp/>percentile<sp/>(0..100)<sp/><sp/>of<sp/>indent<sp/>values<sp/><sp/>to<sp/>use<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>common<sp/>margin<sp/>for<sp/>each<sp/>row<sp/>in<sp/>the<sp/>run<sp/>of<sp/>rows[start,<sp/>end).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a8f083a56b3a7be7431cea88c86f49216" kindref="member">RecomputeMarginsAndClearHypotheses</ref>(</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>percentile)<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!AcceptableRowArgs(0,<sp/>0,<sp/>__func__,<sp/>rows,<sp/>start,<sp/>end))</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lmin,<sp/>lmax,<sp/>rmin,<sp/>rmax;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>lmin<sp/>=<sp/>lmax<sp/>=<sp/>(*rows)[start].lmargin_<sp/>+<sp/>(*rows)[start].lindent_;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/>rmin<sp/>=<sp/>rmax<sp/>=<sp/>(*rows)[start].rmargin_<sp/>+<sp/>(*rows)[start].rindent_;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>start;<sp/>i<sp/>&lt;<sp/>end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>RowScratchRegisters<sp/>&amp;sr<sp/>=<sp/>(*rows)[i];</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>sr.SetUnknown();</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sr.ri_-&gt;num_words<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="helpers_8h_1a6eb00eb9bc5ed195953f334971c462ae" kindref="member">UpdateRange</ref>(sr.lmargin_<sp/>+<sp/>sr.lindent_,<sp/>&amp;lmin,<sp/>&amp;lmax);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="helpers_8h_1a6eb00eb9bc5ed195953f334971c462ae" kindref="member">UpdateRange</ref>(sr.rmargin_<sp/>+<sp/>sr.rindent_,<sp/>&amp;rmin,<sp/>&amp;rmax);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><ref refid="class_s_t_a_t_s" kindref="compound">STATS</ref><sp/>lefts(lmin,<sp/>lmax<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><ref refid="class_s_t_a_t_s" kindref="compound">STATS</ref><sp/>rights(rmin,<sp/>rmax<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>start;<sp/>i<sp/>&lt;<sp/>end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>RowScratchRegisters<sp/>&amp;sr<sp/>=<sp/>(*rows)[i];</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sr.ri_-&gt;num_words<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>lefts.add(sr.lmargin_<sp/>+<sp/>sr.lindent_,<sp/>1);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>rights.add(sr.rmargin_<sp/>+<sp/>sr.rindent_,<sp/>1);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ignorable_left<sp/>=<sp/>lefts.ile(<ref refid="helpers_8h_1af8739168d5b3235996eeb25dac3c4044" kindref="member">ClipToRange</ref>(percentile,<sp/>0,<sp/>100)<sp/>/<sp/>100.0);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ignorable_right<sp/>=<sp/>rights.ile(<ref refid="helpers_8h_1af8739168d5b3235996eeb25dac3c4044" kindref="member">ClipToRange</ref>(percentile,<sp/>0,<sp/>100)<sp/>/<sp/>100.0);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>start;<sp/>i<sp/>&lt;<sp/>end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>RowScratchRegisters<sp/>&amp;sr<sp/>=<sp/>(*rows)[i];</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ldelta<sp/>=<sp/>ignorable_left<sp/>-<sp/>sr.lmargin_;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>sr.lmargin_<sp/>+=<sp/>ldelta;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>sr.lindent_<sp/>-=<sp/>ldelta;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rdelta<sp/>=<sp/>ignorable_right<sp/>-<sp/>sr.rmargin_;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>sr.rmargin_<sp/>+=<sp/>rdelta;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>sr.rindent_<sp/>-=<sp/>rdelta;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>minimum<sp/>inter-word<sp/>space<sp/>in<sp/>rows[row_start,<sp/>row_end).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1adf0128a0f8d13a8183820ce034d56122" kindref="member">InterwordSpace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>&amp;rows,</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_end)<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row_end<sp/>&lt;<sp/>row_start<sp/>+<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>legit<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>natural_space<sp/>=<sp/>rows[row_start].ri_-&gt;average_interword_space;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>row_start;<sp/>i<sp/>&lt;<sp/>row_end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows[i].ri_-&gt;num_words<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!legit)<sp/>{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>natural_space<sp/>=<sp/>rows[i].ri_-&gt;average_interword_space;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>legit<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows[i].ri_-&gt;average_interword_space<sp/>&lt;<sp/>natural_space)</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>natural_space<sp/>=<sp/>rows[i].ri_-&gt;average_interword_space;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>natural_space;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>whether<sp/>the<sp/>first<sp/>word<sp/>on<sp/>the<sp/>after<sp/>line<sp/>can<sp/>fit<sp/>in<sp/>the<sp/>space<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>end<sp/>of<sp/>the<sp/>before<sp/>line<sp/>(knowing<sp/>which<sp/>way<sp/>the<sp/>text<sp/>is<sp/>aligned<sp/>and<sp/>read).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a5d73136a6cc816e7f51fcfbfe99d52c1" kindref="member">FirstWordWouldHaveFit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RowScratchRegisters<sp/>&amp;before,</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RowScratchRegisters<sp/>&amp;after,</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1" kindref="member">tesseract::ParagraphJustification</ref><sp/>justification)<sp/>{</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(before.ri_-&gt;num_words<sp/>==<sp/>0<sp/>||<sp/>after.ri_-&gt;num_words<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(justification<sp/>==<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a90150303905fef6037adc10dc2aa3689" kindref="member">JUSTIFICATION_UNKNOWN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>call<sp/>FirstWordWouldHaveFit(r,<sp/>s,<sp/>JUSTIFICATION_UNKNOWN).\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>available_space;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(justification<sp/>==<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1aa9a39d3bca308f650f8c75b0c14f6838" kindref="member">JUSTIFICATION_CENTER</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>available_space<sp/>=<sp/>before.lindent_<sp/>+<sp/>before.rindent_;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>available_space<sp/>=<sp/>before.OffsideIndent(justification);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>available_space<sp/>-=<sp/>before.ri_-&gt;average_interword_space;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(before.ri_-&gt;ltr)</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>after.ri_-&gt;lword_box.width()<sp/>&lt;<sp/>available_space;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>after.ri_-&gt;rword_box.width()<sp/>&lt;<sp/>available_space;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>whether<sp/>the<sp/>first<sp/>word<sp/>on<sp/>the<sp/>after<sp/>line<sp/>can<sp/>fit<sp/>in<sp/>the<sp/>space<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>end<sp/>of<sp/>the<sp/>before<sp/>line<sp/>(not<sp/>knowing<sp/>which<sp/>way<sp/>the<sp/>text<sp/>goes)<sp/>in<sp/>a<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>right<sp/>alignemnt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a5d73136a6cc816e7f51fcfbfe99d52c1" kindref="member">FirstWordWouldHaveFit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RowScratchRegisters<sp/>&amp;before,</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RowScratchRegisters<sp/>&amp;after)<sp/>{</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(before.ri_-&gt;num_words<sp/>==<sp/>0<sp/>||<sp/>after.ri_-&gt;num_words<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>available_space<sp/>=<sp/>before.lindent_;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(before.rindent_<sp/>&gt;<sp/>available_space)</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>available_space<sp/>=<sp/>before.rindent_;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/>available_space<sp/>-=<sp/>before.ri_-&gt;average_interword_space;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(before.ri_-&gt;ltr)</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>after.ri_-&gt;lword_box.width()<sp/>&lt;<sp/>available_space;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>after.ri_-&gt;rword_box.width()<sp/>&lt;<sp/>available_space;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a7acae39665867aca06e6292488b4abba" kindref="member">TextSupportsBreak</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RowScratchRegisters<sp/>&amp;before,</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RowScratchRegisters<sp/>&amp;after)<sp/>{</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(before.ri_-&gt;ltr)<sp/>{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>before.ri_-&gt;rword_likely_ends_idea<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after.ri_-&gt;lword_likely_starts_idea;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>before.ri_-&gt;lword_likely_ends_idea<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after.ri_-&gt;rword_likely_starts_idea;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1ac154ce339833f35931ef5b2e57d47a2a" kindref="member">LikelyParagraphStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RowScratchRegisters<sp/>&amp;before,</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RowScratchRegisters<sp/>&amp;after)<sp/>{</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>before.ri_-&gt;num_words<sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespacetesseract_1a5d73136a6cc816e7f51fcfbfe99d52c1" kindref="member">FirstWordWouldHaveFit</ref>(before,<sp/>after)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a7acae39665867aca06e6292488b4abba" kindref="member">TextSupportsBreak</ref>(before,<sp/>after));</highlight></codeline>
<codeline lineno="1624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1ac154ce339833f35931ef5b2e57d47a2a" kindref="member">LikelyParagraphStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RowScratchRegisters<sp/>&amp;before,</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RowScratchRegisters<sp/>&amp;after,</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1" kindref="member">tesseract::ParagraphJustification</ref><sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>before.ri_-&gt;num_words<sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespacetesseract_1a5d73136a6cc816e7f51fcfbfe99d52c1" kindref="member">FirstWordWouldHaveFit</ref>(before,<sp/>after,<sp/>j)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a7acae39665867aca06e6292488b4abba" kindref="member">TextSupportsBreak</ref>(before,<sp/>after));</highlight></codeline>
<codeline lineno="1632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Examine<sp/>rows[start,<sp/>end)<sp/>and<sp/>try<sp/>to<sp/>determine<sp/>what<sp/>sort<sp/>of<sp/>ParagraphModel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="comment">//<sp/>would<sp/>fit<sp/>them<sp/>as<sp/>a<sp/>single<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>can&apos;t<sp/>produce<sp/>a<sp/>unique<sp/>model<sp/>justification_<sp/>=<sp/>JUSTIFICATION_UNKNOWN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>rows<sp/>given<sp/>could<sp/>be<sp/>a<sp/>consistent<sp/>start<sp/>to<sp/>a<sp/>paragraph,<sp/>set<sp/>*consistent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/><ref refid="namespacetesseract_1a143a6aab4440faae4d6997cb40681193" kindref="member">InternalParagraphModelByOutline</ref>(</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tolerance,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*consistent)<sp/>{</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ltr_line_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>start;<sp/>i<sp/>&lt;<sp/>end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>ltr_line_count<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((*rows)[i].ri_-&gt;ltr);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ltr<sp/>=<sp/>(ltr_line_count<sp/>&gt;=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/>*consistent<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!AcceptableRowArgs(0,<sp/>2,<sp/>__func__,<sp/>rows,<sp/>start,<sp/>end))</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>();</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>the<sp/>caller<sp/>only<sp/>passed<sp/>us<sp/>a<sp/>region<sp/>with<sp/>a<sp/>common<sp/>rmargin<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lmargin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lmargin<sp/>=<sp/>(*rows)[start].lmargin_;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rmargin<sp/>=<sp/>(*rows)[start].rmargin_;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lmin,<sp/>lmax,<sp/>rmin,<sp/>rmax,<sp/>cmin,<sp/>cmax;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>lmin<sp/>=<sp/>lmax<sp/>=<sp/>(*rows)[start<sp/>+<sp/>1].lindent_;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/>rmin<sp/>=<sp/>rmax<sp/>=<sp/>(*rows)[start<sp/>+<sp/>1].rindent_;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/>cmin<sp/>=<sp/>cmax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>start<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*rows)[i].lmargin_<sp/>!=<sp/>lmargin<sp/>||<sp/>(*rows)[i].rmargin_<sp/>!=<sp/>rmargin)<sp/>{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Margins<sp/>don&apos;t<sp/>match!<sp/>Software<sp/>error.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*consistent<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>();</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="helpers_8h_1a6eb00eb9bc5ed195953f334971c462ae" kindref="member">UpdateRange</ref>((*rows)[i].lindent_,<sp/>&amp;lmin,<sp/>&amp;lmax);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="helpers_8h_1a6eb00eb9bc5ed195953f334971c462ae" kindref="member">UpdateRange</ref>((*rows)[i].rindent_,<sp/>&amp;rmin,<sp/>&amp;rmax);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="helpers_8h_1a6eb00eb9bc5ed195953f334971c462ae" kindref="member">UpdateRange</ref>((*rows)[i].rindent_<sp/>-<sp/>(*rows)[i].lindent_,<sp/>&amp;cmin,<sp/>&amp;cmax);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ldiff<sp/>=<sp/>lmax<sp/>-<sp/>lmin;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rdiff<sp/>=<sp/>rmax<sp/>-<sp/>rmin;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cdiff<sp/>=<sp/>cmax<sp/>-<sp/>cmin;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rdiff<sp/>&gt;<sp/>tolerance<sp/>&amp;&amp;<sp/>ldiff<sp/>&gt;<sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cdiff<sp/>&lt;<sp/>tolerance<sp/>*<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>-<sp/>start<sp/>&lt;<sp/>3)</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>();</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>(<ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1aa9a39d3bca308f650f8c75b0c14f6838" kindref="member">JUSTIFICATION_CENTER</ref>,<sp/>0,<sp/>0,<sp/>0,<sp/>tolerance);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>*consistent<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>();</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>-<sp/>start<sp/>&lt;<sp/>3)<sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>return<sp/>a<sp/>model<sp/>for<sp/>two<sp/>line<sp/>paras.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>();</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>booleans<sp/>keep<sp/>us<sp/>from<sp/>saying<sp/>something<sp/>is<sp/>aligned<sp/>left<sp/>when<sp/>the<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>left<sp/>variance<sp/>is<sp/>too<sp/>large.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>body_admits_left_alignment<sp/>=<sp/>ldiff<sp/>&lt;<sp/>tolerance;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>body_admits_right_alignment<sp/>=<sp/>rdiff<sp/>&lt;<sp/>tolerance;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>left_model<sp/>=</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>(<ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">JUSTIFICATION_LEFT</ref>,<sp/>lmargin,<sp/>(*rows)[start].lindent_,</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lmin<sp/>+<sp/>lmax)<sp/>/<sp/>2,<sp/>tolerance);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>right_model<sp/>=</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>(<ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a93a23b19fec3ebdb587df6e0aa9e9fce" kindref="member">JUSTIFICATION_RIGHT</ref>,<sp/>rmargin,<sp/>(*rows)[start].rindent_,</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(rmin<sp/>+<sp/>rmax)<sp/>/<sp/>2,<sp/>tolerance);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>booleans<sp/>keep<sp/>us<sp/>from<sp/>having<sp/>an<sp/>indent<sp/>on<sp/>the<sp/>&quot;wrong<sp/>side&quot;<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>text_admits_left_alignment<sp/>=<sp/>ltr<sp/>||<sp/>left_model.<ref refid="class_paragraph_model_1a01060b765512c91bda1f7c18744e71c3" kindref="member">is_flush</ref>();</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>text_admits_right_alignment<sp/>=<sp/>!ltr<sp/>||<sp/>right_model.<ref refid="class_paragraph_model_1a01060b765512c91bda1f7c18744e71c3" kindref="member">is_flush</ref>();</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>least<sp/>one<sp/>of<sp/>the<sp/>edges<sp/>is<sp/>less<sp/>than<sp/>tolerance<sp/>in<sp/>variance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>other<sp/>is<sp/>obviously<sp/>ragged,<sp/>it<sp/>can&apos;t<sp/>be<sp/>the<sp/>one<sp/>aligned<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Note<sp/>the<sp/>last<sp/>line<sp/>is<sp/>included<sp/>in<sp/>this<sp/>raggedness.]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tolerance<sp/>&lt;<sp/>rdiff)<sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(body_admits_left_alignment<sp/>&amp;&amp;<sp/>text_admits_left_alignment)</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left_model;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>*consistent<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>();</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tolerance<sp/>&lt;<sp/>ldiff)<sp/>{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(body_admits_right_alignment<sp/>&amp;&amp;<sp/>text_admits_right_alignment)</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>right_model;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>*consistent<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>();</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>this<sp/>point,<sp/>we<sp/>know<sp/>the<sp/>body<sp/>text<sp/>doesn&apos;t<sp/>vary<sp/>much<sp/>on<sp/>either<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>first<sp/>line<sp/>juts<sp/>out<sp/>oddly<sp/>in<sp/>one<sp/>direction<sp/>or<sp/>the<sp/>other,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>likely<sp/>indicates<sp/>the<sp/>side<sp/>aligned<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first_left<sp/>=<sp/>(*rows)[start].lindent_;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first_right<sp/>=<sp/>(*rows)[start].rindent_;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ltr<sp/>&amp;&amp;<sp/>body_admits_left_alignment<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(first_left<sp/>&lt;<sp/>lmin<sp/>||<sp/>first_left<sp/>&gt;<sp/>lmax))</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left_model;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ltr<sp/>&amp;&amp;<sp/>body_admits_right_alignment<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(first_right<sp/>&lt;<sp/>rmin<sp/>||<sp/>first_right<sp/>&gt;<sp/>rmax))</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>right_model;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/>*consistent<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>();</highlight></codeline>
<codeline lineno="1734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Examine<sp/>rows[start,<sp/>end)<sp/>and<sp/>try<sp/>to<sp/>determine<sp/>what<sp/>sort<sp/>of<sp/>ParagraphModel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight><highlight class="comment">//<sp/>would<sp/>fit<sp/>them<sp/>as<sp/>a<sp/>single<sp/>paragraph.<sp/><sp/><sp/>If<sp/>nothing<sp/>fits,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>justification_<sp/>=<sp/>JUSTIFICATION_UNKNOWN<sp/>and<sp/>print<sp/>the<sp/>paragraph<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output<sp/>if<sp/>we&apos;re<sp/>debugging.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/><ref refid="namespacetesseract_1aad4f3926ebb6c2679e4c3ccb25fb5591" kindref="member">ParagraphModelByOutline</ref>(</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_level,</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>unused_consistent;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>retval<sp/>=<sp/><ref refid="namespacetesseract_1a143a6aab4440faae4d6997cb40681193" kindref="member">InternalParagraphModelByOutline</ref>(</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rows,<sp/>start,<sp/>end,<sp/>tolerance,<sp/>&amp;unused_consistent);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level<sp/>&gt;=<sp/>2<sp/>&amp;&amp;<sp/>retval.<ref refid="class_paragraph_model_1ad5c1367f22a798e616c64248ed50509e" kindref="member">justification</ref>()<sp/>==<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a90150303905fef6037adc10dc2aa3689" kindref="member">JUSTIFICATION_UNKNOWN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>determine<sp/>a<sp/>model<sp/>for<sp/>this<sp/>paragraph:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintRowRange(*rows,<sp/>start,<sp/>end);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Do<sp/>rows[start,<sp/>end)<sp/>form<sp/>a<sp/>single<sp/>instance<sp/>of<sp/>the<sp/>given<sp/>paragraph<sp/>model?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1ac1812316831faad241ffadb840e9a21e" kindref="member">RowsFitModel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model)<sp/>{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!AcceptableRowArgs(0,<sp/>1,<sp/>__func__,<sp/>rows,<sp/>start,<sp/>end))</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacetesseract_1a8f44dde2641dd1047debf38c4429dc2b" kindref="member">ValidFirstLine</ref>(rows,<sp/>start,<sp/>model))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>start<sp/>+<sp/>1<sp/>;<sp/>i<sp/>&lt;<sp/>end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacetesseract_1a7933d5b144ff81c13320bfb6f32e0264" kindref="member">ValidBodyLine</ref>(rows,<sp/>i,<sp/>model))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Examine<sp/>rows[row_start,<sp/>row_end)<sp/>as<sp/>an<sp/>independent<sp/>section<sp/>of<sp/>text,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>mark<sp/>rows<sp/>that<sp/>are<sp/>exceptionally<sp/>clear<sp/>as<sp/>start-of-paragraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>paragraph-body<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>presume<sp/>that<sp/>any<sp/>lines<sp/>surrounding<sp/>rows[row_start,<sp/>row_end)<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight><highlight class="comment">//<sp/>have<sp/>wildly<sp/>different<sp/>paragraph<sp/>models,<sp/>so<sp/>we<sp/>don&apos;t<sp/>key<sp/>any<sp/>data<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>those<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>only<sp/>take<sp/>the<sp/>very<sp/>strongest<sp/>signals,<sp/>as<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight><highlight class="comment">//<sp/>confused<sp/>and<sp/>marking<sp/>up<sp/>centered<sp/>text,<sp/>poetry,<sp/>or<sp/>source<sp/>code<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clearly<sp/>part<sp/>of<sp/>a<sp/>typical<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1ab9e189e88fbacb1c003b980c6c819596" kindref="member">MarkStrongEvidence</ref>(<ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_end)<sp/>{</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>patently<sp/>obvious<sp/>body<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>row_start<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>row_end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RowScratchRegisters<sp/>&amp;prev<sp/>=<sp/>(*rows)[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/>RowScratchRegisters<sp/>&amp;curr<sp/>=<sp/>(*rows)[i];</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1" kindref="member">tesseract::ParagraphJustification</ref><sp/>typical_justification<sp/>=</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev.ri_-&gt;ltr<sp/>?<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">JUSTIFICATION_LEFT</ref><sp/>:<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a93a23b19fec3ebdb587df6e0aa9e9fce" kindref="member">JUSTIFICATION_RIGHT</ref>;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!curr.ri_-&gt;rword_likely_starts_idea<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!curr.ri_-&gt;lword_likely_starts_idea<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="namespacetesseract_1a5d73136a6cc816e7f51fcfbfe99d52c1" kindref="member">FirstWordWouldHaveFit</ref>(prev,<sp/>curr,<sp/>typical_justification))<sp/>{</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curr.SetBodyLine();</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>patently<sp/>obvious<sp/>start<sp/>paragraph<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>an<sp/>extremely<sp/>good<sp/>signal<sp/>of<sp/>the<sp/>start<sp/>of<sp/>a<sp/>paragraph<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>word<sp/>would<sp/>have<sp/>fit<sp/>on<sp/>the<sp/>end<sp/>of<sp/>the<sp/>previous<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>applying<sp/>just<sp/>that<sp/>signal<sp/>would<sp/>have<sp/>us<sp/>mark<sp/>random</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>lines<sp/>of<sp/>lineated<sp/>text<sp/>(poetry<sp/>and<sp/>source<sp/>code)<sp/>and<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>centered<sp/>headings<sp/>as<sp/>paragraph<sp/>start<sp/>lines.<sp/><sp/>Therefore,<sp/>we<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>second<sp/>qualification<sp/>for<sp/>a<sp/>paragraph<sp/>start:<sp/>Not<sp/>only<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>word<sp/>of<sp/>this<sp/>line<sp/>have<sp/>fit<sp/>on<sp/>the<sp/>previous<sp/>line,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>also,<sp/>this<sp/>line<sp/>should<sp/>go<sp/>full<sp/>to<sp/>the<sp/>right<sp/>of<sp/>the<sp/>block,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>disallowing<sp/>a<sp/>subsequent<sp/>word<sp/>from<sp/>having<sp/>fit<sp/>on<sp/>this<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>row:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>RowScratchRegisters<sp/>&amp;curr<sp/>=<sp/>(*rows)[row_start];</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>RowScratchRegisters<sp/>&amp;next<sp/>=<sp/>(*rows)[row_start<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1" kindref="member">tesseract::ParagraphJustification</ref><sp/>j<sp/>=</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr.ri_-&gt;ltr<sp/>?<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">JUSTIFICATION_LEFT</ref><sp/>:<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a93a23b19fec3ebdb587df6e0aa9e9fce" kindref="member">JUSTIFICATION_RIGHT</ref>;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curr.GetLineType()<sp/>==<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a5dc9805a3ad0a4c99b98ff282e36d204" kindref="member">LT_UNKNOWN</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="namespacetesseract_1a5d73136a6cc816e7f51fcfbfe99d52c1" kindref="member">FirstWordWouldHaveFit</ref>(curr,<sp/>next,<sp/>j)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(curr.ri_-&gt;lword_likely_starts_idea<sp/>||</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr.ri_-&gt;rword_likely_starts_idea))<sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curr.SetStartLine();</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Middle<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>row_start<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>row_end<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/>RowScratchRegisters<sp/>&amp;prev<sp/>=<sp/>(*rows)[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/>RowScratchRegisters<sp/>&amp;curr<sp/>=<sp/>(*rows)[i];</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>RowScratchRegisters<sp/>&amp;next<sp/>=<sp/>(*rows)[i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1" kindref="member">tesseract::ParagraphJustification</ref><sp/>j<sp/>=</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr.ri_-&gt;ltr<sp/>?<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">JUSTIFICATION_LEFT</ref><sp/>:<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a93a23b19fec3ebdb587df6e0aa9e9fce" kindref="member">JUSTIFICATION_RIGHT</ref>;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curr.GetLineType()<sp/>==<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a5dc9805a3ad0a4c99b98ff282e36d204" kindref="member">LT_UNKNOWN</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="namespacetesseract_1a5d73136a6cc816e7f51fcfbfe99d52c1" kindref="member">FirstWordWouldHaveFit</ref>(curr,<sp/>next,<sp/>j)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1ac154ce339833f35931ef5b2e57d47a2a" kindref="member">LikelyParagraphStart</ref>(prev,<sp/>curr,<sp/>j))<sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curr.SetStartLine();</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>short<sp/>circuit<sp/>at<sp/>the<sp/>top<sp/>means<sp/>we<sp/>have<sp/>at<sp/>least<sp/>two<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>RowScratchRegisters<sp/>&amp;prev<sp/>=<sp/>(*rows)[row_end<sp/>-<sp/>2];</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>RowScratchRegisters<sp/>&amp;curr<sp/>=<sp/>(*rows)[row_end<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1" kindref="member">tesseract::ParagraphJustification</ref><sp/>j<sp/>=</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr.ri_-&gt;ltr<sp/>?<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">JUSTIFICATION_LEFT</ref><sp/>:<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a93a23b19fec3ebdb587df6e0aa9e9fce" kindref="member">JUSTIFICATION_RIGHT</ref>;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curr.GetLineType()<sp/>==<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a5dc9805a3ad0a4c99b98ff282e36d204" kindref="member">LT_UNKNOWN</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="namespacetesseract_1a5d73136a6cc816e7f51fcfbfe99d52c1" kindref="member">FirstWordWouldHaveFit</ref>(curr,<sp/>curr,<sp/>j)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1ac154ce339833f35931ef5b2e57d47a2a" kindref="member">LikelyParagraphStart</ref>(prev,<sp/>curr,<sp/>j))<sp/>{</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curr.SetStartLine();</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Look<sp/>for<sp/>sequences<sp/>of<sp/>a<sp/>start<sp/>line<sp/>followed<sp/>by<sp/>some<sp/>body<sp/>lines<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rows[row_start,<sp/>row_end)<sp/>and<sp/>create<sp/>ParagraphModels<sp/>for<sp/>them<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="comment">//<sp/>they<sp/>seem<sp/>coherent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a0be3347642e85b32982fce55d5925285" kindref="member">ModelStrongEvidence</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_level,</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_end,</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_flush_models,</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParagraphTheory<sp/>*theory)<sp/>{</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!AcceptableRowArgs(debug_level,<sp/>2,<sp/>__func__,<sp/>rows,<sp/>row_start,<sp/>row_end))</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>row_start;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>row_end)<sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>row_end<sp/>&amp;&amp;<sp/>(*rows)[start].GetLineType()<sp/>!=<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref>)</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start++;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&gt;=<sp/>row_end<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tolerance<sp/>=<sp/>Epsilon((*rows)[start<sp/>+<sp/>1].ri_-&gt;average_interword_space);</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>last_model;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next_consistent;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++end;</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rows[row,<sp/>end)<sp/>was<sp/>consistent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>rows[row,<sp/>end<sp/>+<sp/>1)<sp/>is<sp/>not<sp/>consistent,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>just<sp/>model<sp/>rows[row,<sp/>end)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&lt;<sp/>row_end<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RowScratchRegisters<sp/>&amp;next<sp/>=<sp/>(*rows)[end];</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4" kindref="member">LineType</ref><sp/>lt<sp/>=<sp/>next.GetLineType();</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_consistent<sp/>=<sp/>lt<sp/>==<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a92f4e011332f48d7de7ddef587dff012" kindref="member">LT_BODY</ref><sp/>||</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lt<sp/>==<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a5dc9805a3ad0a4c99b98ff282e36d204" kindref="member">LT_UNKNOWN</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="namespacetesseract_1a5d73136a6cc816e7f51fcfbfe99d52c1" kindref="member">FirstWordWouldHaveFit</ref>((*rows)[end<sp/>-<sp/>1],<sp/>(*rows)[end]));</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_consistent<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_consistent)<sp/>{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>next_model<sp/>=<sp/><ref refid="namespacetesseract_1a143a6aab4440faae4d6997cb40681193" kindref="member">InternalParagraphModelByOutline</ref>(</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rows,<sp/>start,<sp/>end<sp/>+<sp/>1,<sp/>tolerance,<sp/>&amp;next_consistent);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((*rows)[start].ri_-&gt;ltr<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_model.<ref refid="class_paragraph_model_1ad5c1367f22a798e616c64248ed50509e" kindref="member">justification</ref>()<sp/>==<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">JUSTIFICATION_LEFT</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_model.<ref refid="class_paragraph_model_1ad5c1367f22a798e616c64248ed50509e" kindref="member">justification</ref>()<sp/>!=<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">JUSTIFICATION_LEFT</ref>)<sp/>||</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!(*rows)[start].ri_-&gt;ltr<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_model.<ref refid="class_paragraph_model_1ad5c1367f22a798e616c64248ed50509e" kindref="member">justification</ref>()<sp/>==<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a93a23b19fec3ebdb587df6e0aa9e9fce" kindref="member">JUSTIFICATION_RIGHT</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_model.<ref refid="class_paragraph_model_1ad5c1367f22a798e616c64248ed50509e" kindref="member">justification</ref>()<sp/>!=<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a93a23b19fec3ebdb587df6e0aa9e9fce" kindref="member">JUSTIFICATION_RIGHT</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_consistent<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_model<sp/>=<sp/>next_model;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_consistent<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(next_consistent<sp/>&amp;&amp;<sp/>end<sp/>&lt;<sp/>row_end);</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>this<sp/>point,<sp/>rows[start,<sp/>end)<sp/>looked<sp/>like<sp/>it<sp/>could<sp/>have<sp/>been<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>single<sp/>paragraph.<sp/><sp/>If<sp/>we<sp/>can<sp/>make<sp/>a<sp/>good<sp/>ParagraphModel<sp/>for<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>so<sp/>and<sp/>mark<sp/>this<sp/>sequence<sp/>with<sp/>that<sp/>model.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&gt;<sp/>start<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>emit<sp/>a<sp/>new<sp/>paragraph<sp/>if<sp/>we<sp/>have<sp/>more<sp/>than<sp/>one<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>new_model<sp/>=<sp/><ref refid="namespacetesseract_1aad4f3926ebb6c2679e4c3ccb25fb5591" kindref="member">ParagraphModelByOutline</ref>(</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_level,<sp/>rows,<sp/>start,<sp/>end,</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Epsilon(<ref refid="namespacetesseract_1adf0128a0f8d13a8183820ce034d56122" kindref="member">InterwordSpace</ref>(*rows,<sp/>start,<sp/>end)));</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_model.<ref refid="class_paragraph_model_1ad5c1367f22a798e616c64248ed50509e" kindref="member">justification</ref>()<sp/>==<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a90150303905fef6037adc10dc2aa3689" kindref="member">JUSTIFICATION_UNKNOWN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>couldn&apos;t<sp/>create<sp/>a<sp/>good<sp/>model,<sp/>oh<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_model.<ref refid="class_paragraph_model_1a01060b765512c91bda1f7c18744e71c3" kindref="member">is_flush</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>==<sp/>start<sp/>+<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>very<sp/>likely<sp/>we<sp/>just<sp/>got<sp/>two<sp/>paragraph<sp/>starts<sp/>in<sp/>a<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>start<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>==<sp/>row_start)<sp/>{</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>this<sp/>as<sp/>a<sp/>Crown.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_model.<ref refid="class_paragraph_model_1ad5c1367f22a798e616c64248ed50509e" kindref="member">justification</ref>()<sp/>==<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">JUSTIFICATION_LEFT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/><ref refid="namespacetesseract_1a98233252a018dc9eb158c8223e2db208" kindref="member">kCrownLeft</ref>;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/><ref refid="namespacetesseract_1a9fec475017947c91c5cdb29b160f4453" kindref="member">kCrownRight</ref>;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allow_flush_models)<sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/>theory-&gt;AddModel(new_model);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/>theory-&gt;AddModel(new_model);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model)<sp/>{</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[start].AddStartLine(model);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>start<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[i].AddBodyLine(model);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>examine<sp/>rows[row_start,<sp/>row_end)<sp/>and<sp/>do<sp/>the<sp/>following:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>(1)<sp/>Clear<sp/>all<sp/>existing<sp/>hypotheses<sp/>for<sp/>the<sp/>rows<sp/>being<sp/>considered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>(2)<sp/>Mark<sp/>up<sp/>any<sp/>rows<sp/>as<sp/>exceptionally<sp/>likely<sp/>to<sp/>be<sp/>paragraph<sp/>starts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>paragraph<sp/>body<sp/>lines<sp/>as<sp/>such<sp/>using<sp/>both<sp/>geometric<sp/>and<sp/>textual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>clues.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>(3)<sp/>Form<sp/>models<sp/>for<sp/>any<sp/>sequence<sp/>of<sp/>start<sp/>+<sp/>continuation<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>(4)<sp/>Smear<sp/>the<sp/>paragraph<sp/>models<sp/>to<sp/>cover<sp/>surrounding<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a630625afbbf53827da300e0bdbab1f75" kindref="member">StrongEvidenceClassify</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_level,</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_end,</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParagraphTheory<sp/>*theory)<sp/>{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!AcceptableRowArgs(debug_level,<sp/>2,<sp/>__func__,<sp/>rows,<sp/>row_start,<sp/>row_end))</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;#############################################\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;#<sp/>StrongEvidenceClassify(<sp/>rows[%d:%d)<sp/>)\n&quot;</highlight><highlight class="normal">,<sp/>row_start,<sp/>row_end);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;#############################################\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a8f083a56b3a7be7431cea88c86f49216" kindref="member">RecomputeMarginsAndClearHypotheses</ref>(rows,<sp/>row_start,<sp/>row_end,<sp/>10);</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1ab9e189e88fbacb1c003b980c6c819596" kindref="member">MarkStrongEvidence</ref>(rows,<sp/>row_start,<sp/>row_end);</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/>DebugDump(debug_level<sp/>&gt;<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Initial<sp/>strong<sp/>signals.&quot;</highlight><highlight class="normal">,<sp/>*theory,<sp/>*rows);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>paragraph<sp/>models.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a0be3347642e85b32982fce55d5925285" kindref="member">ModelStrongEvidence</ref>(debug_level,<sp/>rows,<sp/>row_start,<sp/>row_end,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>theory);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/>DebugDump(debug_level<sp/>&gt;<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Unsmeared<sp/>hypotheses.s.&quot;</highlight><highlight class="normal">,<sp/>*theory,<sp/>*rows);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>this<sp/>point,<sp/>some<sp/>rows<sp/>are<sp/>marked<sp/>up<sp/>as<sp/>paragraphs<sp/>with<sp/>model<sp/>numbers,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>some<sp/>rows<sp/>are<sp/>marked<sp/>up<sp/>as<sp/>either<sp/>LT_START<sp/>or<sp/>LT_BODY.<sp/><sp/>Now<sp/>let&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>smear<sp/>any<sp/>good<sp/>paragraph<sp/>hypotheses<sp/>forward<sp/>and<sp/>backward.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/>ParagraphModelSmearer<sp/>smearer(rows,<sp/>row_start,<sp/>row_end,<sp/>theory);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/>smearer.Smear();</highlight></codeline>
<codeline lineno="1970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1ae3e3ab620487f1634d3e7e5c57484603" kindref="member">SeparateSimpleLeaderLines</ref>(<ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>*rows,</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_end,</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParagraphTheory<sp/>*theory)<sp/>{</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>row_start<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>row_end<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*rows)[i<sp/>-<sp/>1].ri_-&gt;has_leaders<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[i].ri_-&gt;has_leaders<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[i<sp/>+<sp/>1].ri_-&gt;has_leaders)<sp/>{</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model<sp/>=<sp/>theory-&gt;AddModel(</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>(<ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a90150303905fef6037adc10dc2aa3689" kindref="member">JUSTIFICATION_UNKNOWN</ref>,<sp/>0,<sp/>0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*rows)[i].AddStartLine(model);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Collect<sp/>sequences<sp/>of<sp/>unique<sp/>hypotheses<sp/>in<sp/>row<sp/>registers<sp/>and<sp/>create<sp/>proper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>paragraphs<sp/>for<sp/>them,<sp/>referencing<sp/>the<sp/>paragraphs<sp/>in<sp/>row_owners.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af5043cb8d50067acfa5f0601fe767192" kindref="member">ConvertHypothesizedModelRunsToParagraphs</ref>(</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_level,</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>&amp;rows,</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;PARA *&gt;</ref><sp/>*row_owners,</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>ParagraphTheory<sp/>*theory)<sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>rows.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>end<sp/>&gt;<sp/>0;<sp/>end<sp/>=<sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>end<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref><sp/>*model<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(eger):<sp/>Be<sp/>smarter<sp/>about<sp/>dealing<sp/>with<sp/>multiple<sp/>hypotheses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>single_line_paragraph<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>models;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/>rows[start].NonNullHypotheses(&amp;models);</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(models.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/>models[0];</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows[start].GetLineType(model)<sp/>!=<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a92f4e011332f48d7de7ddef587dff012" kindref="member">LT_BODY</ref>)</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>single_line_paragraph<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model<sp/>&amp;&amp;<sp/>!single_line_paragraph)<sp/>{</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>walk<sp/>back<sp/>looking<sp/>for<sp/>more<sp/>body<sp/>lines<sp/>and<sp/>then<sp/>a<sp/>start<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--start<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>rows[start].GetLineType(model)<sp/>==<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a92f4e011332f48d7de7ddef587dff012" kindref="member">LT_BODY</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>0<sp/>||<sp/>rows[start].GetLineType(model)<sp/>!=<sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rows[start,<sp/>end)<sp/>should<sp/>be<sp/>a<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_p_a_r_a" kindref="compound">PARA</ref><sp/>*p<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_p_a_r_a" kindref="compound">PARA</ref>();</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model<sp/>==<sp/><ref refid="namespacetesseract_1a98233252a018dc9eb158c8223e2db208" kindref="member">kCrownLeft</ref><sp/>||<sp/>model<sp/>==<sp/><ref refid="namespacetesseract_1a9fec475017947c91c5cdb29b160f4453" kindref="member">kCrownRight</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="struct_p_a_r_a_1a33753dbf1aa1404f6f796ffc1106f9f9" kindref="member">is_very_first_or_continuation</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Crown<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>If<sp/>we<sp/>can<sp/>find<sp/>an<sp/>existing<sp/>ParagraphModel<sp/>that<sp/>fits,<sp/>use<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>else<sp/>create<sp/>a<sp/>new<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>end;<sp/>row<sp/>&lt;<sp/>rows.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*row_owners)[row]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespacetesseract_1a7933d5b144ff81c13320bfb6f32e0264" kindref="member">ValidBodyLine</ref>(&amp;rows,<sp/>start,<sp/>(*row_owners)[row]-&gt;model)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(start<sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a8f44dde2641dd1047debf38c4429dc2b" kindref="member">ValidFirstLine</ref>(&amp;rows,<sp/>start,<sp/>(*row_owners)[row]-&gt;model))))<sp/>{</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/>(*row_owners)[row]-&gt;model;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model<sp/>==<sp/><ref refid="namespacetesseract_1a98233252a018dc9eb158c8223e2db208" kindref="member">kCrownLeft</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>subsequent<sp/>model<sp/>fits,<sp/>so<sp/>cons<sp/>one<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/>theory-&gt;AddModel(<ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>(</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a0141f695e0959de2dc43e0eb94023ff6" kindref="member">JUSTIFICATION_LEFT</ref>,<sp/>rows[start].lmargin_<sp/>+<sp/>rows[start].lindent_,</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>Epsilon(rows[start].ri_-&gt;average_interword_space)));</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model<sp/>==<sp/><ref refid="namespacetesseract_1a9fec475017947c91c5cdb29b160f4453" kindref="member">kCrownRight</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>subsequent<sp/>model<sp/>fits,<sp/>so<sp/>cons<sp/>one<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/>theory-&gt;AddModel(<ref refid="class_paragraph_model" kindref="compound">ParagraphModel</ref>(</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a93a23b19fec3ebdb587df6e0aa9e9fce" kindref="member">JUSTIFICATION_RIGHT</ref>,<sp/>rows[start].rmargin_<sp/>+<sp/>rows[start].rmargin_,</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>Epsilon(rows[start].ri_-&gt;average_interword_space)));</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/>rows[start].SetUnknown();</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>rows[start].AddStartLine(model);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>start<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rows[i].SetUnknown();</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rows[i].AddBodyLine(model);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;<ref refid="struct_p_a_r_a_1a2f0af490f637d5cd1745343e5f3b46eb" kindref="member">model</ref><sp/>=<sp/>model;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;<ref refid="struct_p_a_r_a_1a9db0b924d40e467a375844c2e7f5ace1" kindref="member">has_drop_cap</ref><sp/>=<sp/>rows[start].ri_-&gt;has_drop_cap;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;<ref refid="struct_p_a_r_a_1a8d14bcd978d1ddae62ecd011114ebaff" kindref="member">is_list_item</ref><sp/>=</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;<ref refid="class_paragraph_model_1ad5c1367f22a798e616c64248ed50509e" kindref="member">justification</ref>()<sp/>==<sp/><ref refid="namespacetesseract_1a550970d1662b3ac5830c6a28dba676b1a93a23b19fec3ebdb587df6e0aa9e9fce" kindref="member">JUSTIFICATION_RIGHT</ref></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>rows[start].ri_-&gt;rword_indicates_list_item</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>rows[start].ri_-&gt;lword_indicates_list_item;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>start;<sp/>row<sp/>&lt;<sp/>end;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*row_owners)[row]<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Memory<sp/>leak!<sp/>ConvertHypothesizeModelRunsToParagraphs()<sp/>called<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;more<sp/>than<sp/>once!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*row_owners)[row]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069" refid="structtesseract_1_1_interval" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesseract_1_1_interval" kindref="compound">Interval</ref><sp/>{</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><ref refid="structtesseract_1_1_interval_1aa2a0f3cf14156ef9bcfc85af6e314d8e" kindref="member">Interval</ref>()<sp/>:<sp/><ref refid="structtesseract_1_1_interval_1ab2d5c93624952195716188ea2c5e4429" kindref="member">begin</ref>(0),<sp/><ref refid="structtesseract_1_1_interval_1a20a51528fdbfa3bfccbdcabe95ab762d" kindref="member">end</ref>(0)<sp/>{}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><ref refid="structtesseract_1_1_interval_1aa2a0f3cf14156ef9bcfc85af6e314d8e" kindref="member">Interval</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e)<sp/>:<sp/><ref refid="structtesseract_1_1_interval_1ab2d5c93624952195716188ea2c5e4429" kindref="member">begin</ref>(b),<sp/><ref refid="structtesseract_1_1_interval_1a20a51528fdbfa3bfccbdcabe95ab762d" kindref="member">end</ref>(e)<sp/>{}</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_interval_1ab2d5c93624952195716188ea2c5e4429" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtesseract_1_1_interval_1a20a51528fdbfa3bfccbdcabe95ab762d" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>whether<sp/>rows[row]<sp/>appears<sp/>to<sp/>be<sp/>stranded,<sp/>meaning<sp/>that<sp/>the<sp/>evidence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>this<sp/>row<sp/>is<sp/>very<sp/>weak<sp/>due<sp/>to<sp/>context.<sp/><sp/>For<sp/>instance,<sp/>two<sp/>lines<sp/>of<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code<sp/>may<sp/>happen<sp/>to<sp/>be<sp/>indented<sp/>at<sp/>the<sp/>same<sp/>tab<sp/>vector<sp/>as<sp/>body<sp/>text<sp/>starts,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight><highlight class="comment">//<sp/>leading<sp/>us<sp/>to<sp/>think<sp/>they<sp/>are<sp/>two<sp/>start-of-paragraph<sp/>lines.<sp/><sp/>This<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optimal.<sp/><sp/>However,<sp/>we<sp/>also<sp/>don&apos;t<sp/>want<sp/>to<sp/>mark<sp/>a<sp/>sequence<sp/>of<sp/>short<sp/>dialog</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>&quot;weak,&quot;<sp/>so<sp/>our<sp/>heuristic<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>(1)<sp/>If<sp/>a<sp/>line<sp/>is<sp/>surrounded<sp/>by<sp/>lines<sp/>of<sp/>unknown<sp/>type,<sp/>it&apos;s<sp/>weak.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>(2)<sp/>If<sp/>two<sp/>lines<sp/>in<sp/>a<sp/>row<sp/>are<sp/>start<sp/>lines<sp/>for<sp/>a<sp/>given<sp/>paragraph<sp/>type,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/>that<sp/>the<sp/>same<sp/>paragraph<sp/>type<sp/>does<sp/>not<sp/>continue,<sp/>they&apos;re<sp/>weak.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a0c73d33c15c6d44491a952b0362d7e26" kindref="member">RowIsStranded</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>&amp;rows,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row)<sp/>{</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector_eq_eq" kindref="compound">SetOfModels</ref><sp/>row_models;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/>rows[row].StrongHypotheses(&amp;row_models);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>row_models.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_starts<sp/>=<sp/>rows[row].GetLineType();</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>run_length<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>continues<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>row<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>continues;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector_eq_eq" kindref="compound">SetOfModels</ref><sp/>models;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rows[i].NonNullHypotheses(&amp;models);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rows[i].GetLineType(row_models[m]))<sp/>{</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref>:<sp/>run_length++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a923acc0db591045108d7903821a8a594" kindref="member">LT_MULTIPLE</ref>:<sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>fall-through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a92f4e011332f48d7de7ddef587dff012" kindref="member">LT_BODY</ref>:<sp/>run_length++;<sp/>all_starts<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a5dc9805a3ad0a4c99b98ff282e36d204" kindref="member">LT_UNKNOWN</ref>:<sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>fall-through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>continues<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/>continues<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>row<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>rows.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>()<sp/>&amp;&amp;<sp/>continues;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>models;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rows[i].NonNullHypotheses(&amp;models);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rows[i].GetLineType(row_models[m]))<sp/>{</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a350c14d666e61e3ad1310244edde8537" kindref="member">LT_START</ref>:<sp/>run_length++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a923acc0db591045108d7903821a8a594" kindref="member">LT_MULTIPLE</ref>:<sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>fall-through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a92f4e011332f48d7de7ddef587dff012" kindref="member">LT_BODY</ref>:<sp/>run_length++;<sp/>all_starts<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af86c486b511cb293ee45a39233f99bd4a5dc9805a3ad0a4c99b98ff282e36d204" kindref="member">LT_UNKNOWN</ref>:<sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>fall-through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>continues<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(run_length<sp/>&gt;<sp/>2<sp/>||<sp/>(!all_starts<sp/>&amp;&amp;<sp/>run_length<sp/>&gt;<sp/>1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Go<sp/>through<sp/>rows[row_start,<sp/>row_end)<sp/>and<sp/>gather<sp/>up<sp/>sequences<sp/>that<sp/>need<sp/>better</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>classification.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>+<sp/>Sequences<sp/>of<sp/>non-empty<sp/>rows<sp/>without<sp/>hypotheses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>+<sp/>Crown<sp/>paragraphs<sp/>not<sp/>immediately<sp/>followed<sp/>by<sp/>a<sp/>strongly<sp/>modeled<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>+<sp/>Single<sp/>line<sp/>paragraphs<sp/>surrounded<sp/>by<sp/>text<sp/>that<sp/>doesn&apos;t<sp/>match<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>model.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a83bb74ffbdbc98a7c0c013872acfa2b4" kindref="member">LeftoverSegments</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>&amp;rows,</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;Interval&gt;</ref><sp/>*to_fix,</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_end)<sp/>{</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/>to_fix-&gt;<ref refid="class_generic_vector_1a9cdbff49b186574b83e43afba606fdd9" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>row_start;<sp/>i<sp/>&lt;<sp/>row_end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_fixing<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>models;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>models_w_crowns;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>rows[i].StrongHypotheses(&amp;models);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>rows[i].NonNullHypotheses(&amp;models_w_crowns);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(models.empty()<sp/>&amp;&amp;<sp/>models_w_crowns.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Crown<sp/>paragraph.<sp/><sp/>Is<sp/>it<sp/>followed<sp/>by<sp/>a<sp/>modeled<sp/>line?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>end<sp/>&lt;<sp/>rows.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>end++)<sp/>{</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>end_models;</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a5616e4c6a53be12ea0d684b1f0fb8485" kindref="member">SetOfModels</ref><sp/>strong_end_models;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rows[end].NonNullHypotheses(&amp;end_models);</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rows[end].StrongHypotheses(&amp;strong_end_models);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end_models.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needs_fixing<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strong_end_models.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needs_fixing<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(models.empty()<sp/>&amp;&amp;<sp/>rows[i].ri_-&gt;num_words<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>models<sp/>at<sp/>all.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_fixing<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!needs_fixing<sp/>&amp;&amp;<sp/>!models.empty())<sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_fixing<sp/>=<sp/><ref refid="namespacetesseract_1a0c73d33c15c6d44491a952b0362d7e26" kindref="member">RowIsStranded</ref>(rows,<sp/>i);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needs_fixing)<sp/>{</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!to_fix-&gt;<ref refid="class_generic_vector_1afb0d8c52a603b6aa965d63bbf06a27dd" kindref="member">empty</ref>()<sp/>&amp;&amp;<sp/>to_fix-&gt;<ref refid="class_generic_vector_1a6e6d6497a6f7dd999b6d591c15354167" kindref="member">back</ref>().<ref refid="structtesseract_1_1_interval_1a20a51528fdbfa3bfccbdcabe95ab762d" kindref="member">end</ref><sp/>==<sp/>i<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_fix-&gt;<ref refid="class_generic_vector_1a6e6d6497a6f7dd999b6d591c15354167" kindref="member">back</ref>().<ref refid="structtesseract_1_1_interval_1a20a51528fdbfa3bfccbdcabe95ab762d" kindref="member">end</ref><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_fix-&gt;<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(Interval(i,<sp/>i));</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>inclusive<sp/>intervals<sp/>to<sp/>half-open<sp/>intervals.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>to_fix-&gt;<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/>(*to_fix)[i].end<sp/>=<sp/>(*to_fix)[i].end<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>a<sp/>set<sp/>of<sp/>row_owners<sp/>pointing<sp/>to<sp/>PARAs<sp/>or<sp/>NULL<sp/>(no<sp/>paragraph<sp/>known),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>normalize<sp/>each<sp/>row_owner<sp/>to<sp/>point<sp/>to<sp/>an<sp/>actual<sp/>PARA,<sp/>and<sp/>output<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>paragraphs<sp/>in<sp/>order<sp/>onto<sp/>paragraphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a9cafdf34c1f6a37446d3e656da69afdc" kindref="member">CanonicalizeDetectionResults</ref>(</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;PARA *&gt;</ref><sp/>*row_owners,</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/>PARA_LIST<sp/>*paragraphs)<sp/>{</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;PARA *&gt;</ref><sp/>&amp;rows<sp/>=<sp/>*row_owners;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/>paragraphs-&gt;<ref refid="class_generic_vector_1a9cdbff49b186574b83e43afba606fdd9" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/>PARA_IT<sp/>out(paragraphs);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><ref refid="struct_p_a_r_a" kindref="compound">PARA</ref><sp/>*formerly_null<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rows.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows[i]<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0<sp/>||<sp/>rows[i<sp/>-<sp/>1]<sp/>!=<sp/>formerly_null)<sp/>{</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rows[i]<sp/>=<sp/>formerly_null<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_p_a_r_a" kindref="compound">PARA</ref>();</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rows[i]<sp/>=<sp/>formerly_null;</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>rows[i<sp/>-<sp/>1]<sp/>==<sp/>rows[i])<sp/>{</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/>out.add_after_then_move(rows[i]);</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Main<sp/>entry<sp/>point<sp/>for<sp/>Paragraph<sp/>Detection<sp/>Algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>a<sp/>set<sp/>of<sp/>equally<sp/>spaced<sp/>textlines<sp/>(described<sp/>by<sp/>row_infos),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Split<sp/>them<sp/>into<sp/>paragraphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Output:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>row_owners<sp/>-<sp/>one<sp/>pointer<sp/>for<sp/>each<sp/>row,<sp/>to<sp/>the<sp/>paragraph<sp/>it<sp/>belongs<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>paragraphs<sp/>-<sp/>this<sp/>is<sp/>the<sp/>actual<sp/>list<sp/>of<sp/>PARA<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>models<sp/>-<sp/>the<sp/>list<sp/>of<sp/>paragraph<sp/>models<sp/>referenced<sp/>by<sp/>the<sp/>PARA<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>deleting<sp/>the<sp/>models.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1ac3edfcbb6042dffc461c6e5737c72643" kindref="member">DetectParagraphs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_level,</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowInfo&gt;</ref><sp/>*row_infos,</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;PARA *&gt;</ref><sp/>*row_owners,</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PARA_LIST<sp/>*paragraphs,</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;ParagraphModel *&gt;</ref><sp/>*models)<sp/>{</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowScratchRegisters&gt;</ref><sp/>rows;</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/>ParagraphTheory<sp/>theory(models);</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>row_owners<sp/>to<sp/>be<sp/>a<sp/>bunch<sp/>of<sp/>NULL<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/>row_owners-&gt;<ref refid="class_generic_vector_1a6751521fd3eb461d81fc83ef93a0def3" kindref="member">init_to_size</ref>(row_infos-&gt;<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>(),<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>row<sp/>scratch<sp/>registers<sp/>for<sp/>the<sp/>main<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/>rows.<ref refid="class_generic_vector_1a6751521fd3eb461d81fc83ef93a0def3" kindref="member">init_to_size</ref>(row_infos-&gt;<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>(),<sp/>RowScratchRegisters());</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>row_infos-&gt;<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/>rows[i].Init((*row_infos)[i]);</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pass<sp/>1:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Detect<sp/>sequences<sp/>of<sp/>lines<sp/>that<sp/>all<sp/>contain<sp/>leader<sp/>dots<sp/>(.....)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>These<sp/>are<sp/>likely<sp/>Tables<sp/>of<sp/>Contents.<sp/><sp/>If<sp/>there<sp/>are<sp/>three<sp/>text<sp/>lines<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>a<sp/>row<sp/>with<sp/>leader<sp/>dots,<sp/>it&apos;s<sp/>pretty<sp/>safe<sp/>to<sp/>say<sp/>the<sp/>middle<sp/>one<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>be<sp/>a<sp/>paragraph<sp/>of<sp/>its<sp/>own.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1ae3e3ab620487f1634d3e7e5c57484603" kindref="member">SeparateSimpleLeaderLines</ref>(&amp;rows,<sp/>0,<sp/>rows.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>(),<sp/>&amp;theory);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/>DebugDump(debug_level<sp/>&gt;<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>Pass<sp/>1&quot;</highlight><highlight class="normal">,<sp/>theory,<sp/>rows);</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;Interval&gt;</ref><sp/>leftovers;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a83bb74ffbdbc98a7c0c013872acfa2b4" kindref="member">LeftoverSegments</ref>(rows,<sp/>&amp;leftovers,<sp/>0,<sp/>rows.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>leftovers.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pass<sp/>2a:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Find<sp/>any<sp/>strongly<sp/>evidenced<sp/>start-of-paragraph<sp/>lines.<sp/><sp/>If<sp/>they&apos;re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>followed<sp/>by<sp/>two<sp/>lines<sp/>that<sp/>look<sp/>like<sp/>body<sp/>lines,<sp/>make<sp/>a<sp/>paragraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>model<sp/>for<sp/>that<sp/>and<sp/>see<sp/>if<sp/>that<sp/>model<sp/>applies<sp/>throughout<sp/>the<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>(that<sp/>is,<sp/>&quot;smear&quot;<sp/>it).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a630625afbbf53827da300e0bdbab1f75" kindref="member">StrongEvidenceClassify</ref>(debug_level,<sp/>&amp;rows,</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leftovers[i].begin,<sp/>leftovers[i].end,<sp/>&amp;theory);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pass<sp/>2b:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>If<sp/>we<sp/>had<sp/>any<sp/>luck<sp/>in<sp/>pass<sp/>2a,<sp/>we<sp/>got<sp/>part<sp/>of<sp/>the<sp/>page<sp/>and<sp/>didn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>know<sp/>how<sp/>to<sp/>classify<sp/>a<sp/>few<sp/>runs<sp/>of<sp/>rows.<sp/>Take<sp/>the<sp/>segments<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>didn&apos;t<sp/>find<sp/>a<sp/>model<sp/>and<sp/>reprocess<sp/>them<sp/>individually.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;Interval&gt;</ref><sp/>leftovers2;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a83bb74ffbdbc98a7c0c013872acfa2b4" kindref="member">LeftoverSegments</ref>(rows,<sp/>&amp;leftovers2,<sp/>leftovers[i].begin,<sp/>leftovers[i].end);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pass2a_was_useful<sp/>=<sp/>leftovers2.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>()<sp/>&gt;<sp/>1<sp/>||</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(leftovers2.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>()<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(leftovers2[0].begin<sp/>!=<sp/>0<sp/>||<sp/>leftovers2[0].end<sp/>!=<sp/>rows.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>()));</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pass2a_was_useful)<sp/>{</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>leftovers2.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a630625afbbf53827da300e0bdbab1f75" kindref="member">StrongEvidenceClassify</ref>(debug_level,<sp/>&amp;rows,</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leftovers2[j].begin,<sp/>leftovers2[j].end,</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;theory);</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/>DebugDump(debug_level<sp/>&gt;<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>Pass<sp/>2&quot;</highlight><highlight class="normal">,<sp/>theory,<sp/>rows);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pass<sp/>3:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>These<sp/>are<sp/>the<sp/>dregs<sp/>for<sp/>which<sp/>we<sp/>didn&apos;t<sp/>have<sp/>enough<sp/>strong<sp/>textual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>and<sp/>geometric<sp/>clues<sp/>to<sp/>form<sp/>matching<sp/>models<sp/>for.<sp/><sp/>Let&apos;s<sp/>see<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>the<sp/>geometric<sp/>clues<sp/>are<sp/>simple<sp/>enough<sp/>that<sp/>we<sp/>could<sp/>just<sp/>use<sp/>those.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a83bb74ffbdbc98a7c0c013872acfa2b4" kindref="member">LeftoverSegments</ref>(rows,<sp/>&amp;leftovers,<sp/>0,<sp/>rows.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>leftovers.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a8d91a40c49289ead57042892913dd194" kindref="member">GeometricClassify</ref>(debug_level,<sp/>&amp;rows,</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leftovers[i].begin,<sp/>leftovers[i].end,<sp/>&amp;theory);</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Undo<sp/>any<sp/>flush<sp/>models<sp/>for<sp/>which<sp/>there&apos;s<sp/>little<sp/>evidence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1af0e45d1ea104c74b336a6ecd6ae917e5" kindref="member">DowngradeWeakestToCrowns</ref>(debug_level,<sp/>&amp;theory,<sp/>&amp;rows);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/>DebugDump(debug_level<sp/>&gt;<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>Pass<sp/>3&quot;</highlight><highlight class="normal">,<sp/>theory,<sp/>rows);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pass<sp/>4:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Take<sp/>everything<sp/>that&apos;s<sp/>still<sp/>not<sp/>marked<sp/>up<sp/>well<sp/>and<sp/>clear<sp/>all<sp/>markings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a83bb74ffbdbc98a7c0c013872acfa2b4" kindref="member">LeftoverSegments</ref>(rows,<sp/>&amp;leftovers,<sp/>0,<sp/>rows.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>leftovers.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>leftovers[i].begin;<sp/>j<sp/>&lt;<sp/>leftovers[i].end;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rows[j].SetUnknown();</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/>DebugDump(debug_level<sp/>&gt;<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>Pass<sp/>4&quot;</highlight><highlight class="normal">,<sp/>theory,<sp/>rows);</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>all<sp/>of<sp/>the<sp/>unique<sp/>hypothesis<sp/>runs<sp/>to<sp/>PARAs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1af5043cb8d50067acfa5f0601fe767192" kindref="member">ConvertHypothesizedModelRunsToParagraphs</ref>(debug_level,<sp/>rows,<sp/>row_owners,</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;theory);</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/>DebugDump(debug_level<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Final<sp/>Paragraph<sp/>Segmentation&quot;</highlight><highlight class="normal">,<sp/>theory,<sp/>rows);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally,<sp/>clean<sp/>up<sp/>any<sp/>dangling<sp/>NULL<sp/>row<sp/>paragraph<sp/>parents.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a9cafdf34c1f6a37446d3e656da69afdc" kindref="member">CanonicalizeDetectionResults</ref>(row_owners,<sp/>paragraphs);</highlight></codeline>
<codeline lineno="2301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============<sp/>Code<sp/>interfacing<sp/>with<sp/>the<sp/>rest<sp/>of<sp/>Tesseract<sp/>==================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a1e7cbf676cb5f8ddf355f3c5fe77530e" kindref="member">InitializeTextAndBoxesPreRecognition</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MutableIterator<sp/>&amp;it,</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RowInfo<sp/>*info)<sp/>{</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>text,<sp/>lword_text,<sp/>and<sp/>rword_text<sp/>(mostly<sp/>for<sp/>debug<sp/>printing).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>fake_text;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/>PageIterator<sp/>pit(static_cast&lt;const<sp/>PageIterator&amp;&gt;(it));</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first_word<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pit.Empty(<ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7afd466aec253e5daa6f0c112b0f0e0610" kindref="member">RIL_WORD</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fake_text<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_word)<sp/>info-&gt;lword_text<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;rword_text<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pit.IsAtFinalElement(<ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7afd466aec253e5daa6f0c112b0f0e0610" kindref="member">RIL_WORD</ref>,<sp/><ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7adbd62c7f34a9ebdd6e3b813a34cd812d" kindref="member">RIL_SYMBOL</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!pit.IsAtFinalElement(<ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7a5e87a35f16de644593c353159ede11d1" kindref="member">RIL_TEXTLINE</ref>,<sp/><ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7adbd62c7f34a9ebdd6e3b813a34cd812d" kindref="member">RIL_SYMBOL</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fake_text<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;rword_text<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_word<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!pit.IsAtFinalElement(<ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7a5e87a35f16de644593c353159ede11d1" kindref="member">RIL_TEXTLINE</ref>,<sp/><ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7adbd62c7f34a9ebdd6e3b813a34cd812d" kindref="member">RIL_SYMBOL</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pit.Next(<ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7adbd62c7f34a9ebdd6e3b813a34cd812d" kindref="member">RIL_SYMBOL</ref>));</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fake_text.<ref refid="class_s_t_r_i_n_g_1a0c93665497f997cdd426cc8bfb1955e6" kindref="member">size</ref>()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lspaces<sp/>=<sp/>info-&gt;pix_ldistance<sp/>/<sp/>info-&gt;average_interword_space;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lspaces;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;text<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/>info-&gt;text<sp/>+=<sp/>fake_text;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>lword_box,<sp/>rword_box,<sp/>and<sp/>num_words.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><ref refid="class_p_a_g_e___r_e_s___i_t" kindref="compound">PAGE_RES_IT</ref><sp/>page_res_it<sp/>=<sp/>*it.PageResIt();</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><ref refid="class_w_e_r_d___r_e_s" kindref="compound">WERD_RES</ref><sp/>*word_res<sp/>=<sp/>page_res_it.<ref refid="class_p_a_g_e___r_e_s___i_t_1aab3a618b819763e0a6b2bcc52990736d" kindref="member">restart_row</ref>();</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><ref refid="class_r_o_w___r_e_s" kindref="compound">ROW_RES</ref><sp/>*this_row<sp/>=<sp/>page_res_it.<ref refid="class_p_a_g_e___r_e_s___i_t_1a312f58081e9410962396160eaf5f90e4" kindref="member">row</ref>();</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><ref refid="class_w_e_r_d___r_e_s" kindref="compound">WERD_RES</ref><sp/>*lword<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><ref refid="class_w_e_r_d___r_e_s" kindref="compound">WERD_RES</ref><sp/>*rword<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/>info-&gt;num_words<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word_res)<sp/>{</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lword)<sp/>lword<sp/>=<sp/>word_res;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rword<sp/>!=<sp/>word_res)<sp/>info-&gt;num_words++;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rword<sp/>=<sp/>word_res;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/>word_res<sp/>=<sp/>page_res_it.<ref refid="class_p_a_g_e___r_e_s___i_t_1ab29005f235cc738eebafb7d9ed6fe70b" kindref="member">forward</ref>();</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(page_res_it.<ref refid="class_p_a_g_e___r_e_s___i_t_1a312f58081e9410962396160eaf5f90e4" kindref="member">row</ref>()<sp/>==<sp/>this_row);</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/>info-&gt;lword_box<sp/>=<sp/>lword-&gt;<ref refid="class_w_e_r_d___r_e_s_1afc15fa7c1b5ad55d6772dea0d6865df1" kindref="member">word</ref>-&gt;<ref refid="class_w_e_r_d_1a151bbfb39ecdef93ab1a14b0f9e4ac74" kindref="member">bounding_box</ref>();</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/>info-&gt;rword_box<sp/>=<sp/>rword-&gt;<ref refid="class_w_e_r_d___r_e_s_1afc15fa7c1b5ad55d6772dea0d6865df1" kindref="member">word</ref>-&gt;<ref refid="class_w_e_r_d_1a151bbfb39ecdef93ab1a14b0f9e4ac74" kindref="member">bounding_box</ref>();</highlight></codeline>
<codeline lineno="2351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>a<sp/>Tesseract<sp/>Iterator<sp/>pointing<sp/>to<sp/>a<sp/>text<sp/>line,<sp/>fill<sp/>in<sp/>the<sp/>paragraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>detector<sp/>RowInfo<sp/>with<sp/>all<sp/>relevant<sp/>information<sp/>from<sp/>the<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1ae3a3364357e7b5531c9e77c579ea79f2" kindref="member">InitializeRowInfo</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>after_recognition,</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MutableIterator<sp/>&amp;it,</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RowInfo<sp/>*info)<sp/>{</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it.PageResIt()-&gt;row()<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_r_o_w" kindref="compound">ROW</ref><sp/>*row<sp/>=<sp/>it.PageResIt()-&gt;row()-&gt;row;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;pix_ldistance<sp/>=<sp/>row-&gt;<ref refid="class_r_o_w_1afb6c1b496c58c7a0c78ee31b0ba78fd3" kindref="member">lmargin</ref>();</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;pix_rdistance<sp/>=<sp/>row-&gt;<ref refid="class_r_o_w_1a42e6c8c68f83f5e33e60c628045d3390" kindref="member">rmargin</ref>();</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;average_interword_space<sp/>=</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row-&gt;<ref refid="class_r_o_w_1a9914801656b049fbe16ca593f571f4b4" kindref="member">space</ref>()<sp/>&gt;<sp/>0<sp/>?<sp/>row-&gt;<ref refid="class_r_o_w_1a9914801656b049fbe16ca593f571f4b4" kindref="member">space</ref>()<sp/>:<sp/><ref refid="ndminx_8h_1aacc3ee1a7f283f8ef65cea31f4436a95" kindref="member">MAX</ref>(row-&gt;<ref refid="class_r_o_w_1a2954f94ec4eefe1e3729912e5b8ea779" kindref="member">x_height</ref>(),<sp/>1);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;pix_xheight<sp/>=<sp/>row-&gt;<ref refid="class_r_o_w_1a2954f94ec4eefe1e3729912e5b8ea779" kindref="member">x_height</ref>();</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;has_leaders<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;has_drop_cap<sp/>=<sp/>row-&gt;<ref refid="class_r_o_w_1a653e5bcceebbaacf727a3c5512ff0a1d" kindref="member">has_drop_cap</ref>();</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;ltr<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>below<sp/>depending<sp/>on<sp/>word<sp/>scripts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;pix_ldistance<sp/>=<sp/>info-&gt;pix_rdistance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;average_interword_space<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;pix_xheight<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;has_leaders<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;has_drop_cap<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;ltr<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/>info-&gt;num_words<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/>info-&gt;lword_indicates_list_item<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/>info-&gt;lword_likely_starts_idea<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/>info-&gt;lword_likely_ends_idea<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/>info-&gt;rword_indicates_list_item<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/>info-&gt;rword_likely_starts_idea<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/>info-&gt;rword_likely_ends_idea<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/>info-&gt;has_leaders<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/>info-&gt;ltr<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!after_recognition)<sp/>{</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a1e7cbf676cb5f8ddf355f3c5fe77530e" kindref="member">InitializeTextAndBoxesPreRecognition</ref>(it,<sp/>info);</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/>info-&gt;text<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text<sp/>=<sp/>it.GetUTF8Text(<ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7a5e87a35f16de644593c353159ede11d1" kindref="member">RIL_TEXTLINE</ref>);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trailing_ws_idx<sp/>=<sp/>strlen(text);<sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>trailing<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(trailing_ws_idx<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isspace()<sp/>only<sp/>takes<sp/>ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((text[trailing_ws_idx<sp/>-<sp/>1]<sp/>&amp;<sp/>0x80)<sp/>==<sp/>0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isspace(text[trailing_ws_idx<sp/>-<sp/>1]))</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/>trailing_ws_idx--;</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trailing_ws_idx<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lspaces<sp/>=<sp/>info-&gt;pix_ldistance<sp/>/<sp/>info-&gt;average_interword_space;</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lspaces;<sp/>i++)</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;text<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>trailing_ws_idx;<sp/>i++)</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;text<sp/>+=<sp/>text[i];</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]text;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;text.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><ref refid="class_p_a_g_e___r_e_s___i_t" kindref="compound">PAGE_RES_IT</ref><sp/>page_res_it<sp/>=<sp/>*it.PageResIt();</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;WERD_RES *&gt;</ref><sp/>werds;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><ref refid="class_w_e_r_d___r_e_s" kindref="compound">WERD_RES</ref><sp/>*word_res<sp/>=<sp/>page_res_it.<ref refid="class_p_a_g_e___r_e_s___i_t_1aab3a618b819763e0a6b2bcc52990736d" kindref="member">restart_row</ref>();</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><ref refid="class_r_o_w___r_e_s" kindref="compound">ROW_RES</ref><sp/>*this_row<sp/>=<sp/>page_res_it.<ref refid="class_p_a_g_e___r_e_s___i_t_1a312f58081e9410962396160eaf5f90e4" kindref="member">row</ref>();</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_leaders<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ltr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rtl<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word_res<sp/>&amp;&amp;<sp/>word_res-&gt;<ref refid="class_w_e_r_d___r_e_s_1a3d42ac7ec121263e757c9b7160dfd50d" kindref="member">best_choice</ref>-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a41d740f0accccdfb245d34d554122116" kindref="member">unichar_string</ref>().<ref refid="class_s_t_r_i_n_g_1a168505a533eda60219c93e25adf4cdc5" kindref="member">length</ref>()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>werds.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(word_res);</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ltr<sp/>+=<sp/>word_res-&gt;<ref refid="class_w_e_r_d___r_e_s_1a88719a5264411d959e908413f769bcab" kindref="member">AnyLtrCharsInWord</ref>()<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rtl<sp/>+=<sp/>word_res-&gt;<ref refid="class_w_e_r_d___r_e_s_1a6733122ff7980ca4774e2f5ee856df93" kindref="member">AnyRtlCharsInWord</ref>()<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word_res-&gt;<ref refid="class_w_e_r_d___r_e_s_1afc15fa7c1b5ad55d6772dea0d6865df1" kindref="member">word</ref>-&gt;<ref refid="class_w_e_r_d_1a81edde8597a3d9fd8a664d703d332c41" kindref="member">flag</ref>(<ref refid="werd_8h_1ad6968adbf8f2cc44adf333ec96efb0beaa20dcde8552519bb81c4206b0e57a8ce" kindref="member">W_REP_CHAR</ref>))<sp/>num_leaders++;</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/>word_res<sp/>=<sp/>page_res_it.<ref refid="class_p_a_g_e___r_e_s___i_t_1ab29005f235cc738eebafb7d9ed6fe70b" kindref="member">forward</ref>();</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(page_res_it.<ref refid="class_p_a_g_e___r_e_s___i_t_1a312f58081e9410962396160eaf5f90e4" kindref="member">row</ref>()<sp/>==<sp/>this_row);</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/>info-&gt;ltr<sp/>=<sp/>ltr<sp/>&gt;=<sp/>rtl;</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/>info-&gt;has_leaders<sp/>=<sp/>num_leaders<sp/>&gt;<sp/>3;</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/>info-&gt;num_words<sp/>=<sp/>werds.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(werds.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_w_e_r_d___r_e_s" kindref="compound">WERD_RES</ref><sp/>*lword<sp/>=<sp/>werds[0],<sp/>*rword<sp/>=<sp/>werds[werds.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>()<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;lword_text<sp/>=<sp/>lword-&gt;<ref refid="class_w_e_r_d___r_e_s_1a3d42ac7ec121263e757c9b7160dfd50d" kindref="member">best_choice</ref>-&gt;<ref refid="class_w_e_r_d___c_h_o_i_c_e_1a41d740f0accccdfb245d34d554122116" kindref="member">unichar_string</ref>().<ref refid="class_s_t_r_i_n_g_1a32beee43ecab1bed8bebc3466896ad6e" kindref="member">string</ref>();</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;rword_text<sp/>=<sp/>rword-&gt;best_choice-&gt;unichar_string().string();</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;lword_box<sp/>=<sp/>lword-&gt;<ref refid="class_w_e_r_d___r_e_s_1afc15fa7c1b5ad55d6772dea0d6865df1" kindref="member">word</ref>-&gt;<ref refid="class_w_e_r_d_1a151bbfb39ecdef93ab1a14b0f9e4ac74" kindref="member">bounding_box</ref>();</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;rword_box<sp/>=<sp/>rword-&gt;word-&gt;bounding_box();</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a04498cd763cc4a381f1b7c2d0e17f020" kindref="member">LeftWordAttributes</ref>(lword-&gt;<ref refid="class_w_e_r_d___r_e_s_1a053a2aeeddc26a93a41a04fa08dd688a" kindref="member">uch_set</ref>,<sp/>lword-&gt;<ref refid="class_w_e_r_d___r_e_s_1a3d42ac7ec121263e757c9b7160dfd50d" kindref="member">best_choice</ref>,</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;lword_text,</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;info-&gt;lword_indicates_list_item,</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;info-&gt;lword_likely_starts_idea,</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;info-&gt;lword_likely_ends_idea);</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1aa0bc43fa3c52639420ed7eeb1093aa24" kindref="member">RightWordAttributes</ref>(rword-&gt;uch_set,<sp/>rword-&gt;best_choice,</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;rword_text,</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;info-&gt;rword_indicates_list_item,</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;info-&gt;rword_likely_starts_idea,</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;info-&gt;rword_likely_ends_idea);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>called<sp/>after<sp/>rows<sp/>have<sp/>been<sp/>identified<sp/>and<sp/>words<sp/>are<sp/>recognized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Much<sp/>of<sp/>this<sp/>could<sp/>be<sp/>implemented<sp/>before<sp/>word<sp/>recognition,<sp/>but<sp/>text<sp/>helps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>identify<sp/>bulleted<sp/>lists<sp/>and<sp/>gives<sp/>good<sp/>signals<sp/>for<sp/>sentence<sp/>boundaries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1ac3edfcbb6042dffc461c6e5737c72643" kindref="member">DetectParagraphs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_level,</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>after_text_recognition,</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MutableIterator<sp/>*block_start,</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;ParagraphModel *&gt;</ref><sp/>*models)<sp/>{</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>out<sp/>any<sp/>preconceived<sp/>notions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block_start-&gt;Empty(<ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7a5e87a35f16de644593c353159ede11d1" kindref="member">RIL_TEXTLINE</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><ref refid="class_b_l_o_c_k" kindref="compound">BLOCK</ref><sp/>*block<sp/>=<sp/>block_start-&gt;PageResIt()-&gt;block()-&gt;block;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/>block-&gt;<ref refid="class_b_l_o_c_k_1abd6dfaae322a74d32ae95c55dd1ca173" kindref="member">para_list</ref>()-&gt;clear();</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_image_block<sp/>=<sp/>block-&gt;<ref refid="class_p_d_b_l_k_1a6670779c69aca2d574e4a0590d9b3939" kindref="member">poly_block</ref>()<sp/>&amp;&amp;<sp/>!block-&gt;<ref refid="class_p_d_b_l_k_1a6670779c69aca2d574e4a0590d9b3939" kindref="member">poly_block</ref>()-&gt;<ref refid="class_p_o_l_y___b_l_o_c_k_1abd32dee532afe634cdbacffc0b53e660" kindref="member">IsText</ref>();</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>Tesseract<sp/>structures<sp/>to<sp/>RowInfos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>paragraph<sp/>detection<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/>MutableIterator<sp/>row(*block_start);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row.Empty(<ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7a5e87a35f16de644593c353159ede11d1" kindref="member">RIL_TEXTLINE</ref>))</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>input<sp/>already.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;RowInfo&gt;</ref><sp/>row_infos;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!row.PageResIt()-&gt;row())</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>empty<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/>row.PageResIt()-&gt;row()-&gt;row-&gt;<ref refid="class_r_o_w_1a3317bff779521c20f23da8cb26180716" kindref="member">set_para</ref>(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/>row_infos.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(RowInfo());</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/>RowInfo<sp/>&amp;ri<sp/>=<sp/>row_infos.<ref refid="class_generic_vector_1a6e6d6497a6f7dd999b6d591c15354167" kindref="member">back</ref>();</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1ae3a3364357e7b5531c9e77c579ea79f2" kindref="member">InitializeRowInfo</ref>(after_text_recognition,<sp/>row,<sp/>&amp;ri);</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!row.IsAtFinalElement(<ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7a2dcea8d4208c16055353029d26f9bf49" kindref="member">RIL_BLOCK</ref>,<sp/><ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7a5e87a35f16de644593c353159ede11d1" kindref="member">RIL_TEXTLINE</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row.Next(<ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7a5e87a35f16de644593c353159ede11d1" kindref="member">RIL_TEXTLINE</ref>));</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;re<sp/>called<sp/>before<sp/>text<sp/>recognition,<sp/>we<sp/>might<sp/>not<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tight<sp/>block<sp/>bounding<sp/>boxes,<sp/>so<sp/>trim<sp/>by<sp/>the<sp/>minimum<sp/>on<sp/>each<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row_infos.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_lmargin<sp/>=<sp/>row_infos[0].pix_ldistance;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_rmargin<sp/>=<sp/>row_infos[0].pix_rdistance;</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>row_infos.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row_infos[i].pix_ldistance<sp/>&lt;<sp/>min_lmargin)</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_lmargin<sp/>=<sp/>row_infos[i].pix_ldistance;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row_infos[i].pix_rdistance<sp/>&lt;<sp/>min_rmargin)</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_rmargin<sp/>=<sp/>row_infos[i].pix_rdistance;</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_lmargin<sp/>&gt;<sp/>0<sp/>||<sp/>min_rmargin<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>row_infos.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_infos[i].pix_ldistance<sp/>-=<sp/>min_lmargin;</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_infos[i].pix_rdistance<sp/>-=<sp/>min_rmargin;</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>the<sp/>paragraph<sp/>detection<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;PARA *&gt;</ref><sp/>row_owners;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;PARA *&gt;</ref><sp/>the_paragraphs;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_image_block)<sp/>{</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1ac3edfcbb6042dffc461c6e5737c72643" kindref="member">DetectParagraphs</ref>(debug_level,<sp/>&amp;row_infos,<sp/>&amp;row_owners,<sp/>block-&gt;<ref refid="class_b_l_o_c_k_1abd6dfaae322a74d32ae95c55dd1ca173" kindref="member">para_list</ref>(),</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>models);</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/>row_owners.<ref refid="class_generic_vector_1a6751521fd3eb461d81fc83ef93a0def3" kindref="member">init_to_size</ref>(row_infos.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>(),<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a9cafdf34c1f6a37446d3e656da69afdc" kindref="member">CanonicalizeDetectionResults</ref>(&amp;row_owners,<sp/>block-&gt;<ref refid="class_b_l_o_c_k_1abd6dfaae322a74d32ae95c55dd1ca173" kindref="member">para_list</ref>());</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>stitch<sp/>in<sp/>the<sp/>row_owners<sp/>into<sp/>the<sp/>rows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/>row<sp/>=<sp/>*block_start;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>row_owners.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!row.PageResIt()-&gt;row())</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>row.Next(<ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7a5e87a35f16de644593c353159ede11d1" kindref="member">RIL_TEXTLINE</ref>);</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/>row.PageResIt()-&gt;row()-&gt;row-&gt;<ref refid="class_r_o_w_1a3317bff779521c20f23da8cb26180716" kindref="member">set_para</ref>(row_owners[i]);</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/>row.Next(<ref refid="namespacetesseract_1aa26c22b65cc9765a0e747120f4287fd7a5e87a35f16de644593c353159ede11d1" kindref="member">RIL_TEXTLINE</ref>);</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/ccmain/paragraphs.cpp"/>
  </compounddef>
</doxygen>
