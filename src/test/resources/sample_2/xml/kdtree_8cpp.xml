<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="kdtree_8cpp" kind="file">
    <compoundname>kdtree.cpp</compoundname>
    <includes refid="kdtree_8h" local="yes">kdtree.h</includes>
    <includes refid="const_8h" local="yes">const.h</includes>
    <includes refid="emalloc_8h" local="yes">emalloc.h</includes>
    <includes refid="freelist_8h" local="yes">freelist.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">math.h</includes>
    <incdepgraph>
      <node id="25777">
        <label>cutil_class.h</label>
        <link refid="cutil__class_8h"/>
        <childnode refid="25778" relation="include">
        </childnode>
        <childnode refid="25791" relation="include">
        </childnode>
        <childnode refid="25774" relation="include">
        </childnode>
      </node>
      <node id="25803">
        <label>assert.h</label>
      </node>
      <node id="25773">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="25791">
        <label>const.h</label>
        <link refid="const_8h"/>
      </node>
      <node id="25766">
        <label>stdlib.h</label>
      </node>
      <node id="25761">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="25762" relation="include">
        </childnode>
      </node>
      <node id="25778">
        <label>ccutil.h</label>
        <link refid="ccutil_8h"/>
        <childnode refid="25779" relation="include">
        </childnode>
        <childnode refid="25771" relation="include">
        </childnode>
        <childnode refid="25774" relation="include">
        </childnode>
        <childnode refid="25788" relation="include">
        </childnode>
        <childnode refid="25768" relation="include">
        </childnode>
        <childnode refid="25786" relation="include">
        </childnode>
        <childnode refid="25789" relation="include">
        </childnode>
        <childnode refid="25790" relation="include">
        </childnode>
      </node>
      <node id="25799">
        <label>scrollview.h</label>
        <link refid="scrollview_8h"/>
        <childnode refid="25764" relation="include">
        </childnode>
      </node>
      <node id="25781">
        <label>serialis.h</label>
        <link refid="serialis_8h"/>
        <childnode refid="25766" relation="include">
        </childnode>
        <childnode refid="25765" relation="include">
        </childnode>
        <childnode refid="25764" relation="include">
        </childnode>
        <childnode refid="25775" relation="include">
        </childnode>
        <childnode refid="25771" relation="include">
        </childnode>
        <childnode refid="25782" relation="include">
        </childnode>
      </node>
      <node id="25794">
        <label>clst.h</label>
        <link refid="clst_8h"/>
        <childnode refid="25764" relation="include">
        </childnode>
        <childnode refid="25760" relation="include">
        </childnode>
        <childnode refid="25781" relation="include">
        </childnode>
        <childnode refid="25783" relation="include">
        </childnode>
      </node>
      <node id="25776">
        <label>stddef.h</label>
      </node>
      <node id="25785">
        <label>memory.h</label>
      </node>
      <node id="25802">
        <label>callcpp.h</label>
        <link refid="callcpp_8h"/>
        <childnode refid="25803" relation="include">
        </childnode>
        <childnode refid="25760" relation="include">
        </childnode>
        <childnode refid="25768" relation="include">
        </childnode>
        <childnode refid="25784" relation="include">
        </childnode>
      </node>
      <node id="25771">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="25760" relation="include">
        </childnode>
      </node>
      <node id="25762">
        <label>limits.h</label>
      </node>
      <node id="25759">
        <label>kdtree.h</label>
        <link refid="kdtree_8h"/>
        <childnode refid="25760" relation="include">
        </childnode>
        <childnode refid="25763" relation="include">
        </childnode>
        <childnode refid="25792" relation="include">
        </childnode>
      </node>
      <node id="25798">
        <label>ipoints.h</label>
        <link refid="ipoints_8h"/>
        <childnode refid="25796" relation="include">
        </childnode>
      </node>
      <node id="25789">
        <label>pthread.h</label>
      </node>
      <node id="25765">
        <label>string.h</label>
      </node>
      <node id="25787">
        <label>unicharmap.h</label>
        <link refid="unicharmap_8h"/>
        <childnode refid="25784" relation="include">
        </childnode>
      </node>
      <node id="25784">
        <label>unichar.h</label>
        <link refid="unichar_8h"/>
        <childnode refid="25785" relation="include">
        </childnode>
        <childnode refid="25765" relation="include">
        </childnode>
      </node>
      <node id="25763">
        <label>cutil.h</label>
        <link refid="cutil_8h"/>
        <childnode refid="25764" relation="include">
        </childnode>
        <childnode refid="25765" relation="include">
        </childnode>
        <childnode refid="25766" relation="include">
        </childnode>
        <childnode refid="25760" relation="include">
        </childnode>
        <childnode refid="25767" relation="include">
        </childnode>
        <childnode refid="25777" relation="include">
        </childnode>
      </node>
      <node id="25795">
        <label>rect.h</label>
        <link refid="rect_8h"/>
        <childnode refid="25796" relation="include">
        </childnode>
        <childnode refid="25797" relation="include">
        </childnode>
        <childnode refid="25773" relation="include">
        </childnode>
        <childnode refid="25799" relation="include">
        </childnode>
        <childnode refid="25767" relation="include">
        </childnode>
      </node>
      <node id="25770">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="25760" relation="include">
        </childnode>
      </node>
      <node id="25790">
        <label>semaphore.h</label>
      </node>
      <node id="25782">
        <label>fileerr.h</label>
        <link refid="fileerr_8h"/>
        <childnode refid="25771" relation="include">
        </childnode>
      </node>
      <node id="25779">
        <label>ambigs.h</label>
        <link refid="ambigs_8h"/>
        <childnode refid="25780" relation="include">
        </childnode>
        <childnode refid="25767" relation="include">
        </childnode>
        <childnode refid="25784" relation="include">
        </childnode>
        <childnode refid="25786" relation="include">
        </childnode>
        <childnode refid="25769" relation="include">
        </childnode>
      </node>
      <node id="25796">
        <label>math.h</label>
      </node>
      <node id="25783">
        <label>lsterr.h</label>
        <link refid="lsterr_8h"/>
        <childnode refid="25771" relation="include">
        </childnode>
      </node>
      <node id="25801">
        <label>emalloc.h</label>
        <link refid="emalloc_8h"/>
        <childnode refid="25760" relation="include">
        </childnode>
        <childnode refid="25802" relation="include">
        </childnode>
      </node>
      <node id="25800">
        <label>vecfuncs.h</label>
        <link refid="vecfuncs_8h"/>
        <childnode refid="25796" relation="include">
        </childnode>
        <childnode refid="25793" relation="include">
        </childnode>
      </node>
      <node id="25792">
        <label>ocrfeatures.h</label>
        <link refid="ocrfeatures_8h"/>
        <childnode refid="25793" relation="include">
        </childnode>
        <childnode refid="25764" relation="include">
        </childnode>
      </node>
      <node id="25768">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="25764" relation="include">
        </childnode>
        <childnode refid="25769" relation="include">
        </childnode>
        <childnode refid="25774" relation="include">
        </childnode>
      </node>
      <node id="25769">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="25764" relation="include">
        </childnode>
        <childnode refid="25766" relation="include">
        </childnode>
        <childnode refid="25770" relation="include">
        </childnode>
        <childnode refid="25771" relation="include">
        </childnode>
        <childnode refid="25772" relation="include">
        </childnode>
        <childnode refid="25773" relation="include">
        </childnode>
      </node>
      <node id="25775">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="25776" relation="include">
        </childnode>
        <childnode refid="25760" relation="include">
        </childnode>
      </node>
      <node id="25804">
        <label>freelist.h</label>
        <link refid="freelist_8h"/>
        <childnode refid="25764" relation="include">
        </childnode>
      </node>
      <node id="25780">
        <label>elst.h</label>
        <link refid="elst_8h"/>
        <childnode refid="25764" relation="include">
        </childnode>
        <childnode refid="25760" relation="include">
        </childnode>
        <childnode refid="25781" relation="include">
        </childnode>
        <childnode refid="25783" relation="include">
        </childnode>
      </node>
      <node id="25786">
        <label>unicharset.h</label>
        <link refid="unicharset_8h"/>
        <childnode refid="25771" relation="include">
        </childnode>
        <childnode refid="25772" relation="include">
        </childnode>
        <childnode refid="25774" relation="include">
        </childnode>
        <childnode refid="25770" relation="include">
        </childnode>
        <childnode refid="25784" relation="include">
        </childnode>
        <childnode refid="25787" relation="include">
        </childnode>
      </node>
      <node id="25797">
        <label>points.h</label>
        <link refid="points_8h"/>
        <childnode refid="25764" relation="include">
        </childnode>
        <childnode refid="25796" relation="include">
        </childnode>
        <childnode refid="25780" relation="include">
        </childnode>
        <childnode refid="25798" relation="include">
        </childnode>
      </node>
      <node id="25767">
        <label>tprintf.h</label>
        <link refid="tprintf_8h"/>
        <childnode refid="25768" relation="include">
        </childnode>
      </node>
      <node id="25760">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="25761" relation="include">
        </childnode>
      </node>
      <node id="25764">
        <label>stdio.h</label>
      </node>
      <node id="25758">
        <label>classify/kdtree.cpp</label>
        <link refid="kdtree.cpp"/>
        <childnode refid="25759" relation="include">
        </childnode>
        <childnode refid="25791" relation="include">
        </childnode>
        <childnode refid="25801" relation="include">
        </childnode>
        <childnode refid="25804" relation="include">
        </childnode>
        <childnode refid="25764" relation="include">
        </childnode>
        <childnode refid="25796" relation="include">
        </childnode>
      </node>
      <node id="25788">
        <label>tessdatamanager.h</label>
        <link refid="tessdatamanager_8h"/>
        <childnode refid="25764" relation="include">
        </childnode>
        <childnode refid="25760" relation="include">
        </childnode>
        <childnode refid="25767" relation="include">
        </childnode>
      </node>
      <node id="25774">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="25764" relation="include">
        </childnode>
        <childnode refid="25765" relation="include">
        </childnode>
        <childnode refid="25761" relation="include">
        </childnode>
        <childnode refid="25775" relation="include">
        </childnode>
      </node>
      <node id="25793">
        <label>blobs.h</label>
        <link refid="blobs_8h"/>
        <childnode refid="25794" relation="include">
        </childnode>
        <childnode refid="25795" relation="include">
        </childnode>
        <childnode refid="25800" relation="include">
        </childnode>
      </node>
      <node id="25772">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="25764" relation="include">
        </childnode>
        <childnode refid="25765" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_min_k" prot="public">MinK</innerclass>
    <innerclass refid="struct_min_k_1_1_element" prot="public">MinK::Element</innerclass>
    <innerclass refid="class_k_d_tree_search" prot="public">KDTreeSearch</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="kdtree_8cpp_1adbeb54abd64e764a1b38688776d36f77" prot="public" static="no">
        <name>Magnitude</name>
        <param><defname>X</defname></param>
        <initializer>((X) &lt; 0 ? -(X) : (X))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="31" column="9" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kdtree_8cpp_1a5a33bfaa4d9dcac7939f99f721bf61b9" prot="public" static="no">
        <name>NodeFound</name>
        <param><defname>N</defname></param>
        <param><defname>K</defname></param>
        <param><defname>D</defname></param>
        <initializer>(( (N)-&gt;Key == (K) ) &amp;&amp; ( (N)-&gt;Data == (D) ))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="32" column="9" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kdtree_8cpp_1a8904460bfbb91685971ab30c3025e0c5" prot="public" static="no">
        <name>MINSEARCH</name>
        <initializer>-<ref refid="host_8h_1a9adcee815220ec9db98062213806ed04" kindref="member">MAX_FLOAT32</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="37" column="9" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kdtree_8cpp_1a322efe6a34504778ebc6b3e2264789d5" prot="public" static="no">
        <name>MAXSEARCH</name>
        <initializer><ref refid="host_8h_1a9adcee815220ec9db98062213806ed04" kindref="member">MAX_FLOAT32</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="38" column="9" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="kdtree_8cpp_1a27db4a75a4936a0f8007e130805a706c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int NextLevel</definition>
        <argsstring>(KDTREE *tree, int level)</argsstring>
        <name>NextLevel</name>
        <param>
          <type><ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="41" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="41" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="kdtree_8cpp_1a92b996eb8120afe351d8e7ee82c96ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref> *</type>
        <definition>KDTREE* MakeKDTree</definition>
        <argsstring>(inT16 KeySize, const PARAM_DESC KeyDesc[])</argsstring>
        <name>MakeKDTree</name>
        <param>
          <type><ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref></type>
          <declname>KeySize</declname>
        </param>
        <param>
          <type>const <ref refid="struct_p_a_r_a_m___d_e_s_c" kindref="compound">PARAM_DESC</ref></type>
          <declname>KeyDesc</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new <ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref> based on the specified parameters. Parameters: KeySize # of dimensions in the K-D tree KeyDesc array of params to describe key dimensions </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="184" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="184" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="kdtree_8cpp_1a596422fd837fb6937c12be6b277423a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDStore</definition>
        <argsstring>(KDTREE *Tree, FLOAT32 *Key, void *Data)</argsstring>
        <name>KDStore</name>
        <param>
          <type><ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref> *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref> *</type>
          <declname>Key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This routine stores Data in the K-D tree specified by Tree using Key as an access key.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Tree</parametername>
</parameternamelist>
<parameterdescription>
<para>K-D tree in which data is to be stored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Key</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to key by which data can be retrieved </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to data to be stored in the tree</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: 3/10/89, DSJ, Created. 7/13/89, DSJ, Changed return to void.</para></simplesect>
</para>        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="209" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="209" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="kdtree_8cpp_1a270d3ef72c3f0097f249ca75c2aafa3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDDelete</definition>
        <argsstring>(KDTREE *Tree, FLOAT32 Key[], void *Data)</argsstring>
        <name>KDDelete</name>
        <param>
          <type><ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref> *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
          <declname>Key</declname>
          <array>[]</array>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine deletes a node from Tree. The node to be deleted is specified by the Key for the node and the Data contents of the node. These two pointers must be identical to the pointers that were used for the node when it was originally stored in the tree. A node will be deleted from the tree only if its key and data pointers are identical to Key and Data respectively. The tree is re-formed by removing the affected subtree and inserting all elements but the root.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Tree</parametername>
</parameternamelist>
<parameterdescription>
<para>K-D tree to delete node from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of node to be deleted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>data contents of node to be deleted</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Exceptions: none</para><simplesectsep/><para>History: 3/13/89, DSJ, Created. 7/13/89, DSJ, Specify node indirectly by key and data. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="269" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="269" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="kdtree_8cpp_1a9a3e49226adc75b00fee5116b401f3e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDNearestNeighborSearch</definition>
        <argsstring>(KDTREE *Tree, FLOAT32 Query[], int QuerySize, FLOAT32 MaxDistance, int *NumberOfResults, void **NBuffer, FLOAT32 DBuffer[])</argsstring>
        <name>KDNearestNeighborSearch</name>
        <param>
          <type><ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref> *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
          <declname>Query</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>QuerySize</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
          <declname>MaxDistance</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>NumberOfResults</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>NBuffer</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
          <declname>DBuffer</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="307" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="307" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="kdtree_8cpp_1abf3863949061899c45c47ec81c416234" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDWalk</definition>
        <argsstring>(KDTREE *Tree, void_proc action, void *context)</argsstring>
        <name>KDWalk</name>
        <param>
          <type><ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref> *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type><ref refid="cutil_8h_1adec17f7c242871b5c6efb7bdb4050b9e" kindref="member">void_proc</ref></type>
          <declname>action</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="339" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="kdtree_8cpp_1a37e4019555a2b5284b17237373913346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeKDTree</definition>
        <argsstring>(KDTREE *Tree)</argsstring>
        <name>FreeKDTree</name>
        <param>
          <type><ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref> *</type>
          <declname>Tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="346" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="346" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="kdtree_8cpp_1a5f4c5e8b3eca7978c68bb22144feba82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref> *</type>
        <definition>KDNODE* MakeKDNode</definition>
        <argsstring>(KDTREE *tree, FLOAT32 Key[], void *Data, int Index)</argsstring>
        <name>MakeKDNode</name>
        <param>
          <type><ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
          <declname>Key</declname>
          <array>[]</array>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="371" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="371" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="kdtree_8cpp_1a21cd787524746ef057017f6c2a543345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeKDNode</definition>
        <argsstring>(KDNODE *Node)</argsstring>
        <name>FreeKDNode</name>
        <param>
          <type><ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="407" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="407" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="kdtree_8cpp_1ae84afcc393b15041bde2f6b3038a2db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
        <definition>FLOAT32 DistanceSquared</definition>
        <argsstring>(int k, PARAM_DESC *dim, FLOAT32 p1[], FLOAT32 p2[])</argsstring>
        <name>DistanceSquared</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="struct_p_a_r_a_m___d_e_s_c" kindref="compound">PARAM_DESC</ref> *</type>
          <declname>dim</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
          <declname>p1</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
          <declname>p2</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="465" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="465" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="kdtree_8cpp_1abc92dabbfb9cb69dd9a8375f20c68da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
        <definition>FLOAT32 ComputeDistance</definition>
        <argsstring>(int k, PARAM_DESC *dim, FLOAT32 p1[], FLOAT32 p2[])</argsstring>
        <name>ComputeDistance</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="struct_p_a_r_a_m___d_e_s_c" kindref="compound">PARAM_DESC</ref> *</type>
          <declname>dim</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
          <declname>p1</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref></type>
          <declname>p2</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="486" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="486" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="kdtree_8cpp_1adc5707bb9d0b49db3a13959b01117567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Walk</definition>
        <argsstring>(KDTREE *tree, void_proc action, void *context, KDNODE *sub_tree, inT32 level)</argsstring>
        <name>Walk</name>
        <param>
          <type><ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="cutil_8h_1adec17f7c242871b5c6efb7bdb4050b9e" kindref="member">void_proc</ref></type>
          <declname>action</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref> *</type>
          <declname>sub_tree</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="547" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="547" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="kdtree_8cpp_1af3be65344ced84a11159bc0bea5de60f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void InsertNodes</definition>
        <argsstring>(KDTREE *tree, KDNODE *nodes)</argsstring>
        <name>InsertNodes</name>
        <param>
          <type><ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref> *</type>
          <declname>nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="558" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="558" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="kdtree_8cpp_1a59f352b6bc9971b0d7502d31060f7c44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeSubTree</definition>
        <argsstring>(KDNODE *sub_tree)</argsstring>
        <name>FreeSubTree</name>
        <param>
          <type><ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref> *</type>
          <declname>sub_tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" line="568" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/kdtree.cpp" bodystart="568" bodyend="574"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>**<sp/><sp/>Filename:<sp/><sp/>kdtree.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>**<sp/><sp/>Purpose:<sp/><sp/><sp/>Routines<sp/>for<sp/>managing<sp/>K-D<sp/>search<sp/>trees</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>**<sp/><sp/>Author:<sp/><sp/><sp/><sp/>Dan<sp/>Johnson</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**<sp/><sp/>History:<sp/><sp/>3/10/89,<sp/>DSJ,<sp/>Created.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/><sp/><sp/>5/23/89,<sp/>DSJ,<sp/>Added<sp/>circular<sp/>feature<sp/>capability.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/><sp/><sp/>7/13/89,<sp/>DSJ,<sp/>Made<sp/>tree<sp/>nodes<sp/>invisible<sp/>to<sp/>outside.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>**</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>**<sp/><sp/>(c)<sp/>Copyright<sp/>Hewlett-Packard<sp/>Company,<sp/>1988.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>**<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>**<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>**<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>**<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>**<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>**<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>**<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>**<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>**<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Include<sp/>Files<sp/>and<sp/>Type<sp/>Defines</highlight></codeline>
<codeline lineno="23"><highlight class="comment">-----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kdtree_8h" kindref="compound">kdtree.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="const_8h" kindref="compound">const.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="emalloc_8h" kindref="compound">emalloc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="freelist_8h" kindref="compound">freelist.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Magnitude(X)<sp/><sp/><sp/><sp/>((X)<sp/>&lt;<sp/>0<sp/>?<sp/>-(X)<sp/>:<sp/>(X))</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NodeFound(N,K,D)<sp/><sp/>((<sp/>(N)-&gt;Key<sp/>==<sp/>(K)<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>(N)-&gt;Data<sp/>==<sp/>(D)<sp/>))</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Global<sp/>Data<sp/>Definitions<sp/>and<sp/>Declarations</highlight></codeline>
<codeline lineno="36"><highlight class="comment">-----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINSEARCH<sp/>-MAX_FLOAT32</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MAXSEARCH<sp/>MAX_FLOAT32</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>to<sp/>find<sp/>the<sp/>next<sp/>essential<sp/>dimension<sp/>in<sp/>a<sp/>cycle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NextLevel(<ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref><sp/>*tree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>++level;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&gt;=<sp/>tree-&gt;<ref refid="struct_k_d_t_r_e_e_1a510104dbda460e78eb8d323502594ef2" kindref="member">KeySize</ref>)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>level<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tree-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[level].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6b9843466a3ddf33bfab18f85ca06501" kindref="member">NonEssential</ref>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>level;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>k<sp/>smallest-keyed<sp/>key-value<sp/>pairs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value&gt;</highlight></codeline>
<codeline lineno="53" refid="class_min_k" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_min_k" kindref="compound">MinK</ref><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="class_min_k_1aed8f58e958aa7f55998ce1283da2ec7c" kindref="member">MinK</ref>(Key<sp/>max_key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="class_min_k_1a62a791208da213b31a4f1058481eac6f" kindref="member">~MinK</ref>();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="struct_min_k_1_1_element" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_min_k_1_1_element" kindref="compound">Element</ref><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_min_k_1_1_element_1a1c187e4f62dbffd8b6507a5047827e6a" kindref="member">Element</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_min_k_1_1_element_1a1c187e4f62dbffd8b6507a5047827e6a" kindref="member">Element</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>v)<sp/>:<sp/><ref refid="struct_min_k_1_1_element_1a39b02be409ba976a5dc45ec311f00324" kindref="member">key</ref>(k),<sp/><ref refid="struct_min_k_1_1_element_1a0a18d0f92607def78bc23cb009f528bd" kindref="member">value</ref>(v)<sp/>{}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>Key<sp/><ref refid="struct_min_k_1_1_element_1a39b02be409ba976a5dc45ec311f00324" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/><ref refid="struct_min_k_1_1_element_1a0a18d0f92607def78bc23cb009f528bd" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_min_k_1a885e251124b47ef6d2ae3388572305f8" kindref="member">insert</ref>(Key<sp/>k,<sp/>Value<sp/>v);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/><ref refid="class_min_k_1a62ae0a6c821b62d98c6bde038e2b80a2" kindref="member">max_insertable_key</ref>();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_min_k_1a09234dac642fad372ea6fefe360f1e85" kindref="member">elements_count</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elements_count_;<sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Element*<sp/><ref refid="class_min_k_1ac45bba01f3e5ea642f99b462b345f976" kindref="member">elements</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elements_;<sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key<sp/>max_key_;<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>maximum<sp/>possible<sp/>Key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>Element*<sp/>elements_;<sp/><sp/></highlight><highlight class="comment">//<sp/>unsorted<sp/>array<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elements_count_;<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>number<sp/>of<sp/>results<sp/>collected<sp/>so<sp/>far</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_;<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>number<sp/>of<sp/>results<sp/>we<sp/>want<sp/>from<sp/>the<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_index_;<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>index<sp/>of<sp/>the<sp/>result<sp/>with<sp/>the<sp/>largest<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value&gt;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="class_min_k_1aed8f58e958aa7f55998ce1283da2ec7c" kindref="member">MinK&lt;Key, Value&gt;::MinK</ref>(Key<sp/>max_key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k)<sp/>:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>max_key_(max_key),<sp/>elements_count_(0),<sp/>k_(k<sp/>&lt;<sp/>1<sp/>?<sp/>1<sp/>:<sp/>k),<sp/>max_index_(0)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>elements_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_min_k_1_1_element_1a1c187e4f62dbffd8b6507a5047827e6a" kindref="member">Element</ref>[k_];</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value&gt;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="class_min_k_1a62a791208da213b31a4f1058481eac6f" kindref="member">MinK&lt;Key, Value&gt;::~MinK</ref>()<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]elements_;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value&gt;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/><ref refid="class_min_k_1a62ae0a6c821b62d98c6bde038e2b80a2" kindref="member">MinK&lt;Key, Value&gt;::max_insertable_key</ref>()<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elements_count_<sp/>&lt;<sp/>k_)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_key_;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elements_[max_index_].<ref refid="struct_min_k_1_1_element_1a39b02be409ba976a5dc45ec311f00324" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value&gt;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_min_k_1a885e251124b47ef6d2ae3388572305f8" kindref="member">MinK&lt;Key, Value&gt;::insert</ref>(Key<sp/>key,<sp/>Value<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elements_count_<sp/>&lt;<sp/>k_)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>elements_[elements_count_++]<sp/>=<sp/>Element(key,<sp/>value);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>&gt;<sp/>elements_[max_index_].key)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_index_<sp/>=<sp/>elements_count_<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>&lt;<sp/>elements_[max_index_].key)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evict<sp/>the<sp/>largest<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>elements_[max_index_]<sp/>=<sp/>Element(key,<sp/>value);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recompute<sp/>max_index_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>elements_count_;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elements_[i].key<sp/>&gt;<sp/>elements_[max_index_].key)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_index_<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>class<sp/>for<sp/>searching<sp/>for<sp/>the<sp/>k<sp/>closest<sp/>points<sp/>to<sp/>query_point<sp/>in<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="class_k_d_tree_search" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_k_d_tree_search" kindref="compound">KDTreeSearch</ref><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><ref refid="class_k_d_tree_search" kindref="compound">KDTreeSearch</ref>(<ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref>*<sp/>tree,<sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>*query_point,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_closest);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>~<ref refid="class_k_d_tree_search" kindref="compound">KDTreeSearch</ref>();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>k<sp/>nearest<sp/>points&apos;<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*result_count,<sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>*distances,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**results);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SearchRec(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Level,<sp/><ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref><sp/>*SubTree);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BoxIntersectsSearch(<ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>*lower,<sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>*upper);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref><sp/>*tree_;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>*query_point_;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><ref refid="class_min_k" kindref="compound">MinK&lt;FLOAT32, void *&gt;</ref>*<sp/>results_;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>*sb_min_;<sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>box<sp/>minimum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>*sb_max_;<sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>box<sp/>maximum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">};</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><ref refid="class_k_d_tree_search_1a55ef5552589328350716d6f5a57efa8f" kindref="member">KDTreeSearch::KDTreeSearch</ref>(<ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref>*<sp/>tree,<sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>*query_point,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_closest)<sp/>:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>tree_(tree),</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>query_point_(query_point)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>results_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_min_k" kindref="compound">MinK&lt;FLOAT32, void *&gt;</ref>(<ref refid="kdtree_8cpp_1a322efe6a34504778ebc6b3e2264789d5" kindref="member">MAXSEARCH</ref>,<sp/>k_closest);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>sb_min_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref>[tree-&gt;<ref refid="struct_k_d_t_r_e_e_1a510104dbda460e78eb8d323502594ef2" kindref="member">KeySize</ref>];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>sb_max_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref>[tree-&gt;<ref refid="struct_k_d_t_r_e_e_1a510104dbda460e78eb8d323502594ef2" kindref="member">KeySize</ref>];</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><ref refid="class_k_d_tree_search_1affd80997a38a7583bb69b648510de576" kindref="member">KDTreeSearch::~KDTreeSearch</ref>()<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>results_;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>sb_min_;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>sb_max_;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Locate<sp/>the<sp/>k_closest<sp/>points<sp/>to<sp/>query_point_,<sp/>and<sp/>return<sp/>their<sp/>distances<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>data<sp/>into<sp/>the<sp/>given<sp/>buffers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_d_tree_search_1a6771cb4c8a3637f721539357aaa8cf76" kindref="member">KDTreeSearch::Search</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*result_count,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>*distances,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**results)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tree_-&gt;<ref refid="struct_k_d_t_r_e_e_1ab52e8a6004fc595de526dfa831c2e725" kindref="member">Root</ref>.<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref><sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>*result_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tree_-&gt;<ref refid="struct_k_d_t_r_e_e_1a510104dbda460e78eb8d323502594ef2" kindref="member">KeySize</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb_min_[i]<sp/>=<sp/>tree_-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6445e8e433a99239e56c3218437f2695" kindref="member">Min</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb_max_[i]<sp/>=<sp/>tree_-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a73e76f946bbd324e60914a991d3343d1" kindref="member">Max</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>SearchRec(0,<sp/>tree_-&gt;<ref refid="struct_k_d_t_r_e_e_1ab52e8a6004fc595de526dfa831c2e725" kindref="member">Root</ref>.<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="oldlist_8cpp_1acd4ea858d7133e40518e0832ff9d94b2" kindref="member">count</ref><sp/>=<sp/>results_-&gt;<ref refid="class_min_k_1a09234dac642fad372ea6fefe360f1e85" kindref="member">elements_count</ref>();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>*result_count<sp/>=<sp/><ref refid="oldlist_8cpp_1acd4ea858d7133e40518e0832ff9d94b2" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="oldlist_8cpp_1acd4ea858d7133e40518e0832ff9d94b2" kindref="member">count</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>distances[j]<sp/>=<sp/>(<ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref>)<sp/>sqrt((<ref refid="host_8h_1aa8336782d864ba03efadb73a51260961" kindref="member">FLOAT64</ref>)results_-&gt;<ref refid="class_min_k_1ac45bba01f3e5ea642f99b462b345f976" kindref="member">elements</ref>()[j].key);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>results[j]<sp/>=<sp/>results_-&gt;<ref refid="class_min_k_1ac45bba01f3e5ea642f99b462b345f976" kindref="member">elements</ref>()[j].value;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Public<sp/>Code</highlight></codeline>
<codeline lineno="178"><highlight class="comment">-----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref><sp/>*<ref refid="kdtree_8cpp_1a92b996eb8120afe351d8e7ee82c96ece" kindref="member">MakeKDTree</ref>(<ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref><sp/>KeySize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_p_a_r_a_m___d_e_s_c" kindref="compound">PARAM_DESC</ref><sp/>KeyDesc[])<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref><sp/>*KDTree<sp/>=<sp/>(<ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref><sp/>*)<sp/><ref refid="emalloc_8cpp_1a55f2088f1a7b3333bb5c7275ab726bba" kindref="member">Emalloc</ref>(</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref>)<sp/>+<sp/>(KeySize<sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_a_r_a_m___d_e_s_c" kindref="compound">PARAM_DESC</ref>));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>KeySize;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>KDTree-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6b9843466a3ddf33bfab18f85ca06501" kindref="member">NonEssential</ref><sp/>=<sp/>KeyDesc[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6b9843466a3ddf33bfab18f85ca06501" kindref="member">NonEssential</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>KDTree-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a55807f1e0be0daba2a33380ea29b2f1d" kindref="member">Circular</ref><sp/>=<sp/>KeyDesc[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a55807f1e0be0daba2a33380ea29b2f1d" kindref="member">Circular</ref>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(KeyDesc[i].Circular)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KDTree-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6445e8e433a99239e56c3218437f2695" kindref="member">Min</ref><sp/>=<sp/>KeyDesc[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6445e8e433a99239e56c3218437f2695" kindref="member">Min</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KDTree-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a73e76f946bbd324e60914a991d3343d1" kindref="member">Max</ref><sp/>=<sp/>KeyDesc[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a73e76f946bbd324e60914a991d3343d1" kindref="member">Max</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KDTree-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a031dddcdc1744e777435f8ceea197448" kindref="member">Range</ref><sp/>=<sp/>KeyDesc[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a73e76f946bbd324e60914a991d3343d1" kindref="member">Max</ref><sp/>-<sp/>KeyDesc[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6445e8e433a99239e56c3218437f2695" kindref="member">Min</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KDTree-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a1df92d879d7ec8ea6662e956d27154b5" kindref="member">HalfRange</ref><sp/>=<sp/>KDTree-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a031dddcdc1744e777435f8ceea197448" kindref="member">Range</ref><sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KDTree-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a7c7bec15766be3633c649a0a9409b512" kindref="member">MidRange</ref><sp/>=<sp/>(KeyDesc[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a73e76f946bbd324e60914a991d3343d1" kindref="member">Max</ref><sp/>+<sp/>KeyDesc[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6445e8e433a99239e56c3218437f2695" kindref="member">Min</ref>)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KDTree-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6445e8e433a99239e56c3218437f2695" kindref="member">Min</ref><sp/>=<sp/><ref refid="kdtree_8cpp_1a8904460bfbb91685971ab30c3025e0c5" kindref="member">MINSEARCH</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KDTree-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[i].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a73e76f946bbd324e60914a991d3343d1" kindref="member">Max</ref><sp/>=<sp/><ref refid="kdtree_8cpp_1a322efe6a34504778ebc6b3e2264789d5" kindref="member">MAXSEARCH</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>KDTree-&gt;<ref refid="struct_k_d_t_r_e_e_1a510104dbda460e78eb8d323502594ef2" kindref="member">KeySize</ref><sp/>=<sp/>KeySize;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>KDTree-&gt;<ref refid="struct_k_d_t_r_e_e_1ab52e8a6004fc595de526dfa831c2e725" kindref="member">Root</ref>.<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref><sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>KDTree-&gt;<ref refid="struct_k_d_t_r_e_e_1ab52e8a6004fc595de526dfa831c2e725" kindref="member">Root</ref>.<ref refid="struct_k_d_n_o_d_e_1a699e9e67472e12f86bbb5c1effdb4fa3" kindref="member">Right</ref><sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>KDTree;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="kdtree_8cpp_1a596422fd837fb6937c12be6b277423a0" kindref="member">KDStore</ref>(<ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref><sp/>*Tree,<sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>*Key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Level;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref><sp/>*Node;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref><sp/>**PtrToNode;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>PtrToNode<sp/>=<sp/>&amp;(Tree-&gt;<ref refid="struct_k_d_t_r_e_e_1ab52e8a6004fc595de526dfa831c2e725" kindref="member">Root</ref>.<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>Node<sp/>=<sp/>*PtrToNode;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>Level<sp/>=<sp/>NextLevel(Tree,<sp/>-1);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Node<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Key[Level]<sp/>&lt;<sp/>Node-&gt;<ref refid="struct_k_d_n_o_d_e_1aba5d7ca0a419ab7ad6a7cbcdb79add07" kindref="member">BranchPoint</ref>)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PtrToNode<sp/>=<sp/>&amp;(Node-&gt;<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Key[Level]<sp/>&gt;<sp/>Node-&gt;<ref refid="struct_k_d_n_o_d_e_1a448480738475fb5bdb2e35b51f40f1d1" kindref="member">LeftBranch</ref>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;<ref refid="struct_k_d_n_o_d_e_1a448480738475fb5bdb2e35b51f40f1d1" kindref="member">LeftBranch</ref><sp/>=<sp/>Key[Level];</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PtrToNode<sp/>=<sp/>&amp;(Node-&gt;<ref refid="struct_k_d_n_o_d_e_1a699e9e67472e12f86bbb5c1effdb4fa3" kindref="member">Right</ref>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Key[Level]<sp/>&lt;<sp/>Node-&gt;<ref refid="struct_k_d_n_o_d_e_1a1c8fd73abb446c3ceaea4cb29ef60b2c" kindref="member">RightBranch</ref>)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;<ref refid="struct_k_d_n_o_d_e_1a1c8fd73abb446c3ceaea4cb29ef60b2c" kindref="member">RightBranch</ref><sp/>=<sp/>Key[Level];</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>Level<sp/>=<sp/>NextLevel(Tree,<sp/>Level);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>*PtrToNode;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>*PtrToNode<sp/>=<sp/><ref refid="kdtree_8cpp_1a5f4c5e8b3eca7978c68bb22144feba82" kindref="member">MakeKDNode</ref>(Tree,<sp/>Key,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>Data,<sp/>Level);</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>KDStore<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight></codeline>
<codeline lineno="268"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><ref refid="kdtree_8cpp_1a270d3ef72c3f0097f249ca75c2aafa3c" kindref="member">KDDelete</ref><sp/>(<ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref><sp/>*<sp/>Tree,<sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>Key[],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Level;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref><sp/>*Current;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref><sp/>*Father;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>search<sp/>at<sp/>root<sp/>of<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>Father<sp/>=<sp/>&amp;(Tree-&gt;<ref refid="struct_k_d_t_r_e_e_1ab52e8a6004fc595de526dfa831c2e725" kindref="member">Root</ref>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>Current<sp/>=<sp/>Father-&gt;<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>Level<sp/>=<sp/>NextLevel(Tree,<sp/>-1);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>search<sp/>tree<sp/>for<sp/>node<sp/>to<sp/>be<sp/>deleted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((Current<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>&amp;&amp;<sp/>(!<ref refid="kdtree_8cpp_1a5a33bfaa4d9dcac7939f99f721bf61b9" kindref="member">NodeFound</ref><sp/>(Current,<sp/>Key,<sp/>Data)))<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>Father<sp/>=<sp/>Current;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Key[Level]<sp/>&lt;<sp/>Current-&gt;<ref refid="struct_k_d_n_o_d_e_1aba5d7ca0a419ab7ad6a7cbcdb79add07" kindref="member">BranchPoint</ref>)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Current<sp/>=<sp/>Current-&gt;<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref>;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Current<sp/>=<sp/>Current-&gt;<ref refid="struct_k_d_n_o_d_e_1a699e9e67472e12f86bbb5c1effdb4fa3" kindref="member">Right</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>Level<sp/>=<sp/>NextLevel(Tree,<sp/>Level);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Current<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>node<sp/>to<sp/>be<sp/>deleted<sp/>was<sp/>found<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Current<sp/>==<sp/>Father-&gt;<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref>)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Father-&gt;<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref><sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Father-&gt;<ref refid="struct_k_d_n_o_d_e_1a448480738475fb5bdb2e35b51f40f1d1" kindref="member">LeftBranch</ref><sp/>=<sp/>Tree-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[Level].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6445e8e433a99239e56c3218437f2695" kindref="member">Min</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Father-&gt;<ref refid="struct_k_d_n_o_d_e_1a699e9e67472e12f86bbb5c1effdb4fa3" kindref="member">Right</ref><sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Father-&gt;<ref refid="struct_k_d_n_o_d_e_1a1c8fd73abb446c3ceaea4cb29ef60b2c" kindref="member">RightBranch</ref><sp/>=<sp/>Tree-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[Level].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a73e76f946bbd324e60914a991d3343d1" kindref="member">Max</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kdtree_8cpp_1af3be65344ced84a11159bc0bea5de60f" kindref="member">InsertNodes</ref>(Tree,<sp/>Current-&gt;<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kdtree_8cpp_1af3be65344ced84a11159bc0bea5de60f" kindref="member">InsertNodes</ref>(Tree,<sp/>Current-&gt;<ref refid="struct_k_d_n_o_d_e_1a699e9e67472e12f86bbb5c1effdb4fa3" kindref="member">Right</ref>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kdtree_8cpp_1a59f352b6bc9971b0d7502d31060f7c44" kindref="member">FreeSubTree</ref>(Current);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>KDDelete<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="kdtree_8cpp_1a9a3e49226adc75b00fee5116b401f3e3" kindref="member">KDNearestNeighborSearch</ref>(</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref><sp/>*Tree,<sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>Query[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>QuerySize,<sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>MaxDistance,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*NumberOfResults,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**NBuffer,<sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>DBuffer[])<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>**<sp/><sp/>Parameters:</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>Tree<sp/><sp/><sp/><sp/>ptr<sp/>to<sp/>K-D<sp/>tree<sp/>to<sp/>be<sp/>searched</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>Query<sp/><sp/><sp/><sp/>ptr<sp/>to<sp/>query<sp/>key<sp/>(point<sp/>in<sp/>D-space)</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>QuerySize<sp/><sp/>number<sp/>of<sp/>nearest<sp/>neighbors<sp/>to<sp/>be<sp/>found</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>MaxDistance<sp/><sp/>all<sp/>neighbors<sp/>must<sp/>be<sp/>within<sp/>this<sp/>distance</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>NBuffer<sp/><sp/><sp/><sp/>ptr<sp/>to<sp/>QuerySize<sp/>buffer<sp/>to<sp/>hold<sp/>nearest<sp/>neighbors</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>DBuffer<sp/><sp/><sp/><sp/>ptr<sp/>to<sp/>QuerySize<sp/>buffer<sp/>to<sp/>hold<sp/>distances</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>nearest<sp/>neighbor<sp/>to<sp/>query<sp/>point</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>**<sp/><sp/>Operation:</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>This<sp/>routine<sp/>searches<sp/>the<sp/>K-D<sp/>tree<sp/>specified<sp/>by<sp/>Tree<sp/>and</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>finds<sp/>the<sp/>QuerySize<sp/>nearest<sp/>neighbors<sp/>of<sp/>Query.<sp/><sp/>All<sp/>neighbors</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>must<sp/>be<sp/>within<sp/>MaxDistance<sp/>of<sp/>Query.<sp/><sp/>The<sp/>data<sp/>contents<sp/>of</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>the<sp/>nearest<sp/>neighbors</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>are<sp/>placed<sp/>in<sp/>NBuffer<sp/>and<sp/>their<sp/>distances<sp/>from<sp/>Query<sp/>are</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>placed<sp/>in<sp/>DBuffer.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>**<sp/><sp/>Return:<sp/>Number<sp/>of<sp/>nearest<sp/>neighbors<sp/>actually<sp/>found</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>**<sp/><sp/>Exceptions:<sp/>none</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>**<sp/><sp/>History:</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>3/10/89,<sp/>DSJ,<sp/>Created.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>7/13/89,<sp/>DSJ,<sp/>Return<sp/>contents<sp/>of<sp/>node<sp/>instead<sp/>of<sp/>node<sp/>itself.</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><ref refid="class_k_d_tree_search" kindref="compound">KDTreeSearch</ref><sp/><ref refid="oldlist_8cpp_1a1d8af9328f064a9df6d6f88336dd054e" kindref="member">search</ref>(Tree,<sp/>Query,<sp/>QuerySize);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><ref refid="oldlist_8cpp_1a1d8af9328f064a9df6d6f88336dd054e" kindref="member">search</ref>.Search(NumberOfResults,<sp/>DBuffer,<sp/>NBuffer);</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Walk<sp/>a<sp/>given<sp/>Tree<sp/>with<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="kdtree_8cpp_1abf3863949061899c45c47ec81c416234" kindref="member">KDWalk</ref>(<ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref><sp/>*Tree,<sp/><ref refid="cutil_8h_1adec17f7c242871b5c6efb7bdb4050b9e" kindref="member">void_proc</ref><sp/>action,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tree-&gt;<ref refid="struct_k_d_t_r_e_e_1ab52e8a6004fc595de526dfa831c2e725" kindref="member">Root</ref>.<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref><sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kdtree_8cpp_1adc5707bb9d0b49db3a13959b01117567" kindref="member">Walk</ref>(Tree,<sp/>action,<sp/>context,<sp/>Tree-&gt;<ref refid="struct_k_d_t_r_e_e_1ab52e8a6004fc595de526dfa831c2e725" kindref="member">Root</ref>.<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref>,<sp/>NextLevel(Tree,<sp/>-1));</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="kdtree_8cpp_1a37e4019555a2b5284b17237373913346" kindref="member">FreeKDTree</ref>(<ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref><sp/>*Tree)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>**<sp/><sp/>Parameters:</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>Tree<sp/><sp/>tree<sp/>data<sp/>structure<sp/>to<sp/>be<sp/>released</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>**<sp/><sp/>Operation:</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>This<sp/>routine<sp/>frees<sp/>all<sp/>memory<sp/>which<sp/>is<sp/>allocated<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>specified<sp/>KD-tree.<sp/><sp/>This<sp/>includes<sp/>the<sp/>data<sp/>structure<sp/>for</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>the<sp/>kd-tree<sp/>itself<sp/>plus<sp/>the<sp/>data<sp/>structures<sp/>for<sp/>each<sp/>node</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>in<sp/>the<sp/>tree.<sp/><sp/>It<sp/>does<sp/>not<sp/>include<sp/>the<sp/>Key<sp/>and<sp/>Data<sp/>items</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>which<sp/>are<sp/>pointed<sp/>to<sp/>by<sp/>the<sp/>nodes.<sp/><sp/>This<sp/>memory<sp/>is<sp/>left</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>untouched.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>**<sp/><sp/>Return:<sp/>none</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>**<sp/><sp/>Exceptions:<sp/>none</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>**<sp/><sp/>History:</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>5/26/89,<sp/>DSJ,<sp/>Created.</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><ref refid="kdtree_8cpp_1a59f352b6bc9971b0d7502d31060f7c44" kindref="member">FreeSubTree</ref>(Tree-&gt;<ref refid="struct_k_d_t_r_e_e_1ab52e8a6004fc595de526dfa831c2e725" kindref="member">Root</ref>.<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref>);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><ref refid="freelist_8cpp_1ab462a857e5edf360ae4881bcc92a0bcf" kindref="member">memfree</ref>(Tree);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FreeKDTree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Private<sp/>Code</highlight></codeline>
<codeline lineno="369"><highlight class="comment">-----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref><sp/>*<ref refid="kdtree_8cpp_1a5f4c5e8b3eca7978c68bb22144feba82" kindref="member">MakeKDNode</ref>(<ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref><sp/>*tree,<sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>Key[],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>**<sp/><sp/>Parameters:</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/><sp/>The<sp/>tree<sp/>to<sp/>create<sp/>the<sp/>node<sp/>for</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/><sp/><sp/>Key<sp/><sp/>Access<sp/>key<sp/>for<sp/>new<sp/>node<sp/>in<sp/>KD<sp/>tree</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/><sp/><sp/>Data<sp/><sp/>ptr<sp/>to<sp/>data<sp/>to<sp/>be<sp/>stored<sp/>in<sp/>new<sp/>node</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/><sp/>index<sp/>of<sp/>Key<sp/>to<sp/>branch<sp/>on</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>**<sp/><sp/>Operation:</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>This<sp/>routine<sp/>allocates<sp/>memory<sp/>for<sp/>a<sp/>new<sp/>K-D<sp/>tree<sp/>node</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>and<sp/>places<sp/>the<sp/>specified<sp/>Key<sp/>and<sp/>Data<sp/>into<sp/>it.<sp/><sp/>The</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>left<sp/>and<sp/>right<sp/>subtree<sp/>pointers<sp/>for<sp/>the<sp/>node<sp/>are</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>initialized<sp/>to<sp/>empty<sp/>subtrees.</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>**<sp/><sp/>Return:</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>new<sp/>K-D<sp/>tree<sp/>node</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>**<sp/><sp/>Exceptions:</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>None</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>**<sp/><sp/>History:</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/>3/11/89,<sp/>DSJ,<sp/>Created.</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref><sp/>*NewNode;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>NewNode<sp/>=<sp/>(<ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref><sp/>*)<sp/><ref refid="emalloc_8cpp_1a55f2088f1a7b3333bb5c7275ab726bba" kindref="member">Emalloc</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref>));</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>NewNode-&gt;<ref refid="struct_k_d_n_o_d_e_1a977838423c3b5e17ecfd0242c39a8202" kindref="member">Key</ref><sp/>=<sp/>Key;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>NewNode-&gt;<ref refid="struct_k_d_n_o_d_e_1afd5eeb76bcf3d1ba9b387e0cd4e9ce16" kindref="member">Data</ref><sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>NewNode-&gt;<ref refid="struct_k_d_n_o_d_e_1aba5d7ca0a419ab7ad6a7cbcdb79add07" kindref="member">BranchPoint</ref><sp/>=<sp/>Key[Index];</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>NewNode-&gt;<ref refid="struct_k_d_n_o_d_e_1a448480738475fb5bdb2e35b51f40f1d1" kindref="member">LeftBranch</ref><sp/>=<sp/>tree-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[Index].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6445e8e433a99239e56c3218437f2695" kindref="member">Min</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>NewNode-&gt;<ref refid="struct_k_d_n_o_d_e_1a1c8fd73abb446c3ceaea4cb29ef60b2c" kindref="member">RightBranch</ref><sp/>=<sp/>tree-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>[Index].<ref refid="struct_p_a_r_a_m___d_e_s_c_1a73e76f946bbd324e60914a991d3343d1" kindref="member">Max</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>NewNode-&gt;<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref><sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>NewNode-&gt;<ref refid="struct_k_d_n_o_d_e_1a699e9e67472e12f86bbb5c1effdb4fa3" kindref="member">Right</ref><sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NewNode;</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MakeKDNode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="kdtree_8cpp_1a21cd787524746ef057017f6c2a543345" kindref="member">FreeKDNode</ref>(<ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><ref refid="freelist_8cpp_1ab462a857e5edf360ae4881bcc92a0bcf" kindref="member">memfree</ref><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Node);</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Recursively<sp/>accumulate<sp/>the<sp/>k_closest<sp/>points<sp/>to<sp/>query_point_<sp/>into<sp/>results_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Parameters:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Level<sp/><sp/>level<sp/>in<sp/>tree<sp/>of<sp/>sub-tree<sp/>to<sp/>be<sp/>searched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>SubTree<sp/><sp/>sub-tree<sp/>to<sp/>be<sp/>searched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>KDTreeSearch::SearchRec(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/><ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref><sp/>*sub_tree)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&gt;=<sp/>tree_-&gt;<ref refid="struct_k_d_t_r_e_e_1a510104dbda460e78eb8d323502594ef2" kindref="member">KeySize</ref>)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>level<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!BoxIntersectsSearch(sb_min_,<sp/>sb_max_))</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>results_-&gt;<ref refid="class_min_k_1a885e251124b47ef6d2ae3388572305f8" kindref="member">insert</ref>(<ref refid="kdtree_8cpp_1ae84afcc393b15041bde2f6b3038a2db4" kindref="member">DistanceSquared</ref>(tree_-&gt;<ref refid="struct_k_d_t_r_e_e_1a510104dbda460e78eb8d323502594ef2" kindref="member">KeySize</ref>,<sp/>tree_-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_point_,<sp/>sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a977838423c3b5e17ecfd0242c39a8202" kindref="member">Key</ref>),</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1afd5eeb76bcf3d1ba9b387e0cd4e9ce16" kindref="member">Data</ref>);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(query_point_[level]<sp/>&lt;<sp/>sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1aba5d7ca0a419ab7ad6a7cbcdb79add07" kindref="member">BranchPoint</ref>)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref><sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>tmp<sp/>=<sp/>sb_max_[level];</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb_max_[level]<sp/>=<sp/>sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a448480738475fb5bdb2e35b51f40f1d1" kindref="member">LeftBranch</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SearchRec(NextLevel(tree_,<sp/>level),<sp/>sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb_max_[level]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a699e9e67472e12f86bbb5c1effdb4fa3" kindref="member">Right</ref><sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>tmp<sp/>=<sp/>sb_min_[level];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb_min_[level]<sp/>=<sp/>sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a1c8fd73abb446c3ceaea4cb29ef60b2c" kindref="member">RightBranch</ref>;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SearchRec(NextLevel(tree_,<sp/>level),<sp/>sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a699e9e67472e12f86bbb5c1effdb4fa3" kindref="member">Right</ref>);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb_min_[level]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a699e9e67472e12f86bbb5c1effdb4fa3" kindref="member">Right</ref><sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>tmp<sp/>=<sp/>sb_min_[level];</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb_min_[level]<sp/>=<sp/>sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a1c8fd73abb446c3ceaea4cb29ef60b2c" kindref="member">RightBranch</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SearchRec(NextLevel(tree_,<sp/>level),<sp/>sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a699e9e67472e12f86bbb5c1effdb4fa3" kindref="member">Right</ref>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb_min_[level]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref><sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>tmp<sp/>=<sp/>sb_max_[level];</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb_max_[level]<sp/>=<sp/>sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a448480738475fb5bdb2e35b51f40f1d1" kindref="member">LeftBranch</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SearchRec(NextLevel(tree_,<sp/>level),<sp/>sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref>);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb_max_[level]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>Euclidean<sp/>distance<sp/>squared<sp/>between<sp/>p1<sp/>and<sp/>p2<sp/>for<sp/>all<sp/>essential</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Parameters:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/><sp/><sp/><sp/><sp/><sp/>keys<sp/>are<sp/>in<sp/>k-space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim<sp/><sp/><sp/><sp/>dimension<sp/>descriptions<sp/>(essential,<sp/>circular,<sp/>etc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1,p2<sp/><sp/>two<sp/>different<sp/>points<sp/>in<sp/>K-D<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/><ref refid="kdtree_8cpp_1ae84afcc393b15041bde2f6b3038a2db4" kindref="member">DistanceSquared</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/><ref refid="struct_p_a_r_a_m___d_e_s_c" kindref="compound">PARAM_DESC</ref><sp/>*dim,<sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>p1[],<sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>p2[])<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>total_distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>k<sp/>&gt;<sp/>0;<sp/>k--,<sp/>p1++,<sp/>p2++,<sp/>dim++)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim-&gt;<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6b9843466a3ddf33bfab18f85ca06501" kindref="member">NonEssential</ref>)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>dimension_distance<sp/>=<sp/>*p1<sp/>-<sp/>*p2;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>this<sp/>dimension<sp/>is<sp/>circular<sp/>-<sp/>check<sp/>wraparound<sp/>distance<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim-&gt;<ref refid="struct_p_a_r_a_m___d_e_s_c_1a55807f1e0be0daba2a33380ea29b2f1d" kindref="member">Circular</ref>)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dimension_distance<sp/>=<sp/><ref refid="kdtree_8cpp_1adbeb54abd64e764a1b38688776d36f77" kindref="member">Magnitude</ref>(dimension_distance);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>wrap_distance<sp/>=<sp/>dim-&gt;<ref refid="struct_p_a_r_a_m___d_e_s_c_1a73e76f946bbd324e60914a991d3343d1" kindref="member">Max</ref><sp/>-<sp/>dim-&gt;<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6445e8e433a99239e56c3218437f2695" kindref="member">Min</ref><sp/>-<sp/>dimension_distance;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dimension_distance<sp/>=<sp/><ref refid="ndminx_8h_1a74e75242132eaabbc1c512488a135926" kindref="member">MIN</ref>(dimension_distance,<sp/>wrap_distance);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>total_distance<sp/>+=<sp/>dimension_distance<sp/>*<sp/>dimension_distance;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_distance;</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/><ref refid="kdtree_8cpp_1abc92dabbfb9cb69dd9a8375f20c68da1" kindref="member">ComputeDistance</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/><ref refid="struct_p_a_r_a_m___d_e_s_c" kindref="compound">PARAM_DESC</ref><sp/>*dim,<sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>p1[],<sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>p2[])<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(<ref refid="kdtree_8cpp_1ae84afcc393b15041bde2f6b3038a2db4" kindref="member">DistanceSquared</ref>(k,<sp/>dim,<sp/>p1,<sp/>p2));</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>whether<sp/>the<sp/>query<sp/>region<sp/>(the<sp/>smallest<sp/>known<sp/>circle<sp/>about</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>query_point_<sp/>containing<sp/>results-&gt;k_<sp/>points)<sp/>intersects<sp/>the<sp/>box<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="comment">//<sp/>between<sp/>lower<sp/>and<sp/>upper.<sp/><sp/>For<sp/>circular<sp/>dimensions,<sp/>we<sp/>also<sp/>check<sp/>the<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment">//<sp/>one<sp/>wrap<sp/>distance<sp/>away<sp/>from<sp/>the<sp/>query.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>KDTreeSearch::BoxIntersectsSearch(<ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>*lower,<sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>*upper)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>*query<sp/>=<sp/>query_point_;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1aa8336782d864ba03efadb73a51260961" kindref="member">FLOAT64</ref><sp/>total_distance<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1aa8336782d864ba03efadb73a51260961" kindref="member">FLOAT64</ref><sp/>radius_squared<sp/>=</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>results_-&gt;<ref refid="class_min_k_1a62ae0a6c821b62d98c6bde038e2b80a2" kindref="member">max_insertable_key</ref>()<sp/>*<sp/>results_-&gt;<ref refid="class_min_k_1a62ae0a6c821b62d98c6bde038e2b80a2" kindref="member">max_insertable_key</ref>();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><ref refid="struct_p_a_r_a_m___d_e_s_c" kindref="compound">PARAM_DESC</ref><sp/>*dim<sp/>=<sp/>tree_-&gt;<ref refid="struct_k_d_t_r_e_e_1a486dfb881bc360bbfbd36248bba80552" kindref="member">KeyDesc</ref>;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>tree_-&gt;<ref refid="struct_k_d_t_r_e_e_1a510104dbda460e78eb8d323502594ef2" kindref="member">KeySize</ref>;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--,<sp/>dim++,<sp/>query++,<sp/>lower++,<sp/>upper++)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim-&gt;<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6b9843466a3ddf33bfab18f85ca06501" kindref="member">NonEssential</ref>)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>dimension_distance;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*query<sp/>&lt;<sp/>*lower)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dimension_distance<sp/>=<sp/>*lower<sp/>-<sp/>*query;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*query<sp/>&gt;<sp/>*upper)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dimension_distance<sp/>=<sp/>*query<sp/>-<sp/>*upper;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dimension_distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>this<sp/>dimension<sp/>is<sp/>circular<sp/>-<sp/>check<sp/>wraparound<sp/>distance<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim-&gt;<ref refid="struct_p_a_r_a_m___d_e_s_c_1a55807f1e0be0daba2a33380ea29b2f1d" kindref="member">Circular</ref>)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1a6a3da5f1db8d485c0d2f5a7ba526c4a0" kindref="member">FLOAT32</ref><sp/>wrap_distance<sp/>=<sp/><ref refid="host_8h_1a9adcee815220ec9db98062213806ed04" kindref="member">MAX_FLOAT32</ref>;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*query<sp/>&lt;<sp/>*lower)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrap_distance<sp/>=<sp/>*query<sp/>+<sp/>dim-&gt;<ref refid="struct_p_a_r_a_m___d_e_s_c_1a73e76f946bbd324e60914a991d3343d1" kindref="member">Max</ref><sp/>-<sp/>dim-&gt;<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6445e8e433a99239e56c3218437f2695" kindref="member">Min</ref><sp/>-<sp/>*upper;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*query<sp/>&gt;<sp/>*upper)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrap_distance<sp/>=<sp/>*lower<sp/>-<sp/>(*query<sp/>-<sp/>(dim-&gt;<ref refid="struct_p_a_r_a_m___d_e_s_c_1a73e76f946bbd324e60914a991d3343d1" kindref="member">Max</ref><sp/>-<sp/>dim-&gt;<ref refid="struct_p_a_r_a_m___d_e_s_c_1a6445e8e433a99239e56c3218437f2695" kindref="member">Min</ref>));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dimension_distance<sp/>=<sp/><ref refid="ndminx_8h_1a74e75242132eaabbc1c512488a135926" kindref="member">MIN</ref>(dimension_distance,<sp/>wrap_distance);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>total_distance<sp/>+=<sp/>dimension_distance<sp/>*<sp/>dimension_distance;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total_distance<sp/>&gt;=<sp/>radius_squared)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="capi_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="capi_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Walk<sp/>a<sp/>tree,<sp/>calling<sp/>action<sp/>once<sp/>on<sp/>each<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Parameters:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/><sp/>root<sp/>of<sp/>the<sp/>tree<sp/>being<sp/>walked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>action<sp/><sp/>action<sp/>to<sp/>be<sp/>performed<sp/>at<sp/>every<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>context<sp/><sp/>action&apos;s<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>sub_tree<sp/><sp/>ptr<sp/>to<sp/>root<sp/>of<sp/>subtree<sp/>to<sp/>be<sp/>walked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>level<sp/><sp/>current<sp/>level<sp/>in<sp/>the<sp/>tree<sp/>for<sp/>this<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Operation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>routine<sp/>walks<sp/>thru<sp/>the<sp/>specified<sp/>sub_tree<sp/>and<sp/>invokes<sp/>action</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>action<sp/>at<sp/>each<sp/>node<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action(context,<sp/>data,<sp/>level)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>data<sp/><sp/>the<sp/>data<sp/>contents<sp/>of<sp/>the<sp/>node<sp/>being<sp/>visited,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>level<sp/>is<sp/>the<sp/>level<sp/>of<sp/>the<sp/>node<sp/>in<sp/>the<sp/>tree<sp/>with<sp/>the<sp/>root<sp/>being<sp/>level<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="kdtree_8cpp_1adc5707bb9d0b49db3a13959b01117567" kindref="member">Walk</ref>(<ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref><sp/>*tree,<sp/><ref refid="cutil_8h_1adec17f7c242871b5c6efb7bdb4050b9e" kindref="member">void_proc</ref><sp/>action,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref><sp/>*sub_tree,<sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>(*action)(context,<sp/>sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1afd5eeb76bcf3d1ba9b387e0cd4e9ce16" kindref="member">Data</ref>,<sp/>level);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref><sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kdtree_8cpp_1adc5707bb9d0b49db3a13959b01117567" kindref="member">Walk</ref>(tree,<sp/>action,<sp/>context,<sp/>sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref>,<sp/>NextLevel(tree,<sp/>level));</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a699e9e67472e12f86bbb5c1effdb4fa3" kindref="member">Right</ref><sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kdtree_8cpp_1adc5707bb9d0b49db3a13959b01117567" kindref="member">Walk</ref>(tree,<sp/>action,<sp/>context,<sp/>sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a699e9e67472e12f86bbb5c1effdb4fa3" kindref="member">Right</ref>,<sp/>NextLevel(tree,<sp/>level));</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>a<sp/>subtree<sp/>nodes,<sp/>insert<sp/>all<sp/>of<sp/>its<sp/>elements<sp/>into<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="kdtree_8cpp_1af3be65344ced84a11159bc0bea5de60f" kindref="member">InsertNodes</ref>(<ref refid="struct_k_d_t_r_e_e" kindref="compound">KDTREE</ref><sp/>*tree,<sp/><ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref><sp/>*nodes)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodes<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><ref refid="kdtree_8cpp_1a596422fd837fb6937c12be6b277423a0" kindref="member">KDStore</ref>(tree,<sp/>nodes-&gt;<ref refid="struct_k_d_n_o_d_e_1a977838423c3b5e17ecfd0242c39a8202" kindref="member">Key</ref>,<sp/>nodes-&gt;<ref refid="struct_k_d_n_o_d_e_1afd5eeb76bcf3d1ba9b387e0cd4e9ce16" kindref="member">Data</ref>);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><ref refid="kdtree_8cpp_1af3be65344ced84a11159bc0bea5de60f" kindref="member">InsertNodes</ref>(tree,<sp/>nodes-&gt;<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref>);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><ref refid="kdtree_8cpp_1af3be65344ced84a11159bc0bea5de60f" kindref="member">InsertNodes</ref>(tree,<sp/>nodes-&gt;<ref refid="struct_k_d_n_o_d_e_1a699e9e67472e12f86bbb5c1effdb4fa3" kindref="member">Right</ref>);</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Free<sp/>all<sp/>of<sp/>the<sp/>nodes<sp/>of<sp/>a<sp/>sub<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="kdtree_8cpp_1a59f352b6bc9971b0d7502d31060f7c44" kindref="member">FreeSubTree</ref>(<ref refid="struct_k_d_n_o_d_e" kindref="compound">KDNODE</ref><sp/>*sub_tree)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sub_tree<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kdtree_8cpp_1a59f352b6bc9971b0d7502d31060f7c44" kindref="member">FreeSubTree</ref>(sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a66ffa1cc4e73e45599978f8f6416e350" kindref="member">Left</ref>);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kdtree_8cpp_1a59f352b6bc9971b0d7502d31060f7c44" kindref="member">FreeSubTree</ref>(sub_tree-&gt;<ref refid="struct_k_d_n_o_d_e_1a699e9e67472e12f86bbb5c1effdb4fa3" kindref="member">Right</ref>);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="freelist_8cpp_1ab462a857e5edf360ae4881bcc92a0bcf" kindref="member">memfree</ref>(sub_tree);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FreeSubTree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/classify/kdtree.cpp"/>
  </compounddef>
</doxygen>
