<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="mastertrainer_8cpp" kind="file">
    <compoundname>mastertrainer.cpp</compoundname>
    <includes refid="mastertrainer_8h" local="yes">mastertrainer.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">time.h</includes>
    <includes local="yes">allheaders.h</includes>
    <includes refid="boxread_8h" local="yes">boxread.h</includes>
    <includes refid="classify_8h" local="yes">classify.h</includes>
    <includes refid="errorcounter_8h" local="yes">errorcounter.h</includes>
    <includes refid="featdefs_8h" local="yes">featdefs.h</includes>
    <includes refid="sampleiterator_8h" local="yes">sampleiterator.h</includes>
    <includes refid="shapeclassifier_8h" local="yes">shapeclassifier.h</includes>
    <includes refid="shapetable_8h" local="yes">shapetable.h</includes>
    <includes refid="svmnode_8h" local="yes">svmnode.h</includes>
    <incdepgraph>
      <node id="25889">
        <label>cutil_class.h</label>
        <link refid="cutil__class_8h"/>
        <childnode refid="25890" relation="include">
        </childnode>
        <childnode refid="25903" relation="include">
        </childnode>
        <childnode refid="25886" relation="include">
        </childnode>
      </node>
      <node id="25966">
        <label>shapeclassifier.h</label>
        <link refid="shapeclassifier_8h"/>
      </node>
      <node id="25921">
        <label>image.h</label>
        <link refid="image_8h"/>
      </node>
      <node id="25939">
        <label>states.h</label>
        <link refid="states_8h"/>
        <childnode refid="25876" relation="include">
        </childnode>
        <childnode refid="25886" relation="include">
        </childnode>
      </node>
      <node id="25925">
        <label>assert.h</label>
      </node>
      <node id="25965">
        <label>sampleiterator.h</label>
        <link refid="sampleiterator_8h"/>
      </node>
      <node id="25869">
        <label>classify.h</label>
        <link refid="classify_8h"/>
        <childnode refid="25870" relation="include">
        </childnode>
        <childnode refid="25920" relation="include">
        </childnode>
        <childnode refid="25869" relation="include">
        </childnode>
        <childnode refid="25922" relation="include">
        </childnode>
        <childnode refid="25942" relation="include">
        </childnode>
        <childnode refid="25944" relation="include">
        </childnode>
        <childnode refid="25945" relation="include">
        </childnode>
        <childnode refid="25947" relation="include">
        </childnode>
        <childnode refid="25946" relation="include">
        </childnode>
        <childnode refid="25924" relation="include">
        </childnode>
        <childnode refid="25943" relation="include">
        </childnode>
        <childnode refid="25919" relation="include">
        </childnode>
      </node>
      <node id="25885">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="25867">
        <label>classify/mastertrainer.cpp</label>
        <link refid="mastertrainer.cpp"/>
        <childnode refid="25868" relation="include">
        </childnode>
        <childnode refid="25908" relation="include">
        </childnode>
        <childnode refid="25961" relation="include">
        </childnode>
        <childnode refid="25962" relation="include">
        </childnode>
        <childnode refid="25963" relation="include">
        </childnode>
        <childnode refid="25869" relation="include">
        </childnode>
        <childnode refid="25964" relation="include">
        </childnode>
        <childnode refid="25942" relation="include">
        </childnode>
        <childnode refid="25965" relation="include">
        </childnode>
        <childnode refid="25966" relation="include">
        </childnode>
        <childnode refid="25954" relation="include">
        </childnode>
        <childnode refid="25967" relation="include">
        </childnode>
      </node>
      <node id="25903">
        <label>const.h</label>
        <link refid="const_8h"/>
      </node>
      <node id="25875">
        <label>stdlib.h</label>
      </node>
      <node id="25877">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="25878" relation="include">
        </childnode>
      </node>
      <node id="25918">
        <label>bitvec.h</label>
        <link refid="bitvec_8h"/>
        <childnode refid="25876" relation="include">
        </childnode>
      </node>
      <node id="25949">
        <label>cluster.h</label>
        <link refid="cluster_8h"/>
        <childnode refid="25950" relation="include">
        </childnode>
        <childnode refid="25871" relation="include">
        </childnode>
      </node>
      <node id="25930">
        <label>blckerr.h</label>
        <link refid="blckerr_8h"/>
        <childnode refid="25883" relation="include">
        </childnode>
      </node>
      <node id="25890">
        <label>ccutil.h</label>
        <link refid="ccutil_8h"/>
        <childnode refid="25891" relation="include">
        </childnode>
        <childnode refid="25883" relation="include">
        </childnode>
        <childnode refid="25886" relation="include">
        </childnode>
        <childnode refid="25900" relation="include">
        </childnode>
        <childnode refid="25880" relation="include">
        </childnode>
        <childnode refid="25898" relation="include">
        </childnode>
        <childnode refid="25901" relation="include">
        </childnode>
        <childnode refid="25902" relation="include">
        </childnode>
      </node>
      <node id="25962">
        <label>allheaders.h</label>
      </node>
      <node id="25915">
        <label>scrollview.h</label>
        <link refid="scrollview_8h"/>
        <childnode refid="25873" relation="include">
        </childnode>
      </node>
      <node id="25893">
        <label>serialis.h</label>
        <link refid="serialis_8h"/>
        <childnode refid="25875" relation="include">
        </childnode>
        <childnode refid="25874" relation="include">
        </childnode>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25887" relation="include">
        </childnode>
        <childnode refid="25883" relation="include">
        </childnode>
        <childnode refid="25894" relation="include">
        </childnode>
      </node>
      <node id="25911">
        <label>clst.h</label>
        <link refid="clst_8h"/>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25876" relation="include">
        </childnode>
        <childnode refid="25893" relation="include">
        </childnode>
        <childnode refid="25895" relation="include">
        </childnode>
      </node>
      <node id="25960">
        <label>bitvector.h</label>
        <link refid="bitvector_8h"/>
        <childnode refid="25925" relation="include">
        </childnode>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25876" relation="include">
        </childnode>
      </node>
      <node id="25909">
        <label>baseline.h</label>
        <link refid="baseline_8h"/>
        <childnode refid="25876" relation="include">
        </childnode>
        <childnode refid="25910" relation="include">
        </childnode>
        <childnode refid="25880" relation="include">
        </childnode>
      </node>
      <node id="25957">
        <label>mf.h</label>
        <link refid="mf_8h"/>
        <childnode refid="25943" relation="include">
        </childnode>
        <childnode refid="25910" relation="include">
        </childnode>
      </node>
      <node id="25952">
        <label>intfeaturespace.h</label>
        <link refid="intfeaturespace_8h"/>
        <childnode refid="25881" relation="include">
        </childnode>
        <childnode refid="25904" relation="include">
        </childnode>
      </node>
      <node id="25920">
        <label>ccstruct.h</label>
        <link refid="ccstruct_8h"/>
        <childnode refid="25872" relation="include">
        </childnode>
        <childnode refid="25921" relation="include">
        </childnode>
      </node>
      <node id="25931">
        <label>stepblob.h</label>
        <link refid="stepblob_8h"/>
        <childnode refid="25932" relation="include">
        </childnode>
        <childnode refid="25912" relation="include">
        </childnode>
      </node>
      <node id="25940">
        <label>trie.h</label>
        <link refid="trie_8h"/>
        <childnode refid="25923" relation="include">
        </childnode>
        <childnode refid="25872" relation="include">
        </childnode>
        <childnode refid="25881" relation="include">
        </childnode>
      </node>
      <node id="25924">
        <label>ratngs.h</label>
        <link refid="ratngs_8h"/>
        <childnode refid="25925" relation="include">
        </childnode>
        <childnode refid="25911" relation="include">
        </childnode>
        <childnode refid="25881" relation="include">
        </childnode>
        <childnode refid="25926" relation="include">
        </childnode>
        <childnode refid="25896" relation="include">
        </childnode>
        <childnode refid="25898" relation="include">
        </childnode>
        <childnode refid="25927" relation="include">
        </childnode>
      </node>
      <node id="25888">
        <label>stddef.h</label>
      </node>
      <node id="25897">
        <label>memory.h</label>
      </node>
      <node id="25948">
        <label>cutoffs.h</label>
        <link refid="cutoffs_8h"/>
        <childnode refid="25905" relation="include">
        </childnode>
      </node>
      <node id="25907">
        <label>fpoint.h</label>
        <link refid="fpoint_8h"/>
        <childnode refid="25876" relation="include">
        </childnode>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25908" relation="include">
        </childnode>
      </node>
      <node id="25883">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="25876" relation="include">
        </childnode>
      </node>
      <node id="25905">
        <label>matchdefs.h</label>
        <link refid="matchdefs_8h"/>
        <childnode refid="25876" relation="include">
        </childnode>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25896" relation="include">
        </childnode>
      </node>
      <node id="25878">
        <label>limits.h</label>
      </node>
      <node id="25950">
        <label>kdtree.h</label>
        <link refid="kdtree_8h"/>
        <childnode refid="25876" relation="include">
        </childnode>
        <childnode refid="25872" relation="include">
        </childnode>
        <childnode refid="25943" relation="include">
        </childnode>
      </node>
      <node id="25954">
        <label>shapetable.h</label>
        <link refid="shapetable_8h"/>
        <childnode refid="25881" relation="include">
        </childnode>
        <childnode refid="25947" relation="include">
        </childnode>
      </node>
      <node id="25945">
        <label>intfx.h</label>
        <link refid="intfx_8h"/>
        <childnode refid="25910" relation="include">
        </childnode>
        <childnode refid="25904" relation="include">
        </childnode>
        <childnode refid="25946" relation="include">
        </childnode>
        <childnode refid="25908" relation="include">
        </childnode>
      </node>
      <node id="25922">
        <label>dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="25891" relation="include">
        </childnode>
        <childnode refid="25923" relation="include">
        </childnode>
        <childnode refid="25876" relation="include">
        </childnode>
        <childnode refid="25921" relation="include">
        </childnode>
        <childnode refid="25871" relation="include">
        </childnode>
        <childnode refid="25924" relation="include">
        </childnode>
        <childnode refid="25938" relation="include">
        </childnode>
        <childnode refid="25940" relation="include">
        </childnode>
        <childnode refid="25898" relation="include">
        </childnode>
        <childnode refid="25941" relation="include">
        </childnode>
      </node>
      <node id="25914">
        <label>ipoints.h</label>
        <link refid="ipoints_8h"/>
        <childnode refid="25908" relation="include">
        </childnode>
      </node>
      <node id="25934">
        <label>mod128.h</label>
        <link refid="mod128_8h"/>
        <childnode refid="25913" relation="include">
        </childnode>
      </node>
      <node id="25929">
        <label>elst2.h</label>
        <link refid="elst2_8h"/>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25876" relation="include">
        </childnode>
        <childnode refid="25893" relation="include">
        </childnode>
        <childnode refid="25895" relation="include">
        </childnode>
      </node>
      <node id="25901">
        <label>pthread.h</label>
      </node>
      <node id="25953">
        <label>intfeaturemap.h</label>
        <link refid="intfeaturemap_8h"/>
        <childnode refid="25952" relation="include">
        </childnode>
        <childnode refid="25951" relation="include">
        </childnode>
        <childnode refid="25904" relation="include">
        </childnode>
      </node>
      <node id="25874">
        <label>string.h</label>
      </node>
      <node id="25964">
        <label>errorcounter.h</label>
        <link refid="errorcounter_8h"/>
        <childnode refid="25881" relation="include">
        </childnode>
        <childnode refid="25956" relation="include">
        </childnode>
      </node>
      <node id="25899">
        <label>unicharmap.h</label>
        <link refid="unicharmap_8h"/>
        <childnode refid="25896" relation="include">
        </childnode>
      </node>
      <node id="25896">
        <label>unichar.h</label>
        <link refid="unichar_8h"/>
        <childnode refid="25897" relation="include">
        </childnode>
        <childnode refid="25874" relation="include">
        </childnode>
      </node>
      <node id="25872">
        <label>cutil.h</label>
        <link refid="cutil_8h"/>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25874" relation="include">
        </childnode>
        <childnode refid="25875" relation="include">
        </childnode>
        <childnode refid="25876" relation="include">
        </childnode>
        <childnode refid="25879" relation="include">
        </childnode>
        <childnode refid="25889" relation="include">
        </childnode>
      </node>
      <node id="25912">
        <label>rect.h</label>
        <link refid="rect_8h"/>
        <childnode refid="25908" relation="include">
        </childnode>
        <childnode refid="25913" relation="include">
        </childnode>
        <childnode refid="25885" relation="include">
        </childnode>
        <childnode refid="25915" relation="include">
        </childnode>
        <childnode refid="25879" relation="include">
        </childnode>
      </node>
      <node id="25928">
        <label>bits16.h</label>
        <link refid="bits16_8h"/>
        <childnode refid="25876" relation="include">
        </childnode>
      </node>
      <node id="25967">
        <label>svmnode.h</label>
        <link refid="svmnode_8h"/>
      </node>
      <node id="25882">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="25876" relation="include">
        </childnode>
      </node>
      <node id="25902">
        <label>semaphore.h</label>
      </node>
      <node id="25963">
        <label>boxread.h</label>
        <link refid="boxread_8h"/>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25886" relation="include">
        </childnode>
      </node>
      <node id="25932">
        <label>coutln.h</label>
        <link refid="coutln_8h"/>
        <childnode refid="25933" relation="include">
        </childnode>
        <childnode refid="25934" relation="include">
        </childnode>
        <childnode refid="25928" relation="include">
        </childnode>
        <childnode refid="25912" relation="include">
        </childnode>
        <childnode refid="25930" relation="include">
        </childnode>
        <childnode refid="25915" relation="include">
        </childnode>
      </node>
      <node id="25927">
        <label>werd.h</label>
        <link refid="werd_8h"/>
        <childnode refid="25880" relation="include">
        </childnode>
        <childnode refid="25928" relation="include">
        </childnode>
        <childnode refid="25929" relation="include">
        </childnode>
        <childnode refid="25886" relation="include">
        </childnode>
        <childnode refid="25930" relation="include">
        </childnode>
        <childnode refid="25931" relation="include">
        </childnode>
        <childnode refid="25935" relation="include">
        </childnode>
      </node>
      <node id="25935">
        <label>ocrrow.h</label>
        <link refid="ocrrow_8h"/>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25936" relation="include">
        </childnode>
        <childnode refid="25927" relation="include">
        </childnode>
      </node>
      <node id="25894">
        <label>fileerr.h</label>
        <link refid="fileerr_8h"/>
        <childnode refid="25883" relation="include">
        </childnode>
      </node>
      <node id="25906">
        <label>mfoutline.h</label>
        <link refid="mfoutline_8h"/>
        <childnode refid="25876" relation="include">
        </childnode>
        <childnode refid="25871" relation="include">
        </childnode>
        <childnode refid="25907" relation="include">
        </childnode>
        <childnode refid="25909" relation="include">
        </childnode>
        <childnode refid="25880" relation="include">
        </childnode>
      </node>
      <node id="25891">
        <label>ambigs.h</label>
        <link refid="ambigs_8h"/>
        <childnode refid="25892" relation="include">
        </childnode>
        <childnode refid="25879" relation="include">
        </childnode>
        <childnode refid="25896" relation="include">
        </childnode>
        <childnode refid="25898" relation="include">
        </childnode>
        <childnode refid="25881" relation="include">
        </childnode>
      </node>
      <node id="25919">
        <label>unicity_table.h</label>
        <link refid="unicity__table_8h"/>
        <childnode refid="25882" relation="include">
        </childnode>
        <childnode refid="25883" relation="include">
        </childnode>
        <childnode refid="25881" relation="include">
        </childnode>
      </node>
      <node id="25961">
        <label>time.h</label>
      </node>
      <node id="25933">
        <label>crakedge.h</label>
        <link refid="crakedge_8h"/>
        <childnode refid="25913" relation="include">
        </childnode>
        <childnode refid="25934" relation="include">
        </childnode>
      </node>
      <node id="25908">
        <label>math.h</label>
      </node>
      <node id="25895">
        <label>lsterr.h</label>
        <link refid="lsterr_8h"/>
        <childnode refid="25883" relation="include">
        </childnode>
      </node>
      <node id="25959">
        <label>trainingsampleset.h</label>
        <link refid="trainingsampleset_8h"/>
        <childnode refid="25960" relation="include">
        </childnode>
        <childnode refid="25881" relation="include">
        </childnode>
        <childnode refid="25951" relation="include">
        </childnode>
        <childnode refid="25956" relation="include">
        </childnode>
        <childnode refid="25954" relation="include">
        </childnode>
        <childnode refid="25955" relation="include">
        </childnode>
      </node>
      <node id="25958">
        <label>picofeat.h</label>
        <link refid="picofeat_8h"/>
        <childnode refid="25943" relation="include">
        </childnode>
        <childnode refid="25880" relation="include">
        </childnode>
      </node>
      <node id="25937">
        <label>quadratc.h</label>
        <link refid="quadratc_8h"/>
        <childnode refid="25913" relation="include">
        </childnode>
      </node>
      <node id="25916">
        <label>vecfuncs.h</label>
        <link refid="vecfuncs_8h"/>
        <childnode refid="25908" relation="include">
        </childnode>
        <childnode refid="25910" relation="include">
        </childnode>
      </node>
      <node id="25871">
        <label>oldlist.h</label>
        <link refid="oldlist_8h"/>
        <childnode refid="25872" relation="include">
        </childnode>
        <childnode refid="25882" relation="include">
        </childnode>
      </node>
      <node id="25943">
        <label>ocrfeatures.h</label>
        <link refid="ocrfeatures_8h"/>
        <childnode refid="25910" relation="include">
        </childnode>
        <childnode refid="25873" relation="include">
        </childnode>
      </node>
      <node id="25880">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25881" relation="include">
        </childnode>
        <childnode refid="25886" relation="include">
        </childnode>
      </node>
      <node id="25881">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25875" relation="include">
        </childnode>
        <childnode refid="25882" relation="include">
        </childnode>
        <childnode refid="25883" relation="include">
        </childnode>
        <childnode refid="25884" relation="include">
        </childnode>
        <childnode refid="25885" relation="include">
        </childnode>
      </node>
      <node id="25938">
        <label>stopper.h</label>
        <link refid="stopper_8h"/>
        <childnode refid="25881" relation="include">
        </childnode>
        <childnode refid="25880" relation="include">
        </childnode>
        <childnode refid="25924" relation="include">
        </childnode>
        <childnode refid="25939" relation="include">
        </childnode>
        <childnode refid="25896" relation="include">
        </childnode>
      </node>
      <node id="25887">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="25888" relation="include">
        </childnode>
        <childnode refid="25876" relation="include">
        </childnode>
      </node>
      <node id="25917">
        <label>protos.h</label>
        <link refid="protos_8h"/>
        <childnode refid="25918" relation="include">
        </childnode>
        <childnode refid="25872" relation="include">
        </childnode>
        <childnode refid="25896" relation="include">
        </childnode>
        <childnode refid="25919" relation="include">
        </childnode>
        <childnode refid="25880" relation="include">
        </childnode>
      </node>
      <node id="25955">
        <label>trainingsample.h</label>
        <link refid="trainingsample_8h"/>
        <childnode refid="25892" relation="include">
        </childnode>
        <childnode refid="25942" relation="include">
        </childnode>
        <childnode refid="25945" relation="include">
        </childnode>
        <childnode refid="25947" relation="include">
        </childnode>
        <childnode refid="25956" relation="include">
        </childnode>
        <childnode refid="25957" relation="include">
        </childnode>
        <childnode refid="25958" relation="include">
        </childnode>
        <childnode refid="25954" relation="include">
        </childnode>
        <childnode refid="25898" relation="include">
        </childnode>
      </node>
      <node id="25942">
        <label>featdefs.h</label>
        <link refid="featdefs_8h"/>
        <childnode refid="25943" relation="include">
        </childnode>
      </node>
      <node id="25892">
        <label>elst.h</label>
        <link refid="elst_8h"/>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25876" relation="include">
        </childnode>
        <childnode refid="25893" relation="include">
        </childnode>
        <childnode refid="25895" relation="include">
        </childnode>
      </node>
      <node id="25898">
        <label>unicharset.h</label>
        <link refid="unicharset_8h"/>
        <childnode refid="25883" relation="include">
        </childnode>
        <childnode refid="25884" relation="include">
        </childnode>
        <childnode refid="25886" relation="include">
        </childnode>
        <childnode refid="25882" relation="include">
        </childnode>
        <childnode refid="25896" relation="include">
        </childnode>
        <childnode refid="25899" relation="include">
        </childnode>
      </node>
      <node id="25923">
        <label>dawg.h</label>
        <link refid="dawg_8h"/>
        <childnode refid="25892" relation="include">
        </childnode>
        <childnode refid="25924" relation="include">
        </childnode>
        <childnode refid="25880" relation="include">
        </childnode>
        <childnode refid="25882" relation="include">
        </childnode>
      </node>
      <node id="25944">
        <label>fontinfo.h</label>
        <link refid="fontinfo_8h"/>
        <childnode refid="25881" relation="include">
        </childnode>
        <childnode refid="25876" relation="include">
        </childnode>
        <childnode refid="25896" relation="include">
        </childnode>
      </node>
      <node id="25913">
        <label>points.h</label>
        <link refid="points_8h"/>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25908" relation="include">
        </childnode>
        <childnode refid="25892" relation="include">
        </childnode>
        <childnode refid="25914" relation="include">
        </childnode>
      </node>
      <node id="25870">
        <label>adaptive.h</label>
        <link refid="adaptive_8h"/>
        <childnode refid="25871" relation="include">
        </childnode>
        <childnode refid="25904" relation="include">
        </childnode>
        <childnode refid="25873" relation="include">
        </childnode>
      </node>
      <node id="25926">
        <label>notdll.h</label>
        <link refid="notdll_8h"/>
      </node>
      <node id="25879">
        <label>tprintf.h</label>
        <link refid="tprintf_8h"/>
        <childnode refid="25880" relation="include">
        </childnode>
      </node>
      <node id="25947">
        <label>intmatcher.h</label>
        <link refid="intmatcher_8h"/>
        <childnode refid="25880" relation="include">
        </childnode>
        <childnode refid="25904" relation="include">
        </childnode>
        <childnode refid="25948" relation="include">
        </childnode>
      </node>
      <node id="25876">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="25877" relation="include">
        </childnode>
      </node>
      <node id="25873">
        <label>stdio.h</label>
      </node>
      <node id="25951">
        <label>indexmapbidi.h</label>
        <link refid="indexmapbidi_8h"/>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25881" relation="include">
        </childnode>
      </node>
      <node id="25956">
        <label>matrix.h</label>
        <link refid="matrix_8h"/>
        <childnode refid="25924" relation="include">
        </childnode>
        <childnode refid="25898" relation="include">
        </childnode>
      </node>
      <node id="25904">
        <label>intproto.h</label>
        <link refid="intproto_8h"/>
        <childnode refid="25881" relation="include">
        </childnode>
        <childnode refid="25905" relation="include">
        </childnode>
        <childnode refid="25906" relation="include">
        </childnode>
        <childnode refid="25917" relation="include">
        </childnode>
        <childnode refid="25915" relation="include">
        </childnode>
        <childnode refid="25898" relation="include">
        </childnode>
      </node>
      <node id="25900">
        <label>tessdatamanager.h</label>
        <link refid="tessdatamanager_8h"/>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25876" relation="include">
        </childnode>
        <childnode refid="25879" relation="include">
        </childnode>
      </node>
      <node id="25868">
        <label>mastertrainer.h</label>
        <link refid="mastertrainer_8h"/>
        <childnode refid="25869" relation="include">
        </childnode>
        <childnode refid="25949" relation="include">
        </childnode>
        <childnode refid="25945" relation="include">
        </childnode>
        <childnode refid="25892" relation="include">
        </childnode>
        <childnode refid="25942" relation="include">
        </childnode>
        <childnode refid="25944" relation="include">
        </childnode>
        <childnode refid="25951" relation="include">
        </childnode>
        <childnode refid="25952" relation="include">
        </childnode>
        <childnode refid="25953" relation="include">
        </childnode>
        <childnode refid="25947" relation="include">
        </childnode>
        <childnode refid="25880" relation="include">
        </childnode>
        <childnode refid="25954" relation="include">
        </childnode>
        <childnode refid="25955" relation="include">
        </childnode>
        <childnode refid="25959" relation="include">
        </childnode>
        <childnode refid="25898" relation="include">
        </childnode>
      </node>
      <node id="25946">
        <label>normalis.h</label>
        <link refid="normalis_8h"/>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25876" relation="include">
        </childnode>
      </node>
      <node id="25886">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25874" relation="include">
        </childnode>
        <childnode refid="25877" relation="include">
        </childnode>
        <childnode refid="25887" relation="include">
        </childnode>
      </node>
      <node id="25910">
        <label>blobs.h</label>
        <link refid="blobs_8h"/>
        <childnode refid="25911" relation="include">
        </childnode>
        <childnode refid="25912" relation="include">
        </childnode>
        <childnode refid="25916" relation="include">
        </childnode>
      </node>
      <node id="25884">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25874" relation="include">
        </childnode>
      </node>
      <node id="25941">
        <label>permute.h</label>
        <link refid="permute_8h"/>
        <childnode refid="25924" relation="include">
        </childnode>
        <childnode refid="25880" relation="include">
        </childnode>
        <childnode refid="25898" relation="include">
        </childnode>
      </node>
      <node id="25936">
        <label>quspline.h</label>
        <link refid="quspline_8h"/>
        <childnode refid="25937" relation="include">
        </childnode>
        <childnode refid="25893" relation="include">
        </childnode>
        <childnode refid="25887" relation="include">
        </childnode>
        <childnode refid="25912" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetesseract">tesseract</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2010<sp/>Google<sp/>Inc.<sp/>All<sp/>Rights<sp/>Reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>rays@google.com<sp/>(Ray<sp/>Smith)</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight><highlight class="comment">//<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mastertrainer.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Trainer<sp/>to<sp/>build<sp/>the<sp/>MasterClassifier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/>Ray<sp/>Smith</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created:<sp/><sp/><sp/><sp/><sp/>Wed<sp/>Nov<sp/>03<sp/>18:10:01<sp/>PDT<sp/>2010</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Copyright<sp/>2010,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Include<sp/>automatically<sp/>generated<sp/>configuration<sp/>file<sp/>if<sp/>running<sp/>autoconf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;config_auto.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mastertrainer_8h" kindref="compound">mastertrainer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;allheaders.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="boxread_8h" kindref="compound">boxread.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="classify_8h" kindref="compound">classify.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="errorcounter_8h" kindref="compound">errorcounter.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="featdefs_8h" kindref="compound">featdefs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sampleiterator_8h" kindref="compound">sampleiterator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shapeclassifier_8h" kindref="compound">shapeclassifier.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shapetable_8h" kindref="compound">shapetable.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="svmnode_8h" kindref="compound">svmnode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesseract-c__api-demo_1afed58feacb84df2de88bdd613cfdba6d" kindref="member">tesseract</ref><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constants<sp/>controlling<sp/>clustering.<sp/>With<sp/>a<sp/>low<sp/>kMinClusteredShapes<sp/>and<sp/>a<sp/>high</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>kMaxUnicharsPerCluster,<sp/>then<sp/>kFontMergeDistance<sp/>is<sp/>the<sp/>only<sp/>limiting<sp/>factor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Min<sp/>number<sp/>of<sp/>shapes<sp/>in<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a6dc1c791f04726f9cc345b54b85222b9" kindref="member">kMinClusteredShapes</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>number<sp/>of<sp/>unichars<sp/>in<sp/>any<sp/>individual<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a93d3ba882abd48b578f7db93e8a4e6e9" kindref="member">kMaxUnicharsPerCluster</ref><sp/>=<sp/>2000;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mean<sp/>font<sp/>distance<sp/>below<sp/>which<sp/>to<sp/>merge<sp/>fonts<sp/>and<sp/>unichars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a5a80aa3c385749b5df58ac015ba00e9f" kindref="member">kFontMergeDistance</ref><sp/>=<sp/>0.025;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="classtesseract_1_1_master_trainer_1a9f9031a5f9e8f03bc23e6216882ab41e" kindref="member">MasterTrainer::MasterTrainer</ref>(<ref refid="namespacetesseract_1ad3e7916f0120e26e7b4e0f830784194a" kindref="member">NormalizationMode</ref><sp/>norm_mode,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shape_analysis,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>replicate_samples,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_level)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>:<sp/>norm_mode_(norm_mode),<sp/>samples_(fontinfo_table_),</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>junk_samples_(fontinfo_table_),<sp/>verify_samples_(fontinfo_table_),</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>charsetsize_(0),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>enable_shape_anaylsis_(shape_analysis),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>enable_replication_(replicate_samples),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>fragments_(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>),<sp/>prev_unichar_id_(-1),<sp/>debug_level_(debug_level)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>fontinfo_table_.set_compare_callback(</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tesscallback_8h_1ad000c6729bae0f97075ca10a0b5bf7d6" kindref="member">NewPermanentTessCallback</ref>(<ref refid="namespacetesseract_1a050fbf6fe3d3cb63b62efbff771495ba" kindref="member">CompareFontInfo</ref>));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>fontinfo_table_.set_clear_callback(</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tesscallback_8h_1ad000c6729bae0f97075ca10a0b5bf7d6" kindref="member">NewPermanentTessCallback</ref>(<ref refid="namespacetesseract_1a1eb40be391904d34559ee7fc06b321f4" kindref="member">FontInfoDeleteCallback</ref>));</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">MasterTrainer::~MasterTrainer()<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>fragments_;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>page_images_.size();<sp/>++p)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>pixDestroy(&amp;page_images_[p]);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WARNING!<sp/>Serialize/DeSerialize<sp/>are<sp/>only<sp/>partial,<sp/>providing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enough<sp/>data<sp/>to<sp/>get<sp/>the<sp/>samples<sp/>back<sp/>and<sp/>display<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>to<sp/>the<sp/>given<sp/>file.<sp/>Returns<sp/>false<sp/>in<sp/>case<sp/>of<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MasterTrainer::Serialize(FILE*<sp/>fp)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite(&amp;norm_mode_,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(norm_mode_),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!unicharset_.save_to_file(fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!feature_space_.Serialize(fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!samples_.Serialize(fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!junk_samples_.Serialize(fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verify_samples_.Serialize(fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!master_shapes_.Serialize(fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!flat_shapes_.Serialize(fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fontinfo_table_.write(fp,<sp/><ref refid="tesscallback_8h_1ad000c6729bae0f97075ca10a0b5bf7d6" kindref="member">NewPermanentTessCallback</ref>(<ref refid="namespacetesseract_1a39563e2e9bd26b96504e53ae2c9defcc" kindref="member">write_info</ref>)))</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fontinfo_table_.write(fp,<sp/><ref refid="tesscallback_8h_1ad000c6729bae0f97075ca10a0b5bf7d6" kindref="member">NewPermanentTessCallback</ref>(<ref refid="namespacetesseract_1a48b60e911578a0285e73738e81181abf" kindref="member">write_spacing_info</ref>)))</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xheights_.Serialize(fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>from<sp/>the<sp/>given<sp/>file.<sp/>Returns<sp/>false<sp/>in<sp/>case<sp/>of<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>swap<sp/>is<sp/>true,<sp/>assumes<sp/>a<sp/>big/little-endian<sp/>swap<sp/>is<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MasterTrainer::DeSerialize(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>swap,<sp/>FILE*<sp/>fp)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;norm_mode_,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(norm_mode_),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swap)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="helpers_8h_1ae7eeeca49954d4b13d269729f2fecd5a" kindref="member">ReverseN</ref>(&amp;norm_mode_,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(norm_mode_));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!unicharset_.load_from_file(fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>charsetsize_<sp/>=<sp/>unicharset_.size();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!feature_space_.DeSerialize(swap,<sp/>fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>feature_map_.Init(feature_space_);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!samples_.DeSerialize(swap,<sp/>fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!junk_samples_.DeSerialize(swap,<sp/>fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verify_samples_.DeSerialize(swap,<sp/>fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!master_shapes_.DeSerialize(swap,<sp/>fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!flat_shapes_.DeSerialize(swap,<sp/>fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fontinfo_table_.read(fp,<sp/><ref refid="tesscallback_8h_1ad000c6729bae0f97075ca10a0b5bf7d6" kindref="member">NewPermanentTessCallback</ref>(<ref refid="namespacetesseract_1a4a8355da6e96695bb003d778da05a95b" kindref="member">read_info</ref>),<sp/>swap))</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fontinfo_table_.read(fp,<sp/><ref refid="tesscallback_8h_1ad000c6729bae0f97075ca10a0b5bf7d6" kindref="member">NewPermanentTessCallback</ref>(<ref refid="namespacetesseract_1a8643fbecc8aa5b606e53a534ad14d491" kindref="member">read_spacing_info</ref>),</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap))</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xheights_.DeSerialize(swap,<sp/>fp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Load<sp/>an<sp/>initial<sp/>unicharset,<sp/>or<sp/>set<sp/>one<sp/>up<sp/>if<sp/>the<sp/>file<sp/>cannot<sp/>be<sp/>read.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MasterTrainer::LoadUnicharset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacetesseract-c__api-demo_1ab85cc7ce156038d7a91fc6b51085c72e" kindref="member">filename</ref>)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!unicharset_.load_from_file(filename))<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>unicharset<sp/>from<sp/>file<sp/>%s\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Building<sp/>unicharset<sp/>for<sp/>training<sp/>from<sp/>scratch...\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>unicharset_.clear();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Space<sp/>character<sp/>needed<sp/>to<sp/>represent<sp/>NIL_LIST<sp/>classification.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>unicharset_.unichar_insert(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>charsetsize_<sp/>=<sp/>unicharset_.size();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>fragments_;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>fragments_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[charsetsize_];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>memset(fragments_,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*fragments_)<sp/>*<sp/>charsetsize_);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>samples_.LoadUnicharset(filename);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>junk_samples_.LoadUnicharset(filename);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>verify_samples_.LoadUnicharset(filename);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>the<sp/>samples<sp/>and<sp/>their<sp/>features<sp/>from<sp/>the<sp/>given<sp/>.tr<sp/>format<sp/>file,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>adding<sp/>them<sp/>to<sp/>the<sp/>trainer<sp/>with<sp/>the<sp/>font_id<sp/>from<sp/>the<sp/>content<sp/>of<sp/>the<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>mftraining.cpp<sp/>for<sp/>a<sp/>description<sp/>of<sp/>the<sp/>file<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>verification,<sp/>then<sp/>these<sp/>are<sp/>verification<sp/>samples,<sp/>not<sp/>training.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="commontraining_8cpp_1a858311d0ef1820c6e83cc15ecc0e0e28" kindref="member">MasterTrainer::ReadTrainingSamples</ref>(FILE<sp/><sp/>*fp,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_e_a_t_u_r_e___d_e_f_s___s_t_r_u_c_t" kindref="compound">FEATURE_DEFS_STRUCT</ref>&amp;<sp/><ref refid="commontraining_8cpp_1a7bbe652f7a8f769dd65d6442a8f004a9" kindref="member">feature_defs</ref>,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verification)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[2048];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>int_feature_type<sp/>=<sp/><ref refid="featdefs_8cpp_1a46a09d60beb44b9c9156346595f352ee" kindref="member">ShortNameToFeatureType</ref>(feature_defs,<sp/><ref refid="featdefs_8cpp_1abf5c61b4ecdfe9301e0f998156474c6b" kindref="member">kIntFeatureType</ref>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>micro_feature_type<sp/>=<sp/><ref refid="featdefs_8cpp_1a46a09d60beb44b9c9156346595f352ee" kindref="member">ShortNameToFeatureType</ref>(feature_defs,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="featdefs_8cpp_1af83d597eb1e077f4ad2b082be6698d20" kindref="member">kMicroFeatureType</ref>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cn_feature_type<sp/>=<sp/><ref refid="featdefs_8cpp_1a46a09d60beb44b9c9156346595f352ee" kindref="member">ShortNameToFeatureType</ref>(feature_defs,<sp/><ref refid="featdefs_8cpp_1aba437789a6614f23dc6d18a5a803ccc8" kindref="member">kCNFeatureType</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>geo_feature_type<sp/>=<sp/><ref refid="featdefs_8cpp_1a46a09d60beb44b9c9156346595f352ee" kindref="member">ShortNameToFeatureType</ref>(feature_defs,<sp/><ref refid="featdefs_8cpp_1abada1502d146a88fadcc73af54ae7540" kindref="member">kGeoFeatureType</ref>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fgets(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/>fp)<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>space<sp/>=<sp/>strchr(buffer,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(space<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>format<sp/>in<sp/>tr<sp/>file,<sp/>reading<sp/>fontname,<sp/>unichar\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>*space++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>font_id<sp/>=<sp/>GetFontInfoId(buffer);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>page_number;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>unichar;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_t_b_o_x" kindref="compound">TBOX</ref><sp/>bounding_box;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="boxread_8cpp_1acd464bb54397318c2f6fb8db9e644fd0" kindref="member">ParseBoxFileStr</ref>(space,<sp/>&amp;page_number,<sp/>&amp;unichar,<sp/>&amp;bounding_box))<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>format<sp/>in<sp/>tr<sp/>file,<sp/>reading<sp/>box<sp/>coords\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_h_a_r___d_e_s_c___s_t_r_u_c_t" kindref="compound">CHAR_DESC</ref><sp/>char_desc<sp/>=<sp/><ref refid="featdefs_8cpp_1ae1558f5d4119a9e651a85e10887be9f3" kindref="member">ReadCharDescription</ref>(feature_defs,<sp/>fp);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>TrainingSample*<sp/><ref refid="structsample" kindref="compound">sample</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TrainingSample;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>sample-&gt;set_font_id(font_id);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>sample-&gt;set_page_num(page_number<sp/>+<sp/>page_images_.size());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>sample-&gt;set_bounding_box(bounding_box);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>sample-&gt;ExtractCharDesc(int_feature_type,<sp/>micro_feature_type,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cn_feature_type,<sp/>geo_feature_type,<sp/>char_desc);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>AddSample(verification,<sp/>unichar.<ref refid="class_s_t_r_i_n_g_1a32beee43ecab1bed8bebc3466896ad6e" kindref="member">string</ref>(),<sp/>sample);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="featdefs_8cpp_1ae2a92eefc3755300284119692527e3b9" kindref="member">FreeCharDescription</ref>(char_desc);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>charsetsize_<sp/>=<sp/>unicharset_.size();</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>the<sp/>given<sp/>single<sp/>sample<sp/>to<sp/>the<sp/>trainer,<sp/>setting<sp/>the<sp/>classid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>appropriately<sp/>from<sp/>the<sp/>given<sp/>unichar_str.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MasterTrainer::AddSample(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verification,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>unichar,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TrainingSample*<sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verification)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_samples_.AddSample(unichar,<sp/>sample);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_unichar_id_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unicharset_.contains_unichar(unichar))<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev_unichar_id_<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fragments_[prev_unichar_id_]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_unichar_id_<sp/>=<sp/>samples_.AddSample(unichar,<sp/>sample);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flat_shapes_.FindShape(prev_unichar_id_,<sp/>sample-&gt;font_id())<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flat_shapes_.AddShape(prev_unichar_id_,<sp/>sample-&gt;font_id());</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>junk_id<sp/>=<sp/>junk_samples_.AddSample(unichar,<sp/>sample);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev_unichar_id_<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_h_a_r___f_r_a_g_m_e_n_t" kindref="compound">CHAR_FRAGMENT</ref>*<sp/>frag<sp/>=<sp/><ref refid="class_c_h_a_r___f_r_a_g_m_e_n_t_1ac56b3d4af146800dd576dd60a11ea563" kindref="member">CHAR_FRAGMENT::parse_from_string</ref>(unichar);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frag<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>frag-&gt;<ref refid="class_c_h_a_r___f_r_a_g_m_e_n_t_1a3a54d954fd5a60836119fa362fe99289" kindref="member">is_natural</ref>())<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fragments_[prev_unichar_id_]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fragments_[prev_unichar_id_]<sp/>=<sp/>junk_id;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fragments_[prev_unichar_id_]<sp/>!=<sp/>junk_id)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fragments_[prev_unichar_id_]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>frag;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_unichar_id_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Loads<sp/>all<sp/>pages<sp/>from<sp/>the<sp/>given<sp/>tif<sp/>filename<sp/>and<sp/>append<sp/>to<sp/>page_images_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Must<sp/>be<sp/>called<sp/>after<sp/>ReadTrainingSamples,<sp/>as<sp/>the<sp/>current<sp/>number<sp/>of<sp/>images</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>used<sp/>as<sp/>an<sp/>offset<sp/>for<sp/>page<sp/>numbers<sp/>in<sp/>the<sp/>samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MasterTrainer::LoadPageImages(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>page;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>Pix*<sp/>pix;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(page<sp/>=<sp/>0;<sp/>(pix<sp/>=<sp/>pixReadTiff(filename,<sp/>page))<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;<sp/>++page)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>page_images_.push_back(pix);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Loaded<sp/>%d<sp/>page<sp/>images<sp/>from<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>page,<sp/>filename);</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cleans<sp/>up<sp/>the<sp/>samples<sp/>after<sp/>initial<sp/>load<sp/>from<sp/>the<sp/>tr<sp/>files,<sp/>and<sp/>prior<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>saving<sp/>the<sp/>MasterTrainer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remaps<sp/>fragmented<sp/>chars<sp/>if<sp/>running<sp/>shape<sp/>anaylsis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>up<sp/>the<sp/>samples<sp/>appropriately<sp/>for<sp/>class/fontwise<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deletes<sp/>outlier<sp/>samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MasterTrainer::PostLoadCleanup()<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;PostLoadCleanup...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable_shape_anaylsis_)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>ReplaceFragmentedSamples();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>SampleIterator<sp/>sample_it;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>sample_it.Init(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>&amp;verify_samples_);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>sample_it.NormalizeSamples();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>verify_samples_.OrganizeByFontAndClass();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>samples_.IndexFeatures(feature_space_);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(rays)<sp/>DeleteOutliers<sp/>is<sp/>currently<sp/>turned<sp/>off<sp/>to<sp/>prove<sp/>NOP-ness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>against<sp/>current<sp/>training.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>samples_.DeleteOutliers(feature_space_,<sp/>debug_level_<sp/>&gt;<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>samples_.OrganizeByFontAndClass();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;ComputeCanonicalSamples...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>samples_.ComputeCanonicalSamples(feature_map_,<sp/>debug_level_<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>samples<sp/>ready<sp/>for<sp/>training.<sp/>Use<sp/>after<sp/>both</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ReadTrainingSamples+PostLoadCleanup<sp/>or<sp/>DeSerialize.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Re-indexes<sp/>the<sp/>features<sp/>and<sp/>computes<sp/>canonical<sp/>and<sp/>cloud<sp/>features.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MasterTrainer::PreTrainingSetup()<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;PreTrainingSetup...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>samples_.IndexFeatures(feature_space_);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>samples_.ComputeCanonicalFeatures();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;ComputeCloudFeatures...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>samples_.ComputeCloudFeatures(feature_space_.Size());</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>up<sp/>the<sp/>master_shapes_<sp/>table,<sp/>which<sp/>tells<sp/>which<sp/>fonts<sp/>should<sp/>stay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>together<sp/>until<sp/>they<sp/>get<sp/>to<sp/>a<sp/>leaf<sp/>node<sp/>classifier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MasterTrainer::SetupMasterShapes()<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Building<sp/>master<sp/>shape<sp/>table\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_fonts<sp/>=<sp/>samples_.NumFonts();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>ShapeTable<sp/>char_shapes_begin_fragment(samples_.unicharset());</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>ShapeTable<sp/>char_shapes_end_fragment(samples_.unicharset());</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>ShapeTable<sp/>char_shapes(samples_.unicharset());</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>samples_.charsetsize();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeTable<sp/>shapes(samples_.unicharset());</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>=<sp/>0;<sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>&lt;<sp/>num_fonts;<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(samples_.NumClassSamples(<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>,<sp/>c,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapes.AddShape(c,<sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>ClusterShapes(<ref refid="namespacetesseract_1a6dc1c791f04726f9cc345b54b85222b9" kindref="member">kMinClusteredShapes</ref>,<sp/>1,<sp/><ref refid="namespacetesseract_1a5a80aa3c385749b5df58ac015ba00e9f" kindref="member">kFontMergeDistance</ref>,<sp/>&amp;shapes);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_h_a_r___f_r_a_g_m_e_n_t" kindref="compound">CHAR_FRAGMENT</ref><sp/>*fragment<sp/>=<sp/>samples_.unicharset().get_fragment(c);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fragment<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>char_shapes.AppendMasterShapes(shapes);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fragment-&gt;<ref refid="class_c_h_a_r___f_r_a_g_m_e_n_t_1a42707cfcbf1e9a38ec0333d3202f8d80" kindref="member">is_beginning</ref>())</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>char_shapes_begin_fragment.AppendMasterShapes(shapes);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fragment-&gt;<ref refid="class_c_h_a_r___f_r_a_g_m_e_n_t_1af222b3b2c71de6199f75e3a7a64aa660" kindref="member">is_ending</ref>())</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>char_shapes_end_fragment.AppendMasterShapes(shapes);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>char_shapes.AppendMasterShapes(shapes);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>ClusterShapes(<ref refid="namespacetesseract_1a6dc1c791f04726f9cc345b54b85222b9" kindref="member">kMinClusteredShapes</ref>,<sp/><ref refid="namespacetesseract_1a93d3ba882abd48b578f7db93e8a4e6e9" kindref="member">kMaxUnicharsPerCluster</ref>,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a5a80aa3c385749b5df58ac015ba00e9f" kindref="member">kFontMergeDistance</ref>,<sp/>&amp;char_shapes_begin_fragment);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>char_shapes.AppendMasterShapes(char_shapes_begin_fragment);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>ClusterShapes(<ref refid="namespacetesseract_1a6dc1c791f04726f9cc345b54b85222b9" kindref="member">kMinClusteredShapes</ref>,<sp/><ref refid="namespacetesseract_1a93d3ba882abd48b578f7db93e8a4e6e9" kindref="member">kMaxUnicharsPerCluster</ref>,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a5a80aa3c385749b5df58ac015ba00e9f" kindref="member">kFontMergeDistance</ref>,<sp/>&amp;char_shapes_end_fragment);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>char_shapes.AppendMasterShapes(char_shapes_end_fragment);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>ClusterShapes(<ref refid="namespacetesseract_1a6dc1c791f04726f9cc345b54b85222b9" kindref="member">kMinClusteredShapes</ref>,<sp/><ref refid="namespacetesseract_1a93d3ba882abd48b578f7db93e8a4e6e9" kindref="member">kMaxUnicharsPerCluster</ref>,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1a5a80aa3c385749b5df58ac015ba00e9f" kindref="member">kFontMergeDistance</ref>,<sp/>&amp;char_shapes);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>master_shapes_.AppendMasterShapes(char_shapes);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Master<sp/>shape_table:%s\n&quot;</highlight><highlight class="normal">,<sp/>master_shapes_.SummaryStr().string());</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>the<sp/>junk_samples_<sp/>to<sp/>the<sp/>main<sp/>samples_<sp/>set.<sp/>Junk<sp/>samples<sp/>are<sp/>initially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fragments<sp/>and<sp/>n-grams<sp/>(all<sp/>incorrectly<sp/>segmented<sp/>characters).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Various<sp/>training<sp/>functions<sp/>may<sp/>result<sp/>in<sp/>incorrectly<sp/>segmented<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment">//<sp/>being<sp/>added<sp/>to<sp/>the<sp/>unicharset<sp/>of<sp/>the<sp/>main<sp/>samples,<sp/>perhaps<sp/>because<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>form<sp/>a<sp/>&quot;radical&quot;<sp/>decomposition<sp/>of<sp/>some<sp/>(Indic)<sp/>grapheme,<sp/>or<sp/>because<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>just<sp/>look<sp/>the<sp/>same<sp/>as<sp/>a<sp/>real<sp/>character<sp/>(like<sp/>rn/m)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>moves<sp/>all<sp/>the<sp/>junk<sp/>samples,<sp/>to<sp/>the<sp/>main<sp/>samples_<sp/>set,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>desirable<sp/>junk,<sp/>being<sp/>any<sp/>sample<sp/>for<sp/>which<sp/>the<sp/>unichar<sp/>already<sp/>exists<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>samples_<sp/>unicharset<sp/>gets<sp/>the<sp/>unichar-ids<sp/>re-indexed<sp/>to<sp/>match,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>anything<sp/>else<sp/>gets<sp/>re-marked<sp/>as<sp/>unichar_id<sp/>0<sp/>(space<sp/>character)<sp/>to<sp/>identify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>as<sp/>junk<sp/>to<sp/>the<sp/>error<sp/>counter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MasterTrainer::IncludeJunk()<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>ids<sp/>of<sp/>fragments<sp/>in<sp/>junk_samples_<sp/>that<sp/>replace<sp/>the<sp/>dead<sp/>chars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref>&amp;<sp/>junk_set<sp/>=<sp/>junk_samples_.unicharset();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref>&amp;<sp/>sample_set<sp/>=<sp/>samples_.unicharset();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_junks<sp/>=<sp/>junk_samples_.num_samples();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Moving<sp/>%d<sp/>junk<sp/>samples<sp/>to<sp/>master<sp/>sample<sp/>set.\n&quot;</highlight><highlight class="normal">,<sp/>num_junks);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>num_junks;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>TrainingSample*<sp/>sample<sp/>=<sp/>junk_samples_.mutable_sample(s);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>junk_id<sp/>=<sp/>sample-&gt;class_id();</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>junk_utf8<sp/>=<sp/>junk_set.<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a421c0b6ebcbbe7547490252fb688c961" kindref="member">id_to_unichar</ref>(junk_id);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sample_id<sp/>=<sp/>sample_set.<ref refid="class_u_n_i_c_h_a_r_s_e_t_1ae786fa834962ef4d6dbf8300c6c5d456" kindref="member">unichar_to_id</ref>(junk_utf8);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sample_id<sp/>==<sp/>INVALID_UNICHAR_ID)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sample_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>sample-&gt;set_class_id(sample_id);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>junk_samples_.extract_sample(s);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>samples_.AddSample(sample_id,<sp/>sample);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>junk_samples_.DeleteDeadSamples();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>samples_.OrganizeByFontAndClass();</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Replicates<sp/>the<sp/>samples<sp/>and<sp/>perturbs<sp/>them<sp/>if<sp/>the<sp/>enable_replication_<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>set.<sp/>MUST<sp/>be<sp/>used<sp/>after<sp/>the<sp/>last<sp/>call<sp/>to<sp/>OrganizeByFontAndClass<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>training<sp/>samples,<sp/>ie<sp/>after<sp/>IncludeJunk<sp/>if<sp/>it<sp/>is<sp/>going<sp/>to<sp/>be<sp/>used,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OrganizeByFontAndClass<sp/>will<sp/>eat<sp/>the<sp/>replicated<sp/>samples<sp/>into<sp/>the<sp/>regular</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MasterTrainer::ReplicateAndRandomizeSamplesIfRequired()<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable_replication_)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;ReplicateAndRandomize...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_samples_.ReplicateAndRandomizeSamples();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>samples_.ReplicateAndRandomizeSamples();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>samples_.IndexFeatures(feature_space_);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Loads<sp/>the<sp/>basic<sp/>font<sp/>properties<sp/>file<sp/>into<sp/>fontinfo_table_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>false<sp/>on<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MasterTrainer::LoadFontInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>FILE*<sp/>fp<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>font_properties<sp/>from<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>italic,<sp/>bold,<sp/>fixed,<sp/>serif,<sp/>fraktur;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!feof(fp))<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>FontInfo<sp/>fontinfo;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>font_name<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[1024];</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>fontinfo.name<sp/>=<sp/>font_name;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>fontinfo.properties<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>fontinfo.universal_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fscanf(fp,<sp/></highlight><highlight class="stringliteral">&quot;%1024s<sp/>%i<sp/>%i<sp/>%i<sp/>%i<sp/>%i\n&quot;</highlight><highlight class="normal">,<sp/>font_name,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;italic,<sp/>&amp;bold,<sp/>&amp;fixed,<sp/>&amp;serif,<sp/>&amp;fraktur)<sp/>!=<sp/>6)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>fontinfo.properties<sp/>=</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(italic<sp/>&lt;&lt;<sp/>0)<sp/>+</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bold<sp/>&lt;&lt;<sp/>1)<sp/>+</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fixed<sp/>&lt;&lt;<sp/>2)<sp/>+</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(serif<sp/>&lt;&lt;<sp/>3)<sp/>+</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fraktur<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fontinfo_table_.contains(fontinfo))<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fontinfo_table_.push_back(fontinfo);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Loads<sp/>the<sp/>xheight<sp/>font<sp/>properties<sp/>file<sp/>into<sp/>xheights_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>false<sp/>on<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MasterTrainer::LoadXHeights(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;fontinfo<sp/>table<sp/>is<sp/>of<sp/>size<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>fontinfo_table_.size());</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>xheights_.init_to_size(fontinfo_table_.size(),<sp/>-1);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filename<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>FILE<sp/>*<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref><sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>font<sp/>xheights<sp/>from<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Reading<sp/>x-heights<sp/>from<sp/>%s<sp/>...\n&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>FontInfo<sp/>fontinfo;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>fontinfo.properties<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>used<sp/>to<sp/>lookup<sp/>in<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>fontinfo.universal_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[1024];</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xht;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_xheight<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xheight_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!feof(f))<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fscanf(f,<sp/></highlight><highlight class="stringliteral">&quot;%1024s<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>buffer,<sp/>&amp;xht)<sp/>!=<sp/>2)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>fontinfo.name<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fontinfo_table_.contains(fontinfo))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fontinfo_id<sp/>=<sp/>fontinfo_table_.get_id(fontinfo);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>xheights_[fontinfo_id]<sp/>=<sp/>xht;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>total_xheight<sp/>+=<sp/>xht;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>++xheight_count;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xheight_count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>valid<sp/>xheights<sp/>in<sp/>%s!\n&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mean_xheight<sp/>=<sp/><ref refid="helpers_8h_1a29e9efc11d2c7cdfa4c30881e82999dc" kindref="member">DivRounded</ref>(total_xheight,<sp/>xheight_count);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fontinfo_table_.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xheights_[i]<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xheights_[i]<sp/>=<sp/>mean_xheight;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>LoadXHeights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>spacing<sp/>stats<sp/>from<sp/>filename<sp/>and<sp/>adds<sp/>them<sp/>to<sp/>fontinfo_table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MasterTrainer::AddSpacingInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>FILE*<sp/>fontinfo_file<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontinfo_file<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>silently<sp/>ignore<sp/>missing<sp/>files!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>fontinfo_id.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fontinfo_id<sp/>=<sp/>GetBestMatchingFontInfoId(filename);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontinfo_id<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>font<sp/>found<sp/>matching<sp/>fontinfo<sp/>filename<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fontinfo_file);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Reading<sp/>spacing<sp/>from<sp/>%s<sp/>for<sp/>font<sp/>%d...\n&quot;</highlight><highlight class="normal">,<sp/>filename,<sp/>fontinfo_id);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(rays)<sp/>scale<sp/>should<sp/>probably<sp/>be<sp/>a<sp/>double,<sp/>but<sp/>keep<sp/>as<sp/>an<sp/>int<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>duplicate<sp/>current<sp/>behavior.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/><ref refid="normalis_8h_1af974e6755e636c8bc7cbe57e3bcbdd73" kindref="member">kBlnXHeight</ref><sp/>/<sp/>xheights_[fontinfo_id];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_unichars;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>uch[<ref refid="unichar_8h_1a902bc40c9d89802bc063afe30ce9e708" kindref="member">UNICHAR_LEN</ref>];</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kerned_uch[<ref refid="unichar_8h_1a902bc40c9d89802bc063afe30ce9e708" kindref="member">UNICHAR_LEN</ref>];</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x_gap,<sp/>x_gap_before,<sp/>x_gap_after,<sp/>num_kerned;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><ref refid="errcode_8h_1a93a603f4063a6b9403d81caa245a583b" kindref="member">ASSERT_HOST</ref>(fscanf(fontinfo_file,<sp/></highlight><highlight class="stringliteral">&quot;%d\n&quot;</highlight><highlight class="normal">,<sp/>&amp;num_unichars)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>FontInfo<sp/>*fi<sp/>=<sp/>fontinfo_table_.get_mutable(fontinfo_id);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>fi-&gt;init_spacing(unicharset_.size());</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>FontSpacingInfo<sp/>*spacing<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;<sp/>l<sp/>&lt;<sp/>num_unichars;<sp/>++l)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fscanf(fontinfo_file,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%d<sp/>%d<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uch,<sp/>&amp;x_gap_before,<sp/>&amp;x_gap_after,<sp/>&amp;num_kerned)<sp/>!=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>format<sp/>of<sp/>font<sp/>spacing<sp/>file<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fontinfo_file);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid<sp/>=<sp/>unicharset_.contains_unichar(uch);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spacing<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FontSpacingInfo();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spacing-&gt;x_gap_before<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x_gap_before<sp/>*<sp/>scale);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spacing-&gt;x_gap_after<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x_gap_after<sp/>*<sp/>scale);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>num_kerned;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fscanf(fontinfo_file,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>kerned_uch,<sp/>&amp;x_gap)<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>format<sp/>of<sp/>font<sp/>spacing<sp/>file<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fontinfo_file);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!valid<sp/>||<sp/>!unicharset_.contains_unichar(kerned_uch))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spacing-&gt;kerned_unichar_ids.push_back(</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unicharset_.unichar_to_id(kerned_uch));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spacing-&gt;kerned_x_gaps.push_back(static_cast&lt;inT16&gt;(x_gap<sp/>*<sp/>scale));</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid)<sp/>fi-&gt;add_spacing(unicharset_.unichar_to_id(uch),<sp/>spacing);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>fclose(fontinfo_file);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>font<sp/>id<sp/>corresponding<sp/>to<sp/>the<sp/>given<sp/>font<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>-1<sp/>if<sp/>the<sp/>font<sp/>cannot<sp/>be<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MasterTrainer::GetFontInfoId(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>font_name)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>FontInfo<sp/>fontinfo;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>only<sp/>borrowing<sp/>the<sp/>string,<sp/>so<sp/>it<sp/>is<sp/>OK<sp/>to<sp/>const<sp/>cast<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>fontinfo.name<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(font_name);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>fontinfo.properties<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>used<sp/>to<sp/>lookup<sp/>in<sp/>the<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>fontinfo.universal_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fontinfo_table_.contains(fontinfo))<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fontinfo_table_.get_id(fontinfo);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>font_id<sp/>of<sp/>the<sp/>closest<sp/>matching<sp/>font<sp/>name<sp/>to<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>filename.<sp/>It<sp/>is<sp/>assumed<sp/>that<sp/>a<sp/>substring<sp/>of<sp/>the<sp/>filename<sp/>will<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>one<sp/>of<sp/>the<sp/>fonts.<sp/>If<sp/>more<sp/>than<sp/>one<sp/>is<sp/>matched,<sp/>the<sp/>longest<sp/>is<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MasterTrainer::GetBestMatchingFontInfoId(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fontinfo_id<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>0;<sp/>f<sp/>&lt;<sp/>fontinfo_table_.size();<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(filename,<sp/>fontinfo_table_.get(f).name)<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(fontinfo_table_.get(f).name);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>longest<sp/>matching<sp/>length<sp/>in<sp/>case<sp/>a<sp/>substring<sp/>of<sp/>a<sp/>font<sp/>matched.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>best_len)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_len<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fontinfo_id<sp/>=<sp/><ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fontinfo_id;</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>up<sp/>a<sp/>flat<sp/>shapetable<sp/>with<sp/>one<sp/>shape<sp/>per<sp/>class/font<sp/>combination.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MasterTrainer::SetupFlatShapeTable(ShapeTable*<sp/>shape_table)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>exactly<sp/>mimic<sp/>the<sp/>results<sp/>of<sp/>the<sp/>previous<sp/>implementation,<sp/>the<sp/>shapes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>clustered<sp/>in<sp/>order<sp/>the<sp/>fonts<sp/>arrived,<sp/>and<sp/>reverse<sp/>order<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>characters<sp/>within<sp/>each<sp/>font.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>list<sp/>of<sp/>the<sp/>fonts<sp/>in<sp/>the<sp/>order<sp/>they<sp/>appeared.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;int&gt;</ref><sp/>active_fonts;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_shapes<sp/>=<sp/>flat_shapes_.NumShapes();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>num_shapes;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>font<sp/>=<sp/>flat_shapes_.GetShape(s)[0].font_ids[0];</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(f<sp/>=<sp/>0;<sp/>f<sp/>&lt;<sp/>active_fonts.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(active_fonts[f]<sp/>==<sp/>font)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>active_fonts.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_fonts.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(font);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>font<sp/>in<sp/>order,<sp/>add<sp/>all<sp/>the<sp/>shapes<sp/>with<sp/>that<sp/>font<sp/>in<sp/>reverse<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_fonts<sp/>=<sp/>active_fonts.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>0;<sp/>f<sp/>&lt;<sp/>num_fonts;<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>num_shapes<sp/>-<sp/>1;<sp/>s<sp/>&gt;=<sp/>0;<sp/>--s)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>font<sp/>=<sp/>flat_shapes_.GetShape(s)[0].font_ids[0];</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font<sp/>==<sp/>active_fonts[f])<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_table-&gt;AddShape(flat_shapes_.GetShape(s));</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>up<sp/>a<sp/>Clusterer<sp/>for<sp/>mftraining<sp/>on<sp/>a<sp/>single<sp/>shape_id.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>FreeClusterer<sp/>on<sp/>the<sp/>return<sp/>value<sp/>after<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><ref refid="struct_c_l_u_s_t_e_r_e_r" kindref="compound">CLUSTERER</ref>*<sp/>MasterTrainer::SetupForClustering(</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShapeTable&amp;<sp/>shape_table,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_e_a_t_u_r_e___d_e_f_s___s_t_r_u_c_t" kindref="compound">FEATURE_DEFS_STRUCT</ref>&amp;<sp/>feature_defs,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>num_samples)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>desc_index<sp/>=<sp/><ref refid="featdefs_8cpp_1a46a09d60beb44b9c9156346595f352ee" kindref="member">ShortNameToFeatureType</ref>(feature_defs,<sp/><ref refid="featdefs_8cpp_1af83d597eb1e077f4ad2b082be6698d20" kindref="member">kMicroFeatureType</ref>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_params<sp/>=<sp/>feature_defs.<ref refid="struct_f_e_a_t_u_r_e___d_e_f_s___s_t_r_u_c_t_1a6c85dba3393ddc9311e59b515fd7cf82" kindref="member">FeatureDesc</ref>[desc_index]-&gt;<ref refid="struct_f_e_a_t_u_r_e___d_e_s_c___s_t_r_u_c_t_1a0edbab02900ae01549f742582236eb6d" kindref="member">NumParams</ref>;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><ref refid="errcode_8h_1a93a603f4063a6b9403d81caa245a583b" kindref="member">ASSERT_HOST</ref>(num_params<sp/>==<sp/><ref refid="mf_8h_1a0ae9eb66d190c70000f710f7c11977afa1c44793580a78fadeffdefc28065e682" kindref="member">MFCount</ref>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><ref refid="struct_c_l_u_s_t_e_r_e_r" kindref="compound">CLUSTERER</ref>*<sp/>clusterer<sp/>=<sp/><ref refid="cluster_8cpp_1a93e53684b74358b68adf48b2ee32b042" kindref="member">MakeClusterer</ref>(</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_params,<sp/>feature_defs.<ref refid="struct_f_e_a_t_u_r_e___d_e_f_s___s_t_r_u_c_t_1a6c85dba3393ddc9311e59b515fd7cf82" kindref="member">FeatureDesc</ref>[desc_index]-&gt;<ref refid="struct_f_e_a_t_u_r_e___d_e_s_c___s_t_r_u_c_t_1acc46f9f5b3cded3ca8e7de3e94407c58" kindref="member">ParamDesc</ref>);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>to<sp/>iterate<sp/>over<sp/>the<sp/>samples<sp/>of<sp/>just<sp/>the<sp/>one<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>IndexMapBiDi<sp/>shape_map;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>shape_map.Init(shape_table.NumShapes(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>shape_map.SetMap(shape_id,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>shape_map.Setup();</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reverse<sp/>the<sp/>order<sp/>of<sp/>the<sp/>samples<sp/>to<sp/>match<sp/>the<sp/>previous<sp/>behavior.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;const TrainingSample*&gt;</ref><sp/>sample_ptrs;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>SampleIterator<sp/>it;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>it.Init(&amp;shape_map,<sp/>&amp;shape_table,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>&amp;samples_);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it.Begin();<sp/>!it.AtEnd();<sp/>it.Next())<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>sample_ptrs.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(&amp;it.GetSample());</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sample_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>sample_ptrs.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TrainingSample*<sp/>sample<sp/>=<sp/>sample_ptrs[i];</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_features<sp/>=<sp/>sample-&gt;num_micro_features();</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>0;<sp/>f<sp/>&lt;<sp/>num_features;<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cluster_8cpp_1ab3cc5ee277d4a2cf4000668b1ffbcf4a" kindref="member">MakeSample</ref>(clusterer,<sp/>sample-&gt;micro_features()[<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>],<sp/>sample_id);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>++sample_id;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>*num_samples<sp/>=<sp/>sample_id;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clusterer;</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>the<sp/>given<sp/>float_classes<sp/>(produced<sp/>by<sp/>SetupForFloat2Int)<sp/>as<sp/>inttemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>given<sp/>inttemp_file,<sp/>and<sp/>the<sp/>corresponding<sp/>pffmtable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>unicharset<sp/>is<sp/>the<sp/>original<sp/>encoding<sp/>of<sp/>graphemes,<sp/>and<sp/>shape_set<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>match<sp/>the<sp/>size<sp/>of<sp/>the<sp/>shape_table,<sp/>and<sp/>may<sp/>possibly<sp/>be<sp/>totally<sp/>fake.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MasterTrainer::WriteInttempAndPFFMTable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref>&amp;<sp/>unicharset,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref>&amp;<sp/>shape_set,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShapeTable&amp;<sp/>shape_table,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_l_a_s_s___s_t_r_u_c_t" kindref="compound">CLASS_STRUCT</ref>*<sp/>float_classes,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>inttemp_file,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pffmtable_file)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_classify" kindref="compound">tesseract::Classify</ref><sp/>*classify<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_classify" kindref="compound">tesseract::Classify</ref>();</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>fontinfo<sp/>table<sp/>to<sp/>classify.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>classify-&gt;<ref refid="classtesseract_1_1_classify_1a62597f182a5e23c3b8a030c06e699e99" kindref="member">get_fontinfo_table</ref>().move(&amp;fontinfo_table_);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><ref refid="struct_i_n_t___t_e_m_p_l_a_t_e_s___s_t_r_u_c_t" kindref="compound">INT_TEMPLATES</ref><sp/>int_templates<sp/>=<sp/>classify-&gt;<ref refid="classtesseract_1_1_classify_1af3d15c15c9f2dce72a400233d4bf366f" kindref="member">CreateIntTemplates</ref>(float_classes,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_set);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>FILE*<sp/>fp<sp/>=<sp/>fopen(inttemp_file,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>classify-&gt;<ref refid="classtesseract_1_1_classify_1a81e8a5e5adfc60146ea3eb5b60936dd9" kindref="member">WriteIntTemplates</ref>(fp,<sp/>int_templates,<sp/>shape_set);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>write<sp/>pffmtable.<sp/>This<sp/>is<sp/>complicated<sp/>by<sp/>the<sp/>fact<sp/>that<sp/>the<sp/>adaptive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>classifier<sp/>still<sp/>wants<sp/>one<sp/>indexed<sp/>by<sp/>unichar-id,<sp/>but<sp/>the<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>classifier<sp/>needs<sp/>one<sp/>indexed<sp/>by<sp/>its<sp/>shape<sp/>class<sp/>id.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>put<sp/>the<sp/>shapetable_cutoffs<sp/>in<sp/>a<sp/>GenericVector,<sp/>and<sp/>compute<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unicharset<sp/>cutoffs<sp/>along<sp/>the<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;uinT16&gt;</ref><sp/>shapetable_cutoffs;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;uinT16&gt;</ref><sp/>unichar_cutoffs;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>unicharset.<ref refid="class_u_n_i_c_h_a_r_s_e_t_1aa3e8073ebaf3e0022654c45f27135032" kindref="member">size</ref>();<sp/>++c)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>unichar_cutoffs.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(0);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>then<sp/>write<sp/>out<sp/>each<sp/>class<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>int_templates-&gt;<ref refid="struct_i_n_t___t_e_m_p_l_a_t_e_s___s_t_r_u_c_t_1a4735b2443aa7452909969d8d07e1877a" kindref="member">NumClasses</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_i_n_t___c_l_a_s_s___s_t_r_u_c_t" kindref="compound">INT_CLASS</ref><sp/>Class<sp/>=<sp/><ref refid="intproto_8h_1a6a8e29742b045c359e7765a8a1ff4fdc" kindref="member">ClassForClassId</ref>(int_templates,<sp/>i);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Todo:<sp/>Test<sp/>with<sp/>min<sp/>instead<sp/>of<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>MaxLength<sp/>=<sp/>LengthForConfigId(Class,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref><sp/>max_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>config_id<sp/>=<sp/>0;<sp/>config_id<sp/>&lt;<sp/>Class-&gt;<ref refid="struct_i_n_t___c_l_a_s_s___s_t_r_u_c_t_1abb9c509f11364b949fe9764bc122938c" kindref="member">NumConfigs</ref>;<sp/>config_id++)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Todo:<sp/>Test<sp/>with<sp/>min<sp/>instead<sp/>of<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(LengthForConfigId<sp/>(Class,<sp/>config_id)<sp/>&lt;<sp/>MaxLength)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref><sp/>length<sp/>=<sp/>Class-&gt;<ref refid="struct_i_n_t___c_l_a_s_s___s_t_r_u_c_t_1add0f6eb2f658b418e0eb34d3056a52fc" kindref="member">ConfigLengths</ref>[config_id];</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>max_length)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_length<sp/>=<sp/>Class-&gt;<ref refid="struct_i_n_t___c_l_a_s_s___s_t_r_u_c_t_1add0f6eb2f658b418e0eb34d3056a52fc" kindref="member">ConfigLengths</ref>[config_id];</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape_id<sp/>=<sp/>float_classes[i].<ref refid="struct_c_l_a_s_s___s_t_r_u_c_t_1a42fd551c9f2ee48e5873ae7308df64b4" kindref="member">font_set</ref>.<ref refid="class_unicity_table_1a3b3107bc72d9edfe501eaba7404de7eb" kindref="member" tooltip="Return the object from an id. ">get</ref>(config_id);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Shape&amp;<sp/>shape<sp/>=<sp/>shape_table.GetShape(shape_id);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>shape.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unichar_id<sp/>=<sp/>shape[c].unichar_id;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>unichar_cutoffs[unichar_id])</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unichar_cutoffs[unichar_id]<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>shapetable_cutoffs.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(max_length);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>fp<sp/>=<sp/>fopen(pffmtable_file,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>shapetable_cutoffs.<ref refid="class_generic_vector_1a51aeec27092537323abc7174af1c16ef" kindref="member">Serialize</ref>(fp);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>unicharset.<ref refid="class_u_n_i_c_h_a_r_s_e_t_1aa3e8073ebaf3e0022654c45f27135032" kindref="member">size</ref>();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*unichar<sp/>=<sp/>unicharset.<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a421c0b6ebcbbe7547490252fb688c961" kindref="member">id_to_unichar</ref>(c);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(unichar,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unichar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>unichar,<sp/>unichar_cutoffs[c]);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><ref refid="intproto_8cpp_1aed61c96f41cad7c9871e809124987ca8" kindref="member">free_int_templates</ref>(int_templates);</highlight></codeline>
<codeline lineno="636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generate<sp/>debug<sp/>output<sp/>relating<sp/>to<sp/>the<sp/>canonical<sp/>distance<sp/>between<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>two<sp/>given<sp/>UTF8<sp/>grapheme<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MasterTrainer::DebugCanonical(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>unichar_str1,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>unichar_str2)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>class_id1<sp/>=<sp/>unicharset_.unichar_to_id(unichar_str1);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>class_id2<sp/>=<sp/>unicharset_.unichar_to_id(unichar_str2);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(class_id2<sp/>==<sp/>INVALID_UNICHAR_ID)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>class_id2<sp/>=<sp/>class_id1;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(class_id1<sp/>==<sp/>INVALID_UNICHAR_ID)<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>unicharset<sp/>entry<sp/>found<sp/>for<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>unichar_str1);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Font<sp/>ambiguities<sp/>for<sp/>unichar<sp/>%d<sp/>=<sp/>%s<sp/>and<sp/>%d<sp/>=<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_id1,<sp/>unichar_str1,<sp/>class_id2,<sp/>unichar_str2);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_fonts<sp/>=<sp/>samples_.NumFonts();</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntFeatureMap&amp;<sp/>feature_map<sp/>=<sp/>feature_map_;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>the<sp/>fonts<sp/>to<sp/>get<sp/>the<sp/>similarity<sp/>with<sp/>other<sp/>fonst<sp/>of<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>0;<sp/>f<sp/>&lt;<sp/>num_fonts;<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(samples_.NumClassSamples(f,<sp/>class_id2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;%6d&quot;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f1<sp/>=<sp/>0;<sp/>f1<sp/>&lt;<sp/>num_fonts;<sp/>++f1)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>the<sp/>features<sp/>of<sp/>the<sp/>canonical_sample.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(samples_.NumClassSamples(f1,<sp/>class_id1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;%4d<sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/>f1);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f2<sp/>=<sp/>0;<sp/>f2<sp/>&lt;<sp/>num_fonts;<sp/>++f2)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(samples_.NumClassSamples(f2,<sp/>class_id2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>samples_.ClusterDistance(f1,<sp/>class_id1,<sp/>f2,<sp/>class_id2,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feature_map);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>%5.3f&quot;</highlight><highlight class="normal">,<sp/>dist);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>a<sp/>fake<sp/>ShapeTable<sp/>containing<sp/>all<sp/>the<sp/>sample<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>ShapeTable<sp/>shapes(unicharset_);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>0;<sp/>f<sp/>&lt;<sp/>num_fonts;<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(samples_.NumClassSamples(f,<sp/>class_id1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shapes.AddShape(class_id1,<sp/>f);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(class_id1<sp/>!=<sp/>class_id2<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples_.NumClassSamples(f,<sp/>class_id2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shapes.AddShape(class_id2,<sp/>f);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GRAPHICS_DISABLED</highlight></codeline>
<codeline lineno="690"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>Debugging<sp/>for<sp/>cloud/canonical<sp/>features.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Displays<sp/>a<sp/>Features<sp/>window<sp/>containing:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>unichar_str2<sp/>is<sp/>in<sp/>the<sp/>unicharset,<sp/>and<sp/>canonical_font<sp/>is<sp/>non-negative,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>displays<sp/>the<sp/>canonical<sp/>features<sp/>of<sp/>the<sp/>char/font<sp/>combination<sp/>in<sp/>red.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>unichar_str1<sp/>is<sp/>in<sp/>the<sp/>unicharset,<sp/>and<sp/>cloud_font<sp/>is<sp/>non-negative,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment">//<sp/>displays<sp/>the<sp/>cloud<sp/>feature<sp/>of<sp/>the<sp/>char/font<sp/>combination<sp/>in<sp/>green.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>canonical<sp/>features<sp/>are<sp/>drawn<sp/>first<sp/>to<sp/>show<sp/>which<sp/>ones<sp/>have<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matches<sp/>in<sp/>the<sp/>cloud<sp/>features.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Until<sp/>the<sp/>features<sp/>window<sp/>is<sp/>destroyed,<sp/>each<sp/>click<sp/>in<sp/>the<sp/>features<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>display<sp/>the<sp/>samples<sp/>that<sp/>have<sp/>that<sp/>feature<sp/>in<sp/>a<sp/>separate<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MasterTrainer::DisplaySamples(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>unichar_str1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cloud_font,</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>unichar_str2,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>canonical_font)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntFeatureMap&amp;<sp/>feature_map<sp/>=<sp/>feature_map_;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntFeatureSpace&amp;<sp/>feature_space<sp/>=<sp/>feature_map.feature_space();</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><ref refid="class_scroll_view" kindref="compound">ScrollView</ref>*<sp/>f_window<sp/>=<sp/><ref refid="intproto_8cpp_1aa420561fce74b76450727980adea72b1" kindref="member">CreateFeatureSpaceWindow</ref>(</highlight><highlight class="stringliteral">&quot;Features&quot;</highlight><highlight class="normal">,<sp/>100,<sp/>500);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a50fae3caed4dccef6a71ac7e7aa9d63d" kindref="member">ClearFeatureSpaceWindow</ref>(norm_mode_<sp/>==<sp/><ref refid="namespacetesseract_1ad3e7916f0120e26e7b4e0f830784194aa643bd757ce3d9647d68aae97256d0233" kindref="member">NM_BASELINE</ref><sp/>?<sp/><ref refid="mfoutline_8h_1a2a4b69f9a2827dc98bc4cbc233118865a83297de004f4e58b9be2108c6cd08a23" kindref="member">baseline</ref><sp/>:<sp/><ref refid="mfoutline_8h_1a2a4b69f9a2827dc98bc4cbc233118865afa40ef3af4fea0001b535318130960b2" kindref="member">character</ref>,</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_window);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>class_id2<sp/>=<sp/>samples_.unicharset().unichar_to_id(unichar_str2);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(class_id2<sp/>!=<sp/>INVALID_UNICHAR_ID<sp/>&amp;&amp;<sp/>canonical_font<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TrainingSample*<sp/>sample<sp/>=<sp/>samples_.GetCanonicalSample(canonical_font,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_id2);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>0;<sp/>f<sp/>&lt;<sp/>sample-&gt;num_features();<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="intproto_8cpp_1a83c43ef1a01f3be45cbf675da04c3930" kindref="member">RenderIntFeature</ref>(f_window,<sp/>&amp;sample-&gt;features()[<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>],<sp/><ref refid="class_scroll_view_1a100504544a5423a94222149ee9ed0fe8a0959f7470b08ae1a38aa7e38fba29402" kindref="member">ScrollView::RED</ref>);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>class_id1<sp/>=<sp/>samples_.unicharset().unichar_to_id(unichar_str1);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(class_id1<sp/>!=<sp/>INVALID_UNICHAR_ID<sp/>&amp;&amp;<sp/>cloud_font<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BitVector&amp;<sp/>cloud<sp/>=<sp/>samples_.GetCloudFeatures(cloud_font,<sp/>class_id1);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>0;<sp/>f<sp/>&lt;<sp/>cloud.size();<sp/>++<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cloud[f])<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i_n_t___f_e_a_t_u_r_e___s_t_r_u_c_t" kindref="compound">INT_FEATURE_STRUCT</ref><sp/>feature<sp/>=</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feature_map.InverseIndexFeature(f);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="intproto_8cpp_1a83c43ef1a01f3be45cbf675da04c3930" kindref="member">RenderIntFeature</ref>(f_window,<sp/>&amp;feature,<sp/><ref refid="class_scroll_view_1a100504544a5423a94222149ee9ed0fe8a9d8c87be486dead41d198d6b97a22174" kindref="member">ScrollView::GREEN</ref>);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>f_window-&gt;<ref refid="class_scroll_view_1a0830a51981a20c8700b5ec49137e46e9" kindref="member">Update</ref>();</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><ref refid="class_scroll_view" kindref="compound">ScrollView</ref>*<sp/>s_window<sp/>=<sp/><ref refid="intproto_8cpp_1aa420561fce74b76450727980adea72b1" kindref="member">CreateFeatureSpaceWindow</ref>(</highlight><highlight class="stringliteral">&quot;Samples&quot;</highlight><highlight class="normal">,<sp/>100,<sp/>500);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><ref refid="scrollview_8h_1a3688a0cf2f95d10a57e095222ccfe9a0" kindref="member">SVEventType</ref><sp/>ev_type;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_v_event" kindref="compound">SVEvent</ref>*<sp/>ev;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>until<sp/>a<sp/>click<sp/>or<sp/>popup<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>ev<sp/>=<sp/>f_window-&gt;<ref refid="class_scroll_view_1a0b820b3fe7a2ce083da0784e9339a1ad" kindref="member">AwaitEvent</ref>(<ref refid="scrollview_8h_1a3688a0cf2f95d10a57e095222ccfe9a0a6eec81ed585bda7ff47ec38918cb2a0e" kindref="member">SVET_ANY</ref>);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>ev_type<sp/>=<sp/>ev-&gt;<ref refid="struct_s_v_event_1a5bf8585bd1901b9103eb2783f8afe508" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ev_type<sp/>==<sp/><ref refid="scrollview_8h_1a3688a0cf2f95d10a57e095222ccfe9a0a2afe407abe8c055c45765b85d20e7946" kindref="member">SVET_CLICK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>feature_index<sp/>=<sp/>feature_space.XYToFeatureIndex(ev-&gt;<ref refid="struct_s_v_event_1a45ffe2bc44987a5461278e78de76f6f7" kindref="member">x</ref>,<sp/>ev-&gt;<ref refid="struct_s_v_event_1aabace8b3b902fe15aef808ad9c203bb7" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(feature_index<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>samples<sp/>and<sp/>display<sp/>those<sp/>with<sp/>the<sp/>feature.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shape<sp/>shape;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape.AddToShape(class_id1,<sp/>cloud_font);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_window-&gt;<ref refid="class_scroll_view_1a5386b0da16d7cbdd33044e53b95313ac" kindref="member">Clear</ref>();</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples_.DisplaySamplesWithFeature(feature_index,<sp/>shape,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feature_space,<sp/><ref refid="class_scroll_view_1a100504544a5423a94222149ee9ed0fe8a9d8c87be486dead41d198d6b97a22174" kindref="member">ScrollView::GREEN</ref>,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_window);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_window-&gt;<ref refid="class_scroll_view_1a0830a51981a20c8700b5ec49137e46e9" kindref="member">Update</ref>();</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ev;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ev_type<sp/>!=<sp/><ref refid="scrollview_8h_1a3688a0cf2f95d10a57e095222ccfe9a0adbe9fb2ca110dbf1b838d845d32a89e7" kindref="member">SVET_DESTROY</ref>);</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GRAPHICS_DISABLED</highlight></codeline>
<codeline lineno="752"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>given<sp/>test_classifier<sp/>on<sp/>the<sp/>internal<sp/>samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>TestClassifier<sp/>for<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MasterTrainer::TestClassifierOnSamples(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>report_level,</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>replicate_samples,</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShapeClassifier*<sp/>test_classifier,</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>*<sp/>report_string)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>TestClassifier(report_level,<sp/>replicate_samples,<sp/>&amp;samples_,</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_classifier,<sp/>report_string);</highlight></codeline>
<codeline lineno="761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>given<sp/>test_classifier<sp/>on<sp/>the<sp/>given<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">//<sp/>report_levels:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment">//<sp/>0<sp/>=<sp/>no<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>=<sp/>bottom-line<sp/>error<sp/>rate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>=<sp/>bottom-line<sp/>error<sp/>rate<sp/>+<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>=<sp/>font-level<sp/>error<sp/>rate<sp/>+<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">//<sp/>4<sp/>=<sp/>list<sp/>of<sp/>all<sp/>errors<sp/>+<sp/>short<sp/>classifier<sp/>debug<sp/>output<sp/>on<sp/>16<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>5<sp/>=<sp/>list<sp/>of<sp/>all<sp/>errors<sp/>+<sp/>short<sp/>classifier<sp/>debug<sp/>output<sp/>on<sp/>25<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>replicate_samples<sp/>is<sp/>true,<sp/>then<sp/>the<sp/>test<sp/>is<sp/>run<sp/>on<sp/>an<sp/>extended<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sample<sp/>including<sp/>replicated<sp/>and<sp/>systematically<sp/>perturbed<sp/>samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>report_string<sp/>is<sp/>non-NULL,<sp/>a<sp/>summary<sp/>of<sp/>the<sp/>results<sp/>for<sp/>each<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>appended<sp/>to<sp/>the<sp/>report_string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MasterTrainer::TestClassifier(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>report_level,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>replicate_samples,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TrainingSampleSet*<sp/>samples,</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShapeClassifier*<sp/>test_classifier,</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref>*<sp/>report_string)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>SampleIterator<sp/>sample_it;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>sample_it.Init(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>test_classifier-&gt;GetShapeTable(),<sp/>replicate_samples,</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(report_level<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_samples<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sample_it.Begin();<sp/>!sample_it.AtEnd();<sp/>sample_it.Next())</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++num_samples;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Iterator<sp/>has<sp/>charset<sp/>size<sp/>of<sp/>%d/%d,<sp/>%d<sp/>shapes,<sp/>%d<sp/>samples\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_it.SparseCharsetSize(),<sp/>sample_it.CompactCharsetSize(),</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_classifier-&gt;GetShapeTable()-&gt;NumShapes(),<sp/>num_samples);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Testing<sp/>%sREPLICATED:\n&quot;</highlight><highlight class="normal">,<sp/>replicate_samples<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;NON-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unichar_error<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>ErrorCounter::ComputeErrorRate(test_classifier,<sp/>report_level,</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1acb0bc20d78b75745c9aa3832a619f4fdaece404f7a03b3e062c4c2f9580019c13" kindref="member">CT_SHAPE_TOP_ERR</ref>,<sp/>fontinfo_table_,</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>page_images_,<sp/>&amp;sample_it,<sp/>&amp;unichar_error,</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>report_string);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unichar_error;</highlight></codeline>
<codeline lineno="798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>average<sp/>(in<sp/>some<sp/>sense)<sp/>distance<sp/>between<sp/>the<sp/>two<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shapes,<sp/>which<sp/>may<sp/>contain<sp/>multiple<sp/>fonts<sp/>and/or<sp/>unichars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>MasterTrainer::ShapeDistance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShapeTable&amp;<sp/>shapes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntFeatureMap&amp;<sp/>feature_map<sp/>=<sp/>feature_map_;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Shape&amp;<sp/>shape1<sp/>=<sp/>shapes.GetShape(s1);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Shape&amp;<sp/>shape2<sp/>=<sp/>shapes.GetShape(s2);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_chars1<sp/>=<sp/>shape1.size();</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_chars2<sp/>=<sp/>shape2.size();</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dist_sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dist_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_chars1<sp/>&gt;<sp/>1<sp/>||<sp/>num_chars2<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>multi-char<sp/>case<sp/>try<sp/>to<sp/>optimize<sp/>the<sp/>calculation<sp/>by<sp/>computing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>distances<sp/>between<sp/>characters<sp/>of<sp/>matching<sp/>font<sp/>where<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c1<sp/>=<sp/>0;<sp/>c1<sp/>&lt;<sp/>num_chars1;<sp/>++c1)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c2<sp/>=<sp/>0;<sp/>c2<sp/>&lt;<sp/>num_chars2;<sp/>++c2)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_sum<sp/>+=<sp/>samples_.UnicharDistance(shape1[c1],<sp/>shape2[c2],</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>feature_map);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++dist_count;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>single<sp/>unichar<sp/>case,<sp/>there<sp/>is<sp/>little<sp/>alternative,<sp/>but<sp/>to<sp/>compute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>squared-order<sp/>distance<sp/>between<sp/>pairs<sp/>of<sp/>fonts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>dist_sum<sp/>=<sp/>samples_.UnicharDistance(shape1[0],<sp/>shape2[0],</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>feature_map);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>++dist_count;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dist_sum<sp/>/<sp/>dist_count;</highlight></codeline>
<codeline lineno="828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Replaces<sp/>samples<sp/>that<sp/>are<sp/>always<sp/>fragmented<sp/>with<sp/>the<sp/>corresponding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fragment<sp/>samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MasterTrainer::ReplaceFragmentedSamples()<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fragments_<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>samples<sp/>that<sp/>are<sp/>replaced<sp/>by<sp/>fragments.<sp/>Each<sp/>class<sp/>that<sp/>was</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>naturally<sp/>fragmented<sp/>should<sp/>be<sp/>replaced<sp/>by<sp/>its<sp/>fragments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_samples<sp/>=<sp/>samples_.num_samples();</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>num_samples;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>TrainingSample*<sp/>sample<sp/>=<sp/>samples_.mutable_sample(s);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fragments_[sample-&gt;class_id()]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samples_.KillSample(sample);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>samples_.DeleteDeadSamples();</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>ids<sp/>of<sp/>fragments<sp/>in<sp/>junk_samples_<sp/>that<sp/>replace<sp/>the<sp/>dead<sp/>chars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref>&amp;<sp/>frag_set<sp/>=<sp/>junk_samples_.unicharset();</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="847"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(rays)<sp/>The<sp/>original<sp/>idea<sp/>was<sp/>to<sp/>replace<sp/>only<sp/>graphemes<sp/>that<sp/>were</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>naturally<sp/>fragmented,<sp/>but<sp/>that<sp/>left<sp/>a<sp/>lot<sp/>of<sp/>the<sp/>Indic<sp/>graphemes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>out.<sp/>Determine<sp/>whether<sp/>we<sp/>can<sp/>go<sp/>back<sp/>to<sp/>that<sp/>idea<sp/>now<sp/>that<sp/>spacing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>fixed<sp/>in<sp/>the<sp/>training<sp/>images,<sp/>or<sp/>whether<sp/>this<sp/>code<sp/>is<sp/>obsolete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>good_junk<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[frag_set.<ref refid="class_u_n_i_c_h_a_r_s_e_t_1aa3e8073ebaf3e0022654c45f27135032" kindref="member">size</ref>()];</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>memset(good_junk,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*good_junk)<sp/>*<sp/>frag_set.<ref refid="class_u_n_i_c_h_a_r_s_e_t_1aa3e8073ebaf3e0022654c45f27135032" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dead_ch<sp/>=<sp/>1;<sp/>dead_ch<sp/>&lt;<sp/>unicharset_.size();<sp/>++dead_ch)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frag_ch<sp/>=<sp/>fragments_[dead_ch];</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frag_ch<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>frag_utf8<sp/>=<sp/>frag_set.<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a421c0b6ebcbbe7547490252fb688c961" kindref="member">id_to_unichar</ref>(frag_ch);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_h_a_r___f_r_a_g_m_e_n_t" kindref="compound">CHAR_FRAGMENT</ref>*<sp/>frag<sp/>=<sp/><ref refid="class_c_h_a_r___f_r_a_g_m_e_n_t_1ac56b3d4af146800dd576dd60a11ea563" kindref="member">CHAR_FRAGMENT::parse_from_string</ref>(frag_utf8);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>the<sp/>chars<sp/>for<sp/>all<sp/>parts<sp/>of<sp/>the<sp/>fragment<sp/>as<sp/>good<sp/>in<sp/>good_junk.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>part<sp/>=<sp/>0;<sp/>part<sp/>&lt;<sp/>frag-&gt;<ref refid="class_c_h_a_r___f_r_a_g_m_e_n_t_1aac1d5e077505363c264144a9348b3f0e" kindref="member">get_total</ref>();<sp/>++part)<sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frag-&gt;<ref refid="class_c_h_a_r___f_r_a_g_m_e_n_t_1a833694ba8fc5e137a2e003034523eae1" kindref="member">set_pos</ref>(part);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>good_ch<sp/>=<sp/>frag_set.<ref refid="class_u_n_i_c_h_a_r_s_e_t_1ae786fa834962ef4d6dbf8300c6c5d456" kindref="member">unichar_to_id</ref>(frag-&gt;<ref refid="class_c_h_a_r___f_r_a_g_m_e_n_t_1ab845f2c4b4a4bac23392806c445f1fe4" kindref="member">to_string</ref>().<ref refid="class_s_t_r_i_n_g_1a32beee43ecab1bed8bebc3466896ad6e" kindref="member">string</ref>());</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(good_ch<sp/>!=<sp/>INVALID_UNICHAR_ID)</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>good_junk[good_ch]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>this<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="867"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>now<sp/>just<sp/>use<sp/>all<sp/>the<sp/>junk<sp/>that<sp/>was<sp/>from<sp/>natural<sp/>fragments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>samples<sp/>of<sp/>fragments<sp/>in<sp/>junk_samples_<sp/>that<sp/>replace<sp/>the<sp/>dead<sp/>chars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_junks<sp/>=<sp/>junk_samples_.num_samples();</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>num_junks;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>TrainingSample*<sp/>sample<sp/>=<sp/>junk_samples_.mutable_sample(s);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>junk_id<sp/>=<sp/>sample-&gt;class_id();</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>frag_utf8<sp/>=<sp/>frag_set.<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a421c0b6ebcbbe7547490252fb688c961" kindref="member">id_to_unichar</ref>(junk_id);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_h_a_r___f_r_a_g_m_e_n_t" kindref="compound">CHAR_FRAGMENT</ref>*<sp/>frag<sp/>=<sp/><ref refid="class_c_h_a_r___f_r_a_g_m_e_n_t_1ac56b3d4af146800dd576dd60a11ea563" kindref="member">CHAR_FRAGMENT::parse_from_string</ref>(frag_utf8);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frag<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>frag-&gt;<ref refid="class_c_h_a_r___f_r_a_g_m_e_n_t_1a3a54d954fd5a60836119fa362fe99289" kindref="member">is_natural</ref>())<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>junk_samples_.extract_sample(s);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samples_.AddSample(frag_set.<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a421c0b6ebcbbe7547490252fb688c961" kindref="member">id_to_unichar</ref>(junk_id),<sp/>sample);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>junk_samples_.DeleteDeadSamples();</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>junk_samples_.OrganizeByFontAndClass();</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>samples_.OrganizeByFontAndClass();</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>unicharset_.clear();</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>unicharset_.AppendOtherUnicharset(samples_.unicharset());</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>[]<sp/>good_junk;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fragments_<sp/>no<sp/>longer<sp/>needed?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>fragments_;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>fragments_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runs<sp/>a<sp/>hierarchical<sp/>agglomerative<sp/>clustering<sp/>to<sp/>merge<sp/>shapes<sp/>in<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shape_table,<sp/>while<sp/>satisfying<sp/>the<sp/>given<sp/>constraints:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>End<sp/>with<sp/>at<sp/>least<sp/>min_shapes<sp/>left<sp/>in<sp/>shape_table,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>No<sp/>shape<sp/>shall<sp/>have<sp/>more<sp/>than<sp/>max_shape_unichars<sp/>in<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Don&apos;t<sp/>merge<sp/>shapes<sp/>where<sp/>the<sp/>distance<sp/>between<sp/>them<sp/>exceeds<sp/>max_dist.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a765cba391d1d3fc666802038fce31c85" kindref="member">kInfiniteDist</ref><sp/>=<sp/>999.0f;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MasterTrainer::ClusterShapes(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_shapes,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_shape_unichars,</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_dist,<sp/>ShapeTable*<sp/>shapes)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_shapes<sp/>=<sp/>shapes-&gt;NumShapes();</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_merges<sp/>=<sp/>num_shapes<sp/>-<sp/>min_shapes;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;ShapeDist&gt;</ref>*<sp/>shape_dists<sp/>=</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;ShapeDist&gt;</ref>[num_shapes];</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_dist<sp/>=<sp/><ref refid="namespacetesseract_1a765cba391d1d3fc666802038fce31c85" kindref="member">kInfiniteDist</ref>;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_s1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_s2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Computing<sp/>shape<sp/>distances...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>0;<sp/>s1<sp/>&lt;<sp/>num_shapes;<sp/>++s1)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s2<sp/>=<sp/>s1<sp/>+<sp/>1;<sp/>s2<sp/>&lt;<sp/>num_shapes;<sp/>++s2)<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ShapeDist<sp/>dist(s1,<sp/>s2,<sp/>ShapeDistance(*shapes,<sp/>s1,<sp/>s2));</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shape_dists[s1].<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(dist);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist.distance<sp/>&lt;<sp/>min_dist)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_dist<sp/>=<sp/>dist.distance;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_s1<sp/>=<sp/>s1;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_s2<sp/>=<sp/>s2;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>s1);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_merged<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_merged<sp/>&lt;<sp/>max_merges<sp/>&amp;&amp;<sp/>min_dist<sp/>&lt;<sp/>max_dist)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Distance<sp/>=<sp/>%f:<sp/>&quot;</highlight><highlight class="normal">,<sp/>min_dist);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_unichars<sp/>=<sp/>shapes-&gt;MergedUnicharCount(min_s1,<sp/>min_s2);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>shape_dists[min_s1][min_s2<sp/>-<sp/>min_s1<sp/>-<sp/>1].distance<sp/>=<sp/><ref refid="namespacetesseract_1a765cba391d1d3fc666802038fce31c85" kindref="member">kInfiniteDist</ref>;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_unichars<sp/>&gt;<sp/>max_shape_unichars)<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Merge<sp/>of<sp/>%d<sp/>and<sp/>%d<sp/>with<sp/>%d<sp/>would<sp/>exceed<sp/>max<sp/>of<sp/>%d<sp/>unichars\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_s1,<sp/>min_s2,<sp/>num_unichars,<sp/>max_shape_unichars);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shapes-&gt;MergeShapes(min_s1,<sp/>min_s2);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shape_dists[min_s2].<ref refid="class_generic_vector_1a9cdbff49b186574b83e43afba606fdd9" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++num_merged;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>min_s1;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shape_dists[s].empty())<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_dists[s][min_s1<sp/>-<sp/>s<sp/>-<sp/>1].distance<sp/>=</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShapeDistance(*shapes,<sp/>s,<sp/>min_s1);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_dists[s][min_s2<sp/>-<sp/>s<sp/>-1].distance<sp/>=<sp/><ref refid="namespacetesseract_1a765cba391d1d3fc666802038fce31c85" kindref="member">kInfiniteDist</ref>;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s2<sp/>=<sp/>min_s1<sp/>+<sp/>1;<sp/>s2<sp/>&lt;<sp/>num_shapes;<sp/>++s2)<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape_dists[min_s1][s2<sp/>-<sp/>min_s1<sp/>-<sp/>1].distance<sp/>&lt;<sp/><ref refid="namespacetesseract_1a765cba391d1d3fc666802038fce31c85" kindref="member">kInfiniteDist</ref>)</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_dists[min_s1][s2<sp/>-<sp/>min_s1<sp/>-<sp/>1].distance<sp/>=</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShapeDistance(*shapes,<sp/>min_s1,<sp/>s2);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>min_s1<sp/>+<sp/>1;<sp/>s<sp/>&lt;<sp/>min_s2;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shape_dists[s].empty())<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_dists[s][min_s2<sp/>-<sp/>s<sp/>-<sp/>1].distance<sp/>=<sp/><ref refid="namespacetesseract_1a765cba391d1d3fc666802038fce31c85" kindref="member">kInfiniteDist</ref>;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>min_dist<sp/>=<sp/><ref refid="namespacetesseract_1a765cba391d1d3fc666802038fce31c85" kindref="member">kInfiniteDist</ref>;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>0;<sp/>s1<sp/>&lt;<sp/>num_shapes;<sp/>++s1)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shape_dists[s1].<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape_dists[s1][i].distance<sp/>&lt;<sp/>min_dist)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_dist<sp/>=<sp/>shape_dists[s1][i].distance;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_s1<sp/>=<sp/>s1;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_s2<sp/>=<sp/>s1<sp/>+<sp/>1<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Stopped<sp/>with<sp/>%d<sp/>merged,<sp/>min<sp/>dist<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>num_merged,<sp/>min_dist);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>shape_dists;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level_<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>0;<sp/>s1<sp/>&lt;<sp/>num_shapes;<sp/>++s1)<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shapes-&gt;MasterDestinationIndex(s1)<sp/>==<sp/>s1)<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Master<sp/>shape:%s\n&quot;</highlight><highlight class="normal">,<sp/>shapes-&gt;DebugStr(s1).string());</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tesseract.</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/classify/mastertrainer.cpp"/>
  </compounddef>
</doxygen>
