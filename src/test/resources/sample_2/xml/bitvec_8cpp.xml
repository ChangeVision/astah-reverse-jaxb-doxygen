<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="bitvec_8cpp" kind="file">
    <compoundname>bitvec.cpp</compoundname>
    <includes refid="bitvec_8h" local="yes">bitvec.h</includes>
    <includes local="no">stdio.h</includes>
    <includes refid="emalloc_8h" local="yes">emalloc.h</includes>
    <includes refid="freelist_8h" local="yes">freelist.h</includes>
    <includes refid="tprintf_8h" local="yes">tprintf.h</includes>
    <incdepgraph>
      <node id="32458">
        <label>assert.h</label>
      </node>
      <node id="32466">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="32461">
        <label>stdlib.h</label>
      </node>
      <node id="32453">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="32454" relation="include">
        </childnode>
      </node>
      <node id="32451">
        <label>bitvec.h</label>
        <link refid="bitvec_8h"/>
        <childnode refid="32452" relation="include">
        </childnode>
      </node>
      <node id="32450">
        <label>cutil/bitvec.cpp</label>
        <link refid="bitvec.cpp"/>
        <childnode refid="32451" relation="include">
        </childnode>
        <childnode refid="32455" relation="include">
        </childnode>
        <childnode refid="32456" relation="include">
        </childnode>
        <childnode refid="32472" relation="include">
        </childnode>
        <childnode refid="32473" relation="include">
        </childnode>
      </node>
      <node id="32469">
        <label>stddef.h</label>
      </node>
      <node id="32471">
        <label>memory.h</label>
      </node>
      <node id="32457">
        <label>callcpp.h</label>
        <link refid="callcpp_8h"/>
        <childnode refid="32458" relation="include">
        </childnode>
        <childnode refid="32452" relation="include">
        </childnode>
        <childnode refid="32459" relation="include">
        </childnode>
        <childnode refid="32470" relation="include">
        </childnode>
      </node>
      <node id="32463">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="32452" relation="include">
        </childnode>
      </node>
      <node id="32454">
        <label>limits.h</label>
      </node>
      <node id="32465">
        <label>string.h</label>
      </node>
      <node id="32470">
        <label>unichar.h</label>
        <link refid="unichar_8h"/>
        <childnode refid="32471" relation="include">
        </childnode>
        <childnode refid="32465" relation="include">
        </childnode>
      </node>
      <node id="32462">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="32452" relation="include">
        </childnode>
      </node>
      <node id="32456">
        <label>emalloc.h</label>
        <link refid="emalloc_8h"/>
        <childnode refid="32452" relation="include">
        </childnode>
        <childnode refid="32457" relation="include">
        </childnode>
      </node>
      <node id="32459">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="32455" relation="include">
        </childnode>
        <childnode refid="32460" relation="include">
        </childnode>
        <childnode refid="32467" relation="include">
        </childnode>
      </node>
      <node id="32460">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="32455" relation="include">
        </childnode>
        <childnode refid="32461" relation="include">
        </childnode>
        <childnode refid="32462" relation="include">
        </childnode>
        <childnode refid="32463" relation="include">
        </childnode>
        <childnode refid="32464" relation="include">
        </childnode>
        <childnode refid="32466" relation="include">
        </childnode>
      </node>
      <node id="32468">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="32469" relation="include">
        </childnode>
        <childnode refid="32452" relation="include">
        </childnode>
      </node>
      <node id="32472">
        <label>freelist.h</label>
        <link refid="freelist_8h"/>
        <childnode refid="32455" relation="include">
        </childnode>
      </node>
      <node id="32473">
        <label>tprintf.h</label>
        <link refid="tprintf_8h"/>
        <childnode refid="32459" relation="include">
        </childnode>
      </node>
      <node id="32452">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="32453" relation="include">
        </childnode>
      </node>
      <node id="32455">
        <label>stdio.h</label>
      </node>
      <node id="32467">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="32455" relation="include">
        </childnode>
        <childnode refid="32465" relation="include">
        </childnode>
        <childnode refid="32453" relation="include">
        </childnode>
        <childnode refid="32468" relation="include">
        </childnode>
      </node>
      <node id="32464">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="32455" relation="include">
        </childnode>
        <childnode refid="32465" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="bitvec_8cpp_1a74773bfbcc12095f8d32c11b28e2577d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref></type>
        <definition>BIT_VECTOR ExpandBitVector</definition>
        <argsstring>(BIT_VECTOR Vector, int NewNumBits)</argsstring>
        <name>ExpandBitVector</name>
        <param>
          <type><ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref></type>
          <declname>Vector</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NewNumBits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine uses realloc to increase the size of the specified bit vector.</para><para>Globals:<itemizedlist>
<listitem><para>none</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Vector</parametername>
</parameternamelist>
<parameterdescription>
<para>bit vector to be expanded </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewNumBits</parametername>
</parameternamelist>
<parameterdescription>
<para>new size of bit vector</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New expanded bit vector. </para></simplesect>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Fri Nov 16 10:11:16 1990, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>&lt; no of bits in a long</para><para>&lt; no of bits in a long </para>        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/bitvec.cpp" line="48" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/bitvec.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="bitvec_8cpp_1adc1a7f52bb1fce0746e1e5725ad679f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeBitVector</definition>
        <argsstring>(BIT_VECTOR BitVector)</argsstring>
        <name>FreeBitVector</name>
        <param>
          <type><ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref></type>
          <declname>BitVector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This routine frees a bit vector. It also decrements the global counter that keeps track of the number of bit vectors allocated. If BitVector is NULL, then the count is printed to stderr.</para><para>Globals:<itemizedlist>
<listitem><para>BitVectorCount count of number of bit vectors allocated</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>BitVector</parametername>
</parameternamelist>
<parameterdescription>
<para>bit vector to be freed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Tue Oct 23 16:46:09 1990, DSJ, Created.</para></simplesect>
</para>        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/bitvec.cpp" line="55" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/bitvec.cpp" bodystart="55" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="bitvec_8cpp_1a5e8aad36a4fa1ed6100fc1504a2100b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hamming_distance</definition>
        <argsstring>(uinT32 *array1, uinT32 *array2, int length)</argsstring>
        <name>hamming_distance</name>
        <param>
          <type><ref refid="host_8h_1afc8530b39ebe0b6df1e19159d2508d15" kindref="member">uinT32</ref> *</type>
          <declname>array1</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1afc8530b39ebe0b6df1e19159d2508d15" kindref="member">uinT32</ref> *</type>
          <declname>array2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>hamming_distance(array1,array2,length) computes the hamming distance between two bit strings. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/bitvec.cpp" line="81" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/bitvec.cpp" bodystart="81" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="bitvec_8cpp_1a502314dc3ee4b178df067713b324b868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref></type>
        <definition>BIT_VECTOR NewBitVector</definition>
        <argsstring>(int NumBits)</argsstring>
        <name>NewBitVector</name>
        <param>
          <type>int</type>
          <declname>NumBits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate and return a new bit vector large enough to hold the specified number of bits.</para><para>Globals:<itemizedlist>
<listitem><para>BitVectorCount number of bit vectors allocated</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>NumBits</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits in new bit vector</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New bit vector. </para></simplesect>
<simplesect kind="note"><para>Exceptions: none </para><simplesectsep/><para>History: Tue Oct 23 16:51:27 1990, DSJ, Created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>&lt; no of bits in a long</para><para>&lt; no of bits in a long </para>        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/bitvec.cpp" line="111" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/bitvec.cpp" bodystart="111" bodyend="114"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>**<sp/>Filename:<sp/><sp/><sp/><sp/>bitvec.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>**<sp/>Purpose:<sp/><sp/><sp/><sp/><sp/>Routines<sp/>for<sp/>manipulating<sp/>bit<sp/>vectors</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>**<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/>Dan<sp/>Johnson</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**<sp/>History:<sp/><sp/><sp/><sp/><sp/>Thu<sp/>Mar<sp/>15<sp/>10:37:27<sp/>1990,<sp/>DSJ,<sp/>Created.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>**</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>**<sp/>(c)<sp/>Copyright<sp/>Hewlett-Packard<sp/>Company,<sp/>1988.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>**<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>**<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>**<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>**<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>**<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>**<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>**<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>**<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>**<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Include<sp/>Files<sp/>and<sp/>Type<sp/>Defines</highlight></codeline>
<codeline lineno="21"><highlight class="comment">-----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bitvec_8h" kindref="compound">bitvec.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="emalloc_8h" kindref="compound">emalloc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="freelist_8h" kindref="compound">freelist.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tprintf_8h" kindref="compound">tprintf.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Public<sp/>Code</highlight></codeline>
<codeline lineno="32"><highlight class="comment">-----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref><sp/><ref refid="bitvec_8cpp_1a74773bfbcc12095f8d32c11b28e2577d" kindref="member">ExpandBitVector</ref>(<ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref><sp/>Vector,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NewNumBits)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref>)<sp/><ref refid="emalloc_8cpp_1a92c09eaf43dcfc23a738fca16eb677b9" kindref="member">Erealloc</ref>(Vector,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Vector[0])<sp/>*<sp/><ref refid="bitvec_8h_1a905ff9b6c51cb231dd8baf1713a3c9b8" kindref="member">WordsInVectorOfSize</ref>(NewNumBits)));</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ExpandBitVector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bitvec_8cpp_1adc1a7f52bb1fce0746e1e5725ad679f6" kindref="member">FreeBitVector</ref>(<ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref><sp/>BitVector)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BitVector)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="emalloc_8cpp_1af846576ae65dc13e49ddc616e17baa27" kindref="member">Efree</ref>(BitVector);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FreeBitVector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">/*--------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bitvec_8cpp_1a5e8aad36a4fa1ed6100fc1504a2100b5" kindref="member">hamming_distance</ref>(<ref refid="host_8h_1afc8530b39ebe0b6df1e19159d2508d15" kindref="member">uinT32</ref>*<sp/>array1,<sp/><ref refid="host_8h_1afc8530b39ebe0b6df1e19159d2508d15" kindref="member">uinT32</ref>*<sp/>array2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="host_8h_1afc8530b39ebe0b6df1e19159d2508d15" kindref="member">uinT32</ref><sp/>diff;<sp/><sp/><sp/></highlight><highlight class="comment">/*bit<sp/>difference<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dist;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*total<sp/>distance<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>dist<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>length<sp/>&gt;<sp/>0;<sp/>length--)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>*array1++<sp/>^<sp/>*array2++;</highlight><highlight class="comment">/*different<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(diff)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>&amp;=<sp/>diff<sp/>-<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*lose<sp/>a<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist++;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dist;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*total<sp/>distance<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref><sp/><ref refid="bitvec_8cpp_1a502314dc3ee4b178df067713b324b868" kindref="member">NewBitVector</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumBits)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="bitvec_8h_1a584fa1e33e36d105f97bc7e7288fb259" kindref="member">BIT_VECTOR</ref>)<sp/><ref refid="emalloc_8cpp_1a55f2088f1a7b3333bb5c7275ab726bba" kindref="member">Emalloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="host_8h_1afc8530b39ebe0b6df1e19159d2508d15" kindref="member">uinT32</ref>)<sp/>*</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bitvec_8h_1a905ff9b6c51cb231dd8baf1713a3c9b8" kindref="member">WordsInVectorOfSize</ref>(NumBits)));</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>NewBitVector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/cutil/bitvec.cpp"/>
  </compounddef>
</doxygen>
