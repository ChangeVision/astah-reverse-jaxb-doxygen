<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="intfx_8cpp" kind="file">
    <compoundname>intfx.cpp</compoundname>
    <includes refid="intfx_8h" local="yes">intfx.h</includes>
    <includes refid="intmatcher_8h" local="yes">intmatcher.h</includes>
    <includes refid="const_8h" local="yes">const.h</includes>
    <includes refid="helpers_8h" local="yes">helpers.h</includes>
    <includes refid="ccutil_8h" local="yes">ccutil.h</includes>
    <includes refid="statistc_8h" local="yes">statistc.h</includes>
    <includes refid="trainingsample_8h" local="yes">trainingsample.h</includes>
    <incdepgraph>
      <node id="25134">
        <label>cutil_class.h</label>
        <link refid="cutil__class_8h"/>
        <childnode refid="25135" relation="include">
        </childnode>
        <childnode refid="25142" relation="include">
        </childnode>
        <childnode refid="25125" relation="include">
        </childnode>
      </node>
      <node id="25157">
        <label>assert.h</label>
      </node>
      <node id="25118">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="25151">
        <label>statistc.h</label>
        <link refid="statistc_8h"/>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25102" relation="include">
        </childnode>
        <childnode refid="25119" relation="include">
        </childnode>
      </node>
      <node id="25142">
        <label>const.h</label>
        <link refid="const_8h"/>
      </node>
      <node id="25106">
        <label>stdlib.h</label>
      </node>
      <node id="25103">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="25104" relation="include">
        </childnode>
      </node>
      <node id="25146">
        <label>bitvec.h</label>
        <link refid="bitvec_8h"/>
        <childnode refid="25102" relation="include">
        </childnode>
      </node>
      <node id="25162">
        <label>blckerr.h</label>
        <link refid="blckerr_8h"/>
        <childnode refid="25110" relation="include">
        </childnode>
      </node>
      <node id="25135">
        <label>ccutil.h</label>
        <link refid="ccutil_8h"/>
        <childnode refid="25136" relation="include">
        </childnode>
        <childnode refid="25110" relation="include">
        </childnode>
        <childnode refid="25125" relation="include">
        </childnode>
        <childnode refid="25139" relation="include">
        </childnode>
        <childnode refid="25121" relation="include">
        </childnode>
        <childnode refid="25137" relation="include">
        </childnode>
        <childnode refid="25140" relation="include">
        </childnode>
        <childnode refid="25141" relation="include">
        </childnode>
      </node>
      <node id="25119">
        <label>scrollview.h</label>
        <link refid="scrollview_8h"/>
        <childnode refid="25101" relation="include">
        </childnode>
      </node>
      <node id="25105">
        <label>serialis.h</label>
        <link refid="serialis_8h"/>
        <childnode refid="25106" relation="include">
        </childnode>
        <childnode refid="25107" relation="include">
        </childnode>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25108" relation="include">
        </childnode>
        <childnode refid="25110" relation="include">
        </childnode>
        <childnode refid="25111" relation="include">
        </childnode>
      </node>
      <node id="25100">
        <label>clst.h</label>
        <link refid="clst_8h"/>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25102" relation="include">
        </childnode>
        <childnode refid="25105" relation="include">
        </childnode>
        <childnode refid="25112" relation="include">
        </childnode>
      </node>
      <node id="25144">
        <label>baseline.h</label>
        <link refid="baseline_8h"/>
        <childnode refid="25102" relation="include">
        </childnode>
        <childnode refid="25099" relation="include">
        </childnode>
        <childnode refid="25121" relation="include">
        </childnode>
      </node>
      <node id="25170">
        <label>mf.h</label>
        <link refid="mf_8h"/>
        <childnode refid="25154" relation="include">
        </childnode>
        <childnode refid="25099" relation="include">
        </childnode>
      </node>
      <node id="25163">
        <label>stepblob.h</label>
        <link refid="stepblob_8h"/>
        <childnode refid="25164" relation="include">
        </childnode>
        <childnode refid="25113" relation="include">
        </childnode>
      </node>
      <node id="25156">
        <label>ratngs.h</label>
        <link refid="ratngs_8h"/>
        <childnode refid="25157" relation="include">
        </childnode>
        <childnode refid="25100" relation="include">
        </childnode>
        <childnode refid="25122" relation="include">
        </childnode>
        <childnode refid="25158" relation="include">
        </childnode>
        <childnode refid="25129" relation="include">
        </childnode>
        <childnode refid="25137" relation="include">
        </childnode>
        <childnode refid="25159" relation="include">
        </childnode>
      </node>
      <node id="25109">
        <label>stddef.h</label>
      </node>
      <node id="25130">
        <label>memory.h</label>
      </node>
      <node id="25150">
        <label>cutoffs.h</label>
        <link refid="cutoffs_8h"/>
        <childnode refid="25128" relation="include">
        </childnode>
      </node>
      <node id="25143">
        <label>fpoint.h</label>
        <link refid="fpoint_8h"/>
        <childnode refid="25102" relation="include">
        </childnode>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25114" relation="include">
        </childnode>
      </node>
      <node id="25110">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="25102" relation="include">
        </childnode>
      </node>
      <node id="25128">
        <label>matchdefs.h</label>
        <link refid="matchdefs_8h"/>
        <childnode refid="25102" relation="include">
        </childnode>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25129" relation="include">
        </childnode>
      </node>
      <node id="25104">
        <label>limits.h</label>
      </node>
      <node id="25172">
        <label>shapetable.h</label>
        <link refid="shapetable_8h"/>
        <childnode refid="25122" relation="include">
        </childnode>
        <childnode refid="25149" relation="include">
        </childnode>
      </node>
      <node id="25098">
        <label>intfx.h</label>
        <link refid="intfx_8h"/>
        <childnode refid="25099" relation="include">
        </childnode>
        <childnode refid="25127" relation="include">
        </childnode>
        <childnode refid="25148" relation="include">
        </childnode>
        <childnode refid="25114" relation="include">
        </childnode>
      </node>
      <node id="25117">
        <label>ipoints.h</label>
        <link refid="ipoints_8h"/>
        <childnode refid="25114" relation="include">
        </childnode>
      </node>
      <node id="25166">
        <label>mod128.h</label>
        <link refid="mod128_8h"/>
        <childnode refid="25115" relation="include">
        </childnode>
      </node>
      <node id="25161">
        <label>elst2.h</label>
        <link refid="elst2_8h"/>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25102" relation="include">
        </childnode>
        <childnode refid="25105" relation="include">
        </childnode>
        <childnode refid="25112" relation="include">
        </childnode>
      </node>
      <node id="25140">
        <label>pthread.h</label>
      </node>
      <node id="25107">
        <label>string.h</label>
      </node>
      <node id="25138">
        <label>unicharmap.h</label>
        <link refid="unicharmap_8h"/>
        <childnode refid="25129" relation="include">
        </childnode>
      </node>
      <node id="25129">
        <label>unichar.h</label>
        <link refid="unichar_8h"/>
        <childnode refid="25130" relation="include">
        </childnode>
        <childnode refid="25107" relation="include">
        </childnode>
      </node>
      <node id="25133">
        <label>cutil.h</label>
        <link refid="cutil_8h"/>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25107" relation="include">
        </childnode>
        <childnode refid="25106" relation="include">
        </childnode>
        <childnode refid="25102" relation="include">
        </childnode>
        <childnode refid="25120" relation="include">
        </childnode>
        <childnode refid="25134" relation="include">
        </childnode>
      </node>
      <node id="25113">
        <label>rect.h</label>
        <link refid="rect_8h"/>
        <childnode refid="25114" relation="include">
        </childnode>
        <childnode refid="25115" relation="include">
        </childnode>
        <childnode refid="25118" relation="include">
        </childnode>
        <childnode refid="25119" relation="include">
        </childnode>
        <childnode refid="25120" relation="include">
        </childnode>
      </node>
      <node id="25160">
        <label>bits16.h</label>
        <link refid="bits16_8h"/>
        <childnode refid="25102" relation="include">
        </childnode>
      </node>
      <node id="25123">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="25102" relation="include">
        </childnode>
      </node>
      <node id="25141">
        <label>semaphore.h</label>
      </node>
      <node id="25164">
        <label>coutln.h</label>
        <link refid="coutln_8h"/>
        <childnode refid="25165" relation="include">
        </childnode>
        <childnode refid="25166" relation="include">
        </childnode>
        <childnode refid="25160" relation="include">
        </childnode>
        <childnode refid="25113" relation="include">
        </childnode>
        <childnode refid="25162" relation="include">
        </childnode>
        <childnode refid="25119" relation="include">
        </childnode>
      </node>
      <node id="25159">
        <label>werd.h</label>
        <link refid="werd_8h"/>
        <childnode refid="25121" relation="include">
        </childnode>
        <childnode refid="25160" relation="include">
        </childnode>
        <childnode refid="25161" relation="include">
        </childnode>
        <childnode refid="25125" relation="include">
        </childnode>
        <childnode refid="25162" relation="include">
        </childnode>
        <childnode refid="25163" relation="include">
        </childnode>
        <childnode refid="25167" relation="include">
        </childnode>
      </node>
      <node id="25097">
        <label>classify/intfx.cpp</label>
        <link refid="intfx.cpp"/>
        <childnode refid="25098" relation="include">
        </childnode>
        <childnode refid="25149" relation="include">
        </childnode>
        <childnode refid="25142" relation="include">
        </childnode>
        <childnode refid="25124" relation="include">
        </childnode>
        <childnode refid="25135" relation="include">
        </childnode>
        <childnode refid="25151" relation="include">
        </childnode>
        <childnode refid="25152" relation="include">
        </childnode>
      </node>
      <node id="25167">
        <label>ocrrow.h</label>
        <link refid="ocrrow_8h"/>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25168" relation="include">
        </childnode>
        <childnode refid="25159" relation="include">
        </childnode>
      </node>
      <node id="25111">
        <label>fileerr.h</label>
        <link refid="fileerr_8h"/>
        <childnode refid="25110" relation="include">
        </childnode>
      </node>
      <node id="25131">
        <label>mfoutline.h</label>
        <link refid="mfoutline_8h"/>
        <childnode refid="25102" relation="include">
        </childnode>
        <childnode refid="25132" relation="include">
        </childnode>
        <childnode refid="25143" relation="include">
        </childnode>
        <childnode refid="25144" relation="include">
        </childnode>
        <childnode refid="25121" relation="include">
        </childnode>
      </node>
      <node id="25136">
        <label>ambigs.h</label>
        <link refid="ambigs_8h"/>
        <childnode refid="25116" relation="include">
        </childnode>
        <childnode refid="25120" relation="include">
        </childnode>
        <childnode refid="25129" relation="include">
        </childnode>
        <childnode refid="25137" relation="include">
        </childnode>
        <childnode refid="25122" relation="include">
        </childnode>
      </node>
      <node id="25147">
        <label>unicity_table.h</label>
        <link refid="unicity__table_8h"/>
        <childnode refid="25123" relation="include">
        </childnode>
        <childnode refid="25110" relation="include">
        </childnode>
        <childnode refid="25122" relation="include">
        </childnode>
      </node>
      <node id="25165">
        <label>crakedge.h</label>
        <link refid="crakedge_8h"/>
        <childnode refid="25115" relation="include">
        </childnode>
        <childnode refid="25166" relation="include">
        </childnode>
      </node>
      <node id="25114">
        <label>math.h</label>
      </node>
      <node id="25112">
        <label>lsterr.h</label>
        <link refid="lsterr_8h"/>
        <childnode refid="25110" relation="include">
        </childnode>
      </node>
      <node id="25171">
        <label>picofeat.h</label>
        <link refid="picofeat_8h"/>
        <childnode refid="25154" relation="include">
        </childnode>
        <childnode refid="25121" relation="include">
        </childnode>
      </node>
      <node id="25169">
        <label>quadratc.h</label>
        <link refid="quadratc_8h"/>
        <childnode refid="25115" relation="include">
        </childnode>
      </node>
      <node id="25126">
        <label>vecfuncs.h</label>
        <link refid="vecfuncs_8h"/>
        <childnode refid="25114" relation="include">
        </childnode>
        <childnode refid="25099" relation="include">
        </childnode>
      </node>
      <node id="25132">
        <label>oldlist.h</label>
        <link refid="oldlist_8h"/>
        <childnode refid="25133" relation="include">
        </childnode>
        <childnode refid="25123" relation="include">
        </childnode>
      </node>
      <node id="25154">
        <label>ocrfeatures.h</label>
        <link refid="ocrfeatures_8h"/>
        <childnode refid="25099" relation="include">
        </childnode>
        <childnode refid="25101" relation="include">
        </childnode>
      </node>
      <node id="25121">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25122" relation="include">
        </childnode>
        <childnode refid="25125" relation="include">
        </childnode>
      </node>
      <node id="25122">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25106" relation="include">
        </childnode>
        <childnode refid="25123" relation="include">
        </childnode>
        <childnode refid="25110" relation="include">
        </childnode>
        <childnode refid="25124" relation="include">
        </childnode>
        <childnode refid="25118" relation="include">
        </childnode>
      </node>
      <node id="25108">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="25109" relation="include">
        </childnode>
        <childnode refid="25102" relation="include">
        </childnode>
      </node>
      <node id="25145">
        <label>protos.h</label>
        <link refid="protos_8h"/>
        <childnode refid="25146" relation="include">
        </childnode>
        <childnode refid="25133" relation="include">
        </childnode>
        <childnode refid="25129" relation="include">
        </childnode>
        <childnode refid="25147" relation="include">
        </childnode>
        <childnode refid="25121" relation="include">
        </childnode>
      </node>
      <node id="25152">
        <label>trainingsample.h</label>
        <link refid="trainingsample_8h"/>
        <childnode refid="25116" relation="include">
        </childnode>
        <childnode refid="25153" relation="include">
        </childnode>
        <childnode refid="25098" relation="include">
        </childnode>
        <childnode refid="25149" relation="include">
        </childnode>
        <childnode refid="25155" relation="include">
        </childnode>
        <childnode refid="25170" relation="include">
        </childnode>
        <childnode refid="25171" relation="include">
        </childnode>
        <childnode refid="25172" relation="include">
        </childnode>
        <childnode refid="25137" relation="include">
        </childnode>
      </node>
      <node id="25153">
        <label>featdefs.h</label>
        <link refid="featdefs_8h"/>
        <childnode refid="25154" relation="include">
        </childnode>
      </node>
      <node id="25116">
        <label>elst.h</label>
        <link refid="elst_8h"/>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25102" relation="include">
        </childnode>
        <childnode refid="25105" relation="include">
        </childnode>
        <childnode refid="25112" relation="include">
        </childnode>
      </node>
      <node id="25137">
        <label>unicharset.h</label>
        <link refid="unicharset_8h"/>
        <childnode refid="25110" relation="include">
        </childnode>
        <childnode refid="25124" relation="include">
        </childnode>
        <childnode refid="25125" relation="include">
        </childnode>
        <childnode refid="25123" relation="include">
        </childnode>
        <childnode refid="25129" relation="include">
        </childnode>
        <childnode refid="25138" relation="include">
        </childnode>
      </node>
      <node id="25115">
        <label>points.h</label>
        <link refid="points_8h"/>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25114" relation="include">
        </childnode>
        <childnode refid="25116" relation="include">
        </childnode>
        <childnode refid="25117" relation="include">
        </childnode>
      </node>
      <node id="25158">
        <label>notdll.h</label>
        <link refid="notdll_8h"/>
      </node>
      <node id="25120">
        <label>tprintf.h</label>
        <link refid="tprintf_8h"/>
        <childnode refid="25121" relation="include">
        </childnode>
      </node>
      <node id="25149">
        <label>intmatcher.h</label>
        <link refid="intmatcher_8h"/>
        <childnode refid="25121" relation="include">
        </childnode>
        <childnode refid="25127" relation="include">
        </childnode>
        <childnode refid="25150" relation="include">
        </childnode>
      </node>
      <node id="25102">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="25103" relation="include">
        </childnode>
      </node>
      <node id="25101">
        <label>stdio.h</label>
      </node>
      <node id="25155">
        <label>matrix.h</label>
        <link refid="matrix_8h"/>
        <childnode refid="25156" relation="include">
        </childnode>
        <childnode refid="25137" relation="include">
        </childnode>
      </node>
      <node id="25127">
        <label>intproto.h</label>
        <link refid="intproto_8h"/>
        <childnode refid="25122" relation="include">
        </childnode>
        <childnode refid="25128" relation="include">
        </childnode>
        <childnode refid="25131" relation="include">
        </childnode>
        <childnode refid="25145" relation="include">
        </childnode>
        <childnode refid="25119" relation="include">
        </childnode>
        <childnode refid="25137" relation="include">
        </childnode>
      </node>
      <node id="25139">
        <label>tessdatamanager.h</label>
        <link refid="tessdatamanager_8h"/>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25102" relation="include">
        </childnode>
        <childnode refid="25120" relation="include">
        </childnode>
      </node>
      <node id="25148">
        <label>normalis.h</label>
        <link refid="normalis_8h"/>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25102" relation="include">
        </childnode>
      </node>
      <node id="25125">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25107" relation="include">
        </childnode>
        <childnode refid="25103" relation="include">
        </childnode>
        <childnode refid="25108" relation="include">
        </childnode>
      </node>
      <node id="25099">
        <label>blobs.h</label>
        <link refid="blobs_8h"/>
        <childnode refid="25100" relation="include">
        </childnode>
        <childnode refid="25113" relation="include">
        </childnode>
        <childnode refid="25126" relation="include">
        </childnode>
      </node>
      <node id="25124">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25107" relation="include">
        </childnode>
      </node>
      <node id="25168">
        <label>quspline.h</label>
        <link refid="quspline_8h"/>
        <childnode refid="25169" relation="include">
        </childnode>
        <childnode refid="25105" relation="include">
        </childnode>
        <childnode refid="25108" relation="include">
        </childnode>
        <childnode refid="25113" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="intfx_8cpp_1ad066161a8c3bbd7d6f9376f1f4babf9d" prot="public" static="no">
        <name>ATAN_TABLE_SIZE</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 <heading level="2">Global Data Definitions and Declarations </heading>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="56" column="10" bodyfile="/Users/makoto/Desktop/trunk/classify/intfx.cpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="intfx_8cpp_1aa59f1487aa3836dd6f6a80d5b42fc9df" prot="public" static="yes" mutable="no">
        <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref></type>
        <definition>uinT8 AtanTable[64]</definition>
        <argsstring>[64]</argsstring>
        <name>AtanTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="61" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intfx.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intfx_8cpp_1a94b825687881a044bd4c7df5c6445ade" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float cos_table[256]</definition>
        <argsstring>[256]</argsstring>
        <name>cos_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="64" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intfx.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intfx_8cpp_1a139227272aaf639725c7b6be7154011e" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float sin_table[256]</definition>
        <argsstring>[256]</argsstring>
        <name>sin_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="65" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intfx.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intfx_8cpp_1ac4a1776ca13b7a287e68b1dcd590a240" prot="public" static="no" mutable="no">
        <type><ref refid="classtesseract_1_1_c_c_util_mutex" kindref="compound">tesseract::CCUtilMutex</ref></type>
        <definition>tesseract::CCUtilMutex atan_table_mutex</definition>
        <argsstring></argsstring>
        <name>atan_table_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="67" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intfx.cpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="intfx_8cpp_1aba41203e3a07f7039b7e63e87b06c26a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SaveFeature</definition>
        <argsstring>()</argsstring>
        <name>SaveFeature</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 <heading level="2">Private Function Prototypes </heading>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="intfx_8cpp_1a2b97e5f70c987ee586d688438e3bf9c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref></type>
        <definition>uinT8 BinaryAnglePlusPi</definition>
        <argsstring>(inT32 Y, inT32 X)</argsstring>
        <name>BinaryAnglePlusPi</name>
        <param>
          <type><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref></type>
          <declname>Y</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref></type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="37" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intfx.cpp" bodystart="429" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="intfx_8cpp_1a3dd08b65217b408c53ba9fe2984b6f76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref></type>
        <definition>uinT8 MySqrt2</definition>
        <argsstring>()</argsstring>
        <name>MySqrt2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="intfx_8cpp_1a739c154855f46f747b9c3eec517933e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClipRadius</definition>
        <argsstring>()</argsstring>
        <name>ClipRadius</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="intfx_8cpp_1a76cee6c8f1a64dcbf67ad8310c7a911f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INT_VAR</definition>
        <argsstring>(classify_radius_gyr_min_man, 255,&quot;Minimum Radius of Gyration Mantissa 0-255:        &quot;)</argsstring>
        <name>INT_VAR</name>
        <param>
          <type>classify_radius_gyr_min_man</type>
        </param>
        <param>
          <type>255</type>
        </param>
        <param>
          <type>&quot;Minimum Radius of Gyration Mantissa 0-255: &quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="intfx_8cpp_1a2f94a655e48c766d4b07d857a2b43d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INT_VAR</definition>
        <argsstring>(classify_radius_gyr_min_exp, 0,&quot;Minimum Radius of Gyration Exponent 0-255:        &quot;)</argsstring>
        <name>INT_VAR</name>
        <param>
          <type>classify_radius_gyr_min_exp</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>&quot;Minimum Radius of Gyration Exponent 0-255: &quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="intfx_8cpp_1a8e010b3f65d290f232958a2bd630796a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INT_VAR</definition>
        <argsstring>(classify_radius_gyr_max_man, 158,&quot;Maximum Radius of Gyration Mantissa 0-255:        &quot;)</argsstring>
        <name>INT_VAR</name>
        <param>
          <type>classify_radius_gyr_max_man</type>
        </param>
        <param>
          <type>158</type>
        </param>
        <param>
          <type>&quot;Maximum Radius of Gyration Mantissa 0-255: &quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="intfx_8cpp_1a1eca153c4e75d0101a21226d7f614a80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INT_VAR</definition>
        <argsstring>(classify_radius_gyr_max_exp, 8,&quot;Maximum Radius of Gyration Exponent 0-255:        &quot;)</argsstring>
        <name>INT_VAR</name>
        <param>
          <type>classify_radius_gyr_max_exp</type>
        </param>
        <param>
          <type>8</type>
        </param>
        <param>
          <type>&quot;Maximum Radius of Gyration Exponent 0-255: &quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="intfx_8cpp_1a1281b17b87e56c99d53fe6bb1f7c2d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void InitIntegerFX</definition>
        <argsstring>()</argsstring>
        <name>InitIntegerFX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 <heading level="2">Public Code </heading>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="74" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intfx.cpp" bodystart="74" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="intfx_8cpp_1a31bfe591242811378902d7342621a59b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_f_c_o_o_r_d" kindref="compound">FCOORD</ref></type>
        <definition>FCOORD FeatureDirection</definition>
        <argsstring>(uinT8 theta)</argsstring>
        <name>FeatureDirection</name>
        <param>
          <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref></type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="93" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intfx.cpp" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="intfx_8cpp_1a4d1e2eabb76cc44bd542d2dc059cbd78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtesseract_1_1_training_sample" kindref="compound">TrainingSample</ref> *</type>
        <definition>TrainingSample* GetIntFeatures</definition>
        <argsstring>(tesseract::NormalizationMode mode, TBLOB *blob, const DENORM &amp;denorm)</argsstring>
        <name>GetIntFeatures</name>
        <param>
          <type><ref refid="namespacetesseract_1ad3e7916f0120e26e7b4e0f830784194a" kindref="member">tesseract::NormalizationMode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="97" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intfx.cpp" bodystart="97" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="intfx_8cpp_1a508a06732c67c00efc9db362bd8b970e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ExtractIntFeat</definition>
        <argsstring>(TBLOB *Blob, const DENORM &amp;denorm, INT_FEATURE_ARRAY BLFeat, INT_FEATURE_ARRAY CNFeat, INT_FX_RESULT_STRUCT *Results, inT32 *FeatureOutlineArray)</argsstring>
        <name>ExtractIntFeat</name>
        <param>
          <type><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref> *</type>
          <declname>Blob</declname>
        </param>
        <param>
          <type>const <ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref> &amp;</type>
          <declname>denorm</declname>
        </param>
        <param>
          <type><ref refid="intproto_8h_1afc188645dba6ff9f0eb7f056464fdd34" kindref="member">INT_FEATURE_ARRAY</ref></type>
          <declname>BLFeat</declname>
        </param>
        <param>
          <type><ref refid="intproto_8h_1afc188645dba6ff9f0eb7f056464fdd34" kindref="member">INT_FEATURE_ARRAY</ref></type>
          <declname>CNFeat</declname>
        </param>
        <param>
          <type><ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t" kindref="compound">INT_FX_RESULT_STRUCT</ref> *</type>
          <declname>Results</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref> *</type>
          <declname>FeatureOutlineArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="143" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intfx.cpp" bodystart="143" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="intfx_8cpp_1a39f0d7870861018a4a7275bdc62cb7fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SaveFeature</definition>
        <argsstring>(INT_FEATURE_ARRAY FeatureArray, uinT16 FeatureNum, inT16 X, inT16 Y, uinT8 Theta)</argsstring>
        <name>SaveFeature</name>
        <param>
          <type><ref refid="intproto_8h_1afc188645dba6ff9f0eb7f056464fdd34" kindref="member">INT_FEATURE_ARRAY</ref></type>
          <declname>FeatureArray</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref></type>
          <declname>FeatureNum</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref></type>
          <declname>X</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref></type>
          <declname>Y</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref></type>
          <declname>Theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="478" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intfx.cpp" bodystart="478" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="intfx_8cpp_1ae43fb1813d49d82c4de33ff987227e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref></type>
        <definition>uinT16 MySqrt</definition>
        <argsstring>(inT32 X, inT32 Y)</argsstring>
        <name>MySqrt</name>
        <param>
          <type><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref></type>
          <declname>X</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref></type>
          <declname>Y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="505" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intfx.cpp" bodystart="505" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="intfx_8cpp_1a8adfab32307f22e1fd886e49de5aee78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref></type>
        <definition>uinT8 MySqrt2</definition>
        <argsstring>(uinT16 N, uinT32 I, uinT8 *Exp)</argsstring>
        <name>MySqrt2</name>
        <param>
          <type><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref></type>
          <declname>N</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1afc8530b39ebe0b6df1e19159d2508d15" kindref="member">uinT32</ref></type>
          <declname>I</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>Exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="542" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intfx.cpp" bodystart="542" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="intfx_8cpp_1a541de7deb738cb8a49ef0d6c6ab21075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClipRadius</definition>
        <argsstring>(uinT8 *RxInv, uinT8 *RxExp, uinT8 *RyInv, uinT8 *RyExp)</argsstring>
        <name>ClipRadius</name>
        <param>
          <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>RxInv</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>RxExp</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>RyInv</declname>
        </param>
        <param>
          <type><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref> *</type>
          <declname>RyExp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp" line="594" column="1" bodyfile="/Users/makoto/Desktop/trunk/classify/intfx.cpp" bodystart="594" bodyend="744"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/><sp/><sp/>Filename:<sp/><sp/><sp/><sp/>intfx.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/><sp/><sp/>Purpose:<sp/><sp/><sp/><sp/><sp/>Integer<sp/>character<sp/>normalization<sp/>&amp;<sp/>feature<sp/>extraction</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/>Robert<sp/>Moss</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/><sp/><sp/>History:<sp/><sp/><sp/><sp/><sp/>Tue<sp/>May<sp/>21<sp/>15:51:57<sp/>MDT<sp/>1991,<sp/>RWM,<sp/>Created.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>**</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>**<sp/><sp/><sp/><sp/><sp/><sp/>(c)<sp/>Copyright<sp/>Hewlett-Packard<sp/>Company,<sp/>1988.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>**<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>**<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>**<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>**<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>**<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>**<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>**<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>**<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>**<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>******************************************************************************/</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="intfx_8h" kindref="compound">intfx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="intmatcher_8h" kindref="compound">intmatcher.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="const_8h" kindref="compound">const.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="helpers_8h" kindref="compound">helpers.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ccutil_8h" kindref="compound">ccutil.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="statistc_8h" kindref="compound">statistc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="trainingsample_8h" kindref="compound">trainingsample.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__UNIX__</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_training_sample" kindref="compound">tesseract::TrainingSample</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intfx_8cpp_1aba41203e3a07f7039b7e63e87b06c26a" kindref="member">SaveFeature</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/><ref refid="intfx_8cpp_1a2b97e5f70c987ee586d688438e3bf9c2" kindref="member">BinaryAnglePlusPi</ref>(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>Y,<sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>X);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/><ref refid="intfx_8cpp_1a3dd08b65217b408c53ba9fe2984b6f76" kindref="member">MySqrt2</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="intfx_8cpp_1a739c154855f46f747b9c3eec517933e2" kindref="member">ClipRadius</ref>();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="params_8h_1a554d43d0cf0e3f9552921941d9e147bd" kindref="member">INT_VAR</ref>(classify_radius_gyr_min_man,<sp/>255,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>Radius<sp/>of<sp/>Gyration<sp/>Mantissa<sp/>0-255:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="params_8h_1a554d43d0cf0e3f9552921941d9e147bd" kindref="member">INT_VAR</ref>(classify_radius_gyr_min_exp,<sp/>0,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>Radius<sp/>of<sp/>Gyration<sp/>Exponent<sp/>0-255:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="params_8h_1a554d43d0cf0e3f9552921941d9e147bd" kindref="member">INT_VAR</ref>(classify_radius_gyr_max_man,<sp/>158,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>Radius<sp/>of<sp/>Gyration<sp/>Mantissa<sp/>0-255:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="params_8h_1a554d43d0cf0e3f9552921941d9e147bd" kindref="member">INT_VAR</ref>(classify_radius_gyr_max_exp,<sp/>8,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>Radius<sp/>of<sp/>Gyration<sp/>Exponent<sp/>0-255:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor">#define<sp/><sp/>ATAN_TABLE_SIZE<sp/><sp/><sp/><sp/>64</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Look<sp/>up<sp/>table<sp/>for<sp/>arc<sp/>tangent<sp/>containing:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>atan(0.0)<sp/>...<sp/>atan(ATAN_TABLE_SIZE<sp/>-<sp/>1<sp/>/<sp/>ATAN_TABLE_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>entries<sp/>are<sp/>in<sp/>binary<sp/>degrees<sp/>where<sp/>a<sp/>full<sp/>circle<sp/>is<sp/>256<sp/>binary<sp/>degrees.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>AtanTable[<ref refid="intfx_8cpp_1ad066161a8c3bbd7d6f9376f1f4babf9d" kindref="member">ATAN_TABLE_SIZE</ref>];</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Look<sp/>up<sp/>table<sp/>for<sp/>cos<sp/>and<sp/>sin<sp/>to<sp/>turn<sp/>the<sp/>intfx<sp/>feature<sp/>angle<sp/>to<sp/>a<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also<sp/>protected<sp/>by<sp/>atan_table_mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cos_table[<ref refid="intproto_8h_1a5a763027f420d44c110f0887f297259c" kindref="member">INT_CHAR_NORM_RANGE</ref>];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sin_table[<ref refid="intproto_8h_1a5a763027f420d44c110f0887f297259c" kindref="member">INT_CHAR_NORM_RANGE</ref>];</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Guards<sp/>write<sp/>access<sp/>to<sp/>AtanTable<sp/>so<sp/>we<sp/>dont<sp/>create<sp/>it<sp/>more<sp/>than<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="classtesseract_1_1_c_c_util_mutex" kindref="compound">tesseract::CCUtilMutex</ref><sp/><ref refid="intfx_8cpp_1ac4a1776ca13b7a287e68b1dcd590a240" kindref="member">atan_table_mutex</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="intfx_8cpp_1a1281b17b87e56c99d53fe6bb1f7c2d55" kindref="member">InitIntegerFX</ref>()<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>atan_table_init<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>atan_table_mutex.<ref refid="classtesseract_1_1_c_c_util_mutex_1a9b593dd73dc2510c71739841e37ee17c" kindref="member">Lock</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!atan_table_init)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="intfx_8cpp_1ad066161a8c3bbd7d6f9376f1f4babf9d" kindref="member">ATAN_TABLE_SIZE</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AtanTable[i]<sp/>=</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref>)<sp/>(atan<sp/>((i<sp/>/<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>ATAN_TABLE_SIZE))<sp/>*<sp/>128.0<sp/>/<sp/><ref refid="const_8h_1a598a3330b3c21701223ee0ca14316eca" kindref="member">PI</ref><sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="intproto_8h_1a5a763027f420d44c110f0887f297259c" kindref="member">INT_CHAR_NORM_RANGE</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cos_table[i]<sp/>=<sp/>cos(i<sp/>*<sp/>2<sp/>*<sp/><ref refid="const_8h_1a598a3330b3c21701223ee0ca14316eca" kindref="member">PI</ref><sp/>/<sp/>INT_CHAR_NORM_RANGE<sp/>+<sp/><ref refid="const_8h_1a598a3330b3c21701223ee0ca14316eca" kindref="member">PI</ref>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sin_table[i]<sp/>=<sp/>sin(i<sp/>*<sp/>2<sp/>*<sp/><ref refid="const_8h_1a598a3330b3c21701223ee0ca14316eca" kindref="member">PI</ref><sp/>/<sp/>INT_CHAR_NORM_RANGE<sp/>+<sp/><ref refid="const_8h_1a598a3330b3c21701223ee0ca14316eca" kindref="member">PI</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>atan_table_init<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>atan_table_mutex.<ref refid="classtesseract_1_1_c_c_util_mutex_1a0cc750edb4d5b9baca124ebee032c09b" kindref="member">Unlock</ref>();</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>vector<sp/>representing<sp/>the<sp/>direction<sp/>of<sp/>a<sp/>feature<sp/>with<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>theta<sp/>direction<sp/>in<sp/>an<sp/>INT_FEATURE_STRUCT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><ref refid="class_f_c_o_o_r_d" kindref="compound">FCOORD</ref><sp/><ref refid="intfx_8cpp_1a31bfe591242811378902d7342621a59b" kindref="member">FeatureDirection</ref>(<ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>theta)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_f_c_o_o_r_d" kindref="compound">FCOORD</ref>(cos_table[theta],<sp/>sin_table[theta]);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="classtesseract_1_1_training_sample" kindref="compound">TrainingSample</ref>*<sp/><ref refid="intfx_8cpp_1a4d1e2eabb76cc44bd542d2dc059cbd78" kindref="member">GetIntFeatures</ref>(<ref refid="namespacetesseract_1ad3e7916f0120e26e7b4e0f830784194a" kindref="member">tesseract::NormalizationMode</ref><sp/><ref refid="pgedit_8cpp_1afc03cf3e39248c2e339fee4d31f5f750" kindref="member">mode</ref>,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref><sp/>*blob,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref>&amp;<sp/>denorm)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><ref refid="baseapi_8h_1afc188645dba6ff9f0eb7f056464fdd34" kindref="member">INT_FEATURE_ARRAY</ref><sp/>blfeatures;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="baseapi_8h_1afc188645dba6ff9f0eb7f056464fdd34" kindref="member">INT_FEATURE_ARRAY</ref><sp/>cnfeatures;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t" kindref="compound">INT_FX_RESULT_STRUCT</ref><sp/>fx_info;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><ref refid="intfx_8cpp_1a508a06732c67c00efc9db362bd8b970e" kindref="member">ExtractIntFeat</ref>(blob,<sp/>denorm,<sp/>blfeatures,<sp/>cnfeatures,<sp/>&amp;fx_info,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_training_sample" kindref="compound">TrainingSample</ref>*<sp/><ref refid="structsample" kindref="compound">sample</ref><sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/><ref refid="namespacetesseract_1ad3e7916f0120e26e7b4e0f830784194aa81bec0cd85211e03befb611fa7003180" kindref="member">tesseract::NM_CHAR_ANISOTROPIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_features<sp/>=<sp/>fx_info.<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1ac2c7a180de0d0778efed530aa06e47ad" kindref="member">NumCN</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_features<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sample<sp/>=<sp/>TrainingSample::CopyFromFeatures(fx_info,<sp/>cnfeatures,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_features);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/><ref refid="namespacetesseract_1ad3e7916f0120e26e7b4e0f830784194aa643bd757ce3d9647d68aae97256d0233" kindref="member">tesseract::NM_BASELINE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_features<sp/>=<sp/>fx_info.<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a1ad9961af805ce0f4d6f8f4c5e60d368" kindref="member">NumBL</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_features<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sample<sp/>=<sp/>TrainingSample::CopyFromFeatures(fx_info,<sp/>blfeatures,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_features);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="errcode_8h_1a93a603f4063a6b9403d81caa245a583b" kindref="member">ASSERT_HOST</ref>(!</highlight><highlight class="stringliteral">&quot;Unsupported<sp/>normalization<sp/>mode!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sample;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*--------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Extract<sp/>a<sp/>set<sp/>of<sp/>standard-sized<sp/>features<sp/>from<sp/>Blobs<sp/>and<sp/>write<sp/>them<sp/>out<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>two<sp/>formats:<sp/>baseline<sp/>normalized<sp/>and<sp/>character<sp/>normalized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>presume<sp/>the<sp/>Blobs<sp/>are<sp/>already<sp/>scaled<sp/>so<sp/>that<sp/>x-height=128<sp/>units</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Standard<sp/>Features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>We<sp/>take<sp/>all<sp/>outline<sp/>segments<sp/>longer<sp/>than<sp/>7<sp/>units<sp/>and<sp/>chop<sp/>them<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>standard-sized<sp/>segments<sp/>of<sp/>approximately<sp/>13<sp/>=<sp/>(64<sp/>/<sp/>5)<sp/>units.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>When<sp/>writing<sp/>these<sp/>features<sp/>out,<sp/>we<sp/>output<sp/>their<sp/>center<sp/>and<sp/>angle<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>measured<sp/>counterclockwise<sp/>from<sp/>the<sp/>vector<sp/>&lt;-1,<sp/>0&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Baseline<sp/>Normalized<sp/>Output:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>We<sp/>center<sp/>the<sp/>grapheme<sp/>by<sp/>aligning<sp/>the<sp/>x-coordinate<sp/>of<sp/>its<sp/>centroid<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>x=0<sp/>and<sp/>subtracting<sp/>128<sp/>from<sp/>the<sp/>y-coordinate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Character<sp/>Normalized<sp/>Output:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>We<sp/>align<sp/>the<sp/>grapheme&apos;s<sp/>centroid<sp/>at<sp/>the<sp/>origin<sp/>and<sp/>scale<sp/>it<sp/>asymmetrically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>in<sp/>x<sp/>and<sp/>y<sp/>so<sp/>that<sp/>the<sp/>result<sp/>is<sp/>vaguely<sp/>square.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intfx_8cpp_1a508a06732c67c00efc9db362bd8b970e" kindref="member">ExtractIntFeat</ref>(<ref refid="struct_t_b_l_o_b" kindref="compound">TBLOB</ref><sp/>*Blob,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_e_n_o_r_m" kindref="compound">DENORM</ref>&amp;<sp/>denorm,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="baseapi_8h_1afc188645dba6ff9f0eb7f056464fdd34" kindref="member">INT_FEATURE_ARRAY</ref><sp/>BLFeat,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="baseapi_8h_1afc188645dba6ff9f0eb7f056464fdd34" kindref="member">INT_FEATURE_ARRAY</ref><sp/>CNFeat,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t" kindref="compound">INT_FX_RESULT_STRUCT</ref>*<sp/>Results,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>*FeatureOutlineArray)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="struct_t_e_s_s_l_i_n_e" kindref="compound">TESSLINE</ref><sp/>*OutLine;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><ref refid="struct_e_d_g_e_p_t" kindref="compound">EDGEPT</ref><sp/>*Loop,<sp/>*LoopStart,<sp/>*Segment;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref><sp/>LastX,<sp/>LastY,<sp/>Xmean,<sp/>Ymean;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>NormX,<sp/>NormY,<sp/>DeltaX,<sp/>DeltaY;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>Xsum,<sp/>Ysum;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1afc8530b39ebe0b6df1e19159d2508d15" kindref="member">uinT32</ref><sp/>Ix,<sp/>Iy,<sp/>LengthSum;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref><sp/>n;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>n<sp/>-<sp/>the<sp/>number<sp/>of<sp/>features<sp/>to<sp/>extract<sp/>from<sp/>a<sp/>given<sp/>outline<sp/>segment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>We<sp/>extract<sp/>features<sp/>from<sp/>every<sp/>outline<sp/>segment<sp/>longer<sp/>than<sp/>~6<sp/>units.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>We<sp/>chop<sp/>these<sp/>long<sp/>segments<sp/>into<sp/>standard-sized<sp/>features<sp/>approximately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>13<sp/>(=<sp/>64<sp/>/<sp/>5)<sp/>units<sp/>in<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>Theta;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref><sp/>NumBLFeatures,<sp/>NumCNFeatures;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>RxInv,<sp/>RyInv;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>x.xxxxxxx<sp/><sp/>*<sp/><sp/>2^Exp<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>RxExp,<sp/>RyExp;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxx<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>pfX,<sp/>pfY,<sp/>dX,<sp/>dY;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref><sp/>Length;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1afea938630215615240c35afad4e6df0e" kindref="member">Length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a4248f47c8d5d20a3849164df3fdcf9bc" kindref="member">Xmean</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a7acb1b39e74035eb698d8ab2ca8f689e" kindref="member">Ymean</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a761357b2a8e539be5dd5be9ab6427535" kindref="member">Rx</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a5bc44d7c44209bf894b7c806839cb62d" kindref="member">Ry</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a1ad9961af805ce0f4d6f8f4c5e60d368" kindref="member">NumBL</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1ac2c7a180de0d0778efed530aa06e47ad" kindref="member">NumCN</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1af340efbaccbb3e9040e9ff940e7655c9" kindref="member">YBottom</ref><sp/>=<sp/><ref refid="host_8h_1a05682ca8de174141447ff05a2289a27c" kindref="member">MAX_UINT8</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a5ea3a43ce4f2e9f1e87e64b74a0eb6db" kindref="member">YTop</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>centroid<sp/>(Xmean,<sp/>Ymean)<sp/>for<sp/>the<sp/>blob.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>We<sp/>use<sp/>centroid<sp/>(instead<sp/>of<sp/>center<sp/>of<sp/>bounding<sp/>box<sp/>or<sp/>center<sp/>of<sp/>smallest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>enclosing<sp/>circle)<sp/>so<sp/>the<sp/>algorithm<sp/>will<sp/>not<sp/>be<sp/>too<sp/>greatly<sp/>influenced<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>small<sp/>amounts<sp/>of<sp/>information<sp/>at<sp/>the<sp/>edge<sp/>of<sp/>a<sp/>character&apos;s<sp/>bounding<sp/>box.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>NumBLFeatures<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>NumCNFeatures<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>OutLine<sp/>=<sp/>Blob-&gt;<ref refid="struct_t_b_l_o_b_1a3c9282cad4102157d214bcc6311cda07" kindref="member">outlines</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>Xsum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>Ysum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>LengthSum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(OutLine<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>LoopStart<sp/>=<sp/>OutLine-&gt;<ref refid="struct_t_e_s_s_l_i_n_e_1a0ab1e26b1dae548f0bd3c096c6183b18" kindref="member">loop</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>Loop<sp/>=<sp/>LoopStart;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>LastX<sp/>=<sp/>Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1adee462d390e637a8393ba373c8d2a1bb" kindref="member">pos</ref>.<ref refid="struct_t_p_o_i_n_t_1aa9c98655c3a2a0437821e5a3d3418b0f" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>LastY<sp/>=<sp/>Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1adee462d390e637a8393ba373c8d2a1bb" kindref="member">pos</ref>.<ref refid="struct_t_p_o_i_n_t_1a6d62f015b74612e43975e439a096039c" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>bad<sp/>loops<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Loop<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>||<sp/>(Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1a196f7786194752f89e364a586d24884d" kindref="member">next</ref><sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>||<sp/>(Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1a196f7786194752f89e364a586d24884d" kindref="member">next</ref><sp/>==<sp/>LoopStart))</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="capi_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Segment<sp/>=<sp/>Loop;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Loop<sp/>=<sp/>Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1a196f7786194752f89e364a586d24884d" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NormX<sp/>=<sp/>Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1adee462d390e637a8393ba373c8d2a1bb" kindref="member">pos</ref>.<ref refid="struct_t_p_o_i_n_t_1aa9c98655c3a2a0437821e5a3d3418b0f" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NormY<sp/>=<sp/>Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1adee462d390e637a8393ba373c8d2a1bb" kindref="member">pos</ref>.<ref refid="struct_t_p_o_i_n_t_1a6d62f015b74612e43975e439a096039c" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Segment-&gt;<ref refid="struct_e_d_g_e_p_t_1a7e6e4c9b9bcc3b1e66ab62bb7641c39a" kindref="member">IsHidden</ref>())<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeltaX<sp/>=<sp/>NormX<sp/>-<sp/>LastX;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeltaY<sp/>=<sp/>NormY<sp/>-<sp/>LastY;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>=<sp/><ref refid="intfx_8cpp_1ae43fb1813d49d82c4de33ff987227e06" kindref="member">MySqrt</ref>(DeltaX,<sp/>DeltaY);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>((Length<sp/>&lt;&lt;<sp/>2)<sp/>+<sp/>Length<sp/>+<sp/>32)<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xsum<sp/>+=<sp/>((LastX<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>DeltaX)<sp/>*<sp/>(int)<sp/>Length;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ysum<sp/>+=<sp/>((LastY<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>DeltaY)<sp/>*<sp/>(int)<sp/>Length;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LengthSum<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Throw<sp/>away<sp/>a<sp/>point<sp/>that<sp/>is<sp/>too<sp/>close<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LastX<sp/>=<sp/>NormX;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LastY<sp/>=<sp/>NormY;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Loop<sp/>!=<sp/>LoopStart);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>OutLine<sp/>=<sp/>OutLine-&gt;<ref refid="struct_t_e_s_s_l_i_n_e_1a0fb224d43ea53a791f0957fa92793bef" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LengthSum<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="capi_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>Xmean<sp/>=<sp/>(Xsum<sp/>/<sp/>(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref>)<sp/>LengthSum)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>Ymean<sp/>=<sp/>(Ysum<sp/>/<sp/>(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref>)<sp/>LengthSum)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1afea938630215615240c35afad4e6df0e" kindref="member">Length</ref><sp/>=<sp/>LengthSum;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a4248f47c8d5d20a3849164df3fdcf9bc" kindref="member">Xmean</ref><sp/>=<sp/>Xmean;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a7acb1b39e74035eb698d8ab2ca8f689e" kindref="member">Ymean</ref><sp/>=<sp/>Ymean;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>Baseline<sp/>normalized<sp/>features,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>find<sp/>2nd<sp/>moments<sp/>(Ix,<sp/>Iy)<sp/>&amp;<sp/>radius<sp/>of<sp/>gyration<sp/>(Rx,<sp/>Ry).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Ix<sp/>=<sp/>Sum<sp/>y^2<sp/>dA,<sp/>where:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Ix:<sp/>the<sp/>second<sp/>moment<sp/>of<sp/>area<sp/>about<sp/>the<sp/>axis<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>dA<sp/>=<sp/>1<sp/>for<sp/>our<sp/>standard-sized<sp/>piece<sp/>of<sp/>outline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>y:<sp/>the<sp/>perependicular<sp/>distance<sp/>to<sp/>the<sp/>x<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Rx<sp/>=<sp/>sqrt(Ix<sp/>/<sp/>A)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Note:<sp/>1<sp/>&lt;=<sp/>Rx<sp/>&lt;=<sp/>height<sp/>of<sp/>blob<sp/>/<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Ry<sp/>=<sp/>sqrt(Iy<sp/>/<sp/>A)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Note:<sp/>1<sp/>&lt;=<sp/>Ry<sp/>&lt;=<sp/><sp/>width<sp/>of<sp/>blob<sp/>/<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>Ix<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>Iy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>NumBLFeatures<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>OutLine<sp/>=<sp/>Blob-&gt;<ref refid="struct_t_b_l_o_b_1a3c9282cad4102157d214bcc6311cda07" kindref="member">outlines</ref>;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(OutLine<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>LoopStart<sp/>=<sp/>OutLine-&gt;<ref refid="struct_t_e_s_s_l_i_n_e_1a0ab1e26b1dae548f0bd3c096c6183b18" kindref="member">loop</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>Loop<sp/>=<sp/>LoopStart;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>LastX<sp/>=<sp/>Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1adee462d390e637a8393ba373c8d2a1bb" kindref="member">pos</ref>.<ref refid="struct_t_p_o_i_n_t_1aa9c98655c3a2a0437821e5a3d3418b0f" kindref="member">x</ref><sp/>-<sp/>Xmean;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>LastY<sp/>=<sp/>Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1adee462d390e637a8393ba373c8d2a1bb" kindref="member">pos</ref>.<ref refid="struct_t_p_o_i_n_t_1a6d62f015b74612e43975e439a096039c" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>bad<sp/>loops<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Loop<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>||<sp/>(Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1a196f7786194752f89e364a586d24884d" kindref="member">next</ref><sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>||<sp/>(Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1a196f7786194752f89e364a586d24884d" kindref="member">next</ref><sp/>==<sp/>LoopStart))</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="capi_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Segment<sp/>=<sp/>Loop;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Loop<sp/>=<sp/>Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1a196f7786194752f89e364a586d24884d" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NormX<sp/>=<sp/>Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1adee462d390e637a8393ba373c8d2a1bb" kindref="member">pos</ref>.<ref refid="struct_t_p_o_i_n_t_1aa9c98655c3a2a0437821e5a3d3418b0f" kindref="member">x</ref><sp/>-<sp/>Xmean;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NormY<sp/>=<sp/>Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1adee462d390e637a8393ba373c8d2a1bb" kindref="member">pos</ref>.<ref refid="struct_t_p_o_i_n_t_1a6d62f015b74612e43975e439a096039c" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NormY<sp/>&lt;<sp/>Results-&gt;YBottom)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1af340efbaccbb3e9040e9ff940e7655c9" kindref="member">YBottom</ref><sp/>=<sp/><ref refid="helpers_8h_1af8739168d5b3235996eeb25dac3c4044" kindref="member">ClipToRange</ref>(NormY,<sp/>0,<sp/><ref refid="host_8h_1a05682ca8de174141447ff05a2289a27c" kindref="member">MAX_UINT8</ref>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NormY<sp/>&gt;<sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a5ea3a43ce4f2e9f1e87e64b74a0eb6db" kindref="member">YTop</ref>)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a5ea3a43ce4f2e9f1e87e64b74a0eb6db" kindref="member">YTop</ref><sp/>=<sp/><ref refid="helpers_8h_1af8739168d5b3235996eeb25dac3c4044" kindref="member">ClipToRange</ref>(NormY,<sp/>0,<sp/><ref refid="host_8h_1a05682ca8de174141447ff05a2289a27c" kindref="member">MAX_UINT8</ref>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="helpers_8h_1a6eb00eb9bc5ed195953f334971c462ae" kindref="member">UpdateRange</ref>(NormX,<sp/>&amp;min_x,<sp/>&amp;max_x);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Segment-&gt;<ref refid="struct_e_d_g_e_p_t_1a7e6e4c9b9bcc3b1e66ab62bb7641c39a" kindref="member">IsHidden</ref>())<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeltaX<sp/>=<sp/>NormX<sp/>-<sp/>LastX;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeltaY<sp/>=<sp/>NormY<sp/>-<sp/>LastY;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>=<sp/><ref refid="intfx_8cpp_1ae43fb1813d49d82c4de33ff987227e06" kindref="member">MySqrt</ref>(DeltaX,<sp/>DeltaY);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>((Length<sp/>&lt;&lt;<sp/>2)<sp/>+<sp/>Length<sp/>+<sp/>32)<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Theta<sp/>=<sp/><ref refid="intfx_8cpp_1a2b97e5f70c987ee586d688438e3bf9c2" kindref="member">BinaryAnglePlusPi</ref>(DeltaY,<sp/>DeltaX);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dX<sp/>=<sp/>(DeltaX<sp/>&lt;&lt;<sp/>8)<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dY<sp/>=<sp/>(DeltaY<sp/>&lt;&lt;<sp/>8)<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfX<sp/>=<sp/>(LastX<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(dX<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfY<sp/>=<sp/>(LastY<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(dY<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ix<sp/>+=<sp/>((pfY<sp/>&gt;&gt;<sp/>8)<sp/>-<sp/>Ymean)<sp/>*<sp/>((pfY<sp/>&gt;&gt;<sp/>8)<sp/>-<sp/>Ymean);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(eger):<sp/>Hmmm...<sp/>Xmean<sp/>is<sp/>not<sp/>necessarily<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Figure<sp/>out<sp/>if<sp/>we<sp/>should<sp/>center<sp/>against<sp/>Xmean<sp/>for<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>features,<sp/>and<sp/>if<sp/>so<sp/>fix<sp/>Iy<sp/>&amp;<sp/>SaveFeature().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iy<sp/>+=<sp/>(pfX<sp/>&gt;&gt;<sp/>8)<sp/>*<sp/>(pfX<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="intfx_8cpp_1aba41203e3a07f7039b7e63e87b06c26a" kindref="member">SaveFeature</ref>(BLFeat,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumBLFeatures,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref>)<sp/>(pfX<sp/>&gt;&gt;<sp/>8),</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref>)<sp/>((pfY<sp/>&gt;&gt;<sp/>8)<sp/>-<sp/>128),</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Theta)<sp/>==<sp/><ref refid="capi_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="capi_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumBLFeatures++;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfX<sp/>+=<sp/>dX;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfY<sp/>+=<sp/>dY;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ix<sp/>+=<sp/>((pfY<sp/>&gt;&gt;<sp/>8)<sp/>-<sp/>Ymean)<sp/>*<sp/>((pfY<sp/>&gt;&gt;<sp/>8)<sp/>-<sp/>Ymean);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iy<sp/>+=<sp/>(pfX<sp/>&gt;&gt;<sp/>8)<sp/>*<sp/>(pfX<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="intfx_8cpp_1aba41203e3a07f7039b7e63e87b06c26a" kindref="member">SaveFeature</ref>(BLFeat,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumBLFeatures,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref>)<sp/>(pfX<sp/>&gt;&gt;<sp/>8),</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref>)<sp/>((pfY<sp/>&gt;&gt;<sp/>8)<sp/>-<sp/>128),</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Theta)<sp/>==<sp/><ref refid="capi_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="capi_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumBLFeatures++;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Throw<sp/>away<sp/>a<sp/>point<sp/>that<sp/>is<sp/>too<sp/>close<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LastX<sp/>=<sp/>NormX;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LastY<sp/>=<sp/>NormY;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Loop<sp/>!=<sp/>LoopStart);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>OutLine<sp/>=<sp/>OutLine-&gt;<ref refid="struct_t_e_s_s_l_i_n_e_1a0fb224d43ea53a791f0957fa92793bef" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a2028a95c91e8741203cca5bea174b2a2" kindref="member">Width</ref><sp/>=<sp/>max_x<sp/>-<sp/>min_x;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Ix<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>Ix<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iy<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>Iy<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>RxInv<sp/>=<sp/><ref refid="intfx_8cpp_1a3dd08b65217b408c53ba9fe2984b6f76" kindref="member">MySqrt2</ref><sp/>(NumBLFeatures,<sp/>Ix,<sp/>&amp;RxExp);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>RyInv<sp/>=<sp/><ref refid="intfx_8cpp_1a3dd08b65217b408c53ba9fe2984b6f76" kindref="member">MySqrt2</ref><sp/>(NumBLFeatures,<sp/>Iy,<sp/>&amp;RyExp);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><ref refid="intfx_8cpp_1a739c154855f46f747b9c3eec517933e2" kindref="member">ClipRadius</ref>(&amp;RxInv,<sp/>&amp;RxExp,<sp/>&amp;RyInv,<sp/>&amp;RyExp);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a761357b2a8e539be5dd5be9ab6427535" kindref="member">Rx</ref><sp/>=<sp/>(<ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref>)<sp/>(51.2<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>RxInv<sp/>*<sp/>pow<sp/>(2.0,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>RxExp));</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a5bc44d7c44209bf894b7c806839cb62d" kindref="member">Ry</ref><sp/>=<sp/>(<ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref>)<sp/>(51.2<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>RyInv<sp/>*<sp/>pow<sp/>(2.0,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>RyExp));</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a5bc44d7c44209bf894b7c806839cb62d" kindref="member">Ry</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>would<sp/>result<sp/>in<sp/>features<sp/>having<sp/>&apos;nan&apos;<sp/>values.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Since<sp/>the<sp/>expression<sp/>is<sp/>always<sp/>&gt;<sp/>0,<sp/>assign<sp/>a<sp/>value<sp/>of<sp/>1.</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a5bc44d7c44209bf894b7c806839cb62d" kindref="member">Ry</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1a1ad9961af805ce0f4d6f8f4c5e60d368" kindref="member">NumBL</ref><sp/>=<sp/>NumBLFeatures;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>character<sp/>normalized<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Rescale<sp/>the<sp/>co-ordinates<sp/>to<sp/>&quot;equalize&quot;<sp/>distribution<sp/>in<sp/>X<sp/>and<sp/>Y,<sp/>making</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>all<sp/>of<sp/>the<sp/>following<sp/>unichars<sp/>be<sp/>sized<sp/>to<sp/>look<sp/>similar:<sp/><sp/>,<sp/>&apos;<sp/>1<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>We<sp/>calculate<sp/>co-ordinates<sp/>relative<sp/>to<sp/>the<sp/>centroid,<sp/>and<sp/>then<sp/>scale<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>as<sp/>follows<sp/>(accomplishing<sp/>a<sp/>scale<sp/>of<sp/>up<sp/>to<sp/>102.4<sp/>/<sp/>dimension):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>y<sp/>*=<sp/>51.2<sp/>/<sp/>Rx<sp/><sp/><sp/><sp/>[<sp/>y<sp/>scaled<sp/>by<sp/>0.0<sp/>...<sp/>102.4<sp/>/<sp/>height<sp/>of<sp/>glyph<sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>x<sp/>*=<sp/>51.2<sp/>/<sp/>Ry<sp/><sp/><sp/><sp/>[<sp/>x<sp/>scaled<sp/>by<sp/>0.0<sp/>...<sp/>102.4<sp/>/<sp/>width<sp/>of<sp/>glyph<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Although<sp/>tempting<sp/>to<sp/>think<sp/>so,<sp/>this<sp/>does<sp/>not<sp/>guarantee<sp/>that<sp/>our<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>is<sp/>within<sp/>[-102.4...102.4]<sp/>x<sp/>[-102.4...102.4]<sp/>because<sp/>(Xmean,<sp/>Ymean)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>is<sp/>the<sp/>centroid,<sp/>not<sp/>the<sp/>center<sp/>of<sp/>the<sp/>bounding<sp/>box.<sp/><sp/>Instead,<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>only<sp/>bound<sp/>the<sp/>result<sp/>to<sp/>[-204<sp/>...<sp/>204]<sp/>x<sp/>[-204<sp/>...<sp/>204]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>NumCNFeatures<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>OutLine<sp/>=<sp/>Blob-&gt;<ref refid="struct_t_b_l_o_b_1a3c9282cad4102157d214bcc6311cda07" kindref="member">outlines</ref>;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OutLineIndex<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(OutLine<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>LoopStart<sp/>=<sp/>OutLine-&gt;<ref refid="struct_t_e_s_s_l_i_n_e_1a0ab1e26b1dae548f0bd3c096c6183b18" kindref="member">loop</ref>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>Loop<sp/>=<sp/>LoopStart;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>LastX<sp/>=<sp/>(Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1adee462d390e637a8393ba373c8d2a1bb" kindref="member">pos</ref>.<ref refid="struct_t_p_o_i_n_t_1aa9c98655c3a2a0437821e5a3d3418b0f" kindref="member">x</ref><sp/>-<sp/>Xmean)<sp/>*<sp/>RyInv;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>LastY<sp/>=<sp/>(Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1adee462d390e637a8393ba373c8d2a1bb" kindref="member">pos</ref>.<ref refid="struct_t_p_o_i_n_t_1a6d62f015b74612e43975e439a096039c" kindref="member">y</ref><sp/>-<sp/>Ymean)<sp/>*<sp/>RxInv;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>LastX<sp/>&gt;&gt;=<sp/>(<ref refid="host_8h_1a46145b78ae1e821253ef36fd03661208" kindref="member">inT8</ref>)<sp/>RyExp;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>LastY<sp/>&gt;&gt;=<sp/>(<ref refid="host_8h_1a46145b78ae1e821253ef36fd03661208" kindref="member">inT8</ref>)<sp/>RxExp;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>OutLineIndex++;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>bad<sp/>loops<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Loop<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>||<sp/>(Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1a196f7786194752f89e364a586d24884d" kindref="member">next</ref><sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>||<sp/>(Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1a196f7786194752f89e364a586d24884d" kindref="member">next</ref><sp/>==<sp/>LoopStart))</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="capi_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Segment<sp/>=<sp/>Loop;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Loop<sp/>=<sp/>Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1a196f7786194752f89e364a586d24884d" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NormX<sp/>=<sp/>(Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1adee462d390e637a8393ba373c8d2a1bb" kindref="member">pos</ref>.<ref refid="struct_t_p_o_i_n_t_1aa9c98655c3a2a0437821e5a3d3418b0f" kindref="member">x</ref><sp/>-<sp/>Xmean)<sp/>*<sp/>RyInv;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NormY<sp/>=<sp/>(Loop-&gt;<ref refid="struct_e_d_g_e_p_t_1adee462d390e637a8393ba373c8d2a1bb" kindref="member">pos</ref>.<ref refid="struct_t_p_o_i_n_t_1a6d62f015b74612e43975e439a096039c" kindref="member">y</ref><sp/>-<sp/>Ymean)<sp/>*<sp/>RxInv;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NormX<sp/>&gt;&gt;=<sp/>(<ref refid="host_8h_1a46145b78ae1e821253ef36fd03661208" kindref="member">inT8</ref>)<sp/>RyExp;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NormY<sp/>&gt;&gt;=<sp/>(<ref refid="host_8h_1a46145b78ae1e821253ef36fd03661208" kindref="member">inT8</ref>)<sp/>RxExp;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Segment-&gt;<ref refid="struct_e_d_g_e_p_t_1a7e6e4c9b9bcc3b1e66ab62bb7641c39a" kindref="member">IsHidden</ref>())<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeltaX<sp/>=<sp/>NormX<sp/>-<sp/>LastX;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeltaY<sp/>=<sp/>NormY<sp/>-<sp/>LastY;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>=<sp/><ref refid="intfx_8cpp_1ae43fb1813d49d82c4de33ff987227e06" kindref="member">MySqrt</ref>(DeltaX,<sp/>DeltaY);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>((Length<sp/>&lt;&lt;<sp/>2)<sp/>+<sp/>Length<sp/>+<sp/>32)<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Theta<sp/>=<sp/><ref refid="intfx_8cpp_1a2b97e5f70c987ee586d688438e3bf9c2" kindref="member">BinaryAnglePlusPi</ref>(DeltaY,<sp/>DeltaX);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dX<sp/>=<sp/>(DeltaX<sp/>&lt;&lt;<sp/>8)<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dY<sp/>=<sp/>(DeltaY<sp/>&lt;&lt;<sp/>8)<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfX<sp/>=<sp/>(LastX<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(dX<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfY<sp/>=<sp/>(LastY<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(dY<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="intfx_8cpp_1aba41203e3a07f7039b7e63e87b06c26a" kindref="member">SaveFeature</ref>(CNFeat,</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumCNFeatures,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref>)<sp/>(pfX<sp/>&gt;&gt;<sp/>8),</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref>)<sp/>(pfY<sp/>&gt;&gt;<sp/>8),</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Theta)<sp/>==<sp/><ref refid="capi_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="capi_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FeatureOutlineArray)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FeatureOutlineArray[NumCNFeatures]<sp/>=<sp/>OutLineIndex;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumCNFeatures++;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfX<sp/>+=<sp/>dX;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfY<sp/>+=<sp/>dY;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="intfx_8cpp_1aba41203e3a07f7039b7e63e87b06c26a" kindref="member">SaveFeature</ref>(CNFeat,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumCNFeatures,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref>)<sp/>(pfX<sp/>&gt;&gt;<sp/>8),</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref>)<sp/>(pfY<sp/>&gt;&gt;<sp/>8),</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Theta)<sp/>==<sp/><ref refid="capi_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="capi_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FeatureOutlineArray)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FeatureOutlineArray[NumCNFeatures]<sp/>=<sp/>OutLineIndex;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumCNFeatures++;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Throw<sp/>away<sp/>a<sp/>point<sp/>that<sp/>is<sp/>too<sp/>close<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LastX<sp/>=<sp/>NormX;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LastY<sp/>=<sp/>NormY;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Loop<sp/>!=<sp/>LoopStart);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>OutLine<sp/>=<sp/>OutLine-&gt;<ref refid="struct_t_e_s_s_l_i_n_e_1a0fb224d43ea53a791f0957fa92793bef" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>Results-&gt;<ref refid="struct_i_n_t___f_x___r_e_s_u_l_t___s_t_r_u_c_t_1ac2c7a180de0d0778efed530aa06e47ad" kindref="member">NumCN</ref><sp/>=<sp/>NumCNFeatures;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="capi_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">/*--------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>&quot;binary<sp/>angle&quot;<sp/>[0..255]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>made<sp/>by<sp/>vector<sp/>&lt;X,<sp/>Y&gt;<sp/>as<sp/>measured<sp/>counterclockwise<sp/>from<sp/>&lt;-1,<sp/>0&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>order<sp/>of<sp/>the<sp/>arguments<sp/>follows<sp/>the<sp/>convention<sp/>of<sp/>atan2(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/><ref refid="intfx_8cpp_1a2b97e5f70c987ee586d688438e3bf9c2" kindref="member">BinaryAnglePlusPi</ref>(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>Y,<sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>X)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref><sp/>Angle,<sp/>Atan;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref><sp/>Ratio;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1afc8530b39ebe0b6df1e19159d2508d15" kindref="member">uinT32</ref><sp/>AbsX,<sp/>AbsY;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>assert<sp/>((X<sp/>!=<sp/>0)<sp/>||<sp/>(Y<sp/>!=<sp/>0));</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(X<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>AbsX<sp/>=<sp/>-X;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>AbsX<sp/>=<sp/>X;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Y<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>AbsY<sp/>=<sp/>-Y;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>AbsY<sp/>=<sp/>Y;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AbsX<sp/>&gt;<sp/>AbsY)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>Ratio<sp/>=<sp/>AbsY<sp/>*<sp/>ATAN_TABLE_SIZE<sp/>/<sp/>AbsX;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>Ratio<sp/>=<sp/>AbsX<sp/>*<sp/>ATAN_TABLE_SIZE<sp/>/<sp/>AbsY;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Ratio<sp/>&gt;=<sp/>ATAN_TABLE_SIZE)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>Ratio<sp/>=<sp/>ATAN_TABLE_SIZE<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>Atan<sp/>=<sp/>AtanTable[Ratio];</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(X<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Y<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AbsX<sp/>&gt;<sp/>AbsY)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Angle<sp/>=<sp/>Atan;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Angle<sp/>=<sp/>64<sp/>-<sp/>Atan;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AbsX<sp/>&gt;<sp/>AbsY)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Angle<sp/>=<sp/>256<sp/>-<sp/>Atan;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Angle<sp/>=<sp/>192<sp/>+<sp/>Atan;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Y<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AbsX<sp/>&gt;<sp/>AbsY)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Angle<sp/>=<sp/>128<sp/>-<sp/>Atan;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Angle<sp/>=<sp/>64<sp/>+<sp/>Atan;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AbsX<sp/>&gt;<sp/>AbsY)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>Angle<sp/>=<sp/>128<sp/>+<sp/>Atan;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>Angle<sp/>=<sp/>192<sp/>-<sp/>Atan;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>reverse<sp/>angles<sp/>to<sp/>match<sp/>old<sp/>feature<sp/>extractor:<sp/><sp/><sp/>Angle<sp/>+=<sp/>PI<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>Angle<sp/>+=<sp/>128;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>Angle<sp/>&amp;=<sp/>255;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref>)<sp/>Angle;</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">/*--------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intfx_8cpp_1aba41203e3a07f7039b7e63e87b06c26a" kindref="member">SaveFeature</ref>(<ref refid="baseapi_8h_1afc188645dba6ff9f0eb7f056464fdd34" kindref="member">INT_FEATURE_ARRAY</ref><sp/>FeatureArray,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref><sp/>FeatureNum,</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref><sp/>X,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref><sp/>Y,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>Theta)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><ref refid="struct_i_n_t___f_e_a_t_u_r_e___s_t_r_u_c_t" kindref="compound">INT_FEATURE</ref><sp/>Feature;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FeatureNum<sp/>&gt;=<sp/><ref refid="baseapi_8h_1a4f7caedc4bed99355cae19efa51ade51" kindref="member">MAX_NUM_INT_FEATURES</ref>)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="capi_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>Feature<sp/>=<sp/>&amp;(FeatureArray[FeatureNum]);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>X<sp/>=<sp/>X<sp/>+<sp/>128;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>Y<sp/>=<sp/>Y<sp/>+<sp/>128;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>Feature-&gt;<ref refid="struct_i_n_t___f_e_a_t_u_r_e___s_t_r_u_c_t_1a6b250df12a9b06b5ed0c1a7c403f0275" kindref="member">X</ref><sp/>=<sp/>ClipToRange&lt;inT16&gt;(X,<sp/>0,<sp/>255);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>Feature-&gt;<ref refid="struct_i_n_t___f_e_a_t_u_r_e___s_t_r_u_c_t_1a09931683890fb52d22ec6c75048a2bce" kindref="member">Y</ref><sp/>=<sp/>ClipToRange&lt;inT16&gt;(Y,<sp/>0,<sp/>255);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>Feature-&gt;<ref refid="struct_i_n_t___f_e_a_t_u_r_e___s_t_r_u_c_t_1af4a2ea6a7d9a82cba06f6ca9a126461b" kindref="member">Theta</ref><sp/>=<sp/>Theta;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>Feature-&gt;<ref refid="struct_i_n_t___f_e_a_t_u_r_e___s_t_r_u_c_t_1a3350aaa73fdd186eb740dd43bff557a5" kindref="member">CP_misses</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="capi_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>floor(sqrt(min(emm,<sp/>x)^2<sp/>+<sp/>min(emm,<sp/>y)^2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>where<sp/>emm<sp/>=<sp/>EvidenceMultMask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref><sp/><ref refid="intfx_8cpp_1ae43fb1813d49d82c4de33ff987227e06" kindref="member">MySqrt</ref>(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>X,<sp/><ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref><sp/>Y)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref><sp/>SqRoot;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="host_8h_1afc8530b39ebe0b6df1e19159d2508d15" kindref="member">uinT32</ref><sp/>Square;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref><sp/>BitLocation;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="host_8h_1afc8530b39ebe0b6df1e19159d2508d15" kindref="member">uinT32</ref><sp/>Sum;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="host_8h_1afc8530b39ebe0b6df1e19159d2508d15" kindref="member">uinT32</ref><sp/>EvidenceMultMask<sp/>=</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>((1<sp/>&lt;&lt;<sp/><ref refid="class_integer_matcher_1a95f9b8220f07f5c258880fa2be8eeb48" kindref="member">IntegerMatcher::kIntEvidenceTruncBits</ref>)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(X<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>X<sp/>=<sp/>-X;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Y<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>Y<sp/>=<sp/>-Y;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(X<sp/>&gt;<sp/>EvidenceMultMask)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>X<sp/>=<sp/>EvidenceMultMask;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Y<sp/>&gt;<sp/>EvidenceMultMask)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>Y<sp/>=<sp/>EvidenceMultMask;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>Sum<sp/>=<sp/>X<sp/>*<sp/>X<sp/>+<sp/>Y<sp/>*<sp/>Y;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>BitLocation<sp/>=<sp/>(EvidenceMultMask<sp/>+<sp/>1)<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>SqRoot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>Square<sp/>=<sp/>(SqRoot<sp/>|<sp/>BitLocation)<sp/>*<sp/>(SqRoot<sp/>|<sp/>BitLocation);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Square<sp/>&lt;=<sp/>Sum)</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SqRoot<sp/>|=<sp/>BitLocation;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>BitLocation<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(BitLocation);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SqRoot;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment">/*--------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>two<sp/>integers<sp/>which<sp/>can<sp/>be<sp/>used<sp/>to<sp/>express<sp/>the<sp/>sqrt(I/N):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>sqrt(I/N)<sp/>=<sp/>51.2<sp/>*<sp/>2^(*Exp)<sp/>/<sp/>retval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/><ref refid="intfx_8cpp_1a3dd08b65217b408c53ba9fe2984b6f76" kindref="member">MySqrt2</ref>(<ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref><sp/>N,<sp/><ref refid="host_8h_1afc8530b39ebe0b6df1e19159d2508d15" kindref="member">uinT32</ref><sp/>I,<sp/><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>*Exp)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a46145b78ae1e821253ef36fd03661208" kindref="member">inT8</ref><sp/>k;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="host_8h_1afc8530b39ebe0b6df1e19159d2508d15" kindref="member">uinT32</ref><sp/>N2;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>SqRoot;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref><sp/>Square;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>BitLocation;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="host_8h_1acb2dfad543247740dab87d31bb49dfff" kindref="member">uinT16</ref><sp/>Ratio;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>N2<sp/>=<sp/>N<sp/>*<sp/>41943;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((N2<sp/>&amp;<sp/>0xc0000000)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>N2<sp/>&lt;&lt;=<sp/>2;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((I<sp/>&amp;<sp/>0xc0000000)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>I<sp/>&lt;&lt;=<sp/>2;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((N2<sp/>&amp;<sp/>0x80000000)<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>((I<sp/>&amp;<sp/>0x80000000)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>N2<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>I<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>N2<sp/>&amp;=<sp/>0xffff0000;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>I<sp/>&gt;&gt;=<sp/>14;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>Ratio<sp/>=<sp/>N2<sp/>/<sp/>I;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>BitLocation<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>SqRoot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>Square<sp/>=<sp/>(SqRoot<sp/>|<sp/>BitLocation)<sp/>*<sp/>(SqRoot<sp/>|<sp/>BitLocation);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Square<sp/>&lt;=<sp/>Ratio)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SqRoot<sp/>|=<sp/>BitLocation;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>BitLocation<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(BitLocation);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>*Exp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>255;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>*Exp<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SqRoot;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="intfx_8cpp_1a739c154855f46f747b9c3eec517933e2" kindref="member">ClipRadius</ref>(<ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>*RxInv,<sp/><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>*RxExp,<sp/><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>*RyInv,<sp/><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>*RyExp)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>AM,<sp/>BM,<sp/>AE,<sp/>BE;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a458fe97f82495945f8071bb3c18d1783" kindref="member">uinT8</ref><sp/>BitN,<sp/>LastCarry;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RxInvLarge,<sp/>RyInvSmall;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>AM<sp/>=<sp/>classify_radius_gyr_min_man;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>AE<sp/>=<sp/>classify_radius_gyr_min_exp;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>BM<sp/>=<sp/>*RxInv;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>BE<sp/>=<sp/>*RxExp;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>LastCarry<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((AM<sp/>!=<sp/>0)<sp/>||<sp/>(BM<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AE<sp/>&gt;<sp/>BE)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>(AM<sp/>&amp;<sp/>1)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AE--;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AE<sp/>&lt;<sp/>BE)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>(!(BM<sp/>&amp;<sp/>1));</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BE--;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AE<sp/>==<sp/>BE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>(AM<sp/>&amp;<sp/>1)<sp/>+<sp/>(!(BM<sp/>&amp;<sp/>1));</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AE--;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BE--;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>LastCarry<sp/>=<sp/>(BitN<sp/>&amp;<sp/>2)<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>BitN<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>LastCarry<sp/>=<sp/>(BitN<sp/>&amp;<sp/>2)<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>BitN<sp/>=<sp/>BitN<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BitN<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>*RxInv<sp/>=<sp/>classify_radius_gyr_min_man;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>*RxExp<sp/>=<sp/>classify_radius_gyr_min_exp;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>AM<sp/>=<sp/>classify_radius_gyr_min_man;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>AE<sp/>=<sp/>classify_radius_gyr_min_exp;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>BM<sp/>=<sp/>*RyInv;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>BE<sp/>=<sp/>*RyExp;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>LastCarry<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((AM<sp/>!=<sp/>0)<sp/>||<sp/>(BM<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AE<sp/>&gt;<sp/>BE)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>(AM<sp/>&amp;<sp/>1)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AE--;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AE<sp/>&lt;<sp/>BE)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>(!(BM<sp/>&amp;<sp/>1));</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BE--;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AE<sp/>==<sp/>BE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>(AM<sp/>&amp;<sp/>1)<sp/>+<sp/>(!(BM<sp/>&amp;<sp/>1));</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AE--;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BE--;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>LastCarry<sp/>=<sp/>(BitN<sp/>&amp;<sp/>2)<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>BitN<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>LastCarry<sp/>=<sp/>(BitN<sp/>&amp;<sp/>2)<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>BitN<sp/>=<sp/>BitN<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BitN<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>*RyInv<sp/>=<sp/>classify_radius_gyr_min_man;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>*RyExp<sp/>=<sp/>classify_radius_gyr_min_exp;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>AM<sp/>=<sp/>classify_radius_gyr_max_man;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>AE<sp/>=<sp/>classify_radius_gyr_max_exp;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>BM<sp/>=<sp/>*RxInv;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>BE<sp/>=<sp/>*RxExp;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>LastCarry<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((AM<sp/>!=<sp/>0)<sp/>||<sp/>(BM<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AE<sp/>&gt;<sp/>BE)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>(AM<sp/>&amp;<sp/>1)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AE--;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AE<sp/>&lt;<sp/>BE)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>(!(BM<sp/>&amp;<sp/>1));</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BE--;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AE<sp/>==<sp/>BE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>(AM<sp/>&amp;<sp/>1)<sp/>+<sp/>(!(BM<sp/>&amp;<sp/>1));</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AE--;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BE--;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>LastCarry<sp/>=<sp/>(BitN<sp/>&amp;<sp/>2)<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>BitN<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>LastCarry<sp/>=<sp/>(BitN<sp/>&amp;<sp/>2)<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>BitN<sp/>=<sp/>BitN<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BitN<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>RxInvLarge<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>RxInvLarge<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>AM<sp/>=<sp/>*RyInv;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>AE<sp/>=<sp/>*RyExp;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>BM<sp/>=<sp/>classify_radius_gyr_max_man;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>BE<sp/>=<sp/>classify_radius_gyr_max_exp;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>LastCarry<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((AM<sp/>!=<sp/>0)<sp/>||<sp/>(BM<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AE<sp/>&gt;<sp/>BE)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>(AM<sp/>&amp;<sp/>1)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AE--;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AE<sp/>&lt;<sp/>BE)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>(!(BM<sp/>&amp;<sp/>1));</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BE--;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AE<sp/>==<sp/>BE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>(AM<sp/>&amp;<sp/>1)<sp/>+<sp/>(!(BM<sp/>&amp;<sp/>1));</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BM<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AE--;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BE--;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>LastCarry<sp/>=<sp/>(BitN<sp/>&amp;<sp/>2)<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>BitN<sp/>=<sp/>BitN<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>BitN<sp/>=<sp/>LastCarry<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>LastCarry<sp/>=<sp/>(BitN<sp/>&amp;<sp/>2)<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>BitN<sp/>=<sp/>BitN<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BitN<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>RyInvSmall<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>RyInvSmall<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RxInvLarge<sp/>&amp;&amp;<sp/>RyInvSmall)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>*RyInv<sp/>=<sp/>classify_radius_gyr_max_man;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>*RyExp<sp/>=<sp/>classify_radius_gyr_max_exp;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/classify/intfx.cpp"/>
  </compounddef>
</doxygen>
