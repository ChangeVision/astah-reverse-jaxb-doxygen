<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="search__column_8cpp" kind="file">
    <compoundname>search_column.cpp</compoundname>
    <includes refid="search__column_8h" local="yes">search_column.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="31166">
        <label>cube_reco_context.h</label>
        <link refid="cube__reco__context_8h"/>
        <childnode refid="31138" relation="include">
        </childnode>
        <childnode refid="31167" relation="include">
        </childnode>
        <childnode refid="31171" relation="include">
        </childnode>
        <childnode refid="31182" relation="include">
        </childnode>
        <childnode refid="31183" relation="include">
        </childnode>
        <childnode refid="31140" relation="include">
        </childnode>
        <childnode refid="31184" relation="include">
        </childnode>
        <childnode refid="31185" relation="include">
        </childnode>
        <childnode refid="31186" relation="include">
        </childnode>
      </node>
      <node id="31157">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="31176">
        <label>const.h</label>
        <link refid="const_8h"/>
      </node>
      <node id="31153">
        <label>stdlib.h</label>
      </node>
      <node id="31171">
        <label>lang_model.h</label>
        <link refid="lang__model_8h"/>
        <childnode refid="31136" relation="include">
        </childnode>
        <childnode refid="31172" relation="include">
        </childnode>
        <childnode refid="31140" relation="include">
        </childnode>
        <childnode refid="31139" relation="include">
        </childnode>
      </node>
      <node id="31148">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="31149" relation="include">
        </childnode>
      </node>
      <node id="31133">
        <label>cube/search_column.cpp</label>
        <link refid="search_column.cpp"/>
        <childnode refid="31134" relation="include">
        </childnode>
        <childnode refid="31153" relation="include">
        </childnode>
      </node>
      <node id="31168">
        <label>neuron.h</label>
        <link refid="neuron_8h"/>
        <childnode refid="31169" relation="include">
        </childnode>
        <childnode refid="31144" relation="include">
        </childnode>
      </node>
      <node id="31175">
        <label>allheaders.h</label>
      </node>
      <node id="31167">
        <label>neural_net.h</label>
        <link refid="neural__net_8h"/>
        <childnode refid="31138" relation="include">
        </childnode>
        <childnode refid="31144" relation="include">
        </childnode>
        <childnode refid="31168" relation="include">
        </childnode>
        <childnode refid="31170" relation="include">
        </childnode>
      </node>
      <node id="31138">
        <label>string</label>
      </node>
      <node id="31135">
        <label>search_node.h</label>
        <link refid="search__node_8h"/>
        <childnode refid="31136" relation="include">
        </childnode>
        <childnode refid="31166" relation="include">
        </childnode>
      </node>
      <node id="31160">
        <label>stddef.h</label>
      </node>
      <node id="31163">
        <label>memory.h</label>
      </node>
      <node id="31183">
        <label>feature_base.h</label>
        <link refid="feature__base_8h"/>
        <childnode refid="31177" relation="include">
        </childnode>
        <childnode refid="31139" relation="include">
        </childnode>
      </node>
      <node id="31139">
        <label>tuning_params.h</label>
        <link refid="tuning__params_8h"/>
        <childnode refid="31138" relation="include">
        </childnode>
      </node>
      <node id="31155">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="31147" relation="include">
        </childnode>
      </node>
      <node id="31185">
        <label>char_bigrams.h</label>
        <link refid="char__bigrams_8h"/>
        <childnode refid="31138" relation="include">
        </childnode>
        <childnode refid="31140" relation="include">
        </childnode>
      </node>
      <node id="31182">
        <label>classifier_base.h</label>
        <link refid="classifier__base_8h"/>
        <childnode refid="31138" relation="include">
        </childnode>
        <childnode refid="31177" relation="include">
        </childnode>
        <childnode refid="31172" relation="include">
        </childnode>
        <childnode refid="31140" relation="include">
        </childnode>
        <childnode refid="31183" relation="include">
        </childnode>
        <childnode refid="31171" relation="include">
        </childnode>
        <childnode refid="31139" relation="include">
        </childnode>
      </node>
      <node id="31149">
        <label>limits.h</label>
      </node>
      <node id="31177">
        <label>char_samp.h</label>
        <link refid="char__samp_8h"/>
        <childnode refid="31153" relation="include">
        </childnode>
        <childnode refid="31146" relation="include">
        </childnode>
        <childnode refid="31138" relation="include">
        </childnode>
        <childnode refid="31178" relation="include">
        </childnode>
        <childnode refid="31143" relation="include">
        </childnode>
      </node>
      <node id="31140">
        <label>char_set.h</label>
        <link refid="char__set_8h"/>
        <childnode refid="31141" relation="include">
        </childnode>
        <childnode refid="31138" relation="include">
        </childnode>
        <childnode refid="31142" relation="include">
        </childnode>
        <childnode refid="31143" relation="include">
        </childnode>
        <childnode refid="31145" relation="include">
        </childnode>
        <childnode refid="31161" relation="include">
        </childnode>
        <childnode refid="31165" relation="include">
        </childnode>
      </node>
      <node id="31141">
        <label>string.h</label>
      </node>
      <node id="31164">
        <label>unicharmap.h</label>
        <link refid="unicharmap_8h"/>
        <childnode refid="31162" relation="include">
        </childnode>
      </node>
      <node id="31162">
        <label>unichar.h</label>
        <link refid="unichar_8h"/>
        <childnode refid="31163" relation="include">
        </childnode>
        <childnode refid="31141" relation="include">
        </childnode>
      </node>
      <node id="31174">
        <label>cube_utils.h</label>
        <link refid="cube__utils_8h"/>
        <childnode refid="31144" relation="include">
        </childnode>
        <childnode refid="31138" relation="include">
        </childnode>
        <childnode refid="31175" relation="include">
        </childnode>
        <childnode refid="31176" relation="include">
        </childnode>
        <childnode refid="31140" relation="include">
        </childnode>
        <childnode refid="31177" relation="include">
        </childnode>
        <childnode refid="31181" relation="include">
        </childnode>
      </node>
      <node id="31134">
        <label>search_column.h</label>
        <link refid="search__column_8h"/>
        <childnode refid="31135" relation="include">
        </childnode>
        <childnode refid="31136" relation="include">
        </childnode>
        <childnode refid="31166" relation="include">
        </childnode>
      </node>
      <node id="31144">
        <label>vector</label>
      </node>
      <node id="31154">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="31147" relation="include">
        </childnode>
      </node>
      <node id="31169">
        <label>math.h</label>
      </node>
      <node id="31136">
        <label>lang_mod_edge.h</label>
        <link refid="lang__mod__edge_8h"/>
        <childnode refid="31137" relation="include">
        </childnode>
        <childnode refid="31140" relation="include">
        </childnode>
      </node>
      <node id="31151">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="31146" relation="include">
        </childnode>
        <childnode refid="31152" relation="include">
        </childnode>
        <childnode refid="31158" relation="include">
        </childnode>
      </node>
      <node id="31152">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="31146" relation="include">
        </childnode>
        <childnode refid="31153" relation="include">
        </childnode>
        <childnode refid="31154" relation="include">
        </childnode>
        <childnode refid="31155" relation="include">
        </childnode>
        <childnode refid="31156" relation="include">
        </childnode>
        <childnode refid="31157" relation="include">
        </childnode>
      </node>
      <node id="31159">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="31160" relation="include">
        </childnode>
        <childnode refid="31147" relation="include">
        </childnode>
      </node>
      <node id="31178">
        <label>bmp_8.h</label>
        <link refid="bmp__8_8h"/>
        <childnode refid="31153" relation="include">
        </childnode>
        <childnode refid="31146" relation="include">
        </childnode>
        <childnode refid="31179" relation="include">
        </childnode>
        <childnode refid="31180" relation="include">
        </childnode>
      </node>
      <node id="31179">
        <label>con_comp.h</label>
        <link refid="con__comp_8h"/>
      </node>
      <node id="31186">
        <label>word_unigrams.h</label>
        <link refid="word__unigrams_8h"/>
        <childnode refid="31138" relation="include">
        </childnode>
        <childnode refid="31140" relation="include">
        </childnode>
        <childnode refid="31171" relation="include">
        </childnode>
      </node>
      <node id="31137">
        <label>cube_tuning_params.h</label>
        <link refid="cube__tuning__params_8h"/>
        <childnode refid="31138" relation="include">
        </childnode>
        <childnode refid="31139" relation="include">
        </childnode>
      </node>
      <node id="31161">
        <label>unicharset.h</label>
        <link refid="unicharset_8h"/>
        <childnode refid="31155" relation="include">
        </childnode>
        <childnode refid="31156" relation="include">
        </childnode>
        <childnode refid="31158" relation="include">
        </childnode>
        <childnode refid="31154" relation="include">
        </childnode>
        <childnode refid="31162" relation="include">
        </childnode>
        <childnode refid="31164" relation="include">
        </childnode>
      </node>
      <node id="31172">
        <label>char_altlist.h</label>
        <link refid="char__altlist_8h"/>
        <childnode refid="31173" relation="include">
        </childnode>
        <childnode refid="31140" relation="include">
        </childnode>
      </node>
      <node id="31165">
        <label>cube_const.h</label>
        <link refid="cube__const_8h"/>
      </node>
      <node id="31181">
        <label>img.h</label>
        <link refid="img_8h"/>
        <childnode refid="31159" relation="include">
        </childnode>
      </node>
      <node id="31150">
        <label>tprintf.h</label>
        <link refid="tprintf_8h"/>
        <childnode refid="31151" relation="include">
        </childnode>
      </node>
      <node id="31142">
        <label>algorithm</label>
      </node>
      <node id="31147">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="31148" relation="include">
        </childnode>
      </node>
      <node id="31184">
        <label>word_size_model.h</label>
        <link refid="word__size__model_8h"/>
        <childnode refid="31138" relation="include">
        </childnode>
        <childnode refid="31177" relation="include">
        </childnode>
        <childnode refid="31140" relation="include">
        </childnode>
      </node>
      <node id="31180">
        <label>cached_file.h</label>
        <link refid="cached__file_8h"/>
        <childnode refid="31146" relation="include">
        </childnode>
        <childnode refid="31138" relation="include">
        </childnode>
      </node>
      <node id="31146">
        <label>stdio.h</label>
      </node>
      <node id="31170">
        <label>input_file_buffer.h</label>
        <link refid="input__file__buffer_8h"/>
        <childnode refid="31146" relation="include">
        </childnode>
        <childnode refid="31138" relation="include">
        </childnode>
      </node>
      <node id="31143">
        <label>string_32.h</label>
        <link refid="string__32_8h"/>
        <childnode refid="31141" relation="include">
        </childnode>
        <childnode refid="31138" relation="include">
        </childnode>
        <childnode refid="31142" relation="include">
        </childnode>
        <childnode refid="31144" relation="include">
        </childnode>
      </node>
      <node id="31145">
        <label>tessdatamanager.h</label>
        <link refid="tessdatamanager_8h"/>
        <childnode refid="31146" relation="include">
        </childnode>
        <childnode refid="31147" relation="include">
        </childnode>
        <childnode refid="31150" relation="include">
        </childnode>
      </node>
      <node id="31158">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="31146" relation="include">
        </childnode>
        <childnode refid="31141" relation="include">
        </childnode>
        <childnode refid="31148" relation="include">
        </childnode>
        <childnode refid="31159" relation="include">
        </childnode>
      </node>
      <node id="31173">
        <label>altlist.h</label>
        <link refid="altlist_8h"/>
        <childnode refid="31169" relation="include">
        </childnode>
        <childnode refid="31174" relation="include">
        </childnode>
      </node>
      <node id="31156">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="31146" relation="include">
        </childnode>
        <childnode refid="31141" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetesseract">tesseract</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>search_column.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Description:<sp/>Implementation<sp/>of<sp/>the<sp/>Beam<sp/>Search<sp/>Column<sp/>Class</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Author:<sp/><sp/><sp/><sp/>Ahmad<sp/>Abdulkader</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Created:<sp/><sp/><sp/>2008</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>(C)<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>**<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>**<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>**<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>**<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>**<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>**<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>**<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>**<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>**<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="search__column_8h" kindref="compound">search_column.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesseract-c__api-demo_1afed58feacb84df2de88bdd613cfdba6d" kindref="member">tesseract</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="classtesseract_1_1_search_column_1acd04ea89962103de43b999cdb9ad3f9b" kindref="member">SearchColumn::SearchColumn</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col_idx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_node)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>col_idx_<sp/>=<sp/>col_idx;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>node_cnt_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>node_array_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>max_node_cnt_<sp/>=<sp/>max_node;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>node_hash_table_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>init_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>min_cost_<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>max_cost_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cleanup<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SearchColumn::Cleanup()<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_array_<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_idx<sp/>=<sp/>0;<sp/>node_idx<sp/>&lt;<sp/>node_cnt_;<sp/>node_idx++)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_array_[node_idx]<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node_array_[node_idx];</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]node_array_;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>node_array_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_search_column_1a98a8b0188debb17fb07eea6ec96660d4" kindref="member">FreeHashTable</ref>();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>init_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="classtesseract_1_1_search_column_1ad9a2868e392eaf136264de6e40787453" kindref="member">SearchColumn::~SearchColumn</ref>()<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>Cleanup();</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initializations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SearchColumn::Init()<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init_<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>hash<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_hash_table_<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>node_hash_table_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SearchNodeHashTable();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_hash_table_<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>init_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prune<sp/>the<sp/>nodes<sp/>if<sp/>necessary.<sp/>Pruning<sp/>is<sp/>done<sp/>such<sp/>that<sp/>a<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>nodes<sp/>is<sp/>kept,<sp/>i.e.,<sp/>the<sp/>beam<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_search_column_1af59882506aaf9becbfa8bfeff325a08f" kindref="member">SearchColumn::Prune</ref>()<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>need<sp/>to<sp/>prune</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_cnt_<sp/>&lt;=<sp/>max_node_cnt_)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>cost<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>memset(score_bins_,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(score_bins_));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cost_range<sp/>=<sp/>max_cost_<sp/>-<sp/>min_cost_<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_idx<sp/>=<sp/>0;<sp/>node_idx<sp/>&lt;<sp/>node_cnt_;<sp/>node_idx++)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cost_bin<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((node_array_[node_idx]-&gt;<ref refid="classtesseract_1_1_search_node_1af91981fd221547eb22154b94a9e9312f" kindref="member">BestCost</ref>()<sp/>-<sp/>min_cost_)<sp/>*</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kScoreBins)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cost_range));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cost_bin<sp/>&gt;=<sp/>kScoreBins)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cost_bin<sp/>=<sp/>kScoreBins<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>score_bins_[cost_bin]++;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>the<sp/>pruning<sp/>cost<sp/>by<sp/>scanning<sp/>the<sp/>cost<sp/>histogram<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>least<sp/>to<sp/>greatest<sp/>cost<sp/>bins<sp/>and<sp/>finding<sp/>the<sp/>cost<sp/>at<sp/>which<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>max<sp/>number<sp/>of<sp/>nodes<sp/>is<sp/>exceeded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pruning_cost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_node_cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cost_bin<sp/>=<sp/>0;<sp/>cost_bin<sp/>&lt;<sp/>kScoreBins;<sp/>cost_bin++)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_node_cnt<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(new_node_cnt<sp/>+<sp/>score_bins_[cost_bin])<sp/>&gt;<sp/>max_node_cnt_)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pruning_cost<sp/>=<sp/>min_cost_<sp/>+<sp/>((cost_bin<sp/>*<sp/>cost_range)<sp/>/<sp/>kScoreBins);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>new_node_cnt<sp/>+=<sp/>score_bins_[cost_bin];</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>prune<sp/>out<sp/>all<sp/>the<sp/>nodes<sp/>above<sp/>this<sp/>cost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_idx<sp/>=<sp/>new_node_cnt<sp/>=<sp/>0;<sp/>node_idx<sp/>&lt;<sp/>node_cnt_;<sp/>node_idx++)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prune<sp/>this<sp/>node<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_array_[node_idx]-&gt;BestCost()<sp/>&gt;<sp/>pruning_cost<sp/>||</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_node_cnt<sp/>&gt;<sp/>max_node_cnt_)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node_array_[node_idx];</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node_array_[new_node_cnt++]<sp/>=<sp/>node_array_[node_idx];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>node_cnt_<sp/>=<sp/>new_node_cnt;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sort<sp/>all<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_search_column_1a5aa407d2e7553e6dab9cc7910b8a7807" kindref="member">SearchColumn::Sort</ref>()<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_cnt_<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>node_array_<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(node_array_,<sp/>node_cnt_,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*node_array_),</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_search_node_1a9f2ac1e83884b6b143174d2966d4dbcf" kindref="member">SearchNode::SearchNodeComparer</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>add<sp/>a<sp/>new<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">SearchNode<sp/>*<ref refid="classtesseract_1_1_search_column_1aeafc059d37b9d71c97efb1350787c97b" kindref="member">SearchColumn::AddNode</ref>(LangModEdge<sp/>*edge,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reco_cost,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SearchNode<sp/>*parent_node,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CubeRecoContext<sp/>*cntxt)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init_<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>Init()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>out<sp/>if<sp/>we<sp/>have<sp/>an<sp/>node<sp/>with<sp/>the<sp/>same<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>in<sp/>the<sp/>hash<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>SearchNode<sp/>*new_node<sp/>=<sp/>node_hash_table_-&gt;<ref refid="classtesseract_1_1_search_node_hash_table_1a2f437ed6409f38572913c64bf45b1249" kindref="member">Lookup</ref>(edge,<sp/>parent_node);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>node<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_node<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>new_node<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SearchNode(cntxt,<sp/>parent_node,<sp/>reco_cost,<sp/>edge,<sp/>col_idx_);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_node<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>max<sp/>node<sp/>count<sp/>has<sp/>already<sp/>been<sp/>reached,<sp/>check<sp/>if<sp/>the<sp/>cost<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>node<sp/>exceeds<sp/>the<sp/>max<sp/>cost.<sp/>This<sp/>indicates<sp/>that<sp/>it<sp/>will<sp/>be<sp/>pruned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>so<sp/>there<sp/>is<sp/>no<sp/>point<sp/>adding<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_cnt_<sp/>&gt;=<sp/>max_node_cnt_<sp/>&amp;&amp;<sp/>new_node-&gt;BestCost()<sp/>&gt;<sp/>max_cost_)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>new_node;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expand<sp/>the<sp/>node<sp/>buffer<sp/>if<sp/>necc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((node_cnt_<sp/>%<sp/>kNodeAllocChunk)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>alloc<sp/>a<sp/>new<sp/>buff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SearchNode<sp/>**new_node_buff<sp/>=</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SearchNode<sp/>*[node_cnt_<sp/>+<sp/>kNodeAllocChunk];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_node_buff<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>new_node;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>existing<sp/>after<sp/>copying<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_array_<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(new_node_buff,<sp/>node_array_,<sp/>node_cnt_<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*new_node_buff));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]node_array_;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node_array_<sp/>=<sp/>new_node_buff;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>node<sp/>to<sp/>the<sp/>hash<sp/>table<sp/>only<sp/>if<sp/>it<sp/>is<sp/>non-OOD<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>the<sp/>langmod<sp/>state<sp/>is<sp/>not<sp/>unique</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge-&gt;IsOOD()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node_hash_table_-&gt;<ref refid="classtesseract_1_1_search_node_hash_table_1aae7833296f799fb4577fe1d25ee76f28" kindref="member">Insert</ref>(edge,<sp/>new_node))<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Hash<sp/>table<sp/>full!!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>new_node;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>node_array_[node_cnt_++]<sp/>=<sp/>new_node;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>node<sp/>exists<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>update<sp/>occurred,<sp/>return<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_node-&gt;UpdateParent(parent_node,<sp/>reco_cost,<sp/>edge)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_node<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>edge;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>Min<sp/>and<sp/>Max<sp/>Costs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_node<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_cost_<sp/>&gt;<sp/>new_node-&gt;BestCost())<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_cost_<sp/>=<sp/>new_node-&gt;BestCost();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_cost_<sp/>&lt;<sp/>new_node-&gt;BestCost())<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_cost_<sp/>=<sp/>new_node-&gt;BestCost();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_node;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">SearchNode<sp/>*<ref refid="classtesseract_1_1_search_column_1a9d1c018b6c1d473b483e11e330071589" kindref="member">SearchColumn::BestNode</ref>()<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>SearchNode<sp/>*best_node<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_idx<sp/>=<sp/>0;<sp/>node_idx<sp/>&lt;<sp/>node_cnt_;<sp/>node_idx++)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best_node<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_node-&gt;BestCost()<sp/>&gt;<sp/>node_array_[node_idx]-&gt;<ref refid="classtesseract_1_1_search_node_1af91981fd221547eb22154b94a9e9312f" kindref="member">BestCost</ref>())<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>best_node<sp/>=<sp/>node_array_[node_idx];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>best_node;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tesseract</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/cube/search_column.cpp"/>
  </compounddef>
</doxygen>
