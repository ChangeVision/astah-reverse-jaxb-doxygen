<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="linefind_8cpp" kind="file">
    <compoundname>linefind.cpp</compoundname>
    <includes refid="linefind_8h" local="yes">linefind.h</includes>
    <includes refid="alignedblob_8h" local="yes">alignedblob.h</includes>
    <includes refid="tabvector_8h" local="yes">tabvector.h</includes>
    <includes refid="blobbox_8h" local="yes">blobbox.h</includes>
    <includes refid="edgblob_8h" local="yes">edgblob.h</includes>
    <includes local="yes">allheaders.h</includes>
    <incdepgraph>
      <node id="38527">
        <label>blobbox.h</label>
        <link refid="blobbox_8h"/>
        <childnode refid="38495" relation="include">
        </childnode>
        <childnode refid="38528" relation="include">
        </childnode>
        <childnode refid="38529" relation="include">
        </childnode>
        <childnode refid="38534" relation="include">
        </childnode>
        <childnode refid="38541" relation="include">
        </childnode>
      </node>
      <node id="38542">
        <label>tabvector.h</label>
        <link refid="tabvector_8h"/>
        <childnode refid="38543" relation="include">
        </childnode>
        <childnode refid="38495" relation="include">
        </childnode>
        <childnode refid="38512" relation="include">
        </childnode>
        <childnode refid="38528" relation="include">
        </childnode>
        <childnode refid="38516" relation="include">
        </childnode>
        <childnode refid="38494" relation="include">
        </childnode>
      </node>
      <node id="38544">
        <label>edgblob.h</label>
        <link refid="edgblob_8h"/>
        <childnode refid="38518" relation="include">
        </childnode>
        <childnode refid="38520" relation="include">
        </childnode>
        <childnode refid="38535" relation="include">
        </childnode>
        <childnode refid="38534" relation="include">
        </childnode>
        <childnode refid="38508" relation="include">
        </childnode>
        <childnode refid="38509" relation="include">
        </childnode>
        <childnode refid="38545" relation="include">
        </childnode>
      </node>
      <node id="38517">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="38494">
        <label>bbgrid.h</label>
        <link refid="bbgrid_8h"/>
        <childnode refid="38495" relation="include">
        </childnode>
        <childnode refid="38508" relation="include">
        </childnode>
        <childnode refid="38516" relation="include">
        </childnode>
        <childnode refid="38518" relation="include">
        </childnode>
        <childnode refid="38526" relation="include">
        </childnode>
      </node>
      <node id="38541">
        <label>statistc.h</label>
        <link refid="statistc_8h"/>
        <childnode refid="38496" relation="include">
        </childnode>
        <childnode refid="38497" relation="include">
        </childnode>
        <childnode refid="38518" relation="include">
        </childnode>
      </node>
      <node id="38501">
        <label>stdlib.h</label>
      </node>
      <node id="38498">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="38499" relation="include">
        </childnode>
      </node>
      <node id="38525">
        <label>blckerr.h</label>
        <link refid="blckerr_8h"/>
        <childnode refid="38505" relation="include">
        </childnode>
      </node>
      <node id="38526">
        <label>allheaders.h</label>
      </node>
      <node id="38518">
        <label>scrollview.h</label>
        <link refid="scrollview_8h"/>
        <childnode refid="38496" relation="include">
        </childnode>
      </node>
      <node id="38500">
        <label>serialis.h</label>
        <link refid="serialis_8h"/>
        <childnode refid="38501" relation="include">
        </childnode>
        <childnode refid="38502" relation="include">
        </childnode>
        <childnode refid="38496" relation="include">
        </childnode>
        <childnode refid="38503" relation="include">
        </childnode>
        <childnode refid="38505" relation="include">
        </childnode>
        <childnode refid="38506" relation="include">
        </childnode>
      </node>
      <node id="38495">
        <label>clst.h</label>
        <link refid="clst_8h"/>
        <childnode refid="38496" relation="include">
        </childnode>
        <childnode refid="38497" relation="include">
        </childnode>
        <childnode refid="38500" relation="include">
        </childnode>
        <childnode refid="38507" relation="include">
        </childnode>
      </node>
      <node id="38530">
        <label>stepblob.h</label>
        <link refid="stepblob_8h"/>
        <childnode refid="38508" relation="include">
        </childnode>
        <childnode refid="38516" relation="include">
        </childnode>
      </node>
      <node id="38504">
        <label>stddef.h</label>
      </node>
      <node id="38505">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="38497" relation="include">
        </childnode>
      </node>
      <node id="38539">
        <label>polyblk.h</label>
        <link refid="polyblk_8h"/>
        <childnode refid="38537" relation="include">
        </childnode>
        <childnode refid="38512" relation="include">
        </childnode>
        <childnode refid="38510" relation="include">
        </childnode>
        <childnode refid="38516" relation="include">
        </childnode>
        <childnode refid="38518" relation="include">
        </childnode>
        <childnode refid="38540" relation="include">
        </childnode>
      </node>
      <node id="38499">
        <label>limits.h</label>
      </node>
      <node id="38493">
        <label>alignedblob.h</label>
        <link refid="alignedblob_8h"/>
        <childnode refid="38494" relation="include">
        </childnode>
        <childnode refid="38527" relation="include">
        </childnode>
        <childnode refid="38524" relation="include">
        </childnode>
        <childnode refid="38542" relation="include">
        </childnode>
      </node>
      <node id="38513">
        <label>ipoints.h</label>
        <link refid="ipoints_8h"/>
        <childnode refid="38511" relation="include">
        </childnode>
      </node>
      <node id="38514">
        <label>mod128.h</label>
        <link refid="mod128_8h"/>
        <childnode refid="38510" relation="include">
        </childnode>
      </node>
      <node id="38528">
        <label>elst2.h</label>
        <link refid="elst2_8h"/>
        <childnode refid="38496" relation="include">
        </childnode>
        <childnode refid="38497" relation="include">
        </childnode>
        <childnode refid="38500" relation="include">
        </childnode>
        <childnode refid="38507" relation="include">
        </childnode>
      </node>
      <node id="38502">
        <label>string.h</label>
      </node>
      <node id="38516">
        <label>rect.h</label>
        <link refid="rect_8h"/>
        <childnode refid="38511" relation="include">
        </childnode>
        <childnode refid="38510" relation="include">
        </childnode>
        <childnode refid="38517" relation="include">
        </childnode>
        <childnode refid="38518" relation="include">
        </childnode>
        <childnode refid="38519" relation="include">
        </childnode>
      </node>
      <node id="38515">
        <label>bits16.h</label>
        <link refid="bits16_8h"/>
        <childnode refid="38497" relation="include">
        </childnode>
      </node>
      <node id="38492">
        <label>linefind.h</label>
        <link refid="linefind_8h"/>
      </node>
      <node id="38522">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="38497" relation="include">
        </childnode>
      </node>
      <node id="38508">
        <label>coutln.h</label>
        <link refid="coutln_8h"/>
        <childnode refid="38509" relation="include">
        </childnode>
        <childnode refid="38514" relation="include">
        </childnode>
        <childnode refid="38515" relation="include">
        </childnode>
        <childnode refid="38516" relation="include">
        </childnode>
        <childnode refid="38525" relation="include">
        </childnode>
        <childnode refid="38518" relation="include">
        </childnode>
      </node>
      <node id="38529">
        <label>werd.h</label>
        <link refid="werd_8h"/>
        <childnode refid="38520" relation="include">
        </childnode>
        <childnode refid="38515" relation="include">
        </childnode>
        <childnode refid="38528" relation="include">
        </childnode>
        <childnode refid="38524" relation="include">
        </childnode>
        <childnode refid="38525" relation="include">
        </childnode>
        <childnode refid="38530" relation="include">
        </childnode>
        <childnode refid="38531" relation="include">
        </childnode>
      </node>
      <node id="38491">
        <label>textord/linefind.cpp</label>
        <link refid="linefind.cpp"/>
        <childnode refid="38492" relation="include">
        </childnode>
        <childnode refid="38493" relation="include">
        </childnode>
        <childnode refid="38542" relation="include">
        </childnode>
        <childnode refid="38527" relation="include">
        </childnode>
        <childnode refid="38544" relation="include">
        </childnode>
        <childnode refid="38526" relation="include">
        </childnode>
      </node>
      <node id="38531">
        <label>ocrrow.h</label>
        <link refid="ocrrow_8h"/>
        <childnode refid="38496" relation="include">
        </childnode>
        <childnode refid="38532" relation="include">
        </childnode>
        <childnode refid="38529" relation="include">
        </childnode>
      </node>
      <node id="38506">
        <label>fileerr.h</label>
        <link refid="fileerr_8h"/>
        <childnode refid="38505" relation="include">
        </childnode>
      </node>
      <node id="38511">
        <label>math.h</label>
      </node>
      <node id="38509">
        <label>crakedge.h</label>
        <link refid="crakedge_8h"/>
        <childnode refid="38510" relation="include">
        </childnode>
        <childnode refid="38514" relation="include">
        </childnode>
      </node>
      <node id="38507">
        <label>lsterr.h</label>
        <link refid="lsterr_8h"/>
        <childnode refid="38505" relation="include">
        </childnode>
      </node>
      <node id="38533">
        <label>quadratc.h</label>
        <link refid="quadratc_8h"/>
        <childnode refid="38510" relation="include">
        </childnode>
      </node>
      <node id="38537">
        <label>publictypes.h</label>
        <link refid="publictypes_8h"/>
      </node>
      <node id="38534">
        <label>ocrblock.h</label>
        <link refid="ocrblock_8h"/>
        <childnode refid="38535" relation="include">
        </childnode>
        <childnode refid="38536" relation="include">
        </childnode>
        <childnode refid="38531" relation="include">
        </childnode>
        <childnode refid="38538" relation="include">
        </childnode>
      </node>
      <node id="38520">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="38496" relation="include">
        </childnode>
        <childnode refid="38521" relation="include">
        </childnode>
        <childnode refid="38524" relation="include">
        </childnode>
      </node>
      <node id="38521">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="38496" relation="include">
        </childnode>
        <childnode refid="38501" relation="include">
        </childnode>
        <childnode refid="38522" relation="include">
        </childnode>
        <childnode refid="38505" relation="include">
        </childnode>
        <childnode refid="38523" relation="include">
        </childnode>
        <childnode refid="38517" relation="include">
        </childnode>
      </node>
      <node id="38503">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="38504" relation="include">
        </childnode>
        <childnode refid="38497" relation="include">
        </childnode>
      </node>
      <node id="38543">
        <label>blobgrid.h</label>
        <link refid="blobgrid_8h"/>
        <childnode refid="38494" relation="include">
        </childnode>
        <childnode refid="38527" relation="include">
        </childnode>
      </node>
      <node id="38536">
        <label>ocrpara.h</label>
        <link refid="ocrpara_8h"/>
        <childnode refid="38537" relation="include">
        </childnode>
        <childnode refid="38512" relation="include">
        </childnode>
        <childnode refid="38524" relation="include">
        </childnode>
      </node>
      <node id="38512">
        <label>elst.h</label>
        <link refid="elst_8h"/>
        <childnode refid="38496" relation="include">
        </childnode>
        <childnode refid="38497" relation="include">
        </childnode>
        <childnode refid="38500" relation="include">
        </childnode>
        <childnode refid="38507" relation="include">
        </childnode>
      </node>
      <node id="38510">
        <label>points.h</label>
        <link refid="points_8h"/>
        <childnode refid="38496" relation="include">
        </childnode>
        <childnode refid="38511" relation="include">
        </childnode>
        <childnode refid="38512" relation="include">
        </childnode>
        <childnode refid="38513" relation="include">
        </childnode>
      </node>
      <node id="38545">
        <label>notdll.h</label>
        <link refid="notdll_8h"/>
      </node>
      <node id="38535">
        <label>img.h</label>
        <link refid="img_8h"/>
        <childnode refid="38503" relation="include">
        </childnode>
      </node>
      <node id="38519">
        <label>tprintf.h</label>
        <link refid="tprintf_8h"/>
        <childnode refid="38520" relation="include">
        </childnode>
      </node>
      <node id="38540">
        <label>hpddef.h</label>
        <link refid="hpddef_8h"/>
      </node>
      <node id="38497">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="38498" relation="include">
        </childnode>
      </node>
      <node id="38538">
        <label>pdblock.h</label>
        <link refid="pdblock_8h"/>
        <childnode refid="38495" relation="include">
        </childnode>
        <childnode refid="38535" relation="include">
        </childnode>
        <childnode refid="38524" relation="include">
        </childnode>
        <childnode refid="38539" relation="include">
        </childnode>
        <childnode refid="38540" relation="include">
        </childnode>
      </node>
      <node id="38496">
        <label>stdio.h</label>
      </node>
      <node id="38524">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="38496" relation="include">
        </childnode>
        <childnode refid="38502" relation="include">
        </childnode>
        <childnode refid="38498" relation="include">
        </childnode>
        <childnode refid="38503" relation="include">
        </childnode>
      </node>
      <node id="38523">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="38496" relation="include">
        </childnode>
        <childnode refid="38502" relation="include">
        </childnode>
      </node>
      <node id="38532">
        <label>quspline.h</label>
        <link refid="quspline_8h"/>
        <childnode refid="38533" relation="include">
        </childnode>
        <childnode refid="38500" relation="include">
        </childnode>
        <childnode refid="38503" relation="include">
        </childnode>
        <childnode refid="38516" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetesseract">tesseract</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linefind.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Class<sp/>to<sp/>find<sp/>vertical<sp/>lines<sp/>in<sp/>an<sp/>image<sp/>and<sp/>create</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>corresponding<sp/>list<sp/>of<sp/>empty<sp/>blobs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/>Ray<sp/>Smith</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created:<sp/><sp/><sp/><sp/><sp/>Thu<sp/>Mar<sp/>20<sp/>09:49:01<sp/>PDT<sp/>2008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4244)<sp/><sp/>//<sp/>Conversion<sp/>warnings</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="linefind_8h" kindref="compound">linefind.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="alignedblob_8h" kindref="compound">alignedblob.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tabvector_8h" kindref="compound">tabvector.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="blobbox_8h" kindref="compound">blobbox.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="edgblob_8h" kindref="compound">edgblob.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>entire<sp/>file<sp/>is<sp/>dependent<sp/>upon<sp/>leptonica.<sp/>If<sp/>you<sp/>don&apos;t<sp/>have<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>code<sp/>doesn&apos;t<sp/>do<sp/>anything<sp/>useful.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;config_auto.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;allheaders.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesseract-c__api-demo_1afed58feacb84df2de88bdd613cfdba6d" kindref="member">tesseract</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1af5a3375be81da4b1d09d654fed77617a" kindref="member" tooltip="Denominator of resolution makes max pixel width to allow thin lines. ">kThinLineFraction</ref><sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="42"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1ab1ecce6329628c52853d15330697b9a5" kindref="member" tooltip="Denominator of resolution makes min pixels to demand line lengths to be. ">kMinLineLengthFraction</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="44"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a67e1606288499ff9e08833b9c2a1ded8" kindref="member" tooltip="Spacing of cracks across the page to break up tall vertical lines. ">kCrackSpacing</ref><sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="46"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1acbcf973384ce439c1b3ab4decf0c383c" kindref="member" tooltip="Grid size used by line finder. Not very critical. ">kLineFindGridSize</ref><sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Min<sp/>width<sp/>of<sp/>a<sp/>line<sp/>in<sp/>pixels<sp/>to<sp/>be<sp/>considered<sp/>thick.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a8109c0293738c5b8a499baf96e6191e2" kindref="member">kMinThickLineWidth</ref><sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>size<sp/>of<sp/>line<sp/>residue.<sp/>(The<sp/>pixels<sp/>that<sp/>fail<sp/>the<sp/>long<sp/>thin<sp/>opening,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>therefore<sp/>don&apos;t<sp/>make<sp/>it<sp/>to<sp/>the<sp/>candidate<sp/>line<sp/>mask,<sp/>but<sp/>are<sp/>nevertheless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>part<sp/>of<sp/>the<sp/>line.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1ab97d7447e46667c618a568b97b96bb3c" kindref="member">kMaxLineResidue</ref><sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Min<sp/>length<sp/>in<sp/>inches<sp/>of<sp/>a<sp/>line<sp/>segment<sp/>that<sp/>exceeds<sp/>kMinThickLineWidth<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>thickness.<sp/>(Such<sp/>lines<sp/>shouldn&apos;t<sp/>break<sp/>by<sp/>simple<sp/>image<sp/>degradation.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a6978c95cbd05d6aef11ca4b7850a1a6b" kindref="member">kThickLengthMultiple</ref><sp/>=<sp/>0.75;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>fraction<sp/>of<sp/>line<sp/>box<sp/>area<sp/>that<sp/>can<sp/>be<sp/>occupied<sp/>by<sp/>non-line<sp/>pixels.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a88f852ceee95241622ec0f837dbfeff8" kindref="member">kMaxNonLineDensity</ref><sp/>=<sp/>0.25;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>height<sp/>of<sp/>a<sp/>music<sp/>stave<sp/>in<sp/>inches.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a40e2e4747be3bc8a6358a023e2e3a001" kindref="member">kMaxStaveHeight</ref><sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Minimum<sp/>fraction<sp/>of<sp/>pixels<sp/>in<sp/>a<sp/>music<sp/>rectangle<sp/>connected<sp/>to<sp/>the<sp/>staves.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a064746ea8b34175e6f12ce364c8d6414" kindref="member">kMinMusicPixelFraction</ref><sp/>=<sp/>0.75;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Erases<sp/>the<sp/>unused<sp/>blobs<sp/>from<sp/>the<sp/>line_pix<sp/>image,<sp/>taking<sp/>into<sp/>account</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>whether<sp/>this<sp/>was<sp/>a<sp/>horizontal<sp/>or<sp/>vertical<sp/>line<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RemoveUnusedLineSegments(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>horizontal_lines,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLOBNBOX_LIST*<sp/>line_bblobs,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix*<sp/>line_pix)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>pixGetHeight(line_pix);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>BLOBNBOX_IT<sp/>bbox_it(line_bblobs);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bbox_it.mark_cycle_pt();<sp/>!bbox_it.cycled_list();<sp/>bbox_it.forward())<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_l_o_b_n_b_o_x" kindref="compound">BLOBNBOX</ref>*<sp/>blob<sp/>=<sp/>bbox_it.data();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blob-&gt;<ref refid="class_b_l_o_b_n_b_o_x_1a8b16d77deb75ed8aa2ff9d6be9462ec1" kindref="member">left_tab_type</ref>()<sp/>==<sp/><ref refid="blobbox_8h_1a6d0b33e703e1291d0b60d4fe5a5e12ccad0945333210420da84a7617b5788f246" kindref="member">TT_MAYBE_ALIGNED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_t_b_o_x" kindref="compound">TBOX</ref>&amp;<sp/>box<sp/>=<sp/>blob-&gt;<ref refid="class_b_l_o_b_n_b_o_x_1a7b97b8bc16b1473a28f9c44011522f4e" kindref="member">bounding_box</ref>();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Box*<sp/>pixbox<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(horizontal_lines)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Horizontal<sp/>lines<sp/>are<sp/>in<sp/>tess<sp/>format<sp/>and<sp/>also<sp/>have<sp/>x<sp/>and<sp/>y<sp/>flipped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(to<sp/>use<sp/>FindVerticalAlignment)<sp/>so<sp/>we<sp/>have<sp/>to<sp/>flip<sp/>x<sp/>and<sp/>y<sp/>and<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>Leptonica<sp/>by<sp/>height<sp/>-<sp/>flipped<sp/>x<sp/>(ie<sp/>the<sp/>right<sp/>edge).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>GetLineBoxes<sp/>for<sp/>more<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixbox<sp/>=<sp/>boxCreate(box.<ref refid="class_t_b_o_x_1a4451d237f1cd18c4982d63fe36a11fc3" kindref="member">bottom</ref>(),<sp/>height<sp/>-<sp/>box.<ref refid="class_t_b_o_x_1a8703081c1a1c26db3a4dddaca1028e34" kindref="member">right</ref>(),</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box.<ref refid="class_t_b_o_x_1a8379d4bbc72bdbb1f069fc14790e632d" kindref="member">height</ref>(),<sp/>box.<ref refid="class_t_b_o_x_1af95494a2ccacc70cc2b83820b2948619" kindref="member">width</ref>());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>vertical<sp/>lines,<sp/>just<sp/>flip<sp/>upside-down<sp/>to<sp/>convert<sp/>to<sp/>Leptonica.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>y<sp/>position<sp/>of<sp/>the<sp/>box<sp/>in<sp/>Leptonica<sp/>terms<sp/>is<sp/>the<sp/>distance<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>top<sp/>of<sp/>the<sp/>image<sp/>to<sp/>the<sp/>top<sp/>of<sp/>the<sp/>box.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixbox<sp/>=<sp/>boxCreate(box.<ref refid="class_t_b_o_x_1a724fabf566586b663577dfa944ffbc61" kindref="member">left</ref>(),<sp/>height<sp/>-<sp/>box.<ref refid="class_t_b_o_x_1adf92e9fdac1bdf11c10d1c4d1178791a" kindref="member">top</ref>(),</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box.<ref refid="class_t_b_o_x_1af95494a2ccacc70cc2b83820b2948619" kindref="member">width</ref>(),<sp/>box.<ref refid="class_t_b_o_x_1a8379d4bbc72bdbb1f069fc14790e632d" kindref="member">height</ref>());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixClearInRect(line_pix,<sp/>pixbox);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boxDestroy(&amp;pixbox);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>subtracts<sp/>the<sp/>line_pix<sp/>image<sp/>from<sp/>the<sp/>src_pix,<sp/>and<sp/>removes<sp/>residue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>well<sp/>by<sp/>removing<sp/>components<sp/>that<sp/>touch<sp/>the<sp/>line,<sp/>but<sp/>are<sp/>not<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non_line_pix<sp/>mask.<sp/>It<sp/>is<sp/>assumed<sp/>that<sp/>the<sp/>non_line_pix<sp/>mask<sp/>has<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>been<sp/>prepared<sp/>to<sp/>required<sp/>accuracy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SubtractLinesAndResidue(Pix*<sp/>line_pix,<sp/>Pix*<sp/>non_line_pix,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resolution,<sp/>Pix*<sp/>src_pix)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>remove<sp/>the<sp/>lines<sp/>themselves.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>pixSubtract(src_pix,<sp/>src_pix,<sp/>line_pix);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>the<sp/>non-lines<sp/>from<sp/>the<sp/>image<sp/>to<sp/>get<sp/>the<sp/>residue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>Pix*<sp/>residue_pix<sp/>=<sp/>pixSubtract(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>src_pix,<sp/>non_line_pix);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Dilate<sp/>the<sp/>lines<sp/>so<sp/>they<sp/>touch<sp/>the<sp/>residue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>Pix*<sp/>fat_line_pix<sp/>=<sp/>pixDilateBrick(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>line_pix,<sp/>3,<sp/>3);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Seed<sp/>fill<sp/>the<sp/>fat<sp/>lines<sp/>to<sp/>get<sp/>all<sp/>the<sp/>residue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>pixSeedfillBinary(fat_line_pix,<sp/>fat_line_pix,<sp/>residue_pix,<sp/>8);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>the<sp/>residue<sp/>from<sp/>the<sp/>original<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>pixSubtract(src_pix,<sp/>src_pix,<sp/>fat_line_pix);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;fat_line_pix);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;residue_pix);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>maximum<sp/>strokewidth<sp/>in<sp/>the<sp/>given<sp/>binary<sp/>image<sp/>by<sp/>doubling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>maximum<sp/>of<sp/>the<sp/>distance<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MaxStrokeWidth(Pix*<sp/>pix)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>Pix*<sp/>dist_pix<sp/>=<sp/>pixDistanceFunction(pix,<sp/>4,<sp/>8,<sp/>L_BOUNDARY_BG);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>pixGetWidth(dist_pix);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>pixGetHeight(dist_pix);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wpl<sp/>=<sp/>pixGetWpl(dist_pix);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>l_uint32*<sp/>data<sp/>=<sp/>pixGetData(dist_pix);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>maximum<sp/>value<sp/>in<sp/>the<sp/>distance<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_dist<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>height;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>width;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixel<sp/>=<sp/>GET_DATA_BYTE(data,<sp/>x);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixel<sp/>&gt;<sp/>max_dist)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_dist<sp/>=<sp/>pixel;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>+=<sp/>wpl;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;dist_pix);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_dist<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>components<sp/>in<sp/>the<sp/>intersection_pix<sp/>touched<sp/>by<sp/>line_box.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumTouchingIntersections(Box*<sp/>line_box,<sp/>Pix*<sp/>intersection_pix)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intersection_pix<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>Pix*<sp/>rect_pix<sp/>=<sp/>pixClipRectangle(intersection_pix,<sp/>line_box,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>Boxa*<sp/>boxa<sp/>=<sp/>pixConnComp(rect_pix,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>8);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;rect_pix);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boxa<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>boxaGetCount(boxa);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>boxaDestroy(&amp;boxa);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>black<sp/>pixels<sp/>found<sp/>in<sp/>the<sp/>box<sp/>made<sp/>by<sp/>adding<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>width<sp/>to<sp/>both<sp/>sides<sp/>of<sp/>the<sp/>line<sp/>bounding<sp/>box.<sp/>(Increasing<sp/>the<sp/>smallest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dimension<sp/>of<sp/>the<sp/>bounding<sp/>box.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CountPixelsAdjacentToLine(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_width,<sp/>Box*<sp/>line_box,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix*<sp/>nonline_pix)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>l_int32<sp/>x,<sp/>y,<sp/>box_width,<sp/>box_height;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>boxGetGeometry(line_box,<sp/>&amp;x,<sp/>&amp;y,<sp/>&amp;box_width,<sp/>&amp;box_height);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(box_width<sp/>&gt;<sp/>box_height)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>horizontal<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/><ref refid="ndminx_8h_1a74e75242132eaabbc1c512488a135926" kindref="member">MIN</ref>(pixGetHeight(nonline_pix),<sp/>y<sp/>+<sp/>box_height<sp/>+<sp/>line_width);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/><ref refid="ndminx_8h_1aacc3ee1a7f283f8ef65cea31f4436a95" kindref="member">MAX</ref>(0,<sp/>y<sp/>-<sp/>line_width);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>box_height<sp/>=<sp/>bottom<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vertical<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right<sp/>=<sp/><ref refid="ndminx_8h_1a74e75242132eaabbc1c512488a135926" kindref="member">MIN</ref>(pixGetWidth(nonline_pix),<sp/>x<sp/>+<sp/>box_width<sp/>+<sp/>line_width);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/><ref refid="ndminx_8h_1aacc3ee1a7f283f8ef65cea31f4436a95" kindref="member">MAX</ref>(0,<sp/>x<sp/>-<sp/>line_width);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>box_width<sp/>=<sp/>right<sp/>-<sp/>x;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>Box*<sp/>box<sp/>=<sp/>boxCreate(x,<sp/>y,<sp/>box_width,<sp/>box_height);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>Pix*<sp/>rect_pix<sp/>=<sp/>pixClipRectangle(nonline_pix,<sp/>box,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>boxDestroy(&amp;box);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>l_int32<sp/>result;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>pixCountPixels(rect_pix,<sp/>&amp;result,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;rect_pix);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>erases<sp/>false-positive<sp/>line<sp/>segments<sp/>from<sp/>the<sp/>input/output<sp/>line_pix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>Since<sp/>thick<sp/>lines<sp/>shouldn&apos;t<sp/>really<sp/>break<sp/>up,<sp/>we<sp/>can<sp/>eliminate<sp/>some<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>positives<sp/>by<sp/>marking<sp/>segments<sp/>that<sp/>are<sp/>at<sp/>least<sp/>kMinThickLineWidth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>thickness,<sp/>yet<sp/>have<sp/>a<sp/>length<sp/>less<sp/>than<sp/>min_thick_length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2.<sp/>Lines<sp/>that<sp/>don&apos;t<sp/>have<sp/>at<sp/>least<sp/>2<sp/>intersections<sp/>with<sp/>other<sp/>lines<sp/>and<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>a<sp/>lot<sp/>of<sp/>neighbouring<sp/>non-lines<sp/>are<sp/>probably<sp/>not<sp/>lines<sp/>(perhaps<sp/>arabic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>or<sp/>Hindi<sp/>words,<sp/>or<sp/>underlines.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Bad<sp/>line<sp/>components<sp/>are<sp/>erased<sp/>from<sp/>line_pix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>remaining<sp/>connected<sp/>components.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FilterFalsePositives(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resolution,<sp/>Pix*<sp/>nonline_pix,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix*<sp/>intersection_pix,<sp/>Pix*<sp/>line_pix)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_thick_length<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(resolution<sp/>*<sp/><ref refid="namespacetesseract_1a6978c95cbd05d6aef11ca4b7850a1a6b" kindref="member">kThickLengthMultiple</ref>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>Pixa*<sp/>pixa<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>Boxa*<sp/>boxa<sp/>=<sp/>pixConnComp(line_pix,<sp/>&amp;pixa,<sp/>8);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>the<sp/>boxes<sp/>to<sp/>remove<sp/>false<sp/>positives.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nboxes<sp/>=<sp/>boxaGetCount(boxa);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remaining_boxes<sp/>=<sp/>nboxes;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nboxes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>Box*<sp/>box<sp/>=<sp/>boxaGetBox(boxa,<sp/>i,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>l_int32<sp/>x,<sp/>y,<sp/>box_width,<sp/>box_height;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>boxGetGeometry(box,<sp/>&amp;x,<sp/>&amp;y,<sp/>&amp;box_width,<sp/>&amp;box_height);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>Pix*<sp/>comp_pix<sp/>=<sp/>pixaGetPix(pixa,<sp/>i,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_width<sp/>=<sp/>MaxStrokeWidth(comp_pix);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>pixDestroy(&amp;comp_pix);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bad_line<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>length<sp/>is<sp/>too<sp/>short<sp/>to<sp/>stand-alone<sp/>as<sp/>a<sp/>line,<sp/>and<sp/>the<sp/>box<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>thick<sp/>enough,<sp/>and<sp/>the<sp/>stroke<sp/>width<sp/>is<sp/>thick<sp/>enough<sp/>it<sp/>is<sp/>bad.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(box_width<sp/>&gt;=<sp/><ref refid="namespacetesseract_1a8109c0293738c5b8a499baf96e6191e2" kindref="member">kMinThickLineWidth</ref><sp/>&amp;&amp;<sp/>box_height<sp/>&gt;=<sp/><ref refid="namespacetesseract_1a8109c0293738c5b8a499baf96e6191e2" kindref="member">kMinThickLineWidth</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box_width<sp/>&lt;<sp/>min_thick_length<sp/>&amp;&amp;<sp/>box_height<sp/>&lt;<sp/>min_thick_length<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_width<sp/>&gt;<sp/><ref refid="namespacetesseract_1a8109c0293738c5b8a499baf96e6191e2" kindref="member">kMinThickLineWidth</ref>)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Too<sp/>thick<sp/>for<sp/>the<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bad_line<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bad_line<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(intersection_pix<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumTouchingIntersections(box,<sp/>intersection_pix)<sp/>&lt;<sp/>2))<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>non-line<sp/>density<sp/>near<sp/>the<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nonline_count<sp/>=<sp/>CountPixelsAdjacentToLine(max_width,<sp/>box,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonline_pix);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nonline_count<sp/>&gt;<sp/>box_height<sp/>*<sp/>box_width<sp/>*<sp/><ref refid="namespacetesseract_1a88f852ceee95241622ec0f837dbfeff8" kindref="member">kMaxNonLineDensity</ref>)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bad_line<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bad_line)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>a<sp/>good<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixClearInRect(line_pix,<sp/>box);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--remaining_boxes;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>boxDestroy(&amp;box);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>pixaDestroy(&amp;pixa);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>boxaDestroy(&amp;boxa);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>remaining_boxes;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Finds<sp/>vertical<sp/>and<sp/>horizontal<sp/>line<sp/>objects<sp/>in<sp/>the<sp/>given<sp/>pix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Uses<sp/>the<sp/>given<sp/>resolution<sp/>to<sp/>determine<sp/>size<sp/>thresholds<sp/>instead<sp/>of<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>may<sp/>be<sp/>present<sp/>in<sp/>the<sp/>pix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>output<sp/>vertical_x<sp/>and<sp/>vertical_y<sp/>contain<sp/>a<sp/>sum<sp/>of<sp/>the<sp/>output<sp/>vectors,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>thereby<sp/>giving<sp/>the<sp/>mean<sp/>vertical<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>pix_music_mask<sp/>!=<sp/>NULL,<sp/>and<sp/>music<sp/>is<sp/>detected,<sp/>a<sp/>mask<sp/>of<sp/>the<sp/>staves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>anything<sp/>that<sp/>is<sp/>connected<sp/>(bars,<sp/>notes<sp/>etc.)<sp/>will<sp/>be<sp/>returned<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pix_music_mask,<sp/>the<sp/>mask<sp/>subtracted<sp/>from<sp/>pix,<sp/>and<sp/>the<sp/>lines<sp/>will<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>appear<sp/>in<sp/>v_lines<sp/>or<sp/>h_lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>output<sp/>vectors<sp/>are<sp/>owned<sp/>by<sp/>the<sp/>list<sp/>and<sp/>Frozen<sp/>(cannot<sp/>refit)<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>having<sp/>no<sp/>boxes,<sp/>as<sp/>there<sp/>is<sp/>no<sp/>need<sp/>to<sp/>refit<sp/>or<sp/>merge<sp/>separator<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>detected<sp/>lines<sp/>are<sp/>removed<sp/>from<sp/>the<sp/>pix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_line_finder_1a3a72521c00cb7725b2282b7b3cc6e6b9" kindref="member">LineFinder::FindAndRemoveLines</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resolution,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debug,<sp/>Pix*<sp/>pix,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>vertical_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>vertical_y,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix**<sp/>pix_music_mask,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TabVector_LIST*<sp/>v_lines,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TabVector_LIST*<sp/>h_lines)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>vertical_x<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>vertical_y<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>parameters<sp/>for<sp/>LineFinder::FindAndRemoveLines\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>Pix*<sp/>pix_vline<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>Pix*<sp/>pix_non_vline<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>Pix*<sp/>pix_hline<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>Pix*<sp/>pix_non_hline<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>Pix*<sp/>pix_intersections<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>Pixa*<sp/>pixa_display<sp/>=<sp/>debug<sp/>?<sp/>pixaCreate(0)<sp/>:<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>GetLineMasks(resolution,<sp/>pix,<sp/>&amp;pix_vline,<sp/>&amp;pix_non_vline,<sp/>&amp;pix_hline,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;pix_non_hline,<sp/>&amp;pix_intersections,<sp/>pix_music_mask,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixa_display);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>lines,<sp/>convert<sp/>to<sp/>TabVector_LIST<sp/>and<sp/>remove<sp/>those<sp/>that<sp/>are<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>FindAndRemoveVLines(resolution,<sp/>pix_intersections,<sp/>vertical_x,<sp/>vertical_y,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;pix_vline,<sp/>pix_non_vline,<sp/>pix,<sp/>v_lines);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix_hline<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recompute<sp/>intersections<sp/>and<sp/>re-filter<sp/>false<sp/>positive<sp/>h-lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix_vline<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixAnd(pix_intersections,<sp/>pix_vline,<sp/>pix_hline);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixDestroy(&amp;pix_intersections);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!FilterFalsePositives(resolution,<sp/>pix_non_hline,<sp/>pix_intersections,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix_hline))<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixDestroy(&amp;pix_hline);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>FindAndRemoveHLines(resolution,<sp/>pix_intersections,<sp/>*vertical_x,<sp/>*vertical_y,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;pix_hline,<sp/>pix_non_hline,<sp/>pix,<sp/>h_lines);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixa_display<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>pix_vline<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>pixaAddPix(pixa_display,<sp/>pix_vline,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixa_display<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>pix_hline<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>pixaAddPix(pixa_display,<sp/>pix_hline,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix_vline<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>pix_hline<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>joins<sp/>(intersections)<sp/>where<sp/>lines<sp/>cross,<sp/>and<sp/>the<sp/>residue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recalculate<sp/>the<sp/>intersections,<sp/>since<sp/>some<sp/>lines<sp/>have<sp/>been<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>pixAnd(pix_intersections,<sp/>pix_vline,<sp/>pix_hline);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fatten<sp/>up<sp/>the<sp/>intersections<sp/>and<sp/>seed-fill<sp/>to<sp/>get<sp/>the<sp/>intersection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>residue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>Pix*<sp/>pix_join_residue<sp/>=<sp/>pixDilateBrick(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>pix_intersections,<sp/>5,<sp/>5);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>pixSeedfillBinary(pix_join_residue,<sp/>pix_join_residue,<sp/>pix,<sp/>8);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>remove<sp/>the<sp/>intersection<sp/>residue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>pixSubtract(pix,<sp/>pix,<sp/>pix_join_residue);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>pixDestroy(&amp;pix_join_residue);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>any<sp/>detected<sp/>music.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix_music_mask<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>*pix_music_mask<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixa_display<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixaAddPix(pixa_display,<sp/>*pix_music_mask,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>pixSubtract(pix,<sp/>pix,<sp/>*pix_music_mask);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixa_display<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>pixaAddPix(pixa_display,<sp/>pix,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;pix_vline);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;pix_non_vline);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;pix_hline);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;pix_non_hline);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;pix_intersections);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixa_display<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LIBLEPT_MINOR_VERSION<sp/>&gt;=<sp/>69<sp/>||<sp/>LIBLEPT_MAJOR_VERSION<sp/>&gt;<sp/>1</highlight></codeline>
<codeline lineno="309"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>pixaConvertToPdf(pixa_display,<sp/>resolution,<sp/>1.0<ref refid="imgscale_8cpp_1a469169df397b589e709dc744f1346831" kindref="member">f</ref>,<sp/>0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;LineFinding&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vhlinefinding.pdf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>pixaDestroy(&amp;pixa_display);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>Boxa<sp/>array<sp/>to<sp/>a<sp/>list<sp/>of<sp/>C_BLOB,<sp/>getting<sp/>rid<sp/>of<sp/>severely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overlapping<sp/>outlines<sp/>and<sp/>those<sp/>that<sp/>are<sp/>children<sp/>of<sp/>a<sp/>bigger<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>output<sp/>is<sp/>a<sp/>list<sp/>of<sp/>C_BLOBs<sp/>that<sp/>are<sp/>owned<sp/>by<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>C_OUTLINEs<sp/>in<sp/>the<sp/>C_BLOBs<sp/>contain<sp/>no<sp/>outline<sp/>data<sp/>-<sp/>just<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bounding<sp/>boxes.<sp/>The<sp/>Boxa<sp/>is<sp/>consumed<sp/>and<sp/>destroyed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_line_finder_1a9d00a88e3c4d6e1b9c7b28c3f6825b88" kindref="member">LineFinder::ConvertBoxaToBlobs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>image_width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>image_height,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Boxa**<sp/>boxes,<sp/>C_BLOB_LIST*<sp/>blobs)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>C_OUTLINE_LIST<sp/>outlines;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>C_OUTLINE_IT<sp/>ol_it<sp/>=<sp/>&amp;outlines;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>the<sp/>boxes<sp/>to<sp/>convert<sp/>to<sp/>outlines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nboxes<sp/>=<sp/>boxaGetCount(*boxes);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nboxes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>l_int32<sp/>x,<sp/>y,<sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>boxaGetBoxGeometry(*boxes,<sp/>i,<sp/>&amp;x,<sp/>&amp;y,<sp/>&amp;width,<sp/>&amp;height);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>C_OUTLINE<sp/>from<sp/>the<sp/>leptonica<sp/>box.<sp/>This<sp/>is<sp/>a<sp/>bit<sp/>of<sp/>a<sp/>hack,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>there<sp/>is<sp/>no<sp/>outline,<sp/>just<sp/>a<sp/>bounding<sp/>box,<sp/>but<sp/>with<sp/>some<sp/>very</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>small<sp/>changes<sp/>to<sp/>coutln.cpp,<sp/>it<sp/>works<sp/>nicely.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_c_o_o_r_d" kindref="compound" tooltip="integer coordinate ">ICOORD</ref><sp/>top_left(x,<sp/>y);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_c_o_o_r_d" kindref="compound" tooltip="integer coordinate ">ICOORD</ref><sp/>bot_right(x<sp/>+<sp/>width,<sp/>y<sp/>+<sp/>height);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_r_a_c_k_e_d_g_e" kindref="compound">CRACKEDGE</ref><sp/>startpt;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>startpt.<ref refid="class_c_r_a_c_k_e_d_g_e_1ae7bcdb1f6f28f612a0ff4ace03b38165" kindref="member">pos</ref><sp/>=<sp/>top_left;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c___o_u_t_l_i_n_e" kindref="compound">C_OUTLINE</ref>*<sp/>outline<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="coutln_8h_1a33c25172cfe8e7ec617eb16413b61294" kindref="member">C_OUTLINE</ref>(&amp;startpt,<sp/>top_left,<sp/>bot_right,<sp/>0);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>ol_it.add_after_then_move(outline);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>outlines_to_blobs<sp/>to<sp/>convert<sp/>the<sp/>outlines<sp/>to<sp/>blobs<sp/>and<sp/>find</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>overlapping<sp/>and<sp/>contained<sp/>objects.<sp/>The<sp/>output<sp/>list<sp/>of<sp/>blobs<sp/>in<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>all<sp/>the<sp/>bad<sp/>ones<sp/>filtered<sp/>out<sp/>and<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><ref refid="class_b_l_o_c_k" kindref="compound">BLOCK</ref><sp/>block;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><ref refid="class_i_c_o_o_r_d" kindref="compound" tooltip="integer coordinate ">ICOORD</ref><sp/>page_tl(0,<sp/>0);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><ref refid="class_i_c_o_o_r_d" kindref="compound" tooltip="integer coordinate ">ICOORD</ref><sp/>page_br(image_width,<sp/>image_height);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><ref refid="edgblob_8cpp_1ae0cc26838f9973f097882b899b69b249" kindref="member">outlines_to_blobs</ref>(&amp;block,<sp/>page_tl,<sp/>page_br,<sp/>&amp;outlines);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Transfer<sp/>the<sp/>created<sp/>blobs<sp/>to<sp/>the<sp/>output<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>C_BLOB_IT<sp/>blob_it(blobs);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>blob_it.add_list_after(block.<ref refid="class_b_l_o_c_k_1a23196fe0d7230572b44aa77031a1d72a" kindref="member" tooltip="get blobs ">blob_list</ref>());</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>boxes<sp/>aren&apos;t<sp/>needed<sp/>any<sp/>more.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>boxaDestroy(boxes);</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Finds<sp/>vertical<sp/>line<sp/>objects<sp/>in<sp/>pix_vline<sp/>and<sp/>removes<sp/>the<sp/>from<sp/>src_pix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Uses<sp/>the<sp/>given<sp/>resolution<sp/>to<sp/>determine<sp/>size<sp/>thresholds<sp/>instead<sp/>of<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>may<sp/>be<sp/>present<sp/>in<sp/>the<sp/>pix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>output<sp/>vertical_x<sp/>and<sp/>vertical_y<sp/>contain<sp/>a<sp/>sum<sp/>of<sp/>the<sp/>output<sp/>vectors,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>thereby<sp/>giving<sp/>the<sp/>mean<sp/>vertical<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>output<sp/>vectors<sp/>are<sp/>owned<sp/>by<sp/>the<sp/>list<sp/>and<sp/>Frozen<sp/>(cannot<sp/>refit)<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>having<sp/>no<sp/>boxes,<sp/>as<sp/>there<sp/>is<sp/>no<sp/>need<sp/>to<sp/>refit<sp/>or<sp/>merge<sp/>separator<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>good<sp/>lines<sp/>are<sp/>found,<sp/>pix_vline<sp/>is<sp/>destroyed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>None<sp/>of<sp/>the<sp/>input<sp/>pointers<sp/>may<sp/>be<sp/>NULL,<sp/>and<sp/>if<sp/>*pix_vline<sp/>is<sp/>NULL<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>function<sp/>does<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LineFinder::FindAndRemoveVLines(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resolution,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix*<sp/>pix_intersections,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>vertical_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>vertical_y,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix**<sp/>pix_vline,<sp/>Pix*<sp/>pix_non_vline,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix*<sp/>src_pix,<sp/>TabVector_LIST*<sp/>vectors)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix_vline<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>*pix_vline<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>C_BLOB_LIST<sp/>line_cblobs;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>BLOBNBOX_LIST<sp/>line_bblobs;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>GetLineBoxes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>*pix_vline,<sp/>pix_intersections,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;line_cblobs,<sp/>&amp;line_bblobs);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>pixGetWidth(src_pix);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>pixGetHeight(src_pix);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><ref refid="class_i_c_o_o_r_d" kindref="compound" tooltip="integer coordinate ">ICOORD</ref><sp/>bleft(0,<sp/>0);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><ref refid="class_i_c_o_o_r_d" kindref="compound" tooltip="integer coordinate ">ICOORD</ref><sp/>tright(width,<sp/>height);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>FindLineVectors(bleft,<sp/>tright,<sp/>&amp;line_bblobs,<sp/>vertical_x,<sp/>vertical_y,<sp/>vectors);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vectors-&gt;empty())<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>RemoveUnusedLineSegments(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>&amp;line_bblobs,<sp/>*pix_vline);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>SubtractLinesAndResidue(*pix_vline,<sp/>pix_non_vline,<sp/>resolution,<sp/>src_pix);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_c_o_o_r_d" kindref="compound" tooltip="integer coordinate ">ICOORD</ref><sp/>vertical;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>vertical.<ref refid="class_i_c_o_o_r_d_1a202dcd2920b28d85c2338d28dac8c5fe" kindref="member" tooltip="Set from the given x,y, shrinking the vector to fit if needed. ">set_with_shrink</ref>(*vertical_x,<sp/>*vertical_y);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_tab_vector_1a19795eab9036e3f6eb8a274d2c2b0179" kindref="member">TabVector::MergeSimilarTabVectors</ref>(vertical,<sp/>vectors,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>pixDestroy(pix_vline);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Finds<sp/>horizontal<sp/>line<sp/>objects<sp/>in<sp/>pix_hline<sp/>and<sp/>removes<sp/>them<sp/>from<sp/>src_pix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Uses<sp/>the<sp/>given<sp/>resolution<sp/>to<sp/>determine<sp/>size<sp/>thresholds<sp/>instead<sp/>of<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>may<sp/>be<sp/>present<sp/>in<sp/>the<sp/>pix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>output<sp/>vertical_x<sp/>and<sp/>vertical_y<sp/>contain<sp/>a<sp/>sum<sp/>of<sp/>the<sp/>output<sp/>vectors,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>thereby<sp/>giving<sp/>the<sp/>mean<sp/>vertical<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>output<sp/>vectors<sp/>are<sp/>owned<sp/>by<sp/>the<sp/>list<sp/>and<sp/>Frozen<sp/>(cannot<sp/>refit)<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>having<sp/>no<sp/>boxes,<sp/>as<sp/>there<sp/>is<sp/>no<sp/>need<sp/>to<sp/>refit<sp/>or<sp/>merge<sp/>separator<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>good<sp/>lines<sp/>are<sp/>found,<sp/>pix_hline<sp/>is<sp/>destroyed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>None<sp/>of<sp/>the<sp/>input<sp/>pointers<sp/>may<sp/>be<sp/>NULL,<sp/>and<sp/>if<sp/>*pix_hline<sp/>is<sp/>NULL<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>function<sp/>does<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LineFinder::FindAndRemoveHLines(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resolution,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix*<sp/>pix_intersections,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertical_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertical_y,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix**<sp/>pix_hline,<sp/>Pix*<sp/>pix_non_hline,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix*<sp/>src_pix,<sp/>TabVector_LIST*<sp/>vectors)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix_hline<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>*pix_hline<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>C_BLOB_LIST<sp/>line_cblobs;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>BLOBNBOX_LIST<sp/>line_bblobs;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>GetLineBoxes(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>*pix_hline,<sp/>pix_intersections,<sp/>&amp;line_cblobs,<sp/>&amp;line_bblobs);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>pixGetWidth(src_pix);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>pixGetHeight(src_pix);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><ref refid="class_i_c_o_o_r_d" kindref="compound" tooltip="integer coordinate ">ICOORD</ref><sp/>bleft(0,<sp/>0);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><ref refid="class_i_c_o_o_r_d" kindref="compound" tooltip="integer coordinate ">ICOORD</ref><sp/>tright(height,<sp/>width);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>FindLineVectors(bleft,<sp/>tright,<sp/>&amp;line_bblobs,<sp/>&amp;vertical_x,<sp/>&amp;vertical_y,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectors);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vectors-&gt;empty())<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>RemoveUnusedLineSegments(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>&amp;line_bblobs,<sp/>*pix_hline);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>SubtractLinesAndResidue(*pix_hline,<sp/>pix_non_hline,<sp/>resolution,<sp/>src_pix);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_c_o_o_r_d" kindref="compound" tooltip="integer coordinate ">ICOORD</ref><sp/>vertical;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>vertical.<ref refid="class_i_c_o_o_r_d_1a202dcd2920b28d85c2338d28dac8c5fe" kindref="member" tooltip="Set from the given x,y, shrinking the vector to fit if needed. ">set_with_shrink</ref>(vertical_x,<sp/>vertical_y);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_tab_vector_1a19795eab9036e3f6eb8a274d2c2b0179" kindref="member">TabVector::MergeSimilarTabVectors</ref>(vertical,<sp/>vectors,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>the<sp/>vectors<sp/>to<sp/>flip<sp/>them.<sp/>x<sp/>and<sp/>y<sp/>were<sp/>flipped<sp/>for<sp/>horizontal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lines,<sp/>so<sp/>FindLineVectors<sp/>can<sp/>work<sp/>just<sp/>with<sp/>the<sp/>vertical<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>GetLineBoxes<sp/>for<sp/>more<sp/>on<sp/>the<sp/>flip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>TabVector_IT<sp/>h_it(vectors);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(h_it.mark_cycle_pt();<sp/>!h_it.cycled_list();<sp/>h_it.forward())<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_it.data()-&gt;XYFlip();</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>pixDestroy(pix_hline);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Finds<sp/>vertical<sp/>lines<sp/>in<sp/>the<sp/>given<sp/>list<sp/>of<sp/>BLOBNBOXes.<sp/>bleft<sp/>and<sp/>tright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>the<sp/>bounds<sp/>of<sp/>the<sp/>image<sp/>on<sp/>which<sp/>the<sp/>input<sp/>line_bblobs<sp/>were<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>input<sp/>line_bblobs<sp/>list<sp/>is<sp/>const<sp/>really.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>output<sp/>vertical_x<sp/>and<sp/>vertical_y<sp/>are<sp/>the<sp/>total<sp/>of<sp/>all<sp/>the<sp/>vectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>output<sp/>list<sp/>of<sp/>TabVector<sp/>makes<sp/>no<sp/>reference<sp/>to<sp/>the<sp/>input<sp/>BLOBNBOXes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LineFinder::FindLineVectors(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_c_o_o_r_d" kindref="compound" tooltip="integer coordinate ">ICOORD</ref>&amp;<sp/>bleft,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_c_o_o_r_d" kindref="compound" tooltip="integer coordinate ">ICOORD</ref>&amp;<sp/>tright,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLOBNBOX_LIST*<sp/>line_bblobs,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>vertical_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>vertical_y,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TabVector_LIST*<sp/>vectors)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>BLOBNBOX_IT<sp/>bbox_it(line_bblobs);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>all<sp/>the<sp/>blobs<sp/>into<sp/>the<sp/>grid<sp/>to<sp/>find<sp/>the<sp/>lines,<sp/>and<sp/>move<sp/>the<sp/>blobs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>output<sp/>lists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>AlignedBlob<sp/>blob_grid(<ref refid="namespacetesseract_1acbcf973384ce439c1b3ab4decf0c383c" kindref="member" tooltip="Grid size used by line finder. Not very critical. ">kLineFindGridSize</ref>,<sp/>bleft,<sp/>tright);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bbox_it.mark_cycle_pt();<sp/>!bbox_it.cycled_list();<sp/>bbox_it.forward())<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_l_o_b_n_b_o_x" kindref="compound">BLOBNBOX</ref>*<sp/>bblob<sp/>=<sp/>bbox_it.data();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>bblob-&gt;<ref refid="class_b_l_o_b_n_b_o_x_1a098a0c7864a31569db4c32e32f54504c" kindref="member">set_left_tab_type</ref>(<ref refid="blobbox_8h_1a6d0b33e703e1291d0b60d4fe5a5e12ccad0945333210420da84a7617b5788f246" kindref="member">TT_MAYBE_ALIGNED</ref>);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>bblob-&gt;<ref refid="class_b_l_o_b_n_b_o_x_1a37c2f715b4cb67ae8ec6a507dd029787" kindref="member">set_left_rule</ref>(bleft.<ref refid="class_i_c_o_o_r_d_1a59722a47c540007c58a539f0e35b3f33" kindref="member" tooltip="access function ">x</ref>());</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>bblob-&gt;<ref refid="class_b_l_o_b_n_b_o_x_1ae90db382b3842419f291ae29dd7cd778" kindref="member">set_right_rule</ref>(tright.<ref refid="class_i_c_o_o_r_d_1a59722a47c540007c58a539f0e35b3f33" kindref="member" tooltip="access function ">x</ref>());</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>bblob-&gt;<ref refid="class_b_l_o_b_n_b_o_x_1af1c12b91267640dc5634f8992f96cb1a" kindref="member">set_left_crossing_rule</ref>(bleft.<ref refid="class_i_c_o_o_r_d_1a59722a47c540007c58a539f0e35b3f33" kindref="member" tooltip="access function ">x</ref>());</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>bblob-&gt;<ref refid="class_b_l_o_b_n_b_o_x_1a234b1b56e0790a98a0c549a36580ca60" kindref="member">set_right_crossing_rule</ref>(tright.<ref refid="class_i_c_o_o_r_d_1a59722a47c540007c58a539f0e35b3f33" kindref="member" tooltip="access function ">x</ref>());</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>blob_grid.InsertBBox(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>bblob);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>++b_count;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b_count<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Search<sp/>the<sp/>entire<sp/>grid,<sp/>looking<sp/>for<sp/>vertical<sp/>line<sp/>vectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a2681de132e11a73d6fc4f281b2750109" kindref="member">BlobGridSearch</ref><sp/>lsearch(&amp;blob_grid);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><ref refid="class_b_l_o_b_n_b_o_x" kindref="compound">BLOBNBOX</ref>*<sp/>bbox;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>TabVector_IT<sp/>vector_it(vectors);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>*vertical_x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>*vertical_y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>lsearch.StartFullSearch();</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((bbox<sp/>=<sp/>lsearch.NextFullSearch())<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bbox-&gt;<ref refid="class_b_l_o_b_n_b_o_x_1a8b16d77deb75ed8aa2ff9d6be9462ec1" kindref="member">left_tab_type</ref>()<sp/>==<sp/><ref refid="blobbox_8h_1a6d0b33e703e1291d0b60d4fe5a5e12ccad0945333210420da84a7617b5788f246" kindref="member">TT_MAYBE_ALIGNED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_t_b_o_x" kindref="compound">TBOX</ref>&amp;<sp/>box<sp/>=<sp/>bbox-&gt;<ref refid="class_b_l_o_b_n_b_o_x_1a7b97b8bc16b1473a28f9c44011522f4e" kindref="member">bounding_box</ref>();</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtesseract_1_1_aligned_blob_1a357ff9e1d9bac2b1d88fb0d335fa7f3e" kindref="member">AlignedBlob::WithinTestRegion</ref>(2,<sp/>box.<ref refid="class_t_b_o_x_1a724fabf566586b663577dfa944ffbc61" kindref="member">left</ref>(),<sp/>box.<ref refid="class_t_b_o_x_1a4451d237f1cd18c4982d63fe36a11fc3" kindref="member">bottom</ref>()))</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Finding<sp/>line<sp/>vector<sp/>starting<sp/>at<sp/>bbox<sp/>(%d,%d)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box.<ref refid="class_t_b_o_x_1a724fabf566586b663577dfa944ffbc61" kindref="member">left</ref>(),<sp/>box.<ref refid="class_t_b_o_x_1a4451d237f1cd18c4982d63fe36a11fc3" kindref="member">bottom</ref>());</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AlignedBlobParams<sp/>align_params(*vertical_x,<sp/>*vertical_y,<sp/>box.<ref refid="class_t_b_o_x_1af95494a2ccacc70cc2b83820b2948619" kindref="member">width</ref>());</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TabVector*<sp/>vector<sp/>=<sp/>blob_grid.FindVerticalAlignment(align_params,<sp/>bbox,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertical_x,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertical_y);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector-&gt;Freeze();</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector_it.add_to_end(vector);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>Pix<sp/>music<sp/>mask<sp/>if<sp/>music<sp/>is<sp/>detected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Any<sp/>vertical<sp/>line<sp/>that<sp/>has<sp/>at<sp/>least<sp/>5<sp/>intersections<sp/>in<sp/>sufficient<sp/>density</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>taken<sp/>to<sp/>be<sp/>a<sp/>bar.<sp/>Bars<sp/>are<sp/>used<sp/>as<sp/>a<sp/>seed<sp/>and<sp/>the<sp/>entire<sp/>touching</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>component<sp/>is<sp/>added<sp/>to<sp/>the<sp/>output<sp/>music<sp/>mask<sp/>and<sp/>subtracted<sp/>from<sp/>the<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>NULL<sp/>and<sp/>does<sp/>minimal<sp/>work<sp/>if<sp/>no<sp/>music<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Pix*<sp/>FilterMusic(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resolution,<sp/>Pix*<sp/>pix_closed,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix*<sp/>pix_vline,<sp/>Pix*<sp/>pix_hline,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_int32*<sp/>v_empty,<sp/>l_int32*<sp/>h_empty)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_stave_height<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(resolution<sp/>*<sp/><ref refid="namespacetesseract_1a40e2e4747be3bc8a6358a023e2e3a001" kindref="member">kMaxStaveHeight</ref>);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>Pix*<sp/>intersection_pix<sp/>=<sp/>pixAnd(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>pix_vline,<sp/>pix_hline);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>Boxa*<sp/>boxa<sp/>=<sp/>pixConnComp(pix_vline,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>8);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>the<sp/>boxes<sp/>to<sp/>find<sp/>music<sp/>bars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nboxes<sp/>=<sp/>boxaGetCount(boxa);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>Pix*<sp/>music_mask<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nboxes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>Box*<sp/>box<sp/>=<sp/>boxaGetBox(boxa,<sp/>i,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>l_int32<sp/>x,<sp/>y,<sp/>box_width,<sp/>box_height;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>boxGetGeometry(box,<sp/>&amp;x,<sp/>&amp;y,<sp/>&amp;box_width,<sp/>&amp;box_height);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>joins<sp/>=<sp/>NumTouchingIntersections(box,<sp/>intersection_pix);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>for<sp/>the<sp/>join<sp/>density<sp/>being<sp/>at<sp/>least<sp/>5<sp/>per<sp/>max_stave_height,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ie<sp/>(joins-1)/box_height<sp/>&gt;=<sp/>(5-1)/max_stave_height.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(joins<sp/>&gt;=<sp/>5<sp/>&amp;&amp;<sp/>(joins<sp/>-<sp/>1)<sp/>*<sp/>max_stave_height<sp/>&gt;=<sp/>4<sp/>*<sp/>box_height)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>music<sp/>bar.<sp/>Add<sp/>to<sp/>the<sp/>mask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(music_mask<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>music_mask<sp/>=<sp/>pixCreate(pixGetWidth(pix_vline),<sp/>pixGetHeight(pix_vline),</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixSetInRect(music_mask,<sp/>box);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>boxDestroy(&amp;box);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>boxaDestroy(&amp;boxa);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;intersection_pix);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(music_mask<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>mask<sp/>currently<sp/>contains<sp/>just<sp/>the<sp/>bars.<sp/>Use<sp/>the<sp/>mask<sp/>as<sp/>a<sp/>seed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>pix_closed<sp/>as<sp/>the<sp/>mask<sp/>for<sp/>a<sp/>seedfill<sp/>to<sp/>get<sp/>all<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intersecting<sp/>staves.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>pixSeedfillBinary(music_mask,<sp/>music_mask,<sp/>pix_closed,<sp/>8);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>out<sp/>false<sp/>positives.<sp/>CCs<sp/>in<sp/>the<sp/>music_mask<sp/>should<sp/>be<sp/>the<sp/>vast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>majority<sp/>of<sp/>the<sp/>pixels<sp/>in<sp/>their<sp/>bounding<sp/>boxes,<sp/>as<sp/>we<sp/>expect<sp/>just<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tiny<sp/>amount<sp/>of<sp/>text,<sp/>a<sp/>few<sp/>phrase<sp/>marks,<sp/>and<sp/>crescendo<sp/>etc<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>Boxa*<sp/>boxa<sp/>=<sp/>pixConnComp(music_mask,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>8);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>the<sp/>boxes<sp/>to<sp/>find<sp/>music<sp/>components.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nboxes<sp/>=<sp/>boxaGetCount(boxa);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nboxes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Box*<sp/>box<sp/>=<sp/>boxaGetBox(boxa,<sp/>i,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pix*<sp/>rect_pix<sp/>=<sp/>pixClipRectangle(music_mask,<sp/>box,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l_int32<sp/>music_pixels;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixCountPixels(rect_pix,<sp/>&amp;music_pixels,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixDestroy(&amp;rect_pix);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rect_pix<sp/>=<sp/>pixClipRectangle(pix_closed,<sp/>box,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l_int32<sp/>all_pixels;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixCountPixels(rect_pix,<sp/>&amp;all_pixels,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixDestroy(&amp;rect_pix);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(music_pixels<sp/>&lt;<sp/><ref refid="namespacetesseract_1a064746ea8b34175e6f12ce364c8d6414" kindref="member">kMinMusicPixelFraction</ref><sp/>*<sp/>all_pixels)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>False<sp/>positive.<sp/>Delete<sp/>from<sp/>the<sp/>music<sp/>mask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixClearInRect(music_mask,<sp/>box);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boxDestroy(&amp;box);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>l_int32<sp/>no_remaining_music;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>boxaDestroy(&amp;boxa);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>pixZero(music_mask,<sp/>&amp;no_remaining_music);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(no_remaining_music)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixDestroy(&amp;music_mask);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixSubtract(pix_vline,<sp/>pix_vline,<sp/>music_mask);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixSubtract(pix_hline,<sp/>pix_hline,<sp/>music_mask);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>may<sp/>have<sp/>deleted<sp/>all<sp/>the<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixZero(pix_vline,<sp/>v_empty);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixZero(pix_hline,<sp/>h_empty);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>music_mask;</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Most<sp/>of<sp/>the<sp/>heavy<sp/>lifting<sp/>of<sp/>line<sp/>finding.<sp/>Given<sp/>src_pix<sp/>and<sp/>its<sp/>separate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//<sp/>resolution,<sp/>returns<sp/>image<sp/>masks:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pix_vline<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate<sp/>vertical<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pix_non_vline<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixels<sp/>that<sp/>didn&apos;t<sp/>look<sp/>like<sp/>vertical<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pix_hline<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate<sp/>horizontal<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pix_non_hline<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixels<sp/>that<sp/>didn&apos;t<sp/>look<sp/>like<sp/>horizontal<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pix_intersections<sp/><sp/><sp/>pixels<sp/>where<sp/>vertical<sp/>and<sp/>horizontal<sp/>lines<sp/>meet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pix_music_mask<sp/><sp/><sp/><sp/><sp/><sp/>candidate<sp/>music<sp/>staves.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>promises<sp/>to<sp/>initialize<sp/>all<sp/>the<sp/>output<sp/>(2nd<sp/>level)<sp/>pointers,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>any<sp/>of<sp/>the<sp/>returns<sp/>that<sp/>are<sp/>empty<sp/>will<sp/>be<sp/>NULL<sp/>on<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">//<sp/>None<sp/>of<sp/>the<sp/>input<sp/>(1st<sp/>level)<sp/>pointers<sp/>may<sp/>be<sp/>NULL<sp/>except<sp/>pix_music_mask,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>disable<sp/>music<sp/>detection,<sp/>and<sp/>pixa_display.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LineFinder::GetLineMasks(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resolution,<sp/>Pix*<sp/>src_pix,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix**<sp/>pix_vline,<sp/>Pix**<sp/>pix_non_vline,</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix**<sp/>pix_hline,<sp/>Pix**<sp/>pix_non_hline,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix**<sp/>pix_intersections,<sp/>Pix**<sp/>pix_music_mask,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pixa*<sp/>pixa_display)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_line_width<sp/>=<sp/>resolution<sp/>/<sp/><ref refid="namespacetesseract_1af5a3375be81da4b1d09d654fed77617a" kindref="member" tooltip="Denominator of resolution makes max pixel width to allow thin lines. ">kThinLineFraction</ref>;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_line_length<sp/>=<sp/>resolution<sp/>/<sp/><ref refid="namespacetesseract_1ab1ecce6329628c52853d15330697b9a5" kindref="member" tooltip="Denominator of resolution makes min pixels to demand line lengths to be. ">kMinLineLengthFraction</ref>;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixa_display<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Image<sp/>resolution<sp/>=<sp/>%d,<sp/>max<sp/>line<sp/>width<sp/>=<sp/>%d,<sp/>min<sp/>length=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolution,<sp/>max_line_width,<sp/>min_line_length);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>closing_brick<sp/>=<sp/>max_line_width<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>up<sp/>small<sp/>holes,<sp/>making<sp/>it<sp/>less<sp/>likely<sp/>that<sp/>false<sp/>alarms<sp/>are<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>thickened<sp/>text<sp/>(as<sp/>it<sp/>will<sp/>become<sp/>more<sp/>solid)<sp/>and<sp/>also<sp/>smoothing<sp/>over</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>line<sp/>breaks<sp/>and<sp/>nicks<sp/>in<sp/>the<sp/>edges<sp/>of<sp/>the<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>Pix*<sp/>pix_closed<sp/>=<sp/>pixCloseBrick(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>src_pix,<sp/>closing_brick,<sp/>closing_brick);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixa_display<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>pixaAddPix(pixa_display,<sp/>pix_closed,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>up<sp/>with<sp/>a<sp/>big<sp/>box<sp/>to<sp/>detect<sp/>solid<sp/>areas,<sp/>which<sp/>can<sp/>then<sp/>be<sp/>subtracted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>very<sp/>generous<sp/>and<sp/>will<sp/>leave<sp/>in<sp/>even<sp/>quite<sp/>wide<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>Pix*<sp/>pix_solid<sp/>=<sp/>pixOpenBrick(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>pix_closed,<sp/>max_line_width,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_line_width);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixa_display<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>pixaAddPix(pixa_display,<sp/>pix_solid,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>Pix*<sp/>pix_hollow<sp/>=<sp/>pixSubtract(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>pix_closed,<sp/>pix_solid);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;pix_solid);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>open<sp/>up<sp/>in<sp/>both<sp/>directions<sp/>independently<sp/>to<sp/>find<sp/>lines<sp/>of<sp/>at<sp/>least</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>inch/kMinLineLengthFraction<sp/>in<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixa_display<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>pixaAddPix(pixa_display,<sp/>pix_hollow,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>*pix_vline<sp/>=<sp/>pixOpenBrick(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>pix_hollow,<sp/>1,<sp/>min_line_length);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>*pix_hline<sp/>=<sp/>pixOpenBrick(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>pix_hollow,<sp/>min_line_length,<sp/>1);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;pix_hollow);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Lines<sp/>are<sp/>sufficiently<sp/>rare,<sp/>that<sp/>it<sp/>is<sp/>worth<sp/>checking<sp/>for<sp/>a<sp/>zero<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>l_int32<sp/>v_empty<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>l_int32<sp/>h_empty<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>pixZero(*pix_vline,<sp/>&amp;v_empty);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>pixZero(*pix_hline,<sp/>&amp;h_empty);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix_music_mask<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v_empty<sp/>&amp;&amp;<sp/>!h_empty)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pix_music_mask<sp/>=<sp/>FilterMusic(resolution,<sp/>pix_closed,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pix_vline,<sp/>*pix_hline,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;v_empty,<sp/>&amp;h_empty);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pix_music_mask<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;pix_closed);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>Pix*<sp/>pix_nonlines<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>*pix_intersections<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>Pix*<sp/>extra_non_hlines<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v_empty)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>both<sp/>line<sp/>candidates<sp/>from<sp/>the<sp/>source<sp/>to<sp/>get<sp/>definite<sp/>non-lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>pix_nonlines<sp/>=<sp/>pixSubtract(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>src_pix,<sp/>*pix_vline);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h_empty)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixSubtract(pix_nonlines,<sp/>pix_nonlines,<sp/>*pix_hline);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Intersections<sp/>are<sp/>a<sp/>useful<sp/>indicator<sp/>for<sp/>likelihood<sp/>of<sp/>being<sp/>a<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pix_intersections<sp/>=<sp/>pixAnd(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>*pix_vline,<sp/>*pix_hline);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Candidate<sp/>vlines<sp/>are<sp/>not<sp/>hlines<sp/>(apart<sp/>from<sp/>the<sp/>intersections)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>vice<sp/>versa.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_non_hlines<sp/>=<sp/>pixSubtract(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>*pix_vline,<sp/>*pix_intersections);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>*pix_non_vline<sp/>=<sp/>pixErodeBrick(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>pix_nonlines,<sp/><ref refid="namespacetesseract_1ab97d7447e46667c618a568b97b96bb3c" kindref="member">kMaxLineResidue</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>pixSeedfillBinary(*pix_non_vline,<sp/>*pix_non_vline,<sp/>pix_nonlines,<sp/>8);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h_empty)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Candidate<sp/>hlines<sp/>are<sp/>not<sp/>vlines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixOr(*pix_non_vline,<sp/>*pix_non_vline,<sp/>*pix_hline);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixSubtract(*pix_non_vline,<sp/>*pix_non_vline,<sp/>*pix_intersections);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!FilterFalsePositives(resolution,<sp/>*pix_non_vline,<sp/>*pix_intersections,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pix_vline))</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixDestroy(pix_vline);<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>candidates<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>vertical<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>pixDestroy(pix_vline);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>*pix_non_vline<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h_empty)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pix_nonlines<sp/>=<sp/>pixSubtract(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>src_pix,<sp/>*pix_hline);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_empty)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>pixDestroy(pix_hline);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>*pix_non_hline<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v_empty)<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>*pix_non_hline<sp/>=<sp/>pixErodeBrick(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>pix_nonlines,<sp/>1,<sp/><ref refid="namespacetesseract_1ab97d7447e46667c618a568b97b96bb3c" kindref="member">kMaxLineResidue</ref>);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>pixSeedfillBinary(*pix_non_hline,<sp/>*pix_non_hline,<sp/>pix_nonlines,<sp/>8);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extra_non_hlines<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixOr(*pix_non_hline,<sp/>*pix_non_hline,<sp/>extra_non_hlines);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixDestroy(&amp;extra_non_hlines);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!FilterFalsePositives(resolution,<sp/>*pix_non_hline,<sp/>*pix_intersections,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pix_hline))</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixDestroy(pix_hline);<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>candidates<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixa_display<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pix_vline<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>pixaAddPix(pixa_display,<sp/>*pix_vline,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pix_hline<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>pixaAddPix(pixa_display,<sp/>*pix_hline,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix_nonlines<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>pixaAddPix(pixa_display,<sp/>pix_nonlines,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pix_non_vline<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixaAddPix(pixa_display,<sp/>*pix_non_vline,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pix_non_hline<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixaAddPix(pixa_display,<sp/>*pix_non_hline,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pix_intersections<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixaAddPix(pixa_display,<sp/>*pix_intersections,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix_music_mask<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>*pix_music_mask<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixaAddPix(pixa_display,<sp/>*pix_music_mask,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;pix_nonlines);</highlight></codeline>
<codeline lineno="684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>boxes<sp/>corresponding<sp/>to<sp/>the<sp/>candidate<sp/>line<sp/>segments.<sp/>Sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>line_crossings<sp/>member<sp/>of<sp/>the<sp/>boxes<sp/>so<sp/>we<sp/>can<sp/>later<sp/>determin<sp/>the<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>intersections<sp/>touched<sp/>by<sp/>a<sp/>full<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LineFinder::GetLineBoxes(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>horizontal_lines,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix*<sp/>pix_lines,<sp/>Pix*<sp/>pix_intersections,</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_BLOB_LIST*<sp/>line_cblobs,</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLOBNBOX_LIST*<sp/>line_bblobs)<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>a<sp/>single<sp/>pixel<sp/>crack<sp/>in<sp/>every<sp/>line<sp/>at<sp/>an<sp/>arbitrary<sp/>spacing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>they<sp/>break<sp/>up<sp/>and<sp/>the<sp/>bounding<sp/>boxes<sp/>can<sp/>be<sp/>used<sp/>to<sp/>get<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>direction<sp/>accurately<sp/>enough<sp/>without<sp/>needing<sp/>outlines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wpl<sp/>=<sp/>pixGetWpl(pix_lines);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>pixGetWidth(pix_lines);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>pixGetHeight(pix_lines);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>l_uint32*<sp/>data<sp/>=<sp/>pixGetData(pix_lines);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(horizontal_lines)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>height;<sp/>++y,<sp/>data<sp/>+=<sp/>wpl)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="namespacetesseract_1a67e1606288499ff9e08833b9c2a1ded8" kindref="member" tooltip="Spacing of cracks across the page to break up tall vertical lines. ">kCrackSpacing</ref>;<sp/>x<sp/>&lt;<sp/>width;<sp/>x<sp/>+=<sp/><ref refid="namespacetesseract_1a67e1606288499ff9e08833b9c2a1ded8" kindref="member" tooltip="Spacing of cracks across the page to break up tall vertical lines. ">kCrackSpacing</ref>)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLEAR_DATA_BIT(data,<sp/>x);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/><ref refid="namespacetesseract_1a67e1606288499ff9e08833b9c2a1ded8" kindref="member" tooltip="Spacing of cracks across the page to break up tall vertical lines. ">kCrackSpacing</ref>;<sp/>y<sp/>&lt;<sp/>height;<sp/>y<sp/>+=<sp/><ref refid="namespacetesseract_1a67e1606288499ff9e08833b9c2a1ded8" kindref="member" tooltip="Spacing of cracks across the page to break up tall vertical lines. ">kCrackSpacing</ref>)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(data<sp/>+<sp/>wpl<sp/>*<sp/>y,<sp/>0,<sp/>wpl<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*data));</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>individual<sp/>connected<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>Boxa*<sp/>boxa<sp/>=<sp/>pixConnComp(pix_lines,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>8);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_line_finder_1a9d00a88e3c4d6e1b9c7b28c3f6825b88" kindref="member">ConvertBoxaToBlobs</ref>(width,<sp/>height,<sp/>&amp;boxa,<sp/>line_cblobs);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>BLOBNBOXes<sp/>from<sp/>the<sp/>C_BLOBs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>C_BLOB_IT<sp/>blob_it(line_cblobs);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>BLOBNBOX_IT<sp/>bbox_it(line_bblobs);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blob_it.mark_cycle_pt();<sp/>!blob_it.cycled_list();<sp/>blob_it.forward())<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c___b_l_o_b" kindref="compound">C_BLOB</ref>*<sp/>cblob<sp/>=<sp/>blob_it.data();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_l_o_b_n_b_o_x" kindref="compound">BLOBNBOX</ref>*<sp/>bblob<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_b_l_o_b_n_b_o_x" kindref="compound">BLOBNBOX</ref>(cblob);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>bbox_it.add_to_end(bblob);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>whether<sp/>the<sp/>line<sp/>segment<sp/>touches<sp/>two<sp/>intersections.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_t_b_o_x" kindref="compound">TBOX</ref>&amp;<sp/>bbox<sp/>=<sp/>bblob-&gt;<ref refid="class_b_l_o_b_n_b_o_x_1a7b97b8bc16b1473a28f9c44011522f4e" kindref="member">bounding_box</ref>();</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>Box*<sp/>box<sp/>=<sp/>boxCreate(bbox.<ref refid="class_t_b_o_x_1a724fabf566586b663577dfa944ffbc61" kindref="member">left</ref>(),<sp/>bbox.<ref refid="class_t_b_o_x_1a4451d237f1cd18c4982d63fe36a11fc3" kindref="member">bottom</ref>(),</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox.<ref refid="class_t_b_o_x_1af95494a2ccacc70cc2b83820b2948619" kindref="member">width</ref>(),<sp/>bbox.<ref refid="class_t_b_o_x_1a8379d4bbc72bdbb1f069fc14790e632d" kindref="member">height</ref>());</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>bblob-&gt;<ref refid="class_b_l_o_b_n_b_o_x_1a567e99fc9c08dfebbe144eb520c1322f" kindref="member">set_line_crossings</ref>(NumTouchingIntersections(box,<sp/>pix_intersections));</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>boxDestroy(&amp;box);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transform<sp/>the<sp/>bounding<sp/>box<sp/>prior<sp/>to<sp/>finding<sp/>lines.<sp/>To<sp/>save<sp/>writing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>two<sp/>line<sp/>finders,<sp/>flip<sp/>x<sp/>and<sp/>y<sp/>for<sp/>horizontal<sp/>lines<sp/>and<sp/>re-use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tab-stop<sp/>detection<sp/>code.<sp/>For<sp/>vertical<sp/>lines<sp/>we<sp/>still<sp/>have<sp/>to<sp/>flip<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y-coordinates<sp/>to<sp/>switch<sp/>from<sp/>leptonica<sp/>coords<sp/>to<sp/>tesseract<sp/>coords.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(horizontal_lines)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>we<sp/>have<sp/>Leptonica<sp/>coords<sp/>stored<sp/>in<sp/>a<sp/>Tesseract<sp/>box,<sp/>so<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bbox.bottom(),<sp/>being<sp/>the<sp/>MIN<sp/>y<sp/>coord,<sp/>is<sp/>actually<sp/>the<sp/>top,<sp/>so<sp/>to<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>back<sp/>to<sp/>Leptonica<sp/>coords<sp/>in<sp/>RemoveUnusedLineSegments,<sp/>we<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>height<sp/>-<sp/>box.right()<sp/>as<sp/>the<sp/>top,<sp/>which<sp/>looks<sp/>very<sp/>odd.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_t_b_o_x" kindref="compound">TBOX</ref><sp/>new_box(height<sp/>-<sp/>bbox.<ref refid="class_t_b_o_x_1adf92e9fdac1bdf11c10d1c4d1178791a" kindref="member">top</ref>(),<sp/>bbox.<ref refid="class_t_b_o_x_1a724fabf566586b663577dfa944ffbc61" kindref="member">left</ref>(),</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>height<sp/>-<sp/>bbox.<ref refid="class_t_b_o_x_1a4451d237f1cd18c4982d63fe36a11fc3" kindref="member">bottom</ref>(),<sp/>bbox.<ref refid="class_t_b_o_x_1a8703081c1a1c26db3a4dddaca1028e34" kindref="member">right</ref>());</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bblob-&gt;<ref refid="class_b_l_o_b_n_b_o_x_1a8f076c06c79a5d3637d2f2f3b03a1a85" kindref="member">set_bounding_box</ref>(new_box);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_t_b_o_x" kindref="compound">TBOX</ref><sp/>new_box(bbox.<ref refid="class_t_b_o_x_1a724fabf566586b663577dfa944ffbc61" kindref="member">left</ref>(),<sp/>height<sp/>-<sp/>bbox.<ref refid="class_t_b_o_x_1adf92e9fdac1bdf11c10d1c4d1178791a" kindref="member">top</ref>(),</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox.<ref refid="class_t_b_o_x_1a8703081c1a1c26db3a4dddaca1028e34" kindref="member">right</ref>(),<sp/>height<sp/>-<sp/>bbox.<ref refid="class_t_b_o_x_1a4451d237f1cd18c4982d63fe36a11fc3" kindref="member">bottom</ref>());</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bblob-&gt;<ref refid="class_b_l_o_b_n_b_o_x_1a8f076c06c79a5d3637d2f2f3b03a1a85" kindref="member">set_bounding_box</ref>(new_box);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tesseract.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/textord/linefind.cpp"/>
  </compounddef>
</doxygen>
