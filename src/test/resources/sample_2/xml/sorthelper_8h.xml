<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="sorthelper_8h" kind="file">
    <compoundname>sorthelper.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="genericvector_8h" local="yes">genericvector.h</includes>
    <includedby refid="control_8cpp" local="yes">ccmain/control.cpp</includedby>
    <incdepgraph>
      <node id="20195">
        <label>ccutil/sorthelper.h</label>
        <link refid="sorthelper.h"/>
        <childnode refid="20196" relation="include">
        </childnode>
        <childnode refid="20197" relation="include">
        </childnode>
      </node>
      <node id="20206">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="20196">
        <label>stdlib.h</label>
      </node>
      <node id="20201">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="20202" relation="include">
        </childnode>
      </node>
      <node id="20203">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="20200" relation="include">
        </childnode>
      </node>
      <node id="20202">
        <label>limits.h</label>
      </node>
      <node id="20205">
        <label>string.h</label>
      </node>
      <node id="20199">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="20200" relation="include">
        </childnode>
      </node>
      <node id="20197">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="20198" relation="include">
        </childnode>
        <childnode refid="20196" relation="include">
        </childnode>
        <childnode refid="20199" relation="include">
        </childnode>
        <childnode refid="20203" relation="include">
        </childnode>
        <childnode refid="20204" relation="include">
        </childnode>
        <childnode refid="20206" relation="include">
        </childnode>
      </node>
      <node id="20200">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="20201" relation="include">
        </childnode>
      </node>
      <node id="20198">
        <label>stdio.h</label>
      </node>
      <node id="20204">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="20198" relation="include">
        </childnode>
        <childnode refid="20205" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="20207">
        <label>ccutil/sorthelper.h</label>
        <link refid="sorthelper.h"/>
        <childnode refid="20208" relation="include">
        </childnode>
      </node>
      <node id="20208">
        <label>ccmain/control.cpp</label>
        <link refid="control_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_sort_helper" prot="public">SortHelper</innerclass>
    <innerclass refid="struct_sort_helper_1_1_sort_pair" prot="public">SortHelper::SortPair</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorthelper.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Generic<sp/>sort<sp/>and<sp/>maxfinding<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/>Ray<sp/>Smith</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created:<sp/><sp/><sp/><sp/><sp/>Thu<sp/>May<sp/>20<sp/>17:48:21<sp/>PDT<sp/>2010</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Copyright<sp/>2010,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="19"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TESSERACT_CCUTIL_SORTHELPER_H_</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TESSERACT_CCUTIL_SORTHELPER_H_</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="genericvector_8h" kindref="compound">genericvector.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generic<sp/>class<sp/>to<sp/>provide<sp/>functions<sp/>based<sp/>on<sp/>a<sp/>&lt;value,count&gt;<sp/>pair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>the<sp/>value<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>class<sp/>keeps<sp/>a<sp/>count<sp/>of<sp/>each<sp/>value<sp/>and<sp/>can<sp/>return<sp/>the<sp/>most<sp/>frequent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>or<sp/>a<sp/>sorted<sp/>array<sp/>of<sp/>the<sp/>values<sp/>with<sp/>counts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>class<sp/>uses<sp/>linear<sp/>search<sp/>for<sp/>adding.<sp/>It<sp/>is<sp/>better</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>use<sp/>the<sp/>STATS<sp/>class<sp/>to<sp/>get<sp/>the<sp/>mode<sp/>of<sp/>a<sp/>large<sp/>number<sp/>of<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>a<sp/>small<sp/>space.<sp/>SortHelper<sp/>is<sp/>better<sp/>to<sp/>get<sp/>the<sp/>mode<sp/>of<sp/>a<sp/>small<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>values<sp/>from<sp/>a<sp/>large<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T<sp/>must<sp/>have<sp/>a<sp/>copy<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="36" refid="class_sort_helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_sort_helper" kindref="compound">SortHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Simple<sp/>pair<sp/>class<sp/>to<sp/>hold<sp/>the<sp/>values<sp/>and<sp/>counts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="struct_sort_helper_1_1_sort_pair" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PairT&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sort_helper_1_1_sort_pair" kindref="compound">SortPair</ref><sp/>{</highlight></codeline>
<codeline lineno="40" refid="struct_sort_helper_1_1_sort_pair_1a7086e56f0af312b411ff9ec74ed13c2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PairT<sp/><ref refid="struct_sort_helper_1_1_sort_pair_1a7086e56f0af312b411ff9ec74ed13c2e" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="41" refid="struct_sort_helper_1_1_sort_pair_1a48c4ec5e3d9e44faa118de9b29655a2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_sort_helper_1_1_sort_pair_1a48c4ec5e3d9e44faa118de9b29655a2a" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>qsort<sp/>function<sp/>to<sp/>sort<sp/>by<sp/>decreasing<sp/>count.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="class_sort_helper_1a9e9db15e0bee9d0ab2e3242b80da3bc9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_sort_helper_1a9e9db15e0bee9d0ab2e3242b80da3bc9" kindref="member">SortPairsByCount</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sort_helper_1_1_sort_pair" kindref="compound">SortPair&lt;T&gt;</ref>*<sp/>p1<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="struct_sort_helper_1_1_sort_pair" kindref="compound">SortPair&lt;T&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sort_helper_1_1_sort_pair" kindref="compound">SortPair&lt;T&gt;</ref>*<sp/>p2<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="struct_sort_helper_1_1_sort_pair" kindref="compound">SortPair&lt;T&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v2);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p2-&gt;<ref refid="struct_sort_helper_1_1_sort_pair_1a48c4ec5e3d9e44faa118de9b29655a2a" kindref="member">count</ref><sp/>-<sp/>p1-&gt;<ref refid="struct_sort_helper_1_1_sort_pair_1a48c4ec5e3d9e44faa118de9b29655a2a" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>qsort<sp/>function<sp/>to<sp/>sort<sp/>by<sp/>decreasing<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="class_sort_helper_1a591276ff047bdfced90d62f4b0ea69c2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_sort_helper_1a591276ff047bdfced90d62f4b0ea69c2" kindref="member">SortPairsByValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sort_helper_1_1_sort_pair" kindref="compound">SortPair&lt;T&gt;</ref>*<sp/>p1<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="struct_sort_helper_1_1_sort_pair" kindref="compound">SortPair&lt;T&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sort_helper_1_1_sort_pair" kindref="compound">SortPair&lt;T&gt;</ref>*<sp/>p2<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="struct_sort_helper_1_1_sort_pair" kindref="compound">SortPair&lt;T&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v2);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p2-&gt;<ref refid="struct_sort_helper_1_1_sort_pair_1a7086e56f0af312b411ff9ec74ed13c2e" kindref="member">value</ref><sp/>-<sp/>p1-&gt;<ref refid="struct_sort_helper_1_1_sort_pair_1a7086e56f0af312b411ff9ec74ed13c2e" kindref="member">value</ref><sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p2-&gt;<ref refid="struct_sort_helper_1_1_sort_pair_1a7086e56f0af312b411ff9ec74ed13c2e" kindref="member">value</ref><sp/>-<sp/>p1-&gt;<ref refid="struct_sort_helper_1_1_sort_pair_1a7086e56f0af312b411ff9ec74ed13c2e" kindref="member">value</ref><sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>takes<sp/>a<sp/>hint<sp/>of<sp/>the<sp/>array<sp/>size,<sp/>but<sp/>it<sp/>need<sp/>not<sp/>be<sp/>accurate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="class_sort_helper_1a75727b521fe47303bafd1931ac7df857" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_sort_helper_1a75727b521fe47303bafd1931ac7df857" kindref="member">SortHelper</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizehint)<sp/>:<sp/>counts_(sizehint)<sp/>{}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>value<sp/>that<sp/>may<sp/>be<sp/>a<sp/>duplicate<sp/>of<sp/>an<sp/>existing<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Uses<sp/>a<sp/>linear<sp/>search.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_sort_helper_1a2844aee5a8b3f6f90835033fd2a049d0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sort_helper_1a2844aee5a8b3f6f90835033fd2a049d0" kindref="member">Add</ref>(T<sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="oldlist_8cpp_1acd4ea858d7133e40518e0832ff9d94b2" kindref="member">count</ref>)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Linear<sp/>search<sp/>for<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>counts_.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(counts_[i].value<sp/>==<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counts_[i].count<sp/>+=<sp/><ref refid="oldlist_8cpp_1acd4ea858d7133e40518e0832ff9d94b2" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sort_helper_1_1_sort_pair" kindref="compound">SortPair&lt;T&gt;</ref><sp/>new_pair<sp/>=<sp/>{value,<sp/>count};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>counts_.push_back(<ref refid="struct_sort_helper_1_1_sort_pair" kindref="compound">SortPair&lt;T&gt;</ref>(new_pair));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>frequency<sp/>of<sp/>the<sp/>most<sp/>frequent<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>max_value<sp/>is<sp/>not<sp/>NULL,<sp/>returns<sp/>the<sp/>most<sp/>frequent<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>array<sp/>is<sp/>empty,<sp/>returns<sp/>-MAX_INT32<sp/>and<sp/>max_value<sp/>is<sp/>unchanged.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="class_sort_helper_1ae3b338e17717ea13a51e453b529a858b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_sort_helper_1ae3b338e17717ea13a51e453b529a858b" kindref="member">MaxCount</ref>(T*<sp/>max_value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best_count<sp/>=<sp/>-<ref refid="host_8h_1aac62d87844689a18b6f5339a89ed6e7f" kindref="member">MAX_INT32</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>counts_.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(counts_[i].<ref refid="oldlist_8cpp_1acd4ea858d7133e40518e0832ff9d94b2" kindref="member">count</ref><sp/>&gt;<sp/>best_count)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_count<sp/>=<sp/>counts_[i].count;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_value<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*max_value<sp/>=<sp/>counts_[i].value;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>best_count;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>data<sp/>array<sp/>sorted<sp/>by<sp/>decreasing<sp/>frequency.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="class_sort_helper_1a05890a598111521d5e37e0888665b3eb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;SortPair&lt;T&gt;</ref><sp/>&gt;&amp;<sp/><ref refid="class_sort_helper_1a05890a598111521d5e37e0888665b3eb" kindref="member">SortByCount</ref>()<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>counts_.sort(&amp;<ref refid="class_sort_helper_1a9e9db15e0bee9d0ab2e3242b80da3bc9" kindref="member">SortPairsByCount</ref>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>counts_;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>data<sp/>array<sp/>sorted<sp/>by<sp/>decreasing<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="class_sort_helper_1ab292cf216cbf832150365c9e261aff65" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;SortPair&lt;T&gt;</ref><sp/>&gt;&amp;<sp/><ref refid="class_sort_helper_1ab292cf216cbf832150365c9e261aff65" kindref="member">SortByValue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>counts_.sort(&amp;<ref refid="class_sort_helper_1a591276ff047bdfced90d62f4b0ea69c2" kindref="member">SortPairsByValue</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>counts_;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;SortPair&lt;T&gt;</ref><sp/>&gt;<sp/>counts_;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>TESSERACT_CCUTIL_SORTHELPER_H_.</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/ccutil/sorthelper.h"/>
  </compounddef>
</doxygen>
