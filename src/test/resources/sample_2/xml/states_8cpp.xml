<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="states_8cpp" kind="file">
    <compoundname>states.cpp</compoundname>
    <includes refid="states_8h" local="yes">states.h</includes>
    <includes refid="structures_8h" local="yes">structures.h</includes>
    <includes refid="callcpp_8h" local="yes">callcpp.h</includes>
    <incdepgraph>
      <node id="35262">
        <label>cutil_class.h</label>
        <link refid="cutil__class_8h"/>
        <childnode refid="35263" relation="include">
        </childnode>
        <childnode refid="35276" relation="include">
        </childnode>
        <childnode refid="35246" relation="include">
        </childnode>
      </node>
      <node id="35242">
        <label>states.h</label>
        <link refid="states_8h"/>
        <childnode refid="35243" relation="include">
        </childnode>
        <childnode refid="35246" relation="include">
        </childnode>
      </node>
      <node id="35280">
        <label>assert.h</label>
      </node>
      <node id="35251">
        <label>structures.h</label>
        <link refid="structures_8h"/>
        <childnode refid="35252" relation="include">
        </childnode>
        <childnode refid="35277" relation="include">
        </childnode>
        <childnode refid="35278" relation="include">
        </childnode>
      </node>
      <node id="35261">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="35276">
        <label>const.h</label>
        <link refid="const_8h"/>
      </node>
      <node id="35241">
        <label>dict/states.cpp</label>
        <link refid="states.cpp"/>
        <childnode refid="35242" relation="include">
        </childnode>
        <childnode refid="35251" relation="include">
        </childnode>
        <childnode refid="35279" relation="include">
        </childnode>
      </node>
      <node id="35254">
        <label>stdlib.h</label>
      </node>
      <node id="35244">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="35245" relation="include">
        </childnode>
      </node>
      <node id="35263">
        <label>ccutil.h</label>
        <link refid="ccutil_8h"/>
        <childnode refid="35264" relation="include">
        </childnode>
        <childnode refid="35259" relation="include">
        </childnode>
        <childnode refid="35246" relation="include">
        </childnode>
        <childnode refid="35273" relation="include">
        </childnode>
        <childnode refid="35256" relation="include">
        </childnode>
        <childnode refid="35271" relation="include">
        </childnode>
        <childnode refid="35274" relation="include">
        </childnode>
        <childnode refid="35275" relation="include">
        </childnode>
      </node>
      <node id="35266">
        <label>serialis.h</label>
        <link refid="serialis_8h"/>
        <childnode refid="35254" relation="include">
        </childnode>
        <childnode refid="35248" relation="include">
        </childnode>
        <childnode refid="35247" relation="include">
        </childnode>
        <childnode refid="35249" relation="include">
        </childnode>
        <childnode refid="35259" relation="include">
        </childnode>
        <childnode refid="35267" relation="include">
        </childnode>
      </node>
      <node id="35250">
        <label>stddef.h</label>
      </node>
      <node id="35270">
        <label>memory.h</label>
      </node>
      <node id="35279">
        <label>callcpp.h</label>
        <link refid="callcpp_8h"/>
        <childnode refid="35280" relation="include">
        </childnode>
        <childnode refid="35243" relation="include">
        </childnode>
        <childnode refid="35256" relation="include">
        </childnode>
        <childnode refid="35269" relation="include">
        </childnode>
      </node>
      <node id="35259">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="35243" relation="include">
        </childnode>
      </node>
      <node id="35245">
        <label>limits.h</label>
      </node>
      <node id="35274">
        <label>pthread.h</label>
      </node>
      <node id="35248">
        <label>string.h</label>
      </node>
      <node id="35272">
        <label>unicharmap.h</label>
        <link refid="unicharmap_8h"/>
        <childnode refid="35269" relation="include">
        </childnode>
      </node>
      <node id="35269">
        <label>unichar.h</label>
        <link refid="unichar_8h"/>
        <childnode refid="35270" relation="include">
        </childnode>
        <childnode refid="35248" relation="include">
        </childnode>
      </node>
      <node id="35253">
        <label>cutil.h</label>
        <link refid="cutil_8h"/>
        <childnode refid="35247" relation="include">
        </childnode>
        <childnode refid="35248" relation="include">
        </childnode>
        <childnode refid="35254" relation="include">
        </childnode>
        <childnode refid="35243" relation="include">
        </childnode>
        <childnode refid="35255" relation="include">
        </childnode>
        <childnode refid="35262" relation="include">
        </childnode>
      </node>
      <node id="35258">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="35243" relation="include">
        </childnode>
      </node>
      <node id="35275">
        <label>semaphore.h</label>
      </node>
      <node id="35278">
        <label>danerror.h</label>
        <link refid="danerror_8h"/>
      </node>
      <node id="35267">
        <label>fileerr.h</label>
        <link refid="fileerr_8h"/>
        <childnode refid="35259" relation="include">
        </childnode>
      </node>
      <node id="35264">
        <label>ambigs.h</label>
        <link refid="ambigs_8h"/>
        <childnode refid="35265" relation="include">
        </childnode>
        <childnode refid="35255" relation="include">
        </childnode>
        <childnode refid="35269" relation="include">
        </childnode>
        <childnode refid="35271" relation="include">
        </childnode>
        <childnode refid="35257" relation="include">
        </childnode>
      </node>
      <node id="35268">
        <label>lsterr.h</label>
        <link refid="lsterr_8h"/>
        <childnode refid="35259" relation="include">
        </childnode>
      </node>
      <node id="35252">
        <label>oldlist.h</label>
        <link refid="oldlist_8h"/>
        <childnode refid="35253" relation="include">
        </childnode>
        <childnode refid="35258" relation="include">
        </childnode>
      </node>
      <node id="35256">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="35247" relation="include">
        </childnode>
        <childnode refid="35257" relation="include">
        </childnode>
        <childnode refid="35246" relation="include">
        </childnode>
      </node>
      <node id="35257">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="35247" relation="include">
        </childnode>
        <childnode refid="35254" relation="include">
        </childnode>
        <childnode refid="35258" relation="include">
        </childnode>
        <childnode refid="35259" relation="include">
        </childnode>
        <childnode refid="35260" relation="include">
        </childnode>
        <childnode refid="35261" relation="include">
        </childnode>
      </node>
      <node id="35249">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="35250" relation="include">
        </childnode>
        <childnode refid="35243" relation="include">
        </childnode>
      </node>
      <node id="35277">
        <label>freelist.h</label>
        <link refid="freelist_8h"/>
        <childnode refid="35247" relation="include">
        </childnode>
      </node>
      <node id="35265">
        <label>elst.h</label>
        <link refid="elst_8h"/>
        <childnode refid="35247" relation="include">
        </childnode>
        <childnode refid="35243" relation="include">
        </childnode>
        <childnode refid="35266" relation="include">
        </childnode>
        <childnode refid="35268" relation="include">
        </childnode>
      </node>
      <node id="35271">
        <label>unicharset.h</label>
        <link refid="unicharset_8h"/>
        <childnode refid="35259" relation="include">
        </childnode>
        <childnode refid="35260" relation="include">
        </childnode>
        <childnode refid="35246" relation="include">
        </childnode>
        <childnode refid="35258" relation="include">
        </childnode>
        <childnode refid="35269" relation="include">
        </childnode>
        <childnode refid="35272" relation="include">
        </childnode>
      </node>
      <node id="35255">
        <label>tprintf.h</label>
        <link refid="tprintf_8h"/>
        <childnode refid="35256" relation="include">
        </childnode>
      </node>
      <node id="35243">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="35244" relation="include">
        </childnode>
      </node>
      <node id="35247">
        <label>stdio.h</label>
      </node>
      <node id="35273">
        <label>tessdatamanager.h</label>
        <link refid="tessdatamanager_8h"/>
        <childnode refid="35247" relation="include">
        </childnode>
        <childnode refid="35243" relation="include">
        </childnode>
        <childnode refid="35255" relation="include">
        </childnode>
      </node>
      <node id="35246">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="35247" relation="include">
        </childnode>
        <childnode refid="35248" relation="include">
        </childnode>
        <childnode refid="35244" relation="include">
        </childnode>
        <childnode refid="35249" relation="include">
        </childnode>
      </node>
      <node id="35260">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="35247" relation="include">
        </childnode>
        <childnode refid="35248" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <header>bin_to_chunks</header>
      <description><para>Convert a representation of the search state in &quot;STATE&quot; form to one in &quot;SEARCH_STATE&quot; form. Create the memory required to hold the resultant state value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>The state to convert </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></description>
      <memberdef kind="function" id="states_8cpp_1a65830cfe21c29feec92f03627b51ff65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="states_8h_1afeb312869cc56f5a20c6f3dcb65644cc" kindref="member">SEARCH_STATE</ref></type>
        <definition>SEARCH_STATE bin_to_chunks</definition>
        <argsstring>(STATE *state, int num_joints)</argsstring>
        <name>bin_to_chunks</name>
        <param>
          <type><ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_joints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/dict/states.cpp" line="49" column="1" bodyfile="/Users/makoto/Desktop/trunk/dict/states.cpp" bodystart="49" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="states_8cpp_1acd6fd8bb4f29a8f5674ec05b47e63466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bin_to_pieces</definition>
        <argsstring>(STATE *state, int num_joints, PIECES_STATE pieces)</argsstring>
        <name>bin_to_pieces</name>
        <param>
          <type><ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_joints</declname>
        </param>
        <param>
          <type><ref refid="states_8h_1a0839f350416466cdb1b5d7df4c5f99d4" kindref="member">PIECES_STATE</ref></type>
          <declname>pieces</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>bin_to_pieces</para><para>Convert the binary (bit vector) format of a search state to an array of piece counts. This array has a zero element after the last valid character. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/dict/states.cpp" line="99" column="1" bodyfile="/Users/makoto/Desktop/trunk/dict/states.cpp" bodystart="99" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="states_8cpp_1a5104caef86ae4abd56bbb88b463492f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insert_new_chunk</definition>
        <argsstring>(register STATE *state, register int index, register int num_joints)</argsstring>
        <name>insert_new_chunk</name>
        <param>
          <type>register <ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>register int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>register int</type>
          <declname>num_joints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>insert_new_chunk</para><para>Add a new chunk division into this state vector at the location requested. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/dict/states.cpp" line="133" column="1" bodyfile="/Users/makoto/Desktop/trunk/dict/states.cpp" bodystart="133" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="states_8cpp_1ac2e9f7b195c3ee2878144de8cae6ec67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref> *</type>
        <definition>STATE* new_state</definition>
        <argsstring>(STATE *oldstate)</argsstring>
        <name>new_state</name>
        <param>
          <type><ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref> *</type>
          <declname>oldstate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>new_state</para><para>Create a memory space for a new state variable. Set its initial value according to the parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/dict/states.cpp" line="166" column="1" bodyfile="/Users/makoto/Desktop/trunk/dict/states.cpp" bodystart="166" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="states_8cpp_1a4373c199724dece68ce64aeb3977dfdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ones_in_state</definition>
        <argsstring>(STATE *state, int num_joints)</argsstring>
        <name>ones_in_state</name>
        <param>
          <type><ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_joints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ones_in_state</para><para>Return the number of ones that are in this state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/dict/states.cpp" line="181" column="1" bodyfile="/Users/makoto/Desktop/trunk/dict/states.cpp" bodystart="181" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="states_8cpp_1acb25e4d3e4da45c03f24fa3fcada7a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_state</definition>
        <argsstring>(const char *label, STATE *state, int num_joints)</argsstring>
        <name>print_state</name>
        <param>
          <type>const char *</type>
          <declname>label</declname>
        </param>
        <param>
          <type><ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_joints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>print_state</para><para>Print out the current state variable on a line with a label. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/dict/states.cpp" line="214" column="1" bodyfile="/Users/makoto/Desktop/trunk/dict/states.cpp" bodystart="214" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="states_8cpp_1a729ff52cc5d4d1cfcf99792458df6c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_state</definition>
        <argsstring>(STATE *state, int num_joints, STRING *toappend)</argsstring>
        <name>print_state</name>
        <param>
          <type><ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_joints</declname>
        </param>
        <param>
          <type><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref> *</type>
          <declname>toappend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/dict/states.cpp" line="246" column="1" bodyfile="/Users/makoto/Desktop/trunk/dict/states.cpp" bodystart="246" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="states_8cpp_1a4d7464b9adab39859eca306e1a41ba7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_n_ones</definition>
        <argsstring>(STATE *state, int n)</argsstring>
        <name>set_n_ones</name>
        <param>
          <type><ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set_n_ones</para><para>Set the first n bits in a state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/dict/states.cpp" line="263" column="1" bodyfile="/Users/makoto/Desktop/trunk/dict/states.cpp" bodystart="263" bodyend="274"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="states_8cpp_1acedee689c575ebef12ffd1072de15977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>makestructure</definition>
        <argsstring>(newstate, free_state, STATE)</argsstring>
        <name>makestructure</name>
        <param>
          <type>newstate</type>
        </param>
        <param>
          <type><ref refid="states_8h_1a4f83f140c72e5495f16b40be3dae3b42" kindref="member">free_state</ref></type>
        </param>
        <param>
          <type><ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/dict/states.cpp" line="35" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-C-*-</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>********************************************************************************</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>states.c<sp/><sp/>(Formerly<sp/>states.c)</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Description:<sp/><sp/>Representations<sp/>of<sp/>search<sp/>states</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mark<sp/>Seaman,<sp/>OCR<sp/>Technology</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Created:<sp/><sp/><sp/><sp/><sp/><sp/>Wed<sp/>May<sp/>16<sp/>15:49:34<sp/>1990</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Modified:<sp/><sp/><sp/><sp/><sp/>Mon<sp/>Jun<sp/>17<sp/>17:54:41<sp/>1991<sp/>(Mark<sp/>Seaman)<sp/>marks@hpgrlt</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Language:<sp/><sp/><sp/><sp/><sp/>C</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Package:<sp/><sp/><sp/><sp/><sp/><sp/>N/A</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Status:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Experimental<sp/>(Do<sp/>Not<sp/>Distribute)</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>(c)<sp/>Copyright<sp/>1990,<sp/>Hewlett-Packard<sp/>Company.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>**<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>**<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>**<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>**<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>**<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>**<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>**<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>**<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>**<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>n<sp/>c<sp/>l<sp/>u<sp/>d<sp/>e<sp/>s</highlight></codeline>
<codeline lineno="27"><highlight class="comment">----------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="states_8h" kindref="compound">states.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="structures_8h" kindref="compound">structures.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="callcpp_8h" kindref="compound">callcpp.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Variables</highlight></codeline>
<codeline lineno="34"><highlight class="comment">--------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="structures_8h_1a0fd8109d8986f1193f87ec26e0729d11" kindref="member">makestructure</ref>(newstate,<sp/><ref refid="states_8h_1a4f83f140c72e5495f16b40be3dae3b42" kindref="member">free_state</ref>,<sp/><ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref>);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F<sp/>u<sp/>n<sp/>c<sp/>t<sp/>i<sp/>o<sp/>n<sp/>s</highlight></codeline>
<codeline lineno="39"><highlight class="comment">----------------------------------------------------------------------*/</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="states_8h_1afeb312869cc56f5a20c6f3dcb65644cc" kindref="member">SEARCH_STATE</ref><sp/><ref refid="states_8cpp_1a65830cfe21c29feec92f03627b51ff65" kindref="member">bin_to_chunks</ref>(<ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_joints)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pieces<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><ref refid="states_8h_1afeb312869cc56f5a20c6f3dcb65644cc" kindref="member">SEARCH_STATE</ref><sp/>s;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>s<sp/>=<sp/><ref refid="freelist_8cpp_1a5898fbe61f6ffe4c1be71a107193cdfd" kindref="member">memalloc</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>(<ref refid="states_8cpp_1a4373c199724dece68ce64aeb3977dfdc" kindref="member">ones_in_state</ref><sp/>(state,<sp/>num_joints)<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>depth<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>mask<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(num_joints<sp/>-<sp/>1<sp/>-<sp/>32);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>num_joints;<sp/>x<sp/>&gt;<sp/>32;<sp/>x--)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="struct_s_t_a_t_e_1a2099a72d99d2ba5f828ad8538d328f4b" kindref="member">part1</ref><sp/>&amp;<sp/>mask)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s[depth++]<sp/>=<sp/>pieces;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pieces<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pieces++;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_joints<sp/>&gt;<sp/>32)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>31;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(num_joints<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(x--)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="struct_s_t_a_t_e_1aa75ceb95132aecb5a8ae1e594a19733a" kindref="member">part2</ref><sp/>&amp;<sp/>mask)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s[depth++]<sp/>=<sp/>pieces;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pieces<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pieces++;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>s[0]<sp/>=<sp/>depth<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(s);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="states_8cpp_1acd6fd8bb4f29a8f5674ec05b47e63466" kindref="member">bin_to_pieces</ref>(<ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_joints,<sp/><ref refid="states_8h_1a0839f350416466cdb1b5d7df4c5f99d4" kindref="member">PIECES_STATE</ref><sp/>pieces)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bit<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1a8d41499d38c24d39b221ab0c158fe5a8" kindref="member">inT16</ref><sp/>num_pieces<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Preset<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>mask<sp/>=<sp/>((num_joints<sp/>&gt;<sp/>32)<sp/>?</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>(num_joints<sp/>-<sp/>1<sp/>-<sp/>32))<sp/>:<sp/>(1<sp/>&lt;&lt;<sp/>(num_joints<sp/>-<sp/>1)));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>pieces[num_pieces]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>num_joints<sp/>-<sp/>1;<sp/>x<sp/>&gt;=<sp/>0;<sp/>x--)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterate<sp/>all<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>pieces[num_pieces]++;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>&lt;<sp/>32)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>for<sp/>1<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((state-&gt;<ref refid="struct_s_t_a_t_e_1aa75ceb95132aecb5a8ae1e594a19733a" kindref="member">part2</ref><sp/>&amp;<sp/>mask)<sp/>?<sp/><ref refid="capi_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref><sp/>:<sp/><ref refid="capi_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>)<sp/>:</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>((state-&gt;<ref refid="struct_s_t_a_t_e_1a2099a72d99d2ba5f828ad8538d328f4b" kindref="member">part1</ref><sp/>&amp;<sp/>mask)<sp/>?<sp/><ref refid="capi_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref><sp/>:<sp/>FALSE))<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pieces[++num_pieces]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Next<sp/>mask<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>((mask<sp/>==<sp/>1)<sp/>?<sp/>(1<sp/>&lt;&lt;<sp/>31)<sp/>:<sp/>(mask<sp/>&gt;&gt;<sp/>1));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>pieces[num_pieces]++;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>pieces[++num_pieces]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><ref refid="errcode_8h_1a93a603f4063a6b9403d81caa245a583b" kindref="member">ASSERT_HOST</ref><sp/>(num_pieces<sp/>&lt;<sp/><ref refid="states_8h_1a2f47d18aa9ea116103da072b110cf09d" kindref="member">MAX_NUM_CHUNKS</ref><sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="states_8cpp_1a5104caef86ae4abd56bbb88b463492f6" kindref="member">insert_new_chunk</ref>(</highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref><sp/>*state,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_joints)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>index<sp/>=<sp/>(num_joints<sp/>-<sp/>index);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>~0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>&lt;&lt;=<sp/>index;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(mask<sp/>&amp;<sp/>state-&gt;<ref refid="struct_s_t_a_t_e_1aa75ceb95132aecb5a8ae1e594a19733a" kindref="member">part2</ref>)<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>(~mask<sp/>&amp;<sp/>state-&gt;<ref refid="struct_s_t_a_t_e_1aa75ceb95132aecb5a8ae1e594a19733a" kindref="member">part2</ref>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_s_t_a_t_e_1a2099a72d99d2ba5f828ad8538d328f4b" kindref="member">part1</ref><sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="struct_s_t_a_t_e_1aa75ceb95132aecb5a8ae1e594a19733a" kindref="member">part2</ref><sp/>&amp;<sp/>0x80000000)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_s_t_a_t_e_1a2099a72d99d2ba5f828ad8538d328f4b" kindref="member">part1</ref><sp/>|=<sp/>1;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_s_t_a_t_e_1aa75ceb95132aecb5a8ae1e594a19733a" kindref="member">part2</ref><sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>~0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>&lt;&lt;=<sp/>index<sp/>-<sp/>32;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(mask<sp/>&amp;<sp/>state-&gt;<ref refid="struct_s_t_a_t_e_1a2099a72d99d2ba5f828ad8538d328f4b" kindref="member">part1</ref>)<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>(~mask<sp/>&amp;<sp/>state-&gt;<ref refid="struct_s_t_a_t_e_1a2099a72d99d2ba5f828ad8538d328f4b" kindref="member">part1</ref>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_s_t_a_t_e_1a2099a72d99d2ba5f828ad8538d328f4b" kindref="member">part1</ref><sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref><sp/>*<ref refid="states_8cpp_1ac2e9f7b195c3ee2878144de8cae6ec67" kindref="member">new_state</ref>(<ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref><sp/>*oldstate)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref><sp/>*this_state;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>this_state<sp/>=<sp/>newstate<sp/>();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>this_state-&gt;<ref refid="struct_s_t_a_t_e_1a2099a72d99d2ba5f828ad8538d328f4b" kindref="member">part1</ref><sp/>=<sp/>oldstate-&gt;<ref refid="struct_s_t_a_t_e_1a2099a72d99d2ba5f828ad8538d328f4b" kindref="member">part1</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>this_state-&gt;<ref refid="struct_s_t_a_t_e_1aa75ceb95132aecb5a8ae1e594a19733a" kindref="member">part2</ref><sp/>=<sp/>oldstate-&gt;<ref refid="struct_s_t_a_t_e_1aa75ceb95132aecb5a8ae1e594a19733a" kindref="member">part2</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this_state);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="states_8cpp_1a4373c199724dece68ce64aeb3977dfdc" kindref="member">ones_in_state</ref>(<ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_joints)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1a46145b78ae1e821253ef36fd03661208" kindref="member">inT8</ref><sp/>num_ones<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="host_8h_1a46145b78ae1e821253ef36fd03661208" kindref="member">inT8</ref><sp/>x;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_joints<sp/>&gt;<sp/>32)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Preset<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(num_joints<sp/>-<sp/>1<sp/>-<sp/>32);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(num_joints<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>num_joints<sp/>-<sp/>1;<sp/>x<sp/>&gt;=<sp/>0;<sp/>x--)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterate<sp/>all<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>32)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_ones<sp/>+=<sp/>((state-&gt;<ref refid="struct_s_t_a_t_e_1aa75ceb95132aecb5a8ae1e594a19733a" kindref="member">part2</ref><sp/>&amp;<sp/>mask)<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_ones<sp/>+=<sp/>((state-&gt;<ref refid="struct_s_t_a_t_e_1a2099a72d99d2ba5f828ad8538d328f4b" kindref="member">part1</ref><sp/>&amp;<sp/>mask)<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>==<sp/>1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Next<sp/>mask<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>31;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(num_ones);</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="states_8cpp_1acb25e4d3e4da45c03f24fa3fcada7a98" kindref="member">print_state</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*label,<sp/><ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_joints)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bit<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_joints<sp/>&gt;<sp/>32)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Preset<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(num_joints<sp/>-<sp/>1<sp/>-<sp/>32);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(num_joints<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><ref refid="callcpp_8cpp_1a21679e7fec2d69db23107348fa13c153" kindref="member">cprintf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>label);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>num_joints<sp/>-<sp/>1;<sp/>x<sp/>&gt;=<sp/>0;<sp/>x--)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterate<sp/>all<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>32)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="callcpp_8cpp_1a21679e7fec2d69db23107348fa13c153" kindref="member">cprintf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>((state-&gt;<ref refid="struct_s_t_a_t_e_1aa75ceb95132aecb5a8ae1e594a19733a" kindref="member">part2</ref><sp/>&amp;<sp/>mask)<sp/>?<sp/>1<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="callcpp_8cpp_1a21679e7fec2d69db23107348fa13c153" kindref="member">cprintf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>((state-&gt;<ref refid="struct_s_t_a_t_e_1a2099a72d99d2ba5f828ad8538d328f4b" kindref="member">part1</ref><sp/>&amp;<sp/>mask)<sp/>?<sp/>1<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>%<sp/>4<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="callcpp_8cpp_1a21679e7fec2d69db23107348fa13c153" kindref="member">cprintf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>==<sp/>1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Next<sp/>mask<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>31;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><ref refid="cutil_8h_1a1185f064cc7bdd3f2a433da85a834c37" kindref="member">new_line</ref>();</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>out<sp/>the<sp/>number<sp/>of<sp/>fragments<sp/>in<sp/>each<sp/>segment<sp/>in<sp/>a<sp/>state<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>toappend.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="states_8cpp_1acb25e4d3e4da45c03f24fa3fcada7a98" kindref="member">print_state</ref>(<ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_joints,<sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>*toappend)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><ref refid="states_8h_1a0839f350416466cdb1b5d7df4c5f99d4" kindref="member">PIECES_STATE</ref><sp/>pieces;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="states_8cpp_1acd6fd8bb4f29a8f5674ec05b47e63466" kindref="member">bin_to_pieces</ref>(state,<sp/>num_joints,<sp/>pieces);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>pieces[i]<sp/>&gt;<sp/>0;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>toappend-&gt;<ref refid="class_s_t_r_i_n_g_1a779cd637dd42d58d5500a3a657077e84" kindref="member">add_str_int</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,<sp/>pieces[i]);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>toappend-&gt;<ref refid="class_s_t_r_i_n_g_1a779cd637dd42d58d5500a3a657077e84" kindref="member">add_str_int</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>pieces[i]);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="states_8cpp_1a4d7464b9adab39859eca306e1a41ba7e" kindref="member">set_n_ones</ref>(<ref refid="struct_s_t_a_t_e" kindref="compound">STATE</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_s_t_a_t_e_1aa75ceb95132aecb5a8ae1e594a19733a" kindref="member">part2</ref><sp/>=<sp/>~0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_s_t_a_t_e_1aa75ceb95132aecb5a8ae1e594a19733a" kindref="member">part2</ref><sp/>&gt;&gt;=<sp/>32<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_s_t_a_t_e_1a2099a72d99d2ba5f828ad8538d328f4b" kindref="member">part1</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_s_t_a_t_e_1aa75ceb95132aecb5a8ae1e594a19733a" kindref="member">part2</ref><sp/>=<sp/>~0;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_s_t_a_t_e_1a2099a72d99d2ba5f828ad8538d328f4b" kindref="member">part1</ref><sp/>=<sp/>~0;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_s_t_a_t_e_1a2099a72d99d2ba5f828ad8538d328f4b" kindref="member">part1</ref><sp/>&gt;&gt;=<sp/>64<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/dict/states.cpp"/>
  </compounddef>
</doxygen>
