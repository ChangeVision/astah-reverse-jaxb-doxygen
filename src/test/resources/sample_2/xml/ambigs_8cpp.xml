<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="ambigs_8cpp" kind="file">
    <compoundname>ambigs.cpp</compoundname>
    <includes refid="ambigs_8h" local="yes">ambigs.h</includes>
    <includes refid="helpers_8h" local="yes">helpers.h</includes>
    <incdepgraph>
      <node id="13294">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="13282">
        <label>stdlib.h</label>
      </node>
      <node id="13279">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="13280" relation="include">
        </childnode>
      </node>
      <node id="13281">
        <label>serialis.h</label>
        <link refid="serialis_8h"/>
        <childnode refid="13282" relation="include">
        </childnode>
        <childnode refid="13283" relation="include">
        </childnode>
        <childnode refid="13277" relation="include">
        </childnode>
        <childnode refid="13284" relation="include">
        </childnode>
        <childnode refid="13286" relation="include">
        </childnode>
        <childnode refid="13287" relation="include">
        </childnode>
      </node>
      <node id="13285">
        <label>stddef.h</label>
      </node>
      <node id="13297">
        <label>memory.h</label>
      </node>
      <node id="13286">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="13278" relation="include">
        </childnode>
      </node>
      <node id="13280">
        <label>limits.h</label>
      </node>
      <node id="13283">
        <label>string.h</label>
      </node>
      <node id="13299">
        <label>unicharmap.h</label>
        <link refid="unicharmap_8h"/>
        <childnode refid="13296" relation="include">
        </childnode>
      </node>
      <node id="13296">
        <label>unichar.h</label>
        <link refid="unichar_8h"/>
        <childnode refid="13297" relation="include">
        </childnode>
        <childnode refid="13283" relation="include">
        </childnode>
      </node>
      <node id="13292">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="13278" relation="include">
        </childnode>
      </node>
      <node id="13274">
        <label>ccutil/ambigs.cpp</label>
        <link refid="ambigs.cpp"/>
        <childnode refid="13275" relation="include">
        </childnode>
        <childnode refid="13293" relation="include">
        </childnode>
      </node>
      <node id="13287">
        <label>fileerr.h</label>
        <link refid="fileerr_8h"/>
        <childnode refid="13286" relation="include">
        </childnode>
      </node>
      <node id="13275">
        <label>ambigs.h</label>
        <link refid="ambigs_8h"/>
        <childnode refid="13276" relation="include">
        </childnode>
        <childnode refid="13289" relation="include">
        </childnode>
        <childnode refid="13296" relation="include">
        </childnode>
        <childnode refid="13298" relation="include">
        </childnode>
        <childnode refid="13291" relation="include">
        </childnode>
      </node>
      <node id="13288">
        <label>lsterr.h</label>
        <link refid="lsterr_8h"/>
        <childnode refid="13286" relation="include">
        </childnode>
      </node>
      <node id="13290">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="13277" relation="include">
        </childnode>
        <childnode refid="13291" relation="include">
        </childnode>
        <childnode refid="13295" relation="include">
        </childnode>
      </node>
      <node id="13291">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="13277" relation="include">
        </childnode>
        <childnode refid="13282" relation="include">
        </childnode>
        <childnode refid="13292" relation="include">
        </childnode>
        <childnode refid="13286" relation="include">
        </childnode>
        <childnode refid="13293" relation="include">
        </childnode>
        <childnode refid="13294" relation="include">
        </childnode>
      </node>
      <node id="13284">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="13285" relation="include">
        </childnode>
        <childnode refid="13278" relation="include">
        </childnode>
      </node>
      <node id="13276">
        <label>elst.h</label>
        <link refid="elst_8h"/>
        <childnode refid="13277" relation="include">
        </childnode>
        <childnode refid="13278" relation="include">
        </childnode>
        <childnode refid="13281" relation="include">
        </childnode>
        <childnode refid="13288" relation="include">
        </childnode>
      </node>
      <node id="13298">
        <label>unicharset.h</label>
        <link refid="unicharset_8h"/>
        <childnode refid="13286" relation="include">
        </childnode>
        <childnode refid="13293" relation="include">
        </childnode>
        <childnode refid="13295" relation="include">
        </childnode>
        <childnode refid="13292" relation="include">
        </childnode>
        <childnode refid="13296" relation="include">
        </childnode>
        <childnode refid="13299" relation="include">
        </childnode>
      </node>
      <node id="13289">
        <label>tprintf.h</label>
        <link refid="tprintf_8h"/>
        <childnode refid="13290" relation="include">
        </childnode>
      </node>
      <node id="13278">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="13279" relation="include">
        </childnode>
      </node>
      <node id="13277">
        <label>stdio.h</label>
      </node>
      <node id="13295">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="13277" relation="include">
        </childnode>
        <childnode refid="13283" relation="include">
        </childnode>
        <childnode refid="13279" relation="include">
        </childnode>
        <childnode refid="13284" relation="include">
        </childnode>
      </node>
      <node id="13293">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="13277" relation="include">
        </childnode>
        <childnode refid="13283" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetesseract">tesseract</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ambigs.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Functions<sp/>for<sp/>dealing<sp/>with<sp/>ambiguities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(training<sp/>and<sp/>recognition).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/>Daria<sp/>Antonova</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created:<sp/><sp/><sp/><sp/><sp/>Mon<sp/>Feb<sp/>5<sp/>11:26:43<sp/>PDT<sp/>2009</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ambigs_8h" kindref="compound">ambigs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="helpers_8h" kindref="compound">helpers.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>__GNUC__</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>strtok_r<sp/>strtok_s</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="strtok__r_8h" kindref="compound">strtok_r.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>__GNUC__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>_WIN32<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesseract-c__api-demo_1afed58feacb84df2de88bdd613cfdba6d" kindref="member">tesseract</ref><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="classtesseract_1_1_ambig_spec_1aaa3a04113f5db03951771afa6423e7f4" kindref="member">AmbigSpec::AmbigSpec</ref>()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_ambig_spec_1aa36777f508e94eca21c00439cedd6704" kindref="member">wrong_ngram</ref>[0]<sp/>=<sp/>INVALID_UNICHAR_ID;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_ambig_spec_1a70aa5d46a566fc80aec608a68991e436" kindref="member">correct_fragments</ref>[0]<sp/>=<sp/>INVALID_UNICHAR_ID;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_ambig_spec_1a879c6167dbfc54980bfeb5a15b32bf73" kindref="member">correct_ngram_id</ref><sp/>=<sp/>INVALID_UNICHAR_ID;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_ambig_spec_1ae29644f82c6feac4df14b22368fa0873" kindref="member">type</ref><sp/>=<sp/><ref refid="namespacetesseract_1aa13017f5f891a1f9f95074bf26a5b222af40a6c3f3fbd83ba09a6607f534349dc" kindref="member">NOT_AMBIG</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><ref refid="classtesseract_1_1_ambig_spec_1a4cfb10d18b7c636f3afa5f223afa445e" kindref="member">wrong_ngram_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="namespacetesseract_1a3b71ccfcd667bca92d2e6435845a4c9b" kindref="member">ELISTIZE</ref>(AmbigSpec);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesseract_1_1_unichar_ambigs_1af207bbe44ace87aa94c756f92df28bb3" kindref="member">UnicharAmbigs::LoadUnicharAmbigs</ref>(FILE<sp/>*AmbigFile,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="host_8h_1ac53c9cafaf7fe16f985994c49f6b0964" kindref="member">inT64</ref><sp/>end_offset,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_level,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_ambigs_for_adaption,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref><sp/>*unicharset)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="namespacetesseract_1a3dad1b2dad5ed3069bdb4c971116b9c5" kindref="member">UnicharIdVector</ref><sp/>*adaption_ambigs_entry;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1aa3e8073ebaf3e0022654c45f27135032" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>replace_ambigs_.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>dang_ambigs_.<ref refid="class_generic_vector_1a0dc89fe2a365b04a61017f9d78c1a303" kindref="member">push_back</ref>(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>one_to_one_definite_ambigs_.push_back(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_ambigs_for_adaption)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ambigs_for_adaption_.push_back(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reverse_ambigs_for_adaption_.push_back(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level)<sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Reading<sp/>ambiguities\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestAmbigPartSize;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ReplacementAmbigPartSize;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>line<sp/>size:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>10<sp/>for<sp/>sizes<sp/>of<sp/>ambigs,<sp/>tabs,<sp/>abmig<sp/>type<sp/>and<sp/>newline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>UNICHAR_LEN<sp/>*<sp/>(MAX_AMBIG_SIZE<sp/>+<sp/>1)<sp/>for<sp/>each<sp/>part<sp/>of<sp/>the<sp/>ambig</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>space<sp/>for<sp/>buffer<sp/>is<sp/>allocated<sp/>on<sp/>the<sp/>heap<sp/>to<sp/>avoid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GCC<sp/>frame<sp/>size<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kMaxAmbigStringSize<sp/>=<sp/><ref refid="unichar_8h_1a902bc40c9d89802bc063afe30ce9e708" kindref="member">UNICHAR_LEN</ref><sp/>*<sp/>(<ref refid="ambigs_8h_1a66b35d22667233a1566433c6dd864463" kindref="member">MAX_AMBIG_SIZE</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="svutil_8cpp_1a8b423a805589152d71009c594ad25ab3" kindref="member">kBufferSize</ref><sp/>=<sp/>10<sp/>+<sp/>2<sp/>*<sp/>kMaxAmbigStringSize;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[<ref refid="svutil_8cpp_1a8b423a805589152d71009c594ad25ab3" kindref="member">kBufferSize</ref>];</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ReplacementString[kMaxAmbigStringSize];</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="unichar_8h_1a8578b19fa1ff5ca75080db1a18ecc32e" kindref="member">UNICHAR_ID</ref><sp/>TestUnicharIds[<ref refid="ambigs_8h_1a66b35d22667233a1566433c6dd864463" kindref="member">MAX_AMBIG_SIZE</ref><sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type<sp/>=<sp/><ref refid="namespacetesseract_1aa13017f5f891a1f9f95074bf26a5b222af40a6c3f3fbd83ba09a6607f534349dc" kindref="member">NOT_AMBIG</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>version<sp/>of<sp/>the<sp/>ambigs<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceconf_1ade15c5b54093b64d7c428ec19ca5b1cb" kindref="member">version</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="errcode_8h_1a93a603f4063a6b9403d81caa245a583b" kindref="member">ASSERT_HOST</ref>(fgets(buffer,<sp/>kBufferSize,<sp/>AmbigFile)<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strlen(buffer)<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*buffer<sp/>==<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>version<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strtol(buffer+1,<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>10));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>++line_num;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>rewind(AmbigFile);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((end_offset<sp/>&lt;<sp/>0<sp/>||<sp/>ftell(AmbigFile)<sp/>&lt;<sp/>end_offset)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fgets(buffer,<sp/>kBufferSize,<sp/>AmbigFile)<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="helpers_8h_1a31bec0ef73dd383e256fa462e9fa7e1f" kindref="member">chomp_string</ref>(buffer);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level<sp/>&gt;<sp/>2)<sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;read<sp/>line<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>buffer);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>++line_num;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ParseAmbiguityLine(line_num,<sp/>version,<sp/>debug_level,<sp/>*unicharset,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer,<sp/>&amp;TestAmbigPartSize,<sp/>TestUnicharIds,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ReplacementAmbigPartSize,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReplacementString,<sp/>&amp;type))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>AmbigSpec<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>appropriate<sp/>AmbigSpec_LIST.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>AmbigSpec<sp/>*ambig_spec<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AmbigSpec();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>InsertIntoTable((type<sp/>==<sp/><ref refid="namespacetesseract_1aa13017f5f891a1f9f95074bf26a5b222a4de7fc7ae32fd87a4c53e4b6bf3322de" kindref="member">REPLACE_AMBIG</ref>)<sp/>?<sp/>replace_ambigs_<sp/>:<sp/>dang_ambigs_,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestAmbigPartSize,<sp/>TestUnicharIds,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReplacementAmbigPartSize,<sp/>ReplacementString,<sp/>type,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ambig_spec,<sp/>unicharset);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>one_to_one_definite_ambigs_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TestAmbigPartSize<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReplacementAmbigPartSize<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>type<sp/>==<sp/><ref refid="namespacetesseract_1aa13017f5f891a1f9f95074bf26a5b222a36712914249ab1d96c4f395c06bc7009" kindref="member">DEFINITE_AMBIG</ref>)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(one_to_one_definite_ambigs_[TestUnicharIds[0]]<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one_to_one_definite_ambigs_[TestUnicharIds[0]]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a3dad1b2dad5ed3069bdb4c971116b9c5" kindref="member">UnicharIdVector</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>one_to_one_definite_ambigs_[TestUnicharIds[0]]-&gt;push_back(</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ambig_spec-&gt;correct_ngram_id);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>ambigs_for_adaption_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_ambigs_for_adaption)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>TestAmbigPartSize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ambigs_for_adaption_[TestUnicharIds[i]]<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ambigs_for_adaption_[TestUnicharIds[i]]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a3dad1b2dad5ed3069bdb4c971116b9c5" kindref="member">UnicharIdVector</ref>();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adaption_ambigs_entry<sp/>=<sp/>ambigs_for_adaption_[TestUnicharIds[i]];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tmp_ptr<sp/>=<sp/>ReplacementString;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tmp_ptr_end<sp/>=<sp/>ReplacementString<sp/>+<sp/>strlen(ReplacementString);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1ab18a1f069bcb107a7b316520d23fb57c" kindref="member">step</ref>(tmp_ptr);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unichar_8h_1a8578b19fa1ff5ca75080db1a18ecc32e" kindref="member">UNICHAR_ID</ref><sp/>id_to_insert<sp/>=<sp/>unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1ae786fa834962ef4d6dbf8300c6c5d456" kindref="member">unichar_to_id</ref>(tmp_ptr,<sp/>step);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errcode_8h_1a93a603f4063a6b9403d81caa245a583b" kindref="member">ASSERT_HOST</ref>(id_to_insert<sp/>!=<sp/>INVALID_UNICHAR_ID);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>new<sp/>unichar<sp/>id<sp/>to<sp/>adaption_ambigs_entry<sp/>(only<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vector<sp/>does<sp/>not<sp/>already<sp/>contain<sp/>it)<sp/>keeping<sp/>it<sp/>in<sp/>sorted<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>adaption_ambigs_entry-&gt;size()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*adaption_ambigs_entry)[j]<sp/>&gt;<sp/>id_to_insert;<sp/>++j);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>adaption_ambigs_entry-&gt;size())<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*adaption_ambigs_entry)[j]<sp/>!=<sp/>id_to_insert)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adaption_ambigs_entry-&gt;insert(id_to_insert,<sp/>j);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adaption_ambigs_entry-&gt;push_back(id_to_insert);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>tmp_ptr<sp/>and<sp/>step.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_ptr<sp/>+=<sp/>step;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step<sp/>=<sp/>tmp_ptr<sp/>&lt;<sp/>tmp_ptr_end<sp/>?<sp/>unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1ab18a1f069bcb107a7b316520d23fb57c" kindref="member">step</ref>(tmp_ptr)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>buffer;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>in<sp/>reverse_ambigs_for_adaption<sp/>from<sp/>ambigs_for_adaption<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_ambigs_for_adaption)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ambigs_for_adaption_.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adaption_ambigs_entry<sp/>=<sp/>ambigs_for_adaption_[i];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adaption_ambigs_entry<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>adaption_ambigs_entry-&gt;size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unichar_8h_1a8578b19fa1ff5ca75080db1a18ecc32e" kindref="member">UNICHAR_ID</ref><sp/>ambig_id<sp/>=<sp/>(*adaption_ambigs_entry)[j];</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reverse_ambigs_for_adaption_[ambig_id]<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reverse_ambigs_for_adaption_[ambig_id]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1a3dad1b2dad5ed3069bdb4c971116b9c5" kindref="member">UnicharIdVector</ref>();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reverse_ambigs_for_adaption_[ambig_id]-&gt;push_back(i);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>what<sp/>was<sp/>read<sp/>from<sp/>the<sp/>input<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tbl<sp/>=<sp/>0;<sp/>tbl<sp/>&lt;<sp/>2;<sp/>++tbl)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetesseract_1aa63fceec9a01c185fac83c0e7d04fe08" kindref="member">UnicharAmbigsVector</ref><sp/>&amp;print_table<sp/>=</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tbl<sp/>==<sp/>0)<sp/>?<sp/>replace_ambigs_<sp/>:<sp/>dang_ambigs_;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>print_table.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmbigSpec_LIST<sp/>*lst<sp/>=<sp/>print_table[i];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lst<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lst-&gt;empty())<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;%s<sp/>Ambiguities<sp/>for<sp/>%s:\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tbl<sp/>==<sp/>0)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Replaceable&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Dangerous&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a2543f3cb2b8da0160a87088940cc58d2" kindref="member">debug_str</ref>(i).<ref refid="class_s_t_r_i_n_g_1a32beee43ecab1bed8bebc3466896ad6e" kindref="member">string</ref>());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmbigSpec_IT<sp/>lst_it(lst);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(lst_it.mark_cycle_pt();<sp/>!lst_it.cycled_list();<sp/>lst_it.forward())<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmbigSpec<sp/>*ambig_spec<sp/>=<sp/>lst_it.data();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;wrong_ngram:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_unichar_id_array_utils_1a555621fcd9c34b946ed7235cdd8653e6" kindref="member">UnicharIdArrayUtils::print</ref>(ambig_spec-&gt;wrong_ngram,<sp/>*unicharset);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;correct_fragments:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_unichar_id_array_utils_1a555621fcd9c34b946ed7235cdd8653e6" kindref="member">UnicharIdArrayUtils::print</ref>(ambig_spec-&gt;correct_fragments,<sp/>*unicharset);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_ambigs_for_adaption)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vec_id<sp/>=<sp/>0;<sp/>vec_id<sp/>&lt;<sp/>2;<sp/>++vec_id)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_vector" kindref="compound">GenericVector&lt;UnicharIdVector *&gt;</ref><sp/>&amp;vec<sp/>=<sp/>(vec_id<sp/>==<sp/>0)<sp/>?</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ambigs_for_adaption_<sp/>:<sp/>reverse_ambigs_for_adaption_;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec.<ref refid="class_generic_vector_1a111b51dd0bf1324cfb69ef70703d8e70" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adaption_ambigs_entry<sp/>=<sp/>vec[i];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adaption_ambigs_entry<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;%sAmbigs<sp/>for<sp/>adaption<sp/>for<sp/>%s:\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec_id<sp/>==<sp/>0)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Reverse<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a2543f3cb2b8da0160a87088940cc58d2" kindref="member">debug_str</ref>(i).<ref refid="class_s_t_r_i_n_g_1a32beee43ecab1bed8bebc3466896ad6e" kindref="member">string</ref>());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>adaption_ambigs_entry-&gt;size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a2543f3cb2b8da0160a87088940cc58d2" kindref="member">debug_str</ref>(</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*adaption_ambigs_entry)[j]).<ref refid="class_s_t_r_i_n_g_1a32beee43ecab1bed8bebc3466896ad6e" kindref="member">string</ref>());</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>UnicharAmbigs::ParseAmbiguityLine(</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_num,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>version,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref><sp/>&amp;unicharset,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*TestAmbigPartSize,<sp/><ref refid="unichar_8h_1a8578b19fa1ff5ca75080db1a18ecc32e" kindref="member">UNICHAR_ID</ref><sp/>*TestUnicharIds,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ReplacementAmbigPartSize,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ReplacementString,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*type)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*token;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*next_token;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(token<sp/>=<sp/><ref refid="strtok__r_8cpp_1ada6f0d1c8962c7543f073d258efdb1bf" kindref="member">strtok_r</ref>(buffer,<sp/>kAmbigDelimiters,<sp/>&amp;next_token))<sp/>||</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!sscanf(token,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>TestAmbigPartSize)<sp/>||<sp/>TestAmbigPartSize<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level)<sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(kIllegalMsg,<sp/>line_num);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*TestAmbigPartSize<sp/>&gt;<sp/><ref refid="ambigs_8h_1a66b35d22667233a1566433c6dd864463" kindref="member">MAX_AMBIG_SIZE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>unichars<sp/>in<sp/>ambiguity<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>*TestAmbigPartSize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(token<sp/>=<sp/><ref refid="strtok__r_8cpp_1ada6f0d1c8962c7543f073d258efdb1bf" kindref="member">strtok_r</ref>(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>kAmbigDelimiters,<sp/>&amp;next_token)))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!unicharset.<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a9f8861ffb917e7341c821928da5865f0" kindref="member">contains_unichar</ref>(token))<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level)<sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(kIllegalUnicharMsg,<sp/>token);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>TestUnicharIds[i]<sp/>=<sp/>unicharset.<ref refid="class_u_n_i_c_h_a_r_s_e_t_1ae786fa834962ef4d6dbf8300c6c5d456" kindref="member">unichar_to_id</ref>(token);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>TestUnicharIds[i]<sp/>=<sp/>INVALID_UNICHAR_ID;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>*TestAmbigPartSize<sp/>||</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!(token<sp/>=<sp/><ref refid="strtok__r_8cpp_1ada6f0d1c8962c7543f073d258efdb1bf" kindref="member">strtok_r</ref>(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>kAmbigDelimiters,<sp/>&amp;next_token))<sp/>||</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!sscanf(token,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>ReplacementAmbigPartSize)<sp/>||</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ReplacementAmbigPartSize<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level)<sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(kIllegalMsg,<sp/>line_num);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ReplacementAmbigPartSize<sp/>&gt;<sp/><ref refid="ambigs_8h_1a66b35d22667233a1566433c6dd864463" kindref="member">MAX_AMBIG_SIZE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(</highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>unichars<sp/>in<sp/>ambiguity<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>ReplacementString[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>*ReplacementAmbigPartSize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(token<sp/>=<sp/><ref refid="strtok__r_8cpp_1ada6f0d1c8962c7543f073d258efdb1bf" kindref="member">strtok_r</ref>(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>kAmbigDelimiters,<sp/>&amp;next_token)))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>strcat(ReplacementString,<sp/>token);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!unicharset.<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a9f8861ffb917e7341c821928da5865f0" kindref="member">contains_unichar</ref>(token))<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level)<sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(kIllegalUnicharMsg,<sp/>token);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>*ReplacementAmbigPartSize)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level)<sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(kIllegalMsg,<sp/>line_num);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(version<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>next<sp/>field<sp/>being<sp/>true<sp/>indicates<sp/>that<sp/>the<sp/>abiguity<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>be<sp/>substituted<sp/>(e.g.<sp/>&apos;&apos;<sp/>should<sp/>always<sp/>be<sp/>changed<sp/>to<sp/>&quot;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>such<sp/>&quot;certain&quot;<sp/>n<sp/>-&gt;<sp/>m<sp/>ambigs<sp/>tesseract<sp/>will<sp/>insert<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fragments<sp/>for<sp/>the<sp/>n<sp/>pieces<sp/>in<sp/>the<sp/>unicharset.<sp/>AmbigsFound()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>then<sp/>replace<sp/>the<sp/>incorrect<sp/>ngram<sp/>with<sp/>the<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fragments<sp/>of<sp/>the<sp/>correct<sp/>character<sp/>(or<sp/>ngram<sp/>if<sp/>m<sp/>&gt;<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>if<sp/>m<sp/>&gt;<sp/>1,<sp/>an<sp/>ngram<sp/>will<sp/>be<sp/>inserted<sp/>into<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modified<sp/>word,<sp/>not<sp/>the<sp/>individual<sp/>unigrams.<sp/>Tesseract</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>limited<sp/>support<sp/>for<sp/>ngram<sp/>unichar<sp/>(e.g.<sp/>dawg<sp/>permuter).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(token<sp/>=<sp/><ref refid="strtok__r_8cpp_1ada6f0d1c8962c7543f073d258efdb1bf" kindref="member">strtok_r</ref>(<ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>kAmbigDelimiters,<sp/>&amp;next_token))<sp/>||</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!sscanf(token,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>type))<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_level)<sp/><ref refid="tprintf_8cpp_1a91c3e3cd802b72db376635e0e989a4b0" kindref="member">tprintf</ref>(kIllegalMsg,<sp/>line_num);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnicharAmbigs::InsertIntoTable(</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesseract_1aa63fceec9a01c185fac83c0e7d04fe08" kindref="member">UnicharAmbigsVector</ref><sp/>&amp;table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestAmbigPartSize,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unichar_8h_1a8578b19fa1ff5ca75080db1a18ecc32e" kindref="member">UNICHAR_ID</ref><sp/>*TestUnicharIds,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ReplacementAmbigPartSize,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ReplacementString,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>AmbigSpec<sp/>*ambig_spec,<sp/><ref refid="class_u_n_i_c_h_a_r_s_e_t" kindref="compound">UNICHARSET</ref><sp/>*unicharset)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>ambig_spec-&gt;type<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacetesseract_1aa13017f5f891a1f9f95074bf26a5b222" kindref="member">AmbigType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(type);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TestAmbigPartSize<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>ReplacementAmbigPartSize<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a00b50ec1de787807c383b204df642b44" kindref="member">to_lower</ref>(TestUnicharIds[0])<sp/>==</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a00b50ec1de787807c383b204df642b44" kindref="member">to_lower</ref>(unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1ae786fa834962ef4d6dbf8300c6c5d456" kindref="member">unichar_to_id</ref>(ReplacementString)))<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>ambig_spec-&gt;type<sp/>=<sp/><ref refid="namespacetesseract_1aa13017f5f891a1f9f95074bf26a5b222a29c650e9672a75e50491fc10c0f07ec5" kindref="member">CASE_AMBIG</ref>;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>ambig_spec-&gt;wrong_ngram_size<sp/>=</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_unichar_id_array_utils_1aec434747315a2c824ac4c113fccb5e03" kindref="member">UnicharIdArrayUtils::copy</ref>(TestUnicharIds,<sp/>ambig_spec-&gt;wrong_ngram);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>need<sp/>to<sp/>maintain<sp/>a<sp/>constant<sp/>number<sp/>of<sp/>unichar<sp/>positions<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>order<sp/>to<sp/>construct<sp/>ambig_blob_choices<sp/>vector<sp/>in<sp/>NoDangerousAmbig(),<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>n-&gt;m<sp/>ambiguity<sp/>we<sp/>will<sp/>have<sp/>to<sp/>place<sp/>n<sp/>character<sp/>fragments<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>correct<sp/>ngram<sp/>into<sp/>the<sp/>corresponding<sp/>positions<sp/>in<sp/>the<sp/>vector<sp/>(e.g.<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;vvvvw&quot;<sp/>and<sp/>vvvv-&gt;ww<sp/>we<sp/>will<sp/>place<sp/>v<sp/>and<sp/>|ww|0|4<sp/>into<sp/>position<sp/>0,<sp/>v<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|ww|1|4<sp/>into<sp/>position<sp/>1<sp/>and<sp/>so<sp/>on.<sp/>The<sp/>correct<sp/>ngram<sp/>is<sp/>reconstructed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>fragments<sp/>by<sp/>dawg_permute_and_select().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>the<sp/>corresponding<sp/>correct<sp/>ngram<sp/>into<sp/>the<sp/>unicharset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unicharset<sp/>code<sp/>assumes<sp/>that<sp/>the<sp/>&quot;base&quot;<sp/>ngram<sp/>is<sp/>inserted<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>unicharset<sp/>before<sp/>fragments<sp/>of<sp/>this<sp/>ngram<sp/>are<sp/>inserted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1ab5198816dde686850da3530a1f8261fe" kindref="member">unichar_insert</ref>(ReplacementString);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>ambig_spec-&gt;correct_ngram_id<sp/>=</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1ae786fa834962ef4d6dbf8300c6c5d456" kindref="member">unichar_to_id</ref>(ReplacementString);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ReplacementAmbigPartSize<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1a13e0ac21ee98a761c7d4af0e1f695957" kindref="member">set_isngram</ref>(ambig_spec-&gt;correct_ngram_id,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>corresponding<sp/>fragments<sp/>of<sp/>the<sp/>wrong<sp/>ngram<sp/>to<sp/>unicharset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>TestAmbigPartSize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unichar_8h_1a8578b19fa1ff5ca75080db1a18ecc32e" kindref="member">UNICHAR_ID</ref><sp/>unichar_id;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TestAmbigPartSize<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unichar_id<sp/>=<sp/>ambig_spec-&gt;correct_ngram_id;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_t_r_i_n_g" kindref="compound">STRING</ref><sp/>frag_str<sp/>=<sp/><ref refid="class_c_h_a_r___f_r_a_g_m_e_n_t_1ab7a7a173907f187f44677d2ad2679e09" kindref="member">CHAR_FRAGMENT::to_string</ref>(</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReplacementString,<sp/>i,<sp/>TestAmbigPartSize,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1ab5198816dde686850da3530a1f8261fe" kindref="member">unichar_insert</ref>(frag_str.<ref refid="class_s_t_r_i_n_g_1a32beee43ecab1bed8bebc3466896ad6e" kindref="member">string</ref>());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unichar_id<sp/>=<sp/>unicharset-&gt;<ref refid="class_u_n_i_c_h_a_r_s_e_t_1ae786fa834962ef4d6dbf8300c6c5d456" kindref="member">unichar_to_id</ref>(frag_str.<ref refid="class_s_t_r_i_n_g_1a32beee43ecab1bed8bebc3466896ad6e" kindref="member">string</ref>());</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>ambig_spec-&gt;correct_fragments[i]<sp/>=<sp/>unichar_id;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>ambig_spec-&gt;correct_fragments[i]<sp/>=<sp/>INVALID_UNICHAR_ID;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>AmbigSpec<sp/>for<sp/>this<sp/>ambiguity<sp/>to<sp/>the<sp/>corresponding<sp/>AmbigSpec_LIST.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>AmbigSpec_LISTs<sp/>sorted<sp/>by<sp/>AmbigSpec.wrong_ngram.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(table[TestUnicharIds[0]]<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>table[TestUnicharIds[0]]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AmbigSpec_LIST();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>table[TestUnicharIds[0]]-&gt;add_sorted(</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesseract_1_1_ambig_spec_1ac70fcbcafa3d2df7d876d6a06d21fbee" kindref="member">AmbigSpec::compare_ambig_specs</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>ambig_spec);</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tesseract</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/ccutil/ambigs.cpp"/>
  </compounddef>
</doxygen>
