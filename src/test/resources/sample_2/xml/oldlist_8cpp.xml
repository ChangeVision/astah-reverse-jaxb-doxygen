<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="oldlist_8cpp" kind="file">
    <compoundname>oldlist.cpp</compoundname>
    <includes refid="oldlist_8h" local="yes">oldlist.h</includes>
    <includes refid="structures_8h" local="yes">structures.h</includes>
    <includes local="no">stdio.h</includes>
    <includes refid="freelist_8h" local="yes">freelist.h</includes>
    <incdepgraph>
      <node id="33910">
        <label>cutil_class.h</label>
        <link refid="cutil__class_8h"/>
        <childnode refid="33911" relation="include">
        </childnode>
        <childnode refid="33924" relation="include">
        </childnode>
        <childnode refid="33907" relation="include">
        </childnode>
      </node>
      <node id="33925">
        <label>structures.h</label>
        <link refid="structures_8h"/>
        <childnode refid="33892" relation="include">
        </childnode>
        <childnode refid="33926" relation="include">
        </childnode>
        <childnode refid="33927" relation="include">
        </childnode>
      </node>
      <node id="33906">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="33924">
        <label>const.h</label>
        <link refid="const_8h"/>
      </node>
      <node id="33896">
        <label>stdlib.h</label>
      </node>
      <node id="33898">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="33899" relation="include">
        </childnode>
      </node>
      <node id="33911">
        <label>ccutil.h</label>
        <link refid="ccutil_8h"/>
        <childnode refid="33912" relation="include">
        </childnode>
        <childnode refid="33904" relation="include">
        </childnode>
        <childnode refid="33907" relation="include">
        </childnode>
        <childnode refid="33921" relation="include">
        </childnode>
        <childnode refid="33901" relation="include">
        </childnode>
        <childnode refid="33919" relation="include">
        </childnode>
        <childnode refid="33922" relation="include">
        </childnode>
        <childnode refid="33923" relation="include">
        </childnode>
      </node>
      <node id="33914">
        <label>serialis.h</label>
        <link refid="serialis_8h"/>
        <childnode refid="33896" relation="include">
        </childnode>
        <childnode refid="33895" relation="include">
        </childnode>
        <childnode refid="33894" relation="include">
        </childnode>
        <childnode refid="33908" relation="include">
        </childnode>
        <childnode refid="33904" relation="include">
        </childnode>
        <childnode refid="33915" relation="include">
        </childnode>
      </node>
      <node id="33891">
        <label>cutil/oldlist.cpp</label>
        <link refid="oldlist.cpp"/>
        <childnode refid="33892" relation="include">
        </childnode>
        <childnode refid="33925" relation="include">
        </childnode>
        <childnode refid="33894" relation="include">
        </childnode>
        <childnode refid="33926" relation="include">
        </childnode>
      </node>
      <node id="33909">
        <label>stddef.h</label>
      </node>
      <node id="33918">
        <label>memory.h</label>
      </node>
      <node id="33904">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="33897" relation="include">
        </childnode>
      </node>
      <node id="33899">
        <label>limits.h</label>
      </node>
      <node id="33922">
        <label>pthread.h</label>
      </node>
      <node id="33895">
        <label>string.h</label>
      </node>
      <node id="33920">
        <label>unicharmap.h</label>
        <link refid="unicharmap_8h"/>
        <childnode refid="33917" relation="include">
        </childnode>
      </node>
      <node id="33917">
        <label>unichar.h</label>
        <link refid="unichar_8h"/>
        <childnode refid="33918" relation="include">
        </childnode>
        <childnode refid="33895" relation="include">
        </childnode>
      </node>
      <node id="33893">
        <label>cutil.h</label>
        <link refid="cutil_8h"/>
        <childnode refid="33894" relation="include">
        </childnode>
        <childnode refid="33895" relation="include">
        </childnode>
        <childnode refid="33896" relation="include">
        </childnode>
        <childnode refid="33897" relation="include">
        </childnode>
        <childnode refid="33900" relation="include">
        </childnode>
        <childnode refid="33910" relation="include">
        </childnode>
      </node>
      <node id="33903">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="33897" relation="include">
        </childnode>
      </node>
      <node id="33923">
        <label>semaphore.h</label>
      </node>
      <node id="33927">
        <label>danerror.h</label>
        <link refid="danerror_8h"/>
      </node>
      <node id="33915">
        <label>fileerr.h</label>
        <link refid="fileerr_8h"/>
        <childnode refid="33904" relation="include">
        </childnode>
      </node>
      <node id="33912">
        <label>ambigs.h</label>
        <link refid="ambigs_8h"/>
        <childnode refid="33913" relation="include">
        </childnode>
        <childnode refid="33900" relation="include">
        </childnode>
        <childnode refid="33917" relation="include">
        </childnode>
        <childnode refid="33919" relation="include">
        </childnode>
        <childnode refid="33902" relation="include">
        </childnode>
      </node>
      <node id="33916">
        <label>lsterr.h</label>
        <link refid="lsterr_8h"/>
        <childnode refid="33904" relation="include">
        </childnode>
      </node>
      <node id="33892">
        <label>oldlist.h</label>
        <link refid="oldlist_8h"/>
        <childnode refid="33893" relation="include">
        </childnode>
        <childnode refid="33903" relation="include">
        </childnode>
      </node>
      <node id="33901">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="33894" relation="include">
        </childnode>
        <childnode refid="33902" relation="include">
        </childnode>
        <childnode refid="33907" relation="include">
        </childnode>
      </node>
      <node id="33902">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="33894" relation="include">
        </childnode>
        <childnode refid="33896" relation="include">
        </childnode>
        <childnode refid="33903" relation="include">
        </childnode>
        <childnode refid="33904" relation="include">
        </childnode>
        <childnode refid="33905" relation="include">
        </childnode>
        <childnode refid="33906" relation="include">
        </childnode>
      </node>
      <node id="33908">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="33909" relation="include">
        </childnode>
        <childnode refid="33897" relation="include">
        </childnode>
      </node>
      <node id="33926">
        <label>freelist.h</label>
        <link refid="freelist_8h"/>
        <childnode refid="33894" relation="include">
        </childnode>
      </node>
      <node id="33913">
        <label>elst.h</label>
        <link refid="elst_8h"/>
        <childnode refid="33894" relation="include">
        </childnode>
        <childnode refid="33897" relation="include">
        </childnode>
        <childnode refid="33914" relation="include">
        </childnode>
        <childnode refid="33916" relation="include">
        </childnode>
      </node>
      <node id="33919">
        <label>unicharset.h</label>
        <link refid="unicharset_8h"/>
        <childnode refid="33904" relation="include">
        </childnode>
        <childnode refid="33905" relation="include">
        </childnode>
        <childnode refid="33907" relation="include">
        </childnode>
        <childnode refid="33903" relation="include">
        </childnode>
        <childnode refid="33917" relation="include">
        </childnode>
        <childnode refid="33920" relation="include">
        </childnode>
      </node>
      <node id="33900">
        <label>tprintf.h</label>
        <link refid="tprintf_8h"/>
        <childnode refid="33901" relation="include">
        </childnode>
      </node>
      <node id="33897">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="33898" relation="include">
        </childnode>
      </node>
      <node id="33894">
        <label>stdio.h</label>
      </node>
      <node id="33921">
        <label>tessdatamanager.h</label>
        <link refid="tessdatamanager_8h"/>
        <childnode refid="33894" relation="include">
        </childnode>
        <childnode refid="33897" relation="include">
        </childnode>
        <childnode refid="33900" relation="include">
        </childnode>
      </node>
      <node id="33907">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="33894" relation="include">
        </childnode>
        <childnode refid="33895" relation="include">
        </childnode>
        <childnode refid="33898" relation="include">
        </childnode>
        <childnode refid="33908" relation="include">
        </childnode>
      </node>
      <node id="33905">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="33894" relation="include">
        </childnode>
        <childnode refid="33895" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="oldlist_8cpp_1a509b4ea71aff570b44c9498cb472561e" prot="public" static="no">
        <name>add_on</name>
        <param><defname>l</defname></param>
        <param><defname>x</defname></param>
        <initializer>l = <ref refid="oldlist_8h_1a9c4294375af81ab4c133b6b5a3679a16" kindref="member">push</ref> (l,<ref refid="oldlist_8h_1a69547be764424f18b0be535400747978" kindref="member">first_node</ref> (x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="97" column="9" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="oldlist_8cpp_1a42590f43649b9cb44df50a41cf419546" prot="public" static="no">
        <name>next_one</name>
        <param><defname>l</defname></param>
        <initializer>l = <ref refid="oldlist_8h_1adb120d4c08ce52b5dfe524f0419a9154" kindref="member">list_rest</ref> (l)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="98" column="9" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="oldlist_8cpp_1acd4ea858d7133e40518e0832ff9d94b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int count</definition>
        <argsstring>(LIST var_list)</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>var_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="108" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="108" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1a1fa3ecce52a0563f595b8f1428cc1211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
        <definition>LIST delete_d</definition>
        <argsstring>(LIST list, void *key, int_compare is_equal)</argsstring>
        <name>delete_d</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="cutil_8h_1aae643303681fcfa6bbe4166dadd69b2d" kindref="member">int_compare</ref></type>
          <declname>is_equal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="125" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="125" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1ab5c9baec28a88612d551a3969cc2d41b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
        <definition>LIST delete_d</definition>
        <argsstring>(LIST list, void *key, TessResultCallback2&lt; int, void *, void * &gt; *is_equal)</argsstring>
        <name>delete_d</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_tess_result_callback2" kindref="compound">TessResultCallback2</ref>&lt; int, void *, void * &gt; *</type>
          <declname>is_equal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="154" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="154" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1a338e68bdadcbdf51db4c7268c4529409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
        <definition>LIST destroy</definition>
        <argsstring>(LIST list)</argsstring>
        <name>destroy</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="187" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="187" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1a1a1efc1a269e5bb5bf16c1a174363ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroy_nodes</definition>
        <argsstring>(LIST list, void_dest destructor)</argsstring>
        <name>destroy_nodes</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="cutil_8h_1a840df4080fe3d271893f7db1ff27cc90" kindref="member">void_dest</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="204" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="204" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1a32592fff9af11f3c35bd4c4f57733fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insert</definition>
        <argsstring>(LIST list, void *node)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="221" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="221" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1a741b51b53773baf5cc5597d6926b83e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int is_same_node</definition>
        <argsstring>(void *item1, void *item2)</argsstring>
        <name>is_same_node</name>
        <param>
          <type>void *</type>
          <declname>item1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>item2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="241" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1a401c3dd163e034a46805fc1544d4ed58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int is_same</definition>
        <argsstring>(void *item1, void *item2)</argsstring>
        <name>is_same</name>
        <param>
          <type>void *</type>
          <declname>item1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>item2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="252" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1a185e827874145ed10ce9db702a34f671" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
        <definition>LIST join</definition>
        <argsstring>(LIST list1, LIST list2)</argsstring>
        <name>join</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>list1</declname>
        </param>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>list2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="264" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="264" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1ad9ec1d10cbd07fc3376ef300df603418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
        <definition>LIST last</definition>
        <argsstring>(LIST var_list)</argsstring>
        <name>last</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>var_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="277" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="277" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1ae770a79e91f79e9bc159267eaf9a9a86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* nth_cell</definition>
        <argsstring>(LIST var_list, int item_num)</argsstring>
        <name>nth_cell</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>var_list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>item_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="289" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="289" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1a4a16ea0d766f4b3bc697142d5303a62c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
        <definition>LIST pop</definition>
        <argsstring>(LIST list)</argsstring>
        <name>pop</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="305" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="305" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1a9c4294375af81ab4c133b6b5a3679a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
        <definition>LIST push</definition>
        <argsstring>(LIST list, void *element)</argsstring>
        <name>push</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="323" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="323" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1a1019c2e1108695bb4f33f83e02ee62ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
        <definition>LIST push_last</definition>
        <argsstring>(LIST list, void *item)</argsstring>
        <name>push_last</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="338" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="338" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1ade6fcdcd343af2f9b32c79583a5a0637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
        <definition>LIST reverse</definition>
        <argsstring>(LIST list)</argsstring>
        <name>reverse</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="357" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="357" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1a1316854253b2d15102f4f50d2e7eee02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
        <definition>LIST reverse_d</definition>
        <argsstring>(LIST list)</argsstring>
        <name>reverse_d</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="371" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="371" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1aff044482629d5faed80f830b0fcf7513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
        <definition>LIST s_adjoin</definition>
        <argsstring>(LIST var_list, void *variable, int_compare compare)</argsstring>
        <name>s_adjoin</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>var_list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>variable</declname>
        </param>
        <param>
          <type><ref refid="cutil_8h_1aae643303681fcfa6bbe4166dadd69b2d" kindref="member">int_compare</ref></type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="384" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="384" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1a1d8af9328f064a9df6d6f88336dd054e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
        <definition>LIST search</definition>
        <argsstring>(LIST list, void *key, int_compare is_equal)</argsstring>
        <name>search</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="cutil_8h_1aae643303681fcfa6bbe4166dadd69b2d" kindref="member">int_compare</ref></type>
          <declname>is_equal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="413" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="413" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="oldlist_8cpp_1ae0b17cb0a55f7292b13cd3a9b0013902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
        <definition>LIST search</definition>
        <argsstring>(LIST list, void *key, TessResultCallback2&lt; int, void *, void * &gt; *is_equal)</argsstring>
        <name>search</name>
        <param>
          <type><ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref></type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_tess_result_callback2" kindref="compound">TessResultCallback2</ref>&lt; int, void *, void * &gt; *</type>
          <declname>is_equal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" line="422" column="1" bodyfile="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp" bodystart="422" bodyend="426"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-C-*-</highlight></codeline>
<codeline lineno="2"><highlight class="comment">###############################################################################</highlight></codeline>
<codeline lineno="3"><highlight class="comment">#</highlight></codeline>
<codeline lineno="4"><highlight class="comment">#<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.c</highlight></codeline>
<codeline lineno="5"><highlight class="comment">#<sp/>Description:<sp/><sp/>List<sp/>processing<sp/>procedures.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">#<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mark<sp/>Seaman,<sp/>Software<sp/>Productivity</highlight></codeline>
<codeline lineno="7"><highlight class="comment">#<sp/>Created:<sp/><sp/><sp/><sp/><sp/><sp/>Thu<sp/>Jul<sp/>23<sp/>13:24:09<sp/>1987</highlight></codeline>
<codeline lineno="8"><highlight class="comment">#<sp/>Modified:<sp/><sp/><sp/><sp/><sp/>Thu<sp/>Dec<sp/>22<sp/>10:59:52<sp/>1988<sp/>(Mark<sp/>Seaman)<sp/>marks@hpgrlt</highlight></codeline>
<codeline lineno="9"><highlight class="comment">#<sp/>Language:<sp/><sp/><sp/><sp/><sp/>C</highlight></codeline>
<codeline lineno="10"><highlight class="comment">#<sp/>Package:<sp/><sp/><sp/><sp/><sp/><sp/>N/A</highlight></codeline>
<codeline lineno="11"><highlight class="comment">#<sp/>Status:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reusable<sp/>Software<sp/>Component</highlight></codeline>
<codeline lineno="12"><highlight class="comment">#</highlight></codeline>
<codeline lineno="13"><highlight class="comment">#<sp/>(c)<sp/>Copyright<sp/>1987,<sp/>Hewlett-Packard<sp/>Company.</highlight></codeline>
<codeline lineno="14"><highlight class="comment">**<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="15"><highlight class="comment">**<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="16"><highlight class="comment">**<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="17"><highlight class="comment">**<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="18"><highlight class="comment">**<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="19"><highlight class="comment">**<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="20"><highlight class="comment">**<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">**<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="22"><highlight class="comment">**<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="23"><highlight class="comment">#</highlight></codeline>
<codeline lineno="24"><highlight class="comment">################################################################################</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">*<sp/>Revision<sp/>1.13<sp/><sp/>90/03/06<sp/><sp/>15:37:54<sp/><sp/>15:37:54<sp/><sp/>marks<sp/>(Mark<sp/>Seaman)</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*<sp/>Look<sp/>for<sp/>correct<sp/>file<sp/>of<sp/>&lt;malloc.h&gt;<sp/>or<sp/>&lt;stdlib.h&gt;</highlight></codeline>
<codeline lineno="28"><highlight class="comment">*</highlight></codeline>
<codeline lineno="29"><highlight class="comment">*<sp/>Revision<sp/>1.12<sp/><sp/>90/02/26<sp/><sp/>17:37:36<sp/><sp/>17:37:36<sp/><sp/>marks<sp/>(Mark<sp/>Seaman)</highlight></codeline>
<codeline lineno="30"><highlight class="comment">*<sp/>Added<sp/>pop_off<sp/>and<sp/>join_on</highlight></codeline>
<codeline lineno="31"><highlight class="comment">*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"></highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/>This<sp/>file<sp/>contains<sp/>a<sp/>set<sp/>of<sp/>general<sp/>purpose<sp/>list<sp/>manipulation<sp/>routines.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/>These<sp/>routines<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>wide<sp/>variety<sp/>of<sp/>ways<sp/>to<sp/>provide<sp/>several</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/>different<sp/>popular<sp/>data<sp/>structures.<sp/>A<sp/>new<sp/>list<sp/>can<sp/>be<sp/>created<sp/>by<sp/>declaring</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/>a<sp/>variable<sp/>of<sp/>type<sp/>&apos;LIST&apos;,<sp/>and<sp/>can<sp/>be<sp/>initialized<sp/>with<sp/>the<sp/>value<sp/>&apos;NIL_LIST&apos;.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/>All<sp/>of<sp/>these<sp/>routines<sp/>check<sp/>for<sp/>the<sp/>NIL_LIST<sp/>condition<sp/>before<sp/>dereferencing</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/>pointers.<sp/><sp/>NOTE:<sp/><sp/>There<sp/>is<sp/>a<sp/>users&apos;<sp/>manual<sp/>available<sp/>in<sp/>printed<sp/>form<sp/>from</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/>Mark<sp/>Seaman<sp/>at<sp/>(303)<sp/>350-4492<sp/>at<sp/>Greeley<sp/>Hard<sp/>Copy.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/>To<sp/>implement<sp/>a<sp/>STACK<sp/>use:</highlight></codeline>
<codeline lineno="42"><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/>push<sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>add<sp/>to<sp/>the<sp/>Stack<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>push<sp/>(l,<sp/>(LIST)<sp/>&quot;jim&quot;);</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/>pop<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>remove<sp/>items<sp/>from<sp/>the<sp/>Stack<sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>pop<sp/>(l);</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/>first_node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>access<sp/>the<sp/>head<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>(char<sp/>*)<sp/>first_node<sp/>(l);</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/>To<sp/>implement<sp/>a<sp/>QUEUE<sp/>use:</highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/>push_last<sp/><sp/><sp/><sp/>to<sp/>add<sp/>to<sp/>the<sp/>Queue<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>push_last<sp/>(l,<sp/>(LIST)<sp/>&quot;jim&quot;);</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/>pop<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove<sp/>items<sp/>from<sp/>the<sp/>Queue<sp/>l<sp/>=<sp/>pop<sp/>(l);</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/>first_node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>access<sp/>the<sp/>head<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>(char<sp/>*)<sp/>first_node<sp/>(l);</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/>To<sp/>implement<sp/>LISP<sp/>like<sp/>functions<sp/>use:</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>first_node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(int)<sp/>first_node<sp/>(l);</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/>rest<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CDR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>list_rest<sp/>(l);</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/>push<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>push<sp/>(l,<sp/>(LIST)<sp/>this);</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/>last<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LAST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>last<sp/>(l);</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/>concat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>APPEND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>concat<sp/>(r,<sp/>s);</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/>count<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>count<sp/>(l);</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/>search<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEMBER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(search<sp/>(l,<sp/>x,<sp/>NULL))</highlight></codeline>
<codeline lineno="62"><highlight class="comment"></highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/>To<sp/>implement<sp/>SETS<sp/>use:</highlight></codeline>
<codeline lineno="64"><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/>adjoin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/><sp/>=<sp/>adjoin<sp/>(l,<sp/>x);</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/>set_union<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>set_union<sp/>(r,<sp/>s);</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/>intersection<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>intersection<sp/>(r,<sp/>s);</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/>set_difference<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>set_difference<sp/>(r,<sp/>s);</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/>delete<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>delete<sp/>(s,<sp/>x,<sp/>NULL);</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/>search<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(search<sp/>(l,<sp/>x,<sp/>NULL))</highlight></codeline>
<codeline lineno="71"><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/>To<sp/>Implement<sp/>Associated<sp/>LISTS<sp/>use:</highlight></codeline>
<codeline lineno="73"><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/>lpush<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>lpush<sp/>(l,<sp/>p);</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/>assoc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>assoc<sp/>(l,<sp/>x);</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/>adelete<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>adelete<sp/>(l,<sp/>x);</highlight></codeline>
<codeline lineno="77"><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/>The<sp/>following<sp/>rules<sp/>of<sp/>closure<sp/>exist<sp/>for<sp/>the<sp/>functions<sp/>provided.</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/>a<sp/>=<sp/>first_node<sp/>(push<sp/>(a,<sp/>b))</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/>b<sp/>=<sp/>list_rest<sp/>(push<sp/>(a,<sp/>b))</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/>a<sp/>=<sp/>push<sp/>(pop<sp/>(a),<sp/>a))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>all<sp/>a<sp/>&lt;&gt;<sp/>NIL_LIST</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/>a<sp/>=<sp/>reverse<sp/>(reverse<sp/>(a))</highlight></codeline>
<codeline lineno="83"><highlight class="comment"></highlight></codeline>
<codeline lineno="84"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="oldlist_8h" kindref="compound">oldlist.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="structures_8h" kindref="compound">structures.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MAC_OR_DOS</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="freelist_8h" kindref="compound">freelist.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M<sp/>a<sp/>c<sp/>r<sp/>o<sp/>s</highlight></codeline>
<codeline lineno="96"><highlight class="comment">----------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>add_on(l,x)<sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>push<sp/>(l,first_node<sp/>(x))</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>next_one(l)<sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>list_rest<sp/>(l)</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F<sp/>u<sp/>n<sp/>c<sp/>t<sp/>i<sp/>o<sp/>n<sp/>s</highlight></codeline>
<codeline lineno="102"><highlight class="comment">----------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>c<sp/>o<sp/>u<sp/>n<sp/>t</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/>Recursively<sp/>count<sp/>the<sp/>elements<sp/>in<sp/><sp/>a<sp/>list.<sp/><sp/>Return<sp/>the<sp/>count.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="oldlist_8cpp_1acd4ea858d7133e40518e0832ff9d94b2" kindref="member">count</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>var_list)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="oldlist_8h_1a2cf19ba78be6b54f66823d58f34f2a53" kindref="member">iterate</ref><sp/>(var_list)<sp/>temp<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>return<sp/>(temp);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/>d<sp/>e<sp/>l<sp/>e<sp/>t<sp/>e<sp/><sp/><sp/><sp/>d</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/>Delete<sp/>all<sp/>the<sp/>elements<sp/>out<sp/>of<sp/>the<sp/>current<sp/>list<sp/>that<sp/>match<sp/>the<sp/>key.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>operation<sp/>destroys<sp/>the<sp/>original<sp/>list.<sp/><sp/>The<sp/>caller<sp/>will<sp/>supply<sp/>a</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>routine<sp/>that<sp/>will<sp/>compare<sp/>each<sp/>node<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/>key,<sp/>and<sp/>return<sp/>a<sp/>non-zero<sp/>value<sp/>when<sp/>they<sp/>match.<sp/><sp/>If<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/>NULL<sp/>is<sp/>supplied<sp/>for<sp/>is_equal,<sp/>the<sp/>is_key<sp/>routine<sp/>will<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/><ref refid="oldlist_8cpp_1a1fa3ecce52a0563f595b8f1428cc1211" kindref="member">delete_d</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/><ref refid="cutil_8h_1aae643303681fcfa6bbe4166dadd69b2d" kindref="member">int_compare</ref><sp/><ref refid="outlines_8h_1a7ee72f89f415da05b3dec8190ba140ef" kindref="member">is_equal</ref>)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>result<sp/>=<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>last_one<sp/>=<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_equal<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>is_equal<sp/>=<sp/><ref refid="oldlist_8cpp_1a401c3dd163e034a46805fc1544d4ed58" kindref="member">is_same</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(list<sp/>!=<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(*is_equal)<sp/>(<ref refid="oldlist_8h_1a69547be764424f18b0be535400747978" kindref="member">first_node</ref><sp/>(list),<sp/>key))<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_one<sp/>==<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_one<sp/>=<sp/>list;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/><ref refid="oldlist_8h_1adb120d4c08ce52b5dfe524f0419a9154" kindref="member">list_rest</ref><sp/>(list);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>last_one;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="oldlist_8h_1a42cc2d9c5eabb2193e2e64df41adedf4" kindref="member">set_rest</ref>(last_one,<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="oldlist_8h_1a42cc2d9c5eabb2193e2e64df41adedf4" kindref="member">set_rest</ref>(last_one,<sp/>list);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_one<sp/>=<sp/>list;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/><ref refid="oldlist_8h_1adb120d4c08ce52b5dfe524f0419a9154" kindref="member">list_rest</ref><sp/>(list);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="oldlist_8h_1a42cc2d9c5eabb2193e2e64df41adedf4" kindref="member">set_rest</ref>(last_one,<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/><ref refid="oldlist_8cpp_1a4a16ea0d766f4b3bc697142d5303a62c" kindref="member">pop</ref><sp/>(list);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/><ref refid="oldlist_8cpp_1a1fa3ecce52a0563f595b8f1428cc1211" kindref="member">delete_d</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_tess_result_callback2" kindref="compound">TessResultCallback2&lt;int, void*, void*&gt;</ref>*<sp/>is_equal)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>result<sp/>=<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>last_one<sp/>=<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(list<sp/>!=<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(*is_equal).Run<sp/>(<ref refid="oldlist_8h_1a69547be764424f18b0be535400747978" kindref="member">first_node</ref><sp/>(list),<sp/>key))<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_one<sp/>==<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_one<sp/>=<sp/>list;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/><ref refid="oldlist_8h_1adb120d4c08ce52b5dfe524f0419a9154" kindref="member">list_rest</ref><sp/>(list);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>last_one;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="oldlist_8h_1a42cc2d9c5eabb2193e2e64df41adedf4" kindref="member">set_rest</ref>(last_one,<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="oldlist_8h_1a42cc2d9c5eabb2193e2e64df41adedf4" kindref="member">set_rest</ref>(last_one,<sp/>list);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_one<sp/>=<sp/>list;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/><ref refid="oldlist_8h_1adb120d4c08ce52b5dfe524f0419a9154" kindref="member">list_rest</ref><sp/>(list);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="oldlist_8h_1a42cc2d9c5eabb2193e2e64df41adedf4" kindref="member">set_rest</ref>(last_one,<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/><ref refid="oldlist_8cpp_1a4a16ea0d766f4b3bc697142d5303a62c" kindref="member">pop</ref><sp/>(list);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/>d<sp/>e<sp/>s<sp/>t<sp/>r<sp/>o<sp/>y</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/>Return<sp/>the<sp/>space<sp/>taken<sp/>by<sp/>a<sp/>list<sp/>to<sp/>the<sp/>heap.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/><ref refid="oldlist_8cpp_1a338e68bdadcbdf51db4c7268c4529409" kindref="member">destroy</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>next;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(list<sp/>!=<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/><ref refid="oldlist_8h_1adb120d4c08ce52b5dfe524f0419a9154" kindref="member">list_rest</ref><sp/>(list);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structures_8cpp_1aabf4bea877986487a9f13929df7b149e" kindref="member">free_cell</ref>(list);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>list<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/><sp/>d<sp/>e<sp/>s<sp/>t<sp/>r<sp/>o<sp/>y<sp/><sp/><sp/>n<sp/>o<sp/>d<sp/>e<sp/>s</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/><sp/>Return<sp/>the<sp/>space<sp/>taken<sp/>by<sp/>the<sp/>LISTs<sp/>of<sp/>a<sp/>list<sp/>to<sp/>the<sp/>heap.</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="oldlist_8cpp_1a1a1efc1a269e5bb5bf16c1a174363ba4" kindref="member">destroy_nodes</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>list,<sp/><ref refid="cutil_8h_1a840df4080fe3d271893f7db1ff27cc90" kindref="member">void_dest</ref><sp/>destructor)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(destructor<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>destructor<sp/>=<sp/><ref refid="freelist_8cpp_1ab462a857e5edf360ae4881bcc92a0bcf" kindref="member">memfree</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(list<sp/>!=<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>(*destructor)<sp/>(<ref refid="oldlist_8h_1a69547be764424f18b0be535400747978" kindref="member">first_node</ref><sp/>(list));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>list<sp/>=<sp/><ref refid="oldlist_8cpp_1a4a16ea0d766f4b3bc697142d5303a62c" kindref="member">pop</ref><sp/>(list);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/><sp/>i<sp/>n<sp/>s<sp/>e<sp/>r<sp/>t</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/><sp/>Create<sp/>a<sp/>list<sp/>element<sp/>and<sp/>rearange<sp/>the<sp/>pointers<sp/>so<sp/>that<sp/>the<sp/>first</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/><sp/>element<sp/>in<sp/>the<sp/>list<sp/>is<sp/>the<sp/>second<sp/>aurgment.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="oldlist_8cpp_1a32592fff9af11f3c35bd4c4f57733fd2" kindref="member">insert</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*node)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>element;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list<sp/>!=<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="oldlist_8cpp_1a9c4294375af81ab4c133b6b5a3679a16" kindref="member">push</ref><sp/>(<ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="oldlist_8h_1a42cc2d9c5eabb2193e2e64df41adedf4" kindref="member">set_rest</ref><sp/>(element,<sp/><ref refid="oldlist_8h_1adb120d4c08ce52b5dfe524f0419a9154" kindref="member">list_rest</ref><sp/>(list));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="oldlist_8h_1a42cc2d9c5eabb2193e2e64df41adedf4" kindref="member">set_rest</ref>(list,<sp/>element);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="oldlist_8h_1a69547be764424f18b0be535400747978" kindref="member">first_node</ref><sp/>(list);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>list-&gt;<ref refid="structlist__rec_1ab409a262c4a240475b50b330b4483e9c" kindref="member">node</ref><sp/>=<sp/><ref refid="oldlist_8h_1a69547be764424f18b0be535400747978" kindref="member">first_node</ref><sp/>(<ref refid="oldlist_8h_1adb120d4c08ce52b5dfe524f0419a9154" kindref="member">list_rest</ref><sp/>(list));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>list-&gt;<ref refid="structlist__rec_1af4f6ed22cbbd6d68b0bc4505defed426" kindref="member">next</ref>-&gt;<ref refid="structlist__rec_1ab409a262c4a240475b50b330b4483e9c" kindref="member">node</ref><sp/>=<sp/>(<ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref>)<sp/>node;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/><sp/>i<sp/>s<sp/><sp/><sp/>s<sp/>a<sp/>m<sp/>e<sp/><sp/><sp/>n<sp/>o<sp/>d<sp/>e</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/><sp/>Compare<sp/>the<sp/>list<sp/>node<sp/>with<sp/>the<sp/>key<sp/>value<sp/>return<sp/>TRUE<sp/>(non-zero)</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>they<sp/>are<sp/>equivalent<sp/>strings.<sp/><sp/>(Return<sp/>FALSE<sp/>if<sp/>not)</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="oldlist_8cpp_1a741b51b53773baf5cc5597d6926b83e4" kindref="member">is_same_node</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*item1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*item2)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(item1<sp/>==<sp/>item2);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/><sp/>i<sp/>s<sp/><sp/><sp/>s<sp/>a<sp/>m<sp/>e</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/><sp/>Compare<sp/>the<sp/>list<sp/>node<sp/>with<sp/>the<sp/>key<sp/>value<sp/>return<sp/>TRUE<sp/>(non-zero)</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>they<sp/>are<sp/>equivalent<sp/>strings.<sp/><sp/>(Return<sp/>FALSE<sp/>if<sp/>not)</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="oldlist_8cpp_1a401c3dd163e034a46805fc1544d4ed58" kindref="member">is_same</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*item1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*item2)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!strcmp<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>item1,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>item2));</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/><sp/>j<sp/>o<sp/>i<sp/>n</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/><sp/>Join<sp/>the<sp/>two<sp/>lists<sp/>together.<sp/>This<sp/>function<sp/>is<sp/>similar<sp/>to<sp/>concat</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/><sp/>except<sp/>that<sp/>concat<sp/>creates<sp/>a<sp/>new<sp/>list.<sp/><sp/>This<sp/>function<sp/>returns<sp/>the</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/><sp/>first<sp/>list<sp/>updated.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/><ref refid="oldlist_8cpp_1a185e827874145ed10ce9db702a34f671" kindref="member">join</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>list1,<sp/><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>list2)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list1<sp/>==<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(list2);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><ref refid="oldlist_8h_1a42cc2d9c5eabb2193e2e64df41adedf4" kindref="member">set_rest</ref><sp/>(<ref refid="oldlist_8cpp_1ad9ec1d10cbd07fc3376ef300df603418" kindref="member">last</ref><sp/>(list1),<sp/>list2);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(list1);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/><sp/>l<sp/>a<sp/>s<sp/>t</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/><sp/>Return<sp/>the<sp/>last<sp/>list<sp/>item<sp/>(this<sp/>is<sp/>list<sp/>type).</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/><ref refid="oldlist_8cpp_1ad9ec1d10cbd07fc3376ef300df603418" kindref="member">last</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>var_list)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="oldlist_8h_1adb120d4c08ce52b5dfe524f0419a9154" kindref="member">list_rest</ref><sp/>(var_list)<sp/>!=<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>var_list<sp/>=<sp/><ref refid="oldlist_8h_1adb120d4c08ce52b5dfe524f0419a9154" kindref="member">list_rest</ref><sp/>(var_list);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(var_list);</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/><sp/>n<sp/>t<sp/>h<sp/><sp/><sp/>c<sp/>e<sp/>l<sp/>l</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/><sp/>Return<sp/>nth<sp/>list<sp/>cell<sp/>in<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="oldlist_8cpp_1ae770a79e91f79e9bc159267eaf9a9a86" kindref="member">nth_cell</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>var_list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>item_num)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><ref refid="oldlist_8h_1a2cf19ba78be6b54f66823d58f34f2a53" kindref="member">iterate</ref>(var_list)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x++<sp/>==<sp/>item_num)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(var_list);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(var_list);</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/><sp/>p<sp/>o<sp/>p</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/><sp/>Return<sp/>the<sp/>list<sp/>with<sp/>the<sp/>first<sp/>element<sp/>removed.<sp/><sp/>Destroy<sp/>the<sp/>space</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/><sp/>that<sp/>it<sp/>occupied<sp/>in<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/><ref refid="oldlist_8cpp_1a4a16ea0d766f4b3bc697142d5303a62c" kindref="member">pop</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>temp;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>temp<sp/>=<sp/><ref refid="oldlist_8h_1adb120d4c08ce52b5dfe524f0419a9154" kindref="member">list_rest</ref><sp/>(list);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list<sp/>!=<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structures_8cpp_1aabf4bea877986487a9f13929df7b149e" kindref="member">free_cell</ref>(list);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(temp);</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/><sp/>p<sp/>u<sp/>s<sp/>h</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/><sp/>Create<sp/>a<sp/>list<sp/>element.<sp/><sp/>Push<sp/>the<sp/>second<sp/>parameter<sp/>(the<sp/>node)<sp/>onto</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>first<sp/>parameter<sp/>(the<sp/>list).<sp/>Return<sp/>the<sp/>new<sp/>list<sp/>to<sp/>the<sp/>caller.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/><ref refid="oldlist_8cpp_1a9c4294375af81ab4c133b6b5a3679a16" kindref="member">push</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*element)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>t;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/><ref refid="structures_8cpp_1ae80861aab6767a253176b0dc17a26ed1" kindref="member">new_cell</ref><sp/>();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>t-&gt;<ref refid="structlist__rec_1ab409a262c4a240475b50b330b4483e9c" kindref="member">node</ref><sp/>=<sp/>(<ref refid="baseapi_8h_1aa200acf94add0e61783bfcd5965bb645" kindref="member">LIST</ref>)<sp/>element;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><ref refid="oldlist_8h_1a42cc2d9c5eabb2193e2e64df41adedf4" kindref="member">set_rest</ref>(t,<sp/>list);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(t);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/><sp/>p<sp/>u<sp/>s<sp/>h<sp/><sp/><sp/>l<sp/>a<sp/>s<sp/>t</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/><sp/>Create<sp/>a<sp/>list<sp/>element.<sp/>Add<sp/>the<sp/>element<sp/>onto<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/><ref refid="oldlist_8cpp_1a1019c2e1108695bb4f33f83e02ee62ad" kindref="member">push_last</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*item)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>t;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list<sp/>!=<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/><ref refid="oldlist_8cpp_1ad9ec1d10cbd07fc3376ef300df603418" kindref="member">last</ref><sp/>(list);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structlist__rec_1af4f6ed22cbbd6d68b0bc4505defed426" kindref="member">next</ref><sp/>=<sp/><ref refid="oldlist_8cpp_1a9c4294375af81ab4c133b6b5a3679a16" kindref="member">push</ref><sp/>(<ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>,<sp/>item);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(list);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="oldlist_8cpp_1a9c4294375af81ab4c133b6b5a3679a16" kindref="member">push</ref><sp/>(<ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>,<sp/>item));</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/><sp/>r<sp/>e<sp/>v<sp/>e<sp/>r<sp/>s<sp/>e</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/><sp/>Create<sp/>a<sp/>new<sp/>list<sp/>with<sp/>the<sp/>elements<sp/>reversed.<sp/>The<sp/>old<sp/>list<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/><sp/>destroyed.</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/><ref refid="oldlist_8cpp_1ade6fcdcd343af2f9b32c79583a5a0637" kindref="member">reverse</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>newlist<sp/>=<sp/><ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><ref refid="oldlist_8h_1a2cf19ba78be6b54f66823d58f34f2a53" kindref="member">iterate</ref><sp/>(list)<sp/><ref refid="oldlist_8h_1a2b10b0ec5bb509492edd218cadb0df04" kindref="member">copy_first</ref><sp/>(list,<sp/>newlist);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>return<sp/>(newlist);</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/><sp/>r<sp/>e<sp/>v<sp/>e<sp/>r<sp/>s<sp/>e<sp/><sp/><sp/>d</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*<sp/><sp/>Create<sp/>a<sp/>new<sp/>list<sp/>with<sp/>the<sp/>elements<sp/>reversed.<sp/>The<sp/>old<sp/>list<sp/>is</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/><sp/>destroyed.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/><ref refid="oldlist_8cpp_1a1316854253b2d15102f4f50d2e7eee02" kindref="member">reverse_d</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>result<sp/>=<sp/><ref refid="oldlist_8cpp_1ade6fcdcd343af2f9b32c79583a5a0637" kindref="member">reverse</ref><sp/>(list);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><ref refid="oldlist_8cpp_1a338e68bdadcbdf51db4c7268c4529409" kindref="member">destroy</ref>(list);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*<sp/><sp/>s<sp/><sp/><sp/>a<sp/>d<sp/>j<sp/>o<sp/>i<sp/>n</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*<sp/><sp/>Adjoin<sp/>an<sp/>element<sp/>to<sp/>an<sp/>assorted<sp/>list.<sp/><sp/>The<sp/>original<sp/>list<sp/>is</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*<sp/><sp/>modified.<sp/><sp/>Returns<sp/>the<sp/>modified<sp/>list.</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/><ref refid="oldlist_8cpp_1aff044482629d5faed80f830b0fcf7513" kindref="member">s_adjoin</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>var_list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*variable,<sp/><ref refid="cutil_8h_1aae643303681fcfa6bbe4166dadd69b2d" kindref="member">int_compare</ref><sp/>compare)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>l;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compare<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>compare<sp/>=<sp/>(<ref refid="cutil_8h_1aae643303681fcfa6bbe4166dadd69b2d" kindref="member">int_compare</ref>)<sp/>strcmp;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>l<sp/>=<sp/>var_list;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="oldlist_8h_1a2cf19ba78be6b54f66823d58f34f2a53" kindref="member">iterate</ref>(l)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(*compare)<sp/>(variable,<sp/><ref refid="oldlist_8h_1a69547be764424f18b0be535400747978" kindref="member">first_node</ref><sp/>(l));</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(var_list);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="oldlist_8cpp_1a32592fff9af11f3c35bd4c4f57733fd2" kindref="member">insert</ref>(l,<sp/>variable);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(var_list);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="oldlist_8cpp_1a1019c2e1108695bb4f33f83e02ee62ad" kindref="member">push_last</ref><sp/>(var_list,<sp/>variable));</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*<sp/><sp/><sp/>s<sp/>e<sp/>a<sp/>r<sp/>c<sp/>h</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*<sp/><sp/>Search<sp/>list,<sp/>return<sp/>NIL_LIST<sp/>if<sp/>not<sp/>found.<sp/>Return<sp/>the<sp/>list<sp/>starting<sp/>from</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>item<sp/>if<sp/>found.<sp/><sp/>The<sp/>compare<sp/>routine<sp/>&quot;is_equal&quot;<sp/>is<sp/>passed<sp/>in<sp/>as</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>third<sp/>paramter<sp/>to<sp/>this<sp/>routine.<sp/><sp/><sp/>If<sp/>the<sp/>value<sp/>NULL<sp/>is<sp/>supplied</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*<sp/><sp/>for<sp/>is_equal,<sp/>the<sp/>is_key<sp/>routine<sp/>will<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/><ref refid="oldlist_8cpp_1a1d8af9328f064a9df6d6f88336dd054e" kindref="member">search</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/><ref refid="cutil_8h_1aae643303681fcfa6bbe4166dadd69b2d" kindref="member">int_compare</ref><sp/>is_equal)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_equal<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>is_equal<sp/>=<sp/><ref refid="oldlist_8cpp_1a401c3dd163e034a46805fc1544d4ed58" kindref="member">is_same</ref>;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><ref refid="oldlist_8h_1a2cf19ba78be6b54f66823d58f34f2a53" kindref="member">iterate</ref><sp/>(list)<sp/>if<sp/>((*is_equal)<sp/>(<ref refid="oldlist_8h_1a69547be764424f18b0be535400747978" kindref="member">first_node</ref><sp/>(list),<sp/>key))</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>return<sp/>(list);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>return<sp/>(<ref refid="oldlist_8h_1ae212530ca629c67513698e988c705a5a" kindref="member">NIL_LIST</ref>);</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><ref refid="structlist__rec" kindref="compound">LIST</ref><sp/><ref refid="oldlist_8cpp_1a1d8af9328f064a9df6d6f88336dd054e" kindref="member">search</ref>(<ref refid="structlist__rec" kindref="compound">LIST</ref><sp/>list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/><ref refid="class_tess_result_callback2" kindref="compound">TessResultCallback2</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*&gt;*<sp/>is_equal)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><ref refid="oldlist_8h_1a2cf19ba78be6b54f66823d58f34f2a53" kindref="member">iterate</ref><sp/>(list)<sp/>if<sp/>((*is_equal).Run(<ref refid="oldlist_8h_1a69547be764424f18b0be535400747978" kindref="member">first_node</ref><sp/>(list),<sp/>key))</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>return<sp/>(list);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>return<sp/>(NIL_LIST);</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/cutil/oldlist.cpp"/>
  </compounddef>
</doxygen>
