<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="nwmain_8h" kind="file">
    <compoundname>nwmain.h</compoundname>
    <includes refid="host_8h" local="yes">host.h</includes>
    <includes refid="params_8h" local="yes">params.h</includes>
    <includes refid="notdll_8h" local="yes">notdll.h</includes>
    <includedby refid="tessedit_8cpp" local="yes">ccmain/tessedit.cpp</includedby>
    <incdepgraph>
      <node id="18809">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="18804">
        <label>stdlib.h</label>
      </node>
      <node id="18799">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="18800" relation="include">
        </childnode>
      </node>
      <node id="18812">
        <label>stddef.h</label>
      </node>
      <node id="18806">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="18798" relation="include">
        </childnode>
      </node>
      <node id="18800">
        <label>limits.h</label>
      </node>
      <node id="18797">
        <label>ccutil/nwmain.h</label>
        <link refid="nwmain.h"/>
        <childnode refid="18798" relation="include">
        </childnode>
        <childnode refid="18801" relation="include">
        </childnode>
        <childnode refid="18813" relation="include">
        </childnode>
      </node>
      <node id="18808">
        <label>string.h</label>
      </node>
      <node id="18805">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="18798" relation="include">
        </childnode>
      </node>
      <node id="18801">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="18802" relation="include">
        </childnode>
        <childnode refid="18803" relation="include">
        </childnode>
        <childnode refid="18810" relation="include">
        </childnode>
      </node>
      <node id="18803">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="18802" relation="include">
        </childnode>
        <childnode refid="18804" relation="include">
        </childnode>
        <childnode refid="18805" relation="include">
        </childnode>
        <childnode refid="18806" relation="include">
        </childnode>
        <childnode refid="18807" relation="include">
        </childnode>
        <childnode refid="18809" relation="include">
        </childnode>
      </node>
      <node id="18811">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="18812" relation="include">
        </childnode>
        <childnode refid="18798" relation="include">
        </childnode>
      </node>
      <node id="18813">
        <label>notdll.h</label>
        <link refid="notdll_8h"/>
      </node>
      <node id="18798">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="18799" relation="include">
        </childnode>
      </node>
      <node id="18802">
        <label>stdio.h</label>
      </node>
      <node id="18810">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="18802" relation="include">
        </childnode>
        <childnode refid="18808" relation="include">
        </childnode>
        <childnode refid="18799" relation="include">
        </childnode>
        <childnode refid="18811" relation="include">
        </childnode>
      </node>
      <node id="18807">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="18802" relation="include">
        </childnode>
        <childnode refid="18808" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="18814">
        <label>ccutil/nwmain.h</label>
        <link refid="nwmain.h"/>
        <childnode refid="18815" relation="include">
        </childnode>
      </node>
      <node id="18815">
        <label>ccmain/tessedit.cpp</label>
        <link refid="tessedit_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="nwmain_8h_1a599a97a750a6cce889edbdf248dd057c" prot="public" static="no">
        <name>DECLARE_MAIN</name>
        <param><defname>ARGC</defname></param>
        <param><defname>ARGV</defname></param>
        <initializer><ref refid="drawfx_8cpp_1a5c09bd38965de6139e4ffd06055bd57e" kindref="member">STRING_VAR</ref>(init_config_file,&quot;config&quot;,&quot;<ref refid="commontraining_8h_1a1630a3dc82a9a7cef07bb6153df9eb9c" kindref="member">Config</ref> file to read on startup&quot;);\
REALLY_DECLARE_MAIN(ARGC,ARGV)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccutil/nwmain.h" line="27" column="9" bodyfile="/Users/makoto/Desktop/trunk/ccutil/nwmain.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="nwmain_8h_1ad67f21790d2680ad7893162f7c00f98f" prot="public" static="no">
        <name>DECLARE_MAIN_CONFIG</name>
        <param><defname>ARGC</defname></param>
        <param><defname>ARGV</defname></param>
        <param><defname>NAME</defname></param>
        <initializer><ref refid="drawfx_8cpp_1a5c09bd38965de6139e4ffd06055bd57e" kindref="member">STRING_VAR</ref>(init_config_file,NAME,&quot;Config file to read on startup&quot;);\
REALLY_DECLARE_MAIN(ARGC,ARGV)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccutil/nwmain.h" line="31" column="9" bodyfile="/Users/makoto/Desktop/trunk/ccutil/nwmain.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="nwmain_8h_1a8d7d179eb9320d0e113df1b82220c942" prot="public" static="no">
        <name>REALLY_DECLARE_MAIN</name>
        <param><defname>ARGC</defname></param>
        <param><defname>ARGV</defname></param>
        <initializer>\
/**********************************************************************\
* parse_args\
*\
* Turn a list of args into a new list of args with each separate\
* whitespace spaced string being an arg.\
**********************************************************************/\
\
<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref>						parse_args(					/*refine arg list*/\
<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref>						argc,						/*no of input args*/\
char						*argv[],					/*input args*/\
char						*arglist[]					/*output args*/\
)\
{\
	<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref>					argcount;					/*converted argc*/\
	char					*testchar;					/*char in option string*/\
	<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref>					arg;						/*current argument*/\
\
	argcount=0;											/*no of options*/\
	for (arg=0;arg&lt;argc;arg++)\
	{\
		testchar=argv[arg];								/*start of arg*/\
		do\
		{\
			while (*testchar\
			&amp;&amp; (*testchar==&apos; &apos; || *testchar==&apos;&quot;&apos; || *testchar==&apos;\n&apos; || *testchar==&apos;\t&apos;))\
				testchar++;								/*skip white space*/\
			if (*testchar)\
			{\
				arglist[argcount++]=testchar;			/*new arg*/\
				do\
				{\
					for (testchar++;*testchar\
					&amp;&amp; *testchar!=&apos; &apos; &amp;&amp; *testchar!=&apos;&quot;&apos; &amp;&amp; *testchar!=&apos;\n&apos; &amp;&amp; *testchar!=&apos;\t&apos;;\
					testchar++);							/*skip to white space*/\
				}\
				while (*testchar==&apos;&quot;&apos; &amp;&amp; testchar[1]!=&apos; &apos; &amp;&amp; testchar[1]!=&apos;\0&apos; &amp;&amp; testchar[1]!=&apos;\n&apos; &amp;&amp; testchar[1]!=&apos;\t&apos;);\
				if (*testchar)\
					*testchar++=&apos;\0&apos;;					/*turn to separate args*/\
			}\
		}\
		while (*testchar);\
	}\
	return argcount;									/*new number of args*/\
}\
\
<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref>						<ref refid="svpaint_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(<ref refid="host_8h_1aba1f582fd0168f3ff9225d8c90fa9eb8" kindref="member">inT32</ref> ARGC,const char* ARGV[])\</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/makoto/Desktop/trunk/ccutil/nwmain.h" line="128" column="9" bodyfile="/Users/makoto/Desktop/trunk/ccutil/nwmain.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nwmain.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Description:<sp/>Tool<sp/>to<sp/>declare<sp/>main,<sp/>making<sp/>windows<sp/>invisible.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ray<sp/>Smith</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Created:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fri<sp/>Sep<sp/>07<sp/>13:27:50<sp/>MDT<sp/>1995</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>(C)<sp/>Copyright<sp/>1995,<sp/>Hewlett-Packard<sp/>Co.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>**<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>**<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>**<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>**<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>**<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>**<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>**<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>**<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>**<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RUNMAIN_H</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RUNMAIN_H</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<ref refid="host_8h" kindref="compound">host.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<ref refid="params_8h" kindref="compound">params.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<ref refid="notdll_8h" kindref="compound">notdll.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//must<sp/>be<sp/>last<sp/>include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="nwmain_8h_1a599a97a750a6cce889edbdf248dd057c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DECLARE_MAIN(ARGC,ARGV)\</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor">STRING_VAR(init_config_file,&quot;config&quot;,&quot;Config<sp/>file<sp/>to<sp/>read<sp/>on<sp/>startup&quot;);\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor">REALLY_DECLARE_MAIN(ARGC,ARGV)</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="nwmain_8h_1ad67f21790d2680ad7893162f7c00f98f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DECLARE_MAIN_CONFIG(ARGC,ARGV,NAME)\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor">STRING_VAR(init_config_file,NAME,&quot;Config<sp/>file<sp/>to<sp/>read<sp/>on<sp/>startup&quot;);\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor">REALLY_DECLARE_MAIN(ARGC,ARGV)</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__UNIX__</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REALLY_DECLARE_MAIN(ARGC,ARGV)\</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="comment">/**********************************************************************\</highlight></codeline>
<codeline lineno="40"><highlight class="comment">*<sp/>parse_args\</highlight></codeline>
<codeline lineno="41"><highlight class="comment">*\</highlight></codeline>
<codeline lineno="42"><highlight class="comment">*<sp/>Turn<sp/>a<sp/>list<sp/>of<sp/>args<sp/>into<sp/>a<sp/>new<sp/>list<sp/>of<sp/>args<sp/>with<sp/>each<sp/>separate\</highlight></codeline>
<codeline lineno="43"><highlight class="comment">*<sp/>whitespace<sp/>spaced<sp/>string<sp/>being<sp/>an<sp/>arg.\</highlight></codeline>
<codeline lineno="44"><highlight class="comment">**********************************************************************/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor">inT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_args(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*refine<sp/>arg<sp/>list*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor">inT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*no<sp/>of<sp/>input<sp/>args*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor">char<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*argv[],<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*input<sp/>args*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor">char<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*arglist[]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*output<sp/>args*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor">)\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argcount;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*converted<sp/>argc*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>char<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*testchar;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*char<sp/>in<sp/>option<sp/>string*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*current<sp/>argument*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>argcount=0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*no<sp/>of<sp/>options*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(arg=0;arg&lt;argc;arg++)\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testchar=argv[arg];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*start<sp/>of<sp/>arg*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(*testchar\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(*testchar==&apos;<sp/>&apos;<sp/>||<sp/>*testchar==&apos;&quot;&apos;<sp/>||<sp/>*testchar==&apos;\n&apos;<sp/>||<sp/>*testchar==&apos;\t&apos;))\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testchar++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*skip<sp/>white<sp/>space*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*testchar)\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arglist[argcount++]=testchar;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*new<sp/>arg*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(testchar++;*testchar\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>*testchar!=&apos;<sp/>&apos;<sp/>&amp;&amp;<sp/>*testchar!=&apos;&quot;&apos;<sp/>&amp;&amp;<sp/>*testchar!=&apos;\n&apos;<sp/>&amp;&amp;<sp/>*testchar!=&apos;\t&apos;;\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testchar++);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*skip<sp/>to<sp/>white<sp/>space*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(*testchar==&apos;&quot;&apos;<sp/>&amp;&amp;<sp/>testchar[1]!=&apos;<sp/>&apos;<sp/>&amp;&amp;<sp/>testchar[1]!=&apos;\0&apos;<sp/>&amp;&amp;<sp/>testchar[1]!=&apos;\n&apos;<sp/>&amp;&amp;<sp/>testchar[1]!=&apos;\t&apos;);\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*testchar)\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*testchar++=&apos;\0&apos;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*turn<sp/>to<sp/>separate<sp/>args*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(*testchar);\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>argcount;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*new<sp/>number<sp/>of<sp/>args*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor">}\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor">inT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global_exit_code;\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor">inT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_main(inT32,const<sp/>char**);\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor">inT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_main(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*the<sp/>main<sp/>thread*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor">CWinApp*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theapp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*arguments*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor">)\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>char<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**argv;\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>char<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*argsin[2];\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argc;\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit_code;\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>argsin[0]=strdup(theapp-&gt;m_pszExeName);\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>argsin[1]=strdup(theapp-&gt;m_lpCmdLine);\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="comment">/*allocate<sp/>memory<sp/>for<sp/>the<sp/>args.<sp/>There<sp/>can<sp/>never<sp/>be<sp/>more<sp/>than<sp/>half*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="comment">/*the<sp/>total<sp/>number<sp/>of<sp/>characters<sp/>in<sp/>the<sp/>arguments.*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>argv=(char**)malloc(((strlen(argsin[0])+strlen(argsin[1]))/2+1)*sizeof(char*));\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"></highlight><highlight class="comment">/*now<sp/>construct<sp/>argv<sp/>as<sp/>it<sp/>should<sp/>be<sp/>for<sp/>C.*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>argc=parse_args(2,argsin,argv);\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"></highlight><highlight class="comment">/*call<sp/>main(argc,argv)<sp/>here*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>exit_code=real_main(argc,(const<sp/>char<sp/>**)argv);\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="comment">/*now<sp/>get<sp/>rid<sp/>of<sp/>the<sp/>main<sp/>app<sp/>window*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(theapp!=NULL<sp/>&amp;&amp;<sp/>theapp-&gt;m_pMainWnd!=NULL)\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostMessage(theapp-&gt;m_pMainWnd-&gt;m_hWnd,WM_QUIT,0,0);\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>free(argsin[0]);\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>free(argsin[1]);\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>free(argv);\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>global_exit_code=exit_code;\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>exit_code;\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor">}\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor">inT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_main(inT32<sp/>ARGC,const<sp/>char*<sp/>ARGV[])\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="nwmain_8h_1a8d7d179eb9320d0e113df1b82220c942" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REALLY_DECLARE_MAIN(ARGC,ARGV)\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"></highlight><highlight class="comment">/**********************************************************************\</highlight></codeline>
<codeline lineno="126"><highlight class="comment">*<sp/>parse_args\</highlight></codeline>
<codeline lineno="127"><highlight class="comment">*\</highlight></codeline>
<codeline lineno="128"><highlight class="comment">*<sp/>Turn<sp/>a<sp/>list<sp/>of<sp/>args<sp/>into<sp/>a<sp/>new<sp/>list<sp/>of<sp/>args<sp/>with<sp/>each<sp/>separate\</highlight></codeline>
<codeline lineno="129"><highlight class="comment">*<sp/>whitespace<sp/>spaced<sp/>string<sp/>being<sp/>an<sp/>arg.\</highlight></codeline>
<codeline lineno="130"><highlight class="comment">**********************************************************************/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor">inT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_args(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*refine<sp/>arg<sp/>list*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor">inT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*no<sp/>of<sp/>input<sp/>args*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor">char<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*argv[],<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*input<sp/>args*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor">char<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*arglist[]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*output<sp/>args*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor">)\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argcount;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*converted<sp/>argc*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>char<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*testchar;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*char<sp/>in<sp/>option<sp/>string*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*current<sp/>argument*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>argcount=0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*no<sp/>of<sp/>options*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(arg=0;arg&lt;argc;arg++)\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testchar=argv[arg];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*start<sp/>of<sp/>arg*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(*testchar\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(*testchar==&apos;<sp/>&apos;<sp/>||<sp/>*testchar==&apos;&quot;&apos;<sp/>||<sp/>*testchar==&apos;\n&apos;<sp/>||<sp/>*testchar==&apos;\t&apos;))\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testchar++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*skip<sp/>white<sp/>space*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*testchar)\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arglist[argcount++]=testchar;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*new<sp/>arg*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(testchar++;*testchar\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>*testchar!=&apos;<sp/>&apos;<sp/>&amp;&amp;<sp/>*testchar!=&apos;&quot;&apos;<sp/>&amp;&amp;<sp/>*testchar!=&apos;\n&apos;<sp/>&amp;&amp;<sp/>*testchar!=&apos;\t&apos;;\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testchar++);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*skip<sp/>to<sp/>white<sp/>space*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(*testchar==&apos;&quot;&apos;<sp/>&amp;&amp;<sp/>testchar[1]!=&apos;<sp/>&apos;<sp/>&amp;&amp;<sp/>testchar[1]!=&apos;\0&apos;<sp/>&amp;&amp;<sp/>testchar[1]!=&apos;\n&apos;<sp/>&amp;&amp;<sp/>testchar[1]!=&apos;\t&apos;);\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*testchar)\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*testchar++=&apos;\0&apos;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*turn<sp/>to<sp/>separate<sp/>args*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(*testchar);\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>argcount;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*new<sp/>number<sp/>of<sp/>args*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor">}\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor">inT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>main(inT32<sp/>ARGC,const<sp/>char*<sp/>ARGV[])\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#error<sp/>&quot;NOT<sp/>allowed<sp/>to<sp/>include<sp/>nwmain.h<sp/>or<sp/>runmain.h<sp/>twice!!&quot;</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/ccutil/nwmain.h"/>
  </compounddef>
</doxygen>
