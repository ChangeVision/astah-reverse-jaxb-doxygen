<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="cube__line__segmenter_8cpp" kind="file">
    <compoundname>cube_line_segmenter.cpp</compoundname>
    <includes refid="cube__line__segmenter_8h" local="yes">cube_line_segmenter.h</includes>
    <includes refid="ndminx_8h" local="yes">ndminx.h</includes>
    <incdepgraph>
      <node id="29962">
        <label>cube_reco_context.h</label>
        <link refid="cube__reco__context_8h"/>
        <childnode refid="29963" relation="include">
        </childnode>
        <childnode refid="29964" relation="include">
        </childnode>
        <childnode refid="29970" relation="include">
        </childnode>
        <childnode refid="30008" relation="include">
        </childnode>
        <childnode refid="30009" relation="include">
        </childnode>
        <childnode refid="29974" relation="include">
        </childnode>
        <childnode refid="30010" relation="include">
        </childnode>
        <childnode refid="30011" relation="include">
        </childnode>
        <childnode refid="30012" relation="include">
        </childnode>
      </node>
      <node id="29989">
        <label>ndminx.h</label>
        <link refid="ndminx_8h"/>
      </node>
      <node id="30002">
        <label>const.h</label>
        <link refid="const_8h"/>
      </node>
      <node id="29985">
        <label>stdlib.h</label>
      </node>
      <node id="29970">
        <label>lang_model.h</label>
        <link refid="lang__model_8h"/>
        <childnode refid="29971" relation="include">
        </childnode>
        <childnode refid="29998" relation="include">
        </childnode>
        <childnode refid="29974" relation="include">
        </childnode>
        <childnode refid="29973" relation="include">
        </childnode>
      </node>
      <node id="29980">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="29981" relation="include">
        </childnode>
      </node>
      <node id="29966">
        <label>neuron.h</label>
        <link refid="neuron_8h"/>
        <childnode refid="29967" relation="include">
        </childnode>
        <childnode refid="29965" relation="include">
        </childnode>
      </node>
      <node id="29961">
        <label>cube_line_segmenter.h</label>
        <link refid="cube__line__segmenter_8h"/>
        <childnode refid="29962" relation="include">
        </childnode>
        <childnode refid="30001" relation="include">
        </childnode>
      </node>
      <node id="30001">
        <label>allheaders.h</label>
      </node>
      <node id="29964">
        <label>neural_net.h</label>
        <link refid="neural__net_8h"/>
        <childnode refid="29963" relation="include">
        </childnode>
        <childnode refid="29965" relation="include">
        </childnode>
        <childnode refid="29966" relation="include">
        </childnode>
        <childnode refid="29968" relation="include">
        </childnode>
      </node>
      <node id="29963">
        <label>string</label>
      </node>
      <node id="29992">
        <label>stddef.h</label>
      </node>
      <node id="29995">
        <label>memory.h</label>
      </node>
      <node id="30009">
        <label>feature_base.h</label>
        <link refid="feature__base_8h"/>
        <childnode refid="30003" relation="include">
        </childnode>
        <childnode refid="29973" relation="include">
        </childnode>
      </node>
      <node id="29973">
        <label>tuning_params.h</label>
        <link refid="tuning__params_8h"/>
        <childnode refid="29963" relation="include">
        </childnode>
      </node>
      <node id="29987">
        <label>errcode.h</label>
        <link refid="errcode_8h"/>
        <childnode refid="29979" relation="include">
        </childnode>
      </node>
      <node id="30011">
        <label>char_bigrams.h</label>
        <link refid="char__bigrams_8h"/>
        <childnode refid="29963" relation="include">
        </childnode>
        <childnode refid="29974" relation="include">
        </childnode>
      </node>
      <node id="30008">
        <label>classifier_base.h</label>
        <link refid="classifier__base_8h"/>
        <childnode refid="29963" relation="include">
        </childnode>
        <childnode refid="30003" relation="include">
        </childnode>
        <childnode refid="29998" relation="include">
        </childnode>
        <childnode refid="29974" relation="include">
        </childnode>
        <childnode refid="30009" relation="include">
        </childnode>
        <childnode refid="29970" relation="include">
        </childnode>
        <childnode refid="29973" relation="include">
        </childnode>
      </node>
      <node id="29981">
        <label>limits.h</label>
      </node>
      <node id="30003">
        <label>char_samp.h</label>
        <link refid="char__samp_8h"/>
        <childnode refid="29985" relation="include">
        </childnode>
        <childnode refid="29969" relation="include">
        </childnode>
        <childnode refid="29963" relation="include">
        </childnode>
        <childnode refid="30004" relation="include">
        </childnode>
        <childnode refid="29977" relation="include">
        </childnode>
      </node>
      <node id="29974">
        <label>char_set.h</label>
        <link refid="char__set_8h"/>
        <childnode refid="29975" relation="include">
        </childnode>
        <childnode refid="29963" relation="include">
        </childnode>
        <childnode refid="29976" relation="include">
        </childnode>
        <childnode refid="29977" relation="include">
        </childnode>
        <childnode refid="29978" relation="include">
        </childnode>
        <childnode refid="29993" relation="include">
        </childnode>
        <childnode refid="29997" relation="include">
        </childnode>
      </node>
      <node id="29975">
        <label>string.h</label>
      </node>
      <node id="29996">
        <label>unicharmap.h</label>
        <link refid="unicharmap_8h"/>
        <childnode refid="29994" relation="include">
        </childnode>
      </node>
      <node id="29994">
        <label>unichar.h</label>
        <link refid="unichar_8h"/>
        <childnode refid="29995" relation="include">
        </childnode>
        <childnode refid="29975" relation="include">
        </childnode>
      </node>
      <node id="30000">
        <label>cube_utils.h</label>
        <link refid="cube__utils_8h"/>
        <childnode refid="29965" relation="include">
        </childnode>
        <childnode refid="29963" relation="include">
        </childnode>
        <childnode refid="30001" relation="include">
        </childnode>
        <childnode refid="30002" relation="include">
        </childnode>
        <childnode refid="29974" relation="include">
        </childnode>
        <childnode refid="30003" relation="include">
        </childnode>
        <childnode refid="30007" relation="include">
        </childnode>
      </node>
      <node id="29965">
        <label>vector</label>
      </node>
      <node id="29986">
        <label>tesscallback.h</label>
        <link refid="tesscallback_8h"/>
        <childnode refid="29979" relation="include">
        </childnode>
      </node>
      <node id="29960">
        <label>cube/cube_line_segmenter.cpp</label>
        <link refid="cube_line_segmenter.cpp"/>
        <childnode refid="29961" relation="include">
        </childnode>
        <childnode refid="29989" relation="include">
        </childnode>
      </node>
      <node id="29967">
        <label>math.h</label>
      </node>
      <node id="29971">
        <label>lang_mod_edge.h</label>
        <link refid="lang__mod__edge_8h"/>
        <childnode refid="29972" relation="include">
        </childnode>
        <childnode refid="29974" relation="include">
        </childnode>
      </node>
      <node id="29983">
        <label>params.h</label>
        <link refid="params_8h"/>
        <childnode refid="29969" relation="include">
        </childnode>
        <childnode refid="29984" relation="include">
        </childnode>
        <childnode refid="29990" relation="include">
        </childnode>
      </node>
      <node id="29984">
        <label>genericvector.h</label>
        <link refid="genericvector_8h"/>
        <childnode refid="29969" relation="include">
        </childnode>
        <childnode refid="29985" relation="include">
        </childnode>
        <childnode refid="29986" relation="include">
        </childnode>
        <childnode refid="29987" relation="include">
        </childnode>
        <childnode refid="29988" relation="include">
        </childnode>
        <childnode refid="29989" relation="include">
        </childnode>
      </node>
      <node id="29991">
        <label>memry.h</label>
        <link refid="memry_8h"/>
        <childnode refid="29992" relation="include">
        </childnode>
        <childnode refid="29979" relation="include">
        </childnode>
      </node>
      <node id="30004">
        <label>bmp_8.h</label>
        <link refid="bmp__8_8h"/>
        <childnode refid="29985" relation="include">
        </childnode>
        <childnode refid="29969" relation="include">
        </childnode>
        <childnode refid="30005" relation="include">
        </childnode>
        <childnode refid="30006" relation="include">
        </childnode>
      </node>
      <node id="30005">
        <label>con_comp.h</label>
        <link refid="con__comp_8h"/>
      </node>
      <node id="30012">
        <label>word_unigrams.h</label>
        <link refid="word__unigrams_8h"/>
        <childnode refid="29963" relation="include">
        </childnode>
        <childnode refid="29974" relation="include">
        </childnode>
        <childnode refid="29970" relation="include">
        </childnode>
      </node>
      <node id="29972">
        <label>cube_tuning_params.h</label>
        <link refid="cube__tuning__params_8h"/>
        <childnode refid="29963" relation="include">
        </childnode>
        <childnode refid="29973" relation="include">
        </childnode>
      </node>
      <node id="29993">
        <label>unicharset.h</label>
        <link refid="unicharset_8h"/>
        <childnode refid="29987" relation="include">
        </childnode>
        <childnode refid="29988" relation="include">
        </childnode>
        <childnode refid="29990" relation="include">
        </childnode>
        <childnode refid="29986" relation="include">
        </childnode>
        <childnode refid="29994" relation="include">
        </childnode>
        <childnode refid="29996" relation="include">
        </childnode>
      </node>
      <node id="29998">
        <label>char_altlist.h</label>
        <link refid="char__altlist_8h"/>
        <childnode refid="29999" relation="include">
        </childnode>
        <childnode refid="29974" relation="include">
        </childnode>
      </node>
      <node id="29997">
        <label>cube_const.h</label>
        <link refid="cube__const_8h"/>
      </node>
      <node id="30007">
        <label>img.h</label>
        <link refid="img_8h"/>
        <childnode refid="29991" relation="include">
        </childnode>
      </node>
      <node id="29982">
        <label>tprintf.h</label>
        <link refid="tprintf_8h"/>
        <childnode refid="29983" relation="include">
        </childnode>
      </node>
      <node id="29976">
        <label>algorithm</label>
      </node>
      <node id="29979">
        <label>host.h</label>
        <link refid="host_8h"/>
        <childnode refid="29980" relation="include">
        </childnode>
      </node>
      <node id="30010">
        <label>word_size_model.h</label>
        <link refid="word__size__model_8h"/>
        <childnode refid="29963" relation="include">
        </childnode>
        <childnode refid="30003" relation="include">
        </childnode>
        <childnode refid="29974" relation="include">
        </childnode>
      </node>
      <node id="30006">
        <label>cached_file.h</label>
        <link refid="cached__file_8h"/>
        <childnode refid="29969" relation="include">
        </childnode>
        <childnode refid="29963" relation="include">
        </childnode>
      </node>
      <node id="29969">
        <label>stdio.h</label>
      </node>
      <node id="29968">
        <label>input_file_buffer.h</label>
        <link refid="input__file__buffer_8h"/>
        <childnode refid="29969" relation="include">
        </childnode>
        <childnode refid="29963" relation="include">
        </childnode>
      </node>
      <node id="29977">
        <label>string_32.h</label>
        <link refid="string__32_8h"/>
        <childnode refid="29975" relation="include">
        </childnode>
        <childnode refid="29963" relation="include">
        </childnode>
        <childnode refid="29976" relation="include">
        </childnode>
        <childnode refid="29965" relation="include">
        </childnode>
      </node>
      <node id="29978">
        <label>tessdatamanager.h</label>
        <link refid="tessdatamanager_8h"/>
        <childnode refid="29969" relation="include">
        </childnode>
        <childnode refid="29979" relation="include">
        </childnode>
        <childnode refid="29982" relation="include">
        </childnode>
      </node>
      <node id="29990">
        <label>strngs.h</label>
        <link refid="strngs_8h"/>
        <childnode refid="29969" relation="include">
        </childnode>
        <childnode refid="29975" relation="include">
        </childnode>
        <childnode refid="29980" relation="include">
        </childnode>
        <childnode refid="29991" relation="include">
        </childnode>
      </node>
      <node id="29999">
        <label>altlist.h</label>
        <link refid="altlist_8h"/>
        <childnode refid="29967" relation="include">
        </childnode>
        <childnode refid="30000" relation="include">
        </childnode>
      </node>
      <node id="29988">
        <label>helpers.h</label>
        <link refid="helpers_8h"/>
        <childnode refid="29969" relation="include">
        </childnode>
        <childnode refid="29975" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetesseract">tesseract</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cube_page_segmenter.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Description:<sp/>Implementation<sp/>of<sp/>the<sp/>Cube<sp/>Page<sp/>Segmenter<sp/>Class</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Author:<sp/><sp/><sp/><sp/>Ahmad<sp/>Abdulkader</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Created:<sp/><sp/><sp/>2007</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>(C)<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>**<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>**<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>**<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>**<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>**<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>**<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>**<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>**<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>**<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cube__line__segmenter_8h" kindref="compound">cube_line_segmenter.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ndminx_8h" kindref="compound">ndminx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesseract-c__api-demo_1afed58feacb84df2de88bdd613cfdba6d" kindref="member">tesseract</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constants<sp/>that<sp/>worked<sp/>for<sp/>Arabic<sp/>page<sp/>segmenter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CubeLineSegmenter::kLineSepMorphMinHgt<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CubeLineSegmenter::kHgtBins<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CubeLineSegmenter::kMaxValidLineRatio<sp/>=<sp/>3.2;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CubeLineSegmenter::kMaxConnCompHgt<sp/>=<sp/>150;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CubeLineSegmenter::kMaxConnCompWid<sp/>=<sp/>500;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CubeLineSegmenter::kMaxHorzAspectRatio<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CubeLineSegmenter::kMaxVertAspectRatio<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CubeLineSegmenter::kMinWid<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CubeLineSegmenter::kMinHgt<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>CubeLineSegmenter::kMinValidLineHgtRatio<sp/>=<sp/>2.5;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="classtesseract_1_1_cube_line_segmenter_1a4eeec8dfa99e6155f609de8ae9b3e726" kindref="member">CubeLineSegmenter::CubeLineSegmenter</ref>(CubeRecoContext<sp/>*cntxt,<sp/>Pix<sp/>*img)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>cntxt_<sp/>=<sp/>cntxt;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>orig_img_<sp/>=<sp/>img;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>img_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>lines_pixa_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>init_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>line_cnt_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>columns_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>con_comps_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>est_alef_hgt_<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>est_dot_hgt_<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="classtesseract_1_1_cube_line_segmenter_1ac1873f1cd7f873c789c5c59bf3fd9f0b" kindref="member">CubeLineSegmenter::~CubeLineSegmenter</ref>()<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(img_<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>pixDestroy(&amp;img_);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>img_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines_pixa_<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>pixaDestroy(&amp;lines_pixa_);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>lines_pixa_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(con_comps_<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>pixaDestroy(&amp;con_comps_);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>con_comps_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(columns_<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>pixaaDestroy(&amp;columns_);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>columns_<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compute<sp/>validity<sp/>ratio<sp/>for<sp/>a<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CubeLineSegmenter::ValidityRatio(Pix<sp/>*line_mask_pix,<sp/>Box<sp/>*line_box)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line_box-&gt;h<sp/>/<sp/>est_alef_hgt_;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>validate<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CubeLineSegmenter::ValidLine(Pix<sp/>*line_mask_pix,<sp/>Box<sp/>*line_box)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>validity_ratio<sp/>=<sp/>ValidityRatio(line_mask_pix,<sp/>line_box);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>validity_ratio<sp/>&lt;<sp/>kMaxValidLineRatio;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>perform<sp/>a<sp/>vertical<sp/>Closing<sp/>with<sp/>the<sp/>specified<sp/>threshold</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returning<sp/>the<sp/>resulting<sp/>conn<sp/>comps<sp/>as<sp/>a<sp/>pixa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">Pixa<sp/>*CubeLineSegmenter::VerticalClosing(Pix<sp/>*pix,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold,<sp/>Boxa<sp/>**boxa)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sequence_str[16];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>the<sp/>morphology</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>sprintf(sequence_str,<sp/></highlight><highlight class="stringliteral">&quot;c100.%d&quot;</highlight><highlight class="normal">,<sp/>threshold);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>Pix<sp/>*morphed_pix<sp/>=<sp/>pixMorphCompSequence(pix,<sp/>sequence_str,<sp/>0);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(morphed_pix<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>resulting<sp/>lines<sp/>by<sp/>computing<sp/>concomps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>Pixa<sp/>*pixac;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>(*boxa)<sp/>=<sp/>pixConnComp(morphed_pix,<sp/>&amp;pixac,<sp/>8);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;morphed_pix);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*boxa)<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pixac;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>a<sp/>desperate<sp/>attempt<sp/>at<sp/>cracking<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">Pixa<sp/>*CubeLineSegmenter::CrackLine(Pix<sp/>*cracked_line_pix,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Box<sp/>*cracked_line_box,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_cnt)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>lines<sp/>pixa<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>Pixa<sp/>**lines_pixa<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Pixa*[line_cnt];</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines_pixa<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>memset(lines_pixa,<sp/>0,<sp/>line_cnt<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*lines_pixa));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>line<sp/>conn<sp/>comps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>Pixa<sp/>*line_con_comps_pix;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>Boxa<sp/>*line_con_comps<sp/>=<sp/>ComputeLineConComps(cracked_line_pix,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>cracked_line_box,<sp/>&amp;line_con_comps_pix);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line_con_comps<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]lines_pixa;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assign<sp/>each<sp/>conn<sp/>comp<sp/>to<sp/>the<sp/>a<sp/>line<sp/>based<sp/>on<sp/>its<sp/>centroid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>con<sp/>=<sp/>0;<sp/>con<sp/>&lt;<sp/>line_con_comps-&gt;n;<sp/>con++)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>Box<sp/>*con_box<sp/>=<sp/>line_con_comps-&gt;box[con];</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>Pix<sp/>*con_pix<sp/>=<sp/>line_con_comps_pix-&gt;pix[con];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mid_y<sp/>=<sp/>(con_box-&gt;y<sp/>-<sp/>cracked_line_box-&gt;y)<sp/>+<sp/>(con_box-&gt;h<sp/>/<sp/>2),</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line_idx<sp/>=<sp/><ref refid="ndminx_8h_1a74e75242132eaabbc1c512488a135926" kindref="member">MIN</ref>(line_cnt<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mid_y<sp/>*<sp/>line_cnt<sp/>/<sp/>cracked_line_box-&gt;h));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>line<sp/>if<sp/>it<sp/>has<sp/>not<sp/>been<sp/>created?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines_pixa[line_idx]<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lines_pixa[line_idx]<sp/>=<sp/>pixaCreate(line_con_comps-&gt;n);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines_pixa[line_idx]<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]lines_pixa;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boxaDestroy(&amp;line_con_comps);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixaDestroy(&amp;line_con_comps_pix);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>concomp<sp/>to<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixaAddPix(lines_pixa[line_idx],<sp/>con_pix,<sp/>L_CLONE)<sp/>!=<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixaAddBox(lines_pixa[line_idx],<sp/>con_box,<sp/>L_CLONE))<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]lines_pixa;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boxaDestroy(&amp;line_con_comps);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixaDestroy(&amp;line_con_comps_pix);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>lines<sp/>pixa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>Pixa<sp/>*lines<sp/>=<sp/>pixaCreate(line_cnt);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>and<sp/>check<sp/>the<sp/>validity<sp/>of<sp/>the<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line<sp/>=<sp/>0;<sp/>line<sp/>&lt;<sp/>line_cnt;<sp/>line++)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>Pixa<sp/>*line_pixa<sp/>=<sp/>lines_pixa[line];</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>invalid<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line_pixa<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>the<sp/>pix,<sp/>check<sp/>the<sp/>validity<sp/>of<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>lines<sp/>pixa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>Box<sp/>*line_box;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>Pix<sp/>*line_pix<sp/>=<sp/>Pixa2Pix(line_pixa,<sp/>&amp;line_box);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line_pix<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line_box<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValidLine(line_pix,<sp/>line_box)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixaAddPix(lines,<sp/>line_pix,<sp/>L_INSERT)<sp/>!=<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixaAddBox(lines,<sp/>line_box,<sp/>L_INSERT)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line_pix<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixDestroy(&amp;line_pix);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line_box<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boxDestroy(&amp;line_box);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line<sp/>=<sp/>0;<sp/>line<sp/>&lt;<sp/>line_cnt;<sp/>line++)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines_pixa[line]<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixaDestroy(&amp;lines_pixa[line]);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]lines_pixa;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>boxaDestroy(&amp;line_con_comps);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>pixaDestroy(&amp;line_con_comps_pix);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>pixaDestroy(&amp;lines);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>lines<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lines;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>a<sp/>desperate<sp/>attempt<sp/>at<sp/>cracking<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">Pixa<sp/>*CubeLineSegmenter::CrackLine(Pix<sp/>*cracked_line_pix,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Box<sp/>*cracked_line_box)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>estimate<sp/>max<sp/>line<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_line_cnt<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((cracked_line_box-&gt;h<sp/>/</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>est_alef_hgt_)<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_line_cnt<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_cnt<sp/>=<sp/>2;<sp/>line_cnt<sp/>&lt;<sp/>max_line_cnt;<sp/>line_cnt++)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>Pixa<sp/>*lines<sp/>=<sp/>CrackLine(cracked_line_pix,<sp/>cracked_line_box,<sp/>line_cnt);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lines;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>split<sp/>a<sp/>line<sp/>continously<sp/>until<sp/>valid<sp/>or<sp/>fail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">Pixa<sp/>*CubeLineSegmenter::SplitLine(Pix<sp/>*line_mask_pix,<sp/>Box<sp/>*line_box)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clone<sp/>the<sp/>line<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>Pix<sp/>*line_pix<sp/>=<sp/>pixClone(line_mask_pix);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line_pix<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>AND<sp/>with<sp/>the<sp/>image<sp/>to<sp/>get<sp/>the<sp/>actual<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>pixRasterop(line_pix,<sp/>0,<sp/>0,<sp/>line_pix-&gt;w,<sp/>line_pix-&gt;h,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>PIX_SRC<sp/>&amp;<sp/>PIX_DST,<sp/>img_,<sp/>line_box-&gt;x,<sp/>line_box-&gt;y);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>continue<sp/>to<sp/>do<sp/>rasterop<sp/>morphology<sp/>on<sp/>the<sp/>line<sp/>until</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>splits<sp/>to<sp/>valid<sp/>lines<sp/>or<sp/>we<sp/>fail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>morph_hgt<sp/>=<sp/>kLineSepMorphMinHgt<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>best_threshold<sp/>=<sp/>kLineSepMorphMinHgt<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>max_valid_portion<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>Boxa<sp/>*boxa;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>Pixa<sp/>*pixac;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>pixac<sp/>=<sp/>VerticalClosing(line_pix,<sp/>morph_hgt,<sp/>&amp;boxa);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>box<sp/>offset<sp/>to<sp/>all<sp/>the<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>check<sp/>for<sp/>the<sp/>validity<sp/>of<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valid_line_cnt<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valid_portion<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>0;<sp/>line<sp/>&lt;<sp/>pixac-&gt;n;<sp/>line++)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boxa-&gt;box[line]-&gt;x<sp/>+=<sp/>line_box-&gt;x;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boxa-&gt;box[line]-&gt;y<sp/>+=<sp/>line_box-&gt;y;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ValidLine(pixac-&gt;pix[line],<sp/>boxa-&gt;box[line])<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>count<sp/>valid<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_line_cnt++;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>valid<sp/>portions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_portion<sp/>+=<sp/>boxa-&gt;box[line]-&gt;h;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>the<sp/>lines<sp/>are<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid_line_cnt<sp/>==<sp/>pixac-&gt;n)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boxaDestroy(&amp;boxa);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixDestroy(&amp;line_pix);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pixac;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>larger<sp/>valid<sp/>portion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid_portion<sp/>&gt;<sp/>max_valid_portion)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_valid_portion<sp/>=<sp/>valid_portion;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>best_threshold<sp/>=<sp/>morph_hgt;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>boxaDestroy(&amp;boxa);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>pixaDestroy(&amp;pixac);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>morph_hgt--;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(morph_hgt<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>to<sp/>break<sp/>into<sp/>valid<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>attempt<sp/>to<sp/>crack<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>pixac<sp/>=<sp/>CrackLine(line_pix,<sp/>line_box);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixac<sp/>!=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>pixDestroy(&amp;line_pix);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pixac;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>leverage<sp/>any<sp/>of<sp/>the<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>did<sp/>the<sp/>best<sp/>threshold<sp/>yield<sp/>a<sp/>non<sp/>zero<sp/>valid<sp/>portion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_valid_portion<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>this<sp/>threshold<sp/>to<sp/>break<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>pixac<sp/>=<sp/>VerticalClosing(line_pix,<sp/>best_threshold,<sp/>&amp;boxa);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>box<sp/>offset<sp/>to<sp/>all<sp/>the<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>check<sp/>for<sp/>the<sp/>validity<sp/>of<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line<sp/>=<sp/>0;<sp/>line<sp/>&lt;<sp/>pixac-&gt;n;<sp/>line++)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boxa-&gt;box[line]-&gt;x<sp/>+=<sp/>line_box-&gt;x;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boxa-&gt;box[line]-&gt;y<sp/>+=<sp/>line_box-&gt;y;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>invalid<sp/>lines<sp/>from<sp/>the<sp/>pixa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ValidLine(pixac-&gt;pix[line],<sp/>boxa-&gt;box[line])<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixaRemovePix(pixac,<sp/>line);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line--;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>boxaDestroy(&amp;boxa);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>pixDestroy(&amp;line_pix);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pixac;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>resort:<sp/>attempt<sp/>to<sp/>crack<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;line_pix);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Checks<sp/>of<sp/>a<sp/>line<sp/>is<sp/>too<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CubeLineSegmenter::SmallLine(Box<sp/>*line_box)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line_box-&gt;h<sp/>&lt;=<sp/>(kMinValidLineHgtRatio<sp/>*<sp/>est_dot_hgt_);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>connected<sp/>components<sp/>in<sp/>a<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">Boxa<sp/>*<sp/>CubeLineSegmenter::ComputeLineConComps(Pix<sp/>*line_mask_pix,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Box<sp/>*line_box,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pixa<sp/>**con_comps_pixa)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clone<sp/>the<sp/>line<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>Pix<sp/>*line_pix<sp/>=<sp/>pixClone(line_mask_pix);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line_pix<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>AND<sp/>with<sp/>the<sp/>image<sp/>to<sp/>get<sp/>the<sp/>actual<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>pixRasterop(line_pix,<sp/>0,<sp/>0,<sp/>line_pix-&gt;w,<sp/>line_pix-&gt;h,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>PIX_SRC<sp/>&amp;<sp/>PIX_DST,<sp/>img_,<sp/>line_box-&gt;x,<sp/>line_box-&gt;y);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>connected<sp/>components<sp/>of<sp/>the<sp/>line<sp/>to<sp/>be<sp/>merged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>Boxa<sp/>*line_con_comps<sp/>=<sp/>pixConnComp(line_pix,<sp/>con_comps_pixa,<sp/>8);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;line_pix);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>offset<sp/>boxes<sp/>by<sp/>the<sp/>bbox<sp/>of<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>con<sp/>=<sp/>0;<sp/>con<sp/>&lt;<sp/>line_con_comps-&gt;n;<sp/>con++)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>line_con_comps-&gt;box[con]-&gt;x<sp/>+=<sp/>line_box-&gt;x;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>line_con_comps-&gt;box[con]-&gt;y<sp/>+=<sp/>line_box-&gt;y;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line_con_comps;</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>union<sp/>of<sp/>two<sp/>arbitrary<sp/>pix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">Pix<sp/>*CubeLineSegmenter::PixUnion(Pix<sp/>*dest_pix,<sp/>Box<sp/>*dest_box,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>Pix<sp/>*src_pix,<sp/>Box<sp/>*src_box)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>dimensions<sp/>of<sp/>union<sp/>rect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>BOX<sp/>*union_box<sp/>=<sp/>boxBoundingRegion(src_box,<sp/>dest_box);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>union<sp/>pix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>Pix<sp/>*union_pix<sp/>=<sp/>pixCreate(union_box-&gt;w,<sp/>union_box-&gt;h,<sp/>src_pix-&gt;d);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(union_pix<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>blt<sp/>the<sp/>src<sp/>and<sp/>dest<sp/>pix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>pixRasterop(union_pix,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>src_box-&gt;x<sp/>-<sp/>union_box-&gt;x,<sp/>src_box-&gt;y<sp/>-<sp/>union_box-&gt;y,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>src_box-&gt;w,<sp/>src_box-&gt;h,<sp/>PIX_SRC<sp/>|<sp/>PIX_DST,<sp/>src_pix,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>pixRasterop(union_pix,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_box-&gt;x<sp/>-<sp/>union_box-&gt;x,<sp/>dest_box-&gt;y<sp/>-<sp/>union_box-&gt;y,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_box-&gt;w,<sp/>dest_box-&gt;h,<sp/>PIX_SRC<sp/>|<sp/>PIX_DST,<sp/>dest_pix,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>the<sp/>dest_box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>*dest_box<sp/>=<sp/>*union_box;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>boxDestroy(&amp;union_box);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>union_pix;</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>union<sp/>of<sp/>a<sp/>number<sp/>of<sp/>arbitrary<sp/>pix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">Pix<sp/>*CubeLineSegmenter::Pixa2Pix(Pixa<sp/>*pixa,<sp/>Box<sp/>**dest_box,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_pix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pix_cnt)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>union_box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_x<sp/>=<sp/>INT_MAX,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>max_x<sp/>=<sp/>INT_MIN,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>min_y<sp/>=<sp/>INT_MAX,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>max_y<sp/>=<sp/>INT_MIN;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pix_idx<sp/>=<sp/>start_pix;<sp/>pix_idx<sp/>&lt;<sp/>(start_pix<sp/>+<sp/>pix_cnt);<sp/>pix_idx++)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>Box<sp/>*pix_box<sp/>=<sp/>pixa-&gt;boxa-&gt;box[pix_idx];</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="helpers_8h_1a6eb00eb9bc5ed195953f334971c462ae" kindref="member">UpdateRange</ref>(pix_box-&gt;x,<sp/>pix_box-&gt;x<sp/>+<sp/>pix_box-&gt;w,<sp/>&amp;min_x,<sp/>&amp;max_x);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="helpers_8h_1a6eb00eb9bc5ed195953f334971c462ae" kindref="member">UpdateRange</ref>(pix_box-&gt;y,<sp/>pix_box-&gt;y<sp/>+<sp/>pix_box-&gt;h,<sp/>&amp;min_y,<sp/>&amp;max_y);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>(*dest_box)<sp/>=<sp/>boxCreate(min_x,<sp/>min_y,<sp/>max_x<sp/>-<sp/>min_x,<sp/>max_y<sp/>-<sp/>min_y);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*dest_box)<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>union<sp/>pix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>Pix<sp/>*union_pix<sp/>=<sp/>pixCreate((*dest_box)-&gt;w,<sp/>(*dest_box)-&gt;h,<sp/>img_-&gt;d);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(union_pix<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>boxDestroy(dest_box);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>pix<sp/>corresponding<sp/>to<sp/>the<sp/>union<sp/>of<sp/>all<sp/>pixs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>blt<sp/>the<sp/>src<sp/>and<sp/>dest<sp/>pix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pix_idx<sp/>=<sp/>start_pix;<sp/>pix_idx<sp/>&lt;<sp/>(start_pix<sp/>+<sp/>pix_cnt);<sp/>pix_idx++)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>Box<sp/>*pix_box<sp/>=<sp/>pixa-&gt;boxa-&gt;box[pix_idx];</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>Pix<sp/>*con_pix<sp/>=<sp/>pixa-&gt;pix[pix_idx];</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>pixRasterop(union_pix,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix_box-&gt;x<sp/>-<sp/>(*dest_box)-&gt;x,<sp/>pix_box-&gt;y<sp/>-<sp/>(*dest_box)-&gt;y,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix_box-&gt;w,<sp/>pix_box-&gt;h,<sp/>PIX_SRC<sp/>|<sp/>PIX_DST,<sp/>con_pix,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>union_pix;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>union<sp/>of<sp/>a<sp/>number<sp/>of<sp/>arbitrary<sp/>pix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">Pix<sp/>*CubeLineSegmenter::Pixa2Pix(Pixa<sp/>*pixa,<sp/>Box<sp/>**dest_box)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Pixa2Pix(pixa,<sp/>dest_box,<sp/>0,<sp/>pixa-&gt;n);</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>merges<sp/>a<sp/>number<sp/>of<sp/>lines<sp/>into<sp/>one<sp/>line<sp/>given<sp/>a<sp/>bounding<sp/>box<sp/>and<sp/>a<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CubeLineSegmenter::MergeLine(Pix<sp/>*line_mask_pix,<sp/>Box<sp/>*line_box,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pixa<sp/>*lines,<sp/>Boxaa<sp/>*lines_con_comps)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>connected<sp/>components<sp/>of<sp/>the<sp/>lines<sp/>to<sp/>be<sp/>merged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>Pixa<sp/>*small_con_comps_pix;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>Boxa<sp/>*small_line_con_comps<sp/>=<sp/>ComputeLineConComps(line_mask_pix,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line_box,<sp/>&amp;small_con_comps_pix);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(small_line_con_comps<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>connected<sp/>component</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>con<sp/>=<sp/>0;<sp/>con<sp/>&lt;<sp/>small_line_con_comps-&gt;n;<sp/>con++)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>Box<sp/>*small_con_comp_box<sp/>=<sp/>small_line_con_comps-&gt;box[con];</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best_line<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>best_dist<sp/>=<sp/>INT_MAX,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>small_box_right<sp/>=<sp/>small_con_comp_box-&gt;x<sp/>+<sp/>small_con_comp_box-&gt;w,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>small_box_bottom<sp/>=<sp/>small_con_comp_box-&gt;y<sp/>+<sp/>small_con_comp_box-&gt;h;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>valid<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line<sp/>=<sp/>0;<sp/>line<sp/>&lt;<sp/>lines-&gt;n;<sp/>line++)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SmallLine(lines-&gt;boxa-&gt;box[line])<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>all<sp/>the<sp/>connected<sp/>components<sp/>in<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Boxa<sp/>*line_con_comps<sp/>=<sp/>lines_con_comps-&gt;boxa[line];</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lcon<sp/>=<sp/>0;<sp/>lcon<sp/>&lt;<sp/>line_con_comps-&gt;n;<sp/>lcon++)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Box<sp/>*con_comp_box<sp/>=<sp/>line_con_comps-&gt;box[lcon];</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdist,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ydist,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box_right<sp/>=<sp/>con_comp_box-&gt;x<sp/>+<sp/>con_comp_box-&gt;w,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box_bottom<sp/>=<sp/>con_comp_box-&gt;y<sp/>+<sp/>con_comp_box-&gt;h;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdist<sp/>=<sp/><ref refid="ndminx_8h_1aacc3ee1a7f283f8ef65cea31f4436a95" kindref="member">MAX</ref>(small_con_comp_box-&gt;x,<sp/>con_comp_box-&gt;x)<sp/>-</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ndminx_8h_1a74e75242132eaabbc1c512488a135926" kindref="member">MIN</ref>(small_box_right,<sp/>box_right);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ydist<sp/>=<sp/><ref refid="ndminx_8h_1aacc3ee1a7f283f8ef65cea31f4436a95" kindref="member">MAX</ref>(small_con_comp_box-&gt;y,<sp/>con_comp_box-&gt;y)<sp/>-</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ndminx_8h_1a74e75242132eaabbc1c512488a135926" kindref="member">MIN</ref>(small_box_bottom,<sp/>box_bottom);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>is<sp/>an<sp/>overlap<sp/>in<sp/>x-direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xdist<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best_line<sp/>==<sp/>-1<sp/>||<sp/>ydist<sp/>&lt;<sp/>best_dist)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_dist<sp/>=<sp/>ydist;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_line<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>distance<sp/>is<sp/>too<sp/>big,<sp/>do<sp/>not<sp/>merged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best_line<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>best_dist<sp/>&lt;<sp/>est_alef_hgt_)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>pix<sp/>to<sp/>the<sp/>best<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pix<sp/>*<ref refid="cutil_8h_1a1185f064cc7bdd3f2a433da85a834c37" kindref="member">new_line</ref><sp/>=<sp/>PixUnion(lines-&gt;pix[best_line],</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines-&gt;boxa-&gt;box[best_line],</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>small_con_comps_pix-&gt;pix[con],<sp/>small_con_comp_box);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_line<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixDestroy(&amp;lines-&gt;pix[best_line]);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lines-&gt;pix[best_line]<sp/>=<sp/><ref refid="cutil_8h_1a1185f064cc7bdd3f2a433da85a834c37" kindref="member">new_line</ref>;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>pixaDestroy(&amp;small_con_comps_pix);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>boxaDestroy(&amp;small_line_con_comps);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>new<sp/>set<sp/>of<sp/>lines<sp/>from<sp/>the<sp/>computed<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CubeLineSegmenter::AddLines(Pixa<sp/>*lines)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>that<sp/>will<sp/>hold<sp/>the<sp/>bounding<sp/>boxes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>concomps<sp/>belonging<sp/>to<sp/>each<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>Boxaa<sp/>*lines_con_comps<sp/>=<sp/>boxaaCreate(lines-&gt;n);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines_con_comps<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line<sp/>=<sp/>0;<sp/>line<sp/>&lt;<sp/>lines-&gt;n;<sp/>line++)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>line<sp/>is<sp/>not<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ValidLine(lines-&gt;pix[line],<sp/>lines-&gt;boxa-&gt;box[line])<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>split<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pixa<sp/>*split_lines<sp/>=<sp/>SplitLine(lines-&gt;pix[line],</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines-&gt;boxa-&gt;box[line]);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>old<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixaRemovePix(lines,<sp/>line)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line--;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(split_lines<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>split<sp/>lines<sp/>instead<sp/>and<sp/>move<sp/>the<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_line<sp/>=<sp/>0;<sp/>s_line<sp/>&lt;<sp/>split_lines-&gt;n;<sp/>s_line++)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pix<sp/>*sp_line<sp/>=<sp/>pixaGetPix(split_lines,<sp/>s_line,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Box<sp/>*sp_box<sp/>=<sp/>boxaGetBox(split_lines-&gt;boxa,<sp/>s_line,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp_line<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>sp_box<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>the<sp/>new<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixaInsertPix(lines,<sp/>++line,<sp/>sp_line,<sp/>sp_box)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>split<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixaDestroy(&amp;split_lines);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>concomps<sp/>bboxes<sp/>of<sp/>each<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line<sp/>=<sp/>0;<sp/>line<sp/>&lt;<sp/>lines-&gt;n;<sp/>line++)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>Boxa<sp/>*line_con_comps<sp/>=<sp/>ComputeLineConComps(lines-&gt;pix[line],</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines-&gt;boxa-&gt;box[line],<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line_con_comps<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>it<sp/>into<sp/>the<sp/>boxaa<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boxaaAddBoxa(lines_con_comps,<sp/>line_con_comps,<sp/>L_INSERT)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>post<sp/>process<sp/>the<sp/>lines:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>the<sp/>contents<sp/>of<sp/>&quot;small&quot;<sp/>lines<sp/>info<sp/>legitimate<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line<sp/>=<sp/>0;<sp/>line<sp/>&lt;<sp/>lines-&gt;n;<sp/>line++)<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>small<sp/>line<sp/>detected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SmallLine(lines-&gt;boxa-&gt;box[line])<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>its<sp/>components<sp/>to<sp/>one<sp/>of<sp/>the<sp/>valid<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MergeLine(lines-&gt;pix[line],<sp/>lines-&gt;boxa-&gt;box[line],</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines,<sp/>lines_con_comps)<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>small<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixaRemovePix(lines,<sp/>line)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boxaaRemoveBoxa(lines_con_comps,<sp/>line)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line--;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>boxaaDestroy(&amp;lines_con_comps);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>pix<sp/>masks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixaaAddPixa(columns_,<sp/>lines,<sp/>L_INSERT)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Index<sp/>the<sp/>specific<sp/>pixa<sp/>using<sp/>RTL<sp/>reading<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*CubeLineSegmenter::IndexRTL(Pixa<sp/>*pixa)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pix_index<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[pixa-&gt;n];</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix_index<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pix<sp/>=<sp/>0;<sp/>pix<sp/>&lt;<sp/>pixa-&gt;n;<sp/>pix++)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>pix_index[pix]<sp/>=<sp/>pix;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ipix<sp/>=<sp/>0;<sp/>ipix<sp/>&lt;<sp/>pixa-&gt;n;<sp/>ipix++)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jpix<sp/>=<sp/>ipix<sp/>+<sp/>1;<sp/>jpix<sp/>&lt;<sp/>pixa-&gt;n;<sp/>jpix++)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Box<sp/>*ipix_box<sp/>=<sp/>pixa-&gt;boxa-&gt;box[pix_index[ipix]],</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*jpix_box<sp/>=<sp/>pixa-&gt;boxa-&gt;box[pix_index[jpix]];</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ipix_box-&gt;x<sp/>+<sp/>ipix_box-&gt;w)<sp/>&lt;<sp/>(jpix_box-&gt;x<sp/>+<sp/>jpix_box-&gt;w))<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>pix_index[ipix];</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix_index[ipix]<sp/>=<sp/>pix_index[jpix];</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix_index[jpix]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pix_index;</highlight></codeline>
<codeline lineno="639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Performs<sp/>line<sp/>segmentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CubeLineSegmenter::LineSegment()<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>full<sp/>image<sp/>morphology<sp/>to<sp/>find<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>only<sp/>works<sp/>for<sp/>simple<sp/>layouts<sp/>where<sp/>each<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>text<sp/>extends<sp/>the<sp/>full<sp/>height<sp/>of<sp/>the<sp/>input<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>Pix<sp/>*pix_temp1<sp/>=<sp/>pixMorphCompSequence(img_,<sp/></highlight><highlight class="stringliteral">&quot;c5.500&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix_temp1<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mask<sp/>with<sp/>a<sp/>single<sp/>component<sp/>over<sp/>each<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>Pixa<sp/>*pixam;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>Boxa<sp/>*boxa<sp/>=<sp/>pixConnComp(pix_temp1,<sp/>&amp;pixam,<sp/>8);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boxa<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_morph_min_hgt<sp/>=<sp/>kLineSepMorphMinHgt;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sequence_str[16];</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>sprintf(sequence_str,<sp/></highlight><highlight class="stringliteral">&quot;c100.%d&quot;</highlight><highlight class="normal">,<sp/>init_morph_min_hgt);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>selective<sp/>region-based<sp/>morphology<sp/>to<sp/>get<sp/>the<sp/>textline<sp/>mask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>Pixa<sp/>*pixad<sp/>=<sp/>pixaMorphSequenceByRegion(img_,<sp/>pixam,<sp/>sequence_str,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixad<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>all<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col_cnt<sp/>=<sp/>boxaGetCount(boxa);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>columns_<sp/>=<sp/>pixaaCreate(col_cnt);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(columns_<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>index<sp/>columns<sp/>based<sp/>on<sp/>readind<sp/>order<sp/>(RTL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*col_order<sp/>=<sp/>IndexRTL(pixad);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col_order<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>line_cnt_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col_idx<sp/>=<sp/>0;<sp/>col_idx<sp/>&lt;<sp/>col_cnt;<sp/>col_idx++)<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>col_order[col_idx];</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>pix<sp/>and<sp/>box<sp/>corresponding<sp/>to<sp/>the<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>Pix<sp/>*pixt3<sp/>=<sp/>pixaGetPix(pixad,<sp/>col,<sp/>L_CLONE);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixt3<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>Box<sp/>*col_box<sp/>=<sp/>pixad-&gt;boxa-&gt;box[col];</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>Pixa<sp/>*pixac;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>Boxa<sp/>*boxa2<sp/>=<sp/>pixConnComp(pixt3,<sp/>&amp;pixac,<sp/>8);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boxa2<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>offset<sp/>the<sp/>boxes<sp/>by<sp/>the<sp/>column<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line<sp/>=<sp/>0;<sp/>line<sp/>&lt;<sp/>pixac-&gt;n;<sp/>line++)<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixac-&gt;boxa-&gt;box[line]-&gt;x<sp/>+=<sp/>col_box-&gt;x;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixac-&gt;boxa-&gt;box[line]-&gt;y<sp/>+=<sp/>col_box-&gt;y;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AddLines(pixac)<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixaaAddBox(columns_,<sp/>col_box,<sp/>L_CLONE)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>pixDestroy(&amp;pixt3);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>boxaDestroy(&amp;boxa2);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>line_cnt_<sp/>+=<sp/>columns_-&gt;pixa[col_idx]-&gt;n;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>pixaDestroy(&amp;pixam);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>pixaDestroy(&amp;pixad);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>boxaDestroy(&amp;boxa);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]col_order;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;pix_temp1);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Estimate<sp/>the<sp/>paramters<sp/>of<sp/>the<sp/>font(s)<sp/>used<sp/>in<sp/>the<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CubeLineSegmenter::EstimateFontParams()<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hgt_hist[kHgtBins];</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_hgt;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mean_hgt;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>hgt<sp/>histogram<sp/>of<sp/>concomps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>memset(hgt_hist,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hgt_hist));</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>max<sp/>hgt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>max_hgt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>con<sp/>=<sp/>0;<sp/>con<sp/>&lt;<sp/>con_comps_-&gt;n;<sp/>con++)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>conn<sp/>comps<sp/>that<sp/>are<sp/>too<sp/>long<sp/>or<sp/>too<sp/>wide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(con_comps_-&gt;boxa-&gt;box[con]-&gt;h<sp/>&gt;<sp/>kMaxConnCompHgt<sp/>||</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_comps_-&gt;boxa-&gt;box[con]-&gt;w<sp/>&gt;<sp/>kMaxConnCompWid)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>max_hgt<sp/>=<sp/><ref refid="ndminx_8h_1aacc3ee1a7f283f8ef65cea31f4436a95" kindref="member">MAX</ref>(max_hgt,<sp/>con_comps_-&gt;boxa-&gt;box[con]-&gt;h);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_hgt<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>hgt<sp/>histogram<sp/>of<sp/>concomps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>memset(hgt_hist,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hgt_hist));</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>mean_hgt<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>con<sp/>=<sp/>0;<sp/>con<sp/>&lt;<sp/>con_comps_-&gt;n;<sp/>con++)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>conn<sp/>comps<sp/>that<sp/>are<sp/>too<sp/>long<sp/>or<sp/>too<sp/>wide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(con_comps_-&gt;boxa-&gt;box[con]-&gt;h<sp/>&gt;<sp/>kMaxConnCompHgt<sp/>||</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_comps_-&gt;boxa-&gt;box[con]-&gt;w<sp/>&gt;<sp/>kMaxConnCompWid)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kHgtBins<sp/>*<sp/>con_comps_-&gt;boxa-&gt;box[con]-&gt;h<sp/>/</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_hgt);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>bin<sp/>=<sp/><ref refid="ndminx_8h_1a74e75242132eaabbc1c512488a135926" kindref="member">MIN</ref>(bin,<sp/>kHgtBins<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>hgt_hist[bin]++;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>mean_hgt<sp/>+=<sp/>con_comps_-&gt;boxa-&gt;box[con]-&gt;h;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>mean_hgt<sp/>/=<sp/>con_comps_-&gt;n;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>top<sp/>2<sp/>bins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx[kHgtBins];</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin<sp/>&lt;<sp/>kHgtBins;<sp/>bin++)<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>idx[bin]<sp/>=<sp/>bin;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibin<sp/>=<sp/>0;<sp/>ibin<sp/>&lt;<sp/>2;<sp/>ibin++)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jbin<sp/>=<sp/>ibin<sp/>+<sp/>1;<sp/>jbin<sp/>&lt;<sp/>kHgtBins;<sp/>jbin++)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hgt_hist[idx[ibin]]<sp/>&lt;<sp/>hgt_hist[idx[jbin]])<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>swap<sp/>=<sp/>idx[ibin];</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx[ibin]<sp/>=<sp/>idx[jbin];</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx[jbin]<sp/>=<sp/>swap;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>emperically,<sp/>we<sp/>found<sp/>out<sp/>that<sp/>the<sp/>2<sp/>highest<sp/>freq<sp/>bins<sp/>correspond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>respectively<sp/>to<sp/>the<sp/>dot<sp/>and<sp/>alef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>est_dot_hgt_<sp/>=<sp/>(1.0<sp/>*<sp/>(idx[0]<sp/>+<sp/>1)<sp/>*<sp/>max_hgt<sp/>/<sp/>kHgtBins);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>est_alef_hgt_<sp/>=<sp/>(1.0<sp/>*<sp/>(idx[1]<sp/>+<sp/>1)<sp/>*<sp/>max_hgt<sp/>/<sp/>kHgtBins);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>a<sp/>sanity<sp/>check<sp/>the<sp/>dot<sp/>hgt<sp/>must<sp/>be<sp/>significanly<sp/>lower<sp/>than<sp/>alef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(est_alef_hgt_<sp/>&lt;<sp/>(est_dot_hgt_<sp/>*<sp/>2))<sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>max_hgt<sp/>to<sp/>estimate<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>est_alef_hgt_<sp/>=<sp/>mean_hgt<sp/>*<sp/>1.5;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>est_dot_hgt_<sp/>=<sp/>est_alef_hgt_<sp/>/<sp/>5.0;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>est_alef_hgt_<sp/>=<sp/><ref refid="ndminx_8h_1aacc3ee1a7f283f8ef65cea31f4436a95" kindref="member">MAX</ref>(est_alef_hgt_,<sp/>est_dot_hgt_<sp/>*<sp/>4.0);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clean<sp/>up<sp/>the<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal">Pix<sp/>*CubeLineSegmenter::CleanUp(Pix<sp/>*orig_img)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>rid<sp/>of<sp/>long<sp/>horizontal<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>Pix<sp/>*pix_temp0<sp/>=<sp/>pixMorphCompSequence(orig_img,<sp/></highlight><highlight class="stringliteral">&quot;o300.2&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>pixXor(pix_temp0,<sp/>pix_temp0,<sp/>orig_img);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>rid<sp/>of<sp/>long<sp/>vertical<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>Pix<sp/>*pix_temp1<sp/>=<sp/>pixMorphCompSequence(pix_temp0,<sp/></highlight><highlight class="stringliteral">&quot;o2.300&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>pixXor(pix_temp1,<sp/>pix_temp1,<sp/>pix_temp0);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;pix_temp0);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>detect<sp/>connected<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>Pixa<sp/>*con_comps;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>Boxa<sp/>*boxa<sp/>=<sp/>pixConnComp(pix_temp1,<sp/>&amp;con_comps,<sp/>8);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boxa<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>detect<sp/>and<sp/>remove<sp/>suspicious<sp/>conn<sp/>comps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>con<sp/>=<sp/>0;<sp/>con<sp/>&lt;<sp/>con_comps-&gt;n;<sp/>con++)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>Box<sp/>*box<sp/>=<sp/>boxa-&gt;box[con];</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>if<sp/>suspc.<sp/>conn<sp/>comp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((box-&gt;w<sp/>&gt;<sp/>(box-&gt;h<sp/>*<sp/>kMaxHorzAspectRatio))<sp/>||</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(box-&gt;h<sp/>&gt;<sp/>(box-&gt;w<sp/>*<sp/>kMaxVertAspectRatio))<sp/>||</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(box-&gt;w<sp/>&lt;<sp/>kMinWid<sp/>&amp;&amp;<sp/>box-&gt;h<sp/>&lt;<sp/>kMinHgt))<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixRasterop(pix_temp1,<sp/>box-&gt;x,<sp/>box-&gt;y,<sp/>box-&gt;w,<sp/>box-&gt;h,</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIX_SRC<sp/>^<sp/>PIX_DST,<sp/>con_comps-&gt;pix[con],<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>pixaDestroy(&amp;con_comps);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>boxaDestroy(&amp;boxa);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pix_temp1;</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Init<sp/>the<sp/>page<sp/>segmenter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CubeLineSegmenter::Init()<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init_<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(orig_img_<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>the<sp/>internal<sp/>line<sp/>segmentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FindLines();</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>the<sp/>pix<sp/>mask<sp/>and<sp/>box<sp/>of<sp/>a<sp/>specific<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal">Pix<sp/>*<ref refid="classtesseract_1_1_cube_line_segmenter_1abedfb2f940ad029c7c7b1450db7cc049" kindref="member">CubeLineSegmenter::Line</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/>Box<sp/>**line_box)<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init_<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>Init()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line<sp/>&lt;<sp/>0<sp/>||<sp/>line<sp/>&gt;=<sp/>line_cnt_)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>(*line_box)<sp/>=<sp/>lines_pixa_-&gt;boxa-&gt;box[line];</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lines_pixa_-&gt;pix[line];</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>a<sp/>basic<sp/>rudimentary<sp/>layout<sp/>analysis<sp/>based<sp/>on<sp/>Leptonica</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="comment">//<sp/>works<sp/>OK<sp/>for<sp/>Arabic.<sp/>For<sp/>other<sp/>languages,<sp/>the<sp/>function<sp/>TesseractPageAnalysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>called<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CubeLineSegmenter::FindLines()<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>the<sp/>image<sp/>to<sp/>gray<sp/>scale<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>Pix<sp/>*gray_scale_img<sp/>=<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(orig_img_-&gt;d<sp/>!=<sp/>2<sp/>&amp;&amp;<sp/>orig_img_-&gt;d<sp/>!=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>gray_scale_img<sp/>=<sp/>pixConvertTo8(orig_img_,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gray_scale_img<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>gray_scale_img<sp/>=<sp/>orig_img_;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>threshold<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>Pix<sp/>*thresholded_img;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>thresholded_img<sp/>=<sp/>pixThresholdToBinary(gray_scale_img,<sp/>128);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>gray<sp/>scale<sp/>image<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gray_scale_img<sp/>!=<sp/>orig_img_)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>pixDestroy(&amp;gray_scale_img);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bail-out<sp/>if<sp/>thresholding<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thresholded_img<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/><sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>deskew</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>Pix<sp/>*deskew_img<sp/>=<sp/>pixDeskew(thresholded_img,<sp/>2);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deskew_img<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;thresholded_img);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>img_<sp/>=<sp/>CleanUp(deskew_img);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;deskew_img);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(img_<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>pixDestroy(&amp;deskew_img);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>connected<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>Boxa<sp/>*boxa<sp/>=<sp/>pixConnComp(img_,<sp/>&amp;con_comps_,<sp/>8);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boxa<sp/>==<sp/><ref refid="host_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>boxaDestroy(&amp;boxa);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>estimate<sp/>dot<sp/>and<sp/>alef<sp/>hgts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(EstimateFontParams()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>perform<sp/>line<sp/>segmentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LineSegment()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>success</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>init_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/makoto/Desktop/trunk/cube/cube_line_segmenter.cpp"/>
  </compounddef>
</doxygen>
